
HSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d808  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c74  0800d998  0800d998  0001d998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 CMOX_CTA_PROTECTED_DATA 00000a00  0800f60c  0800f60c  0001f60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801000c  0801000c  0003016c  2**0
                  CONTENTS
  5 .ARM          00000008  0801000c  0801000c  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08010014  08010014  0003016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08010014  08010014  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08010018  08010018  00020018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000016c  20000000  0801001c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  0003016c  2**0
                  CONTENTS
 11 .bss          000022c0  2000016c  2000016c  0003016c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000242c  2000242c  0003016c  2**0
                  ALLOC
 13 .ARM.attributes 00000034  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY
 15 .iar_vfe_header 00000040  00000000  00000000  000301e4  2**2
                  CONTENTS, READONLY
 16 .debug_info   0001a089  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000465e  00000000  00000000  0004a2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000018a8  00000000  00000000  0004e910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000012e1  00000000  00000000  000501b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00026f4d  00000000  00000000  00051499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00020466  00000000  00000000  000783e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000d5bf4  00000000  00000000  0009884c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00006fec  00000000  00000000  0016e440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000049  00000000  00000000  0017542c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000016c 	.word	0x2000016c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d980 	.word	0x0800d980

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000170 	.word	0x20000170
 80001cc:	0800d980 	.word	0x0800d980

080001d0 <CMOX_CBC_DEC_AESFAST_IMPL>:
 80001d0:	08000339 0800dc9c                       9.......

080001d8 <cmox_cbc_decrypt>:
 80001d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001da:	b0cb      	sub	sp, #300	; 0x12c
 80001dc:	4604      	mov	r4, r0
 80001de:	460d      	mov	r5, r1
 80001e0:	4616      	mov	r6, r2
 80001e2:	461f      	mov	r7, r3
 80001e4:	4909      	ldr	r1, [pc, #36]	; (800020c <cmox_cbc_decrypt+0x34>)
 80001e6:	a805      	add	r0, sp, #20
 80001e8:	f000 f888 	bl	80002fc <cmox_cbc_construct>
 80001ec:	9953      	ldr	r1, [sp, #332]	; 0x14c
 80001ee:	9a52      	ldr	r2, [sp, #328]	; 0x148
 80001f0:	9104      	str	r1, [sp, #16]
 80001f2:	9203      	str	r2, [sp, #12]
 80001f4:	9700      	str	r7, [sp, #0]
 80001f6:	9951      	ldr	r1, [sp, #324]	; 0x144
 80001f8:	9a50      	ldr	r2, [sp, #320]	; 0x140
 80001fa:	9102      	str	r1, [sp, #8]
 80001fc:	9201      	str	r2, [sp, #4]
 80001fe:	4633      	mov	r3, r6
 8000200:	462a      	mov	r2, r5
 8000202:	4621      	mov	r1, r4
 8000204:	f000 fac0 	bl	8000788 <cmox_cipher_innerCompute>
 8000208:	b04b      	add	sp, #300	; 0x12c
 800020a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800020c:	080001d0 	.word	0x080001d0

08000210 <CMOX_CBC_ENC_AESFAST_IMPL>:
 8000210:	080006c9 0800dca8                       ........

08000218 <cmox_cbc_encrypt>:
 8000218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021a:	b0cb      	sub	sp, #300	; 0x12c
 800021c:	4604      	mov	r4, r0
 800021e:	460d      	mov	r5, r1
 8000220:	4616      	mov	r6, r2
 8000222:	461f      	mov	r7, r3
 8000224:	4909      	ldr	r1, [pc, #36]	; (800024c <cmox_cbc_encrypt+0x34>)
 8000226:	a805      	add	r0, sp, #20
 8000228:	f000 f868 	bl	80002fc <cmox_cbc_construct>
 800022c:	9953      	ldr	r1, [sp, #332]	; 0x14c
 800022e:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8000230:	9104      	str	r1, [sp, #16]
 8000232:	9203      	str	r2, [sp, #12]
 8000234:	9700      	str	r7, [sp, #0]
 8000236:	9951      	ldr	r1, [sp, #324]	; 0x144
 8000238:	9a50      	ldr	r2, [sp, #320]	; 0x140
 800023a:	9102      	str	r1, [sp, #8]
 800023c:	9201      	str	r2, [sp, #4]
 800023e:	4633      	mov	r3, r6
 8000240:	462a      	mov	r2, r5
 8000242:	4621      	mov	r1, r4
 8000244:	f000 faa0 	bl	8000788 <cmox_cipher_innerCompute>
 8000248:	b04b      	add	sp, #300	; 0x12c
 800024a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800024c:	08000210 	.word	0x08000210

08000250 <cmox_cbc_getByCipher>:
 8000250:	6802      	ldr	r2, [r0, #0]
 8000252:	428a      	cmp	r2, r1
 8000254:	bf18      	it	ne
 8000256:	2000      	movne	r0, #0
 8000258:	4770      	bx	lr
	...

0800025c <cmox_cbc_cleanup>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f7ff fff7 	bl	8000250 <cmox_cbc_getByCipher>
 8000262:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8000266:	2800      	cmp	r0, #0
 8000268:	bf0e      	itee	eq
 800026a:	4c03      	ldreq	r4, [pc, #12]	; (8000278 <cmox_cbc_cleanup+0x1c>)
 800026c:	f44f 718a 	movne.w	r1, #276	; 0x114
 8000270:	f00c fe33 	blne	800ceda <__aeabi_memclr>
 8000274:	4620      	mov	r0, r4
 8000276:	bd10      	pop	{r4, pc}
 8000278:	00010003 	.word	0x00010003

0800027c <cmox_cbc_init>:
 800027c:	b538      	push	{r3, r4, r5, lr}
 800027e:	0004      	movs	r4, r0
 8000280:	4d06      	ldr	r5, [pc, #24]	; (800029c <cmox_cbc_init+0x20>)
 8000282:	d008      	beq.n	8000296 <cmox_cbc_init+0x1a>
 8000284:	f7ff ffe4 	bl	8000250 <cmox_cbc_getByCipher>
 8000288:	b128      	cbz	r0, 8000296 <cmox_cbc_init+0x1a>
 800028a:	f100 0108 	add.w	r1, r0, #8
 800028e:	4620      	mov	r0, r4
 8000290:	f000 faac 	bl	80007ec <cmox_cipherMode_init>
 8000294:	4605      	mov	r5, r0
 8000296:	4628      	mov	r0, r5
 8000298:	bd32      	pop	{r1, r4, r5, pc}
 800029a:	bf00      	nop
 800029c:	00010003 	.word	0x00010003

080002a0 <cmox_cbc_setKey>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	460c      	mov	r4, r1
 80002a4:	4615      	mov	r5, r2
 80002a6:	4619      	mov	r1, r3
 80002a8:	4e06      	ldr	r6, [pc, #24]	; (80002c4 <cmox_cbc_setKey+0x24>)
 80002aa:	b140      	cbz	r0, 80002be <cmox_cbc_setKey+0x1e>
 80002ac:	f7ff ffd0 	bl	8000250 <cmox_cbc_getByCipher>
 80002b0:	b128      	cbz	r0, 80002be <cmox_cbc_setKey+0x1e>
 80002b2:	462a      	mov	r2, r5
 80002b4:	4621      	mov	r1, r4
 80002b6:	3008      	adds	r0, #8
 80002b8:	f000 faa0 	bl	80007fc <cmox_cipherMode_setKey>
 80002bc:	4606      	mov	r6, r0
 80002be:	4630      	mov	r0, r6
 80002c0:	bd70      	pop	{r4, r5, r6, pc}
 80002c2:	bf00      	nop
 80002c4:	00010003 	.word	0x00010003

080002c8 <cmox_cbc_setIV>:
 80002c8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80002ca:	0004      	movs	r4, r0
 80002cc:	460d      	mov	r5, r1
 80002ce:	4616      	mov	r6, r2
 80002d0:	d003      	beq.n	80002da <cmox_cbc_setIV+0x12>
 80002d2:	4619      	mov	r1, r3
 80002d4:	f7ff ffbc 	bl	8000250 <cmox_cbc_getByCipher>
 80002d8:	b908      	cbnz	r0, 80002de <cmox_cbc_setIV+0x16>
 80002da:	4807      	ldr	r0, [pc, #28]	; (80002f8 <cmox_cbc_setIV+0x30>)
 80002dc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80002de:	2e10      	cmp	r6, #16
 80002e0:	bf0c      	ite	eq
 80002e2:	2101      	moveq	r1, #1
 80002e4:	2100      	movne	r1, #0
 80002e6:	9100      	str	r1, [sp, #0]
 80002e8:	4633      	mov	r3, r6
 80002ea:	f500 7182 	add.w	r1, r0, #260	; 0x104
 80002ee:	462a      	mov	r2, r5
 80002f0:	4620      	mov	r0, r4
 80002f2:	f000 fc67 	bl	8000bc4 <cmox_cipherMode_setIV>
 80002f6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80002f8:	00010003 	.word	0x00010003

080002fc <cmox_cbc_construct>:
 80002fc:	460a      	mov	r2, r1
 80002fe:	6853      	ldr	r3, [r2, #4]
 8000300:	6812      	ldr	r2, [r2, #0]
 8000302:	6819      	ldr	r1, [r3, #0]

08000304 <__iar_annotation$$tailcall>:
 8000304:	4710      	bx	r2
	...

08000308 <cmox_cbc_decrypt_cleanup>:
 8000308:	4901      	ldr	r1, [pc, #4]	; (8000310 <cmox_cbc_decrypt_cleanup+0x8>)
 800030a:	f7ff bfa7 	b.w	800025c <cmox_cbc_cleanup>
 800030e:	bf00      	nop
 8000310:	0800db1c 	.word	0x0800db1c

08000314 <cmox_cbc_decrypt_init>:
 8000314:	4901      	ldr	r1, [pc, #4]	; (800031c <cmox_cbc_decrypt_init+0x8>)
 8000316:	f7ff bfb1 	b.w	800027c <cmox_cbc_init>
 800031a:	bf00      	nop
 800031c:	0800db1c 	.word	0x0800db1c

08000320 <cmox_cbc_decrypt_setKey>:
 8000320:	4b01      	ldr	r3, [pc, #4]	; (8000328 <cmox_cbc_decrypt_setKey+0x8>)
 8000322:	f7ff bfbd 	b.w	80002a0 <cmox_cbc_setKey>
 8000326:	bf00      	nop
 8000328:	0800db1c 	.word	0x0800db1c

0800032c <cmox_cbc_decrypt_setIV>:
 800032c:	4b01      	ldr	r3, [pc, #4]	; (8000334 <cmox_cbc_decrypt_setIV+0x8>)
 800032e:	f7ff bfcb 	b.w	80002c8 <cmox_cbc_setIV>
 8000332:	bf00      	nop
 8000334:	0800db1c 	.word	0x0800db1c

08000338 <cmox_cbcDecrypt_construct>:
 8000338:	b110      	cbz	r0, 8000340 <cmox_cbcDecrypt_construct+0x8>
 800033a:	4a02      	ldr	r2, [pc, #8]	; (8000344 <cmox_cbcDecrypt_construct+0xc>)
 800033c:	6002      	str	r2, [r0, #0]
 800033e:	6081      	str	r1, [r0, #8]
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	0800db1c 	.word	0x0800db1c

08000348 <cmox_cbc_decrypt>:
 8000348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800034c:	4617      	mov	r7, r2
 800034e:	2500      	movs	r5, #0
 8000350:	2f10      	cmp	r7, #16
 8000352:	b089      	sub	sp, #36	; 0x24
 8000354:	4606      	mov	r6, r0
 8000356:	4689      	mov	r9, r1
 8000358:	4698      	mov	r8, r3
 800035a:	d309      	bcc.n	8000370 <cmox_cbc_decrypt+0x28>
 800035c:	7930      	ldrb	r0, [r6, #4]
 800035e:	07c2      	lsls	r2, r0, #31
 8000360:	d506      	bpl.n	8000370 <cmox_cbc_decrypt+0x28>
 8000362:	496f      	ldr	r1, [pc, #444]	; (8000520 <cmox_cbc_decrypt+0x1d8>)
 8000364:	4630      	mov	r0, r6
 8000366:	f7ff ff73 	bl	8000250 <cmox_cbc_getByCipher>
 800036a:	ea5f 0a00 	movs.w	sl, r0
 800036e:	d101      	bne.n	8000374 <cmox_cbc_decrypt+0x2c>
 8000370:	486c      	ldr	r0, [pc, #432]	; (8000524 <cmox_cbc_decrypt+0x1dc>)
 8000372:	e0d2      	b.n	800051a <cmox_cbc_decrypt+0x1d2>
 8000374:	f89a 0010 	ldrb.w	r0, [sl, #16]
 8000378:	f000 0005 	and.w	r0, r0, #5
 800037c:	2805      	cmp	r0, #5
 800037e:	bf18      	it	ne
 8000380:	4869      	ldrne	r0, [pc, #420]	; (8000528 <cmox_cbc_decrypt+0x1e0>)
 8000382:	d1f6      	bne.n	8000372 <cmox_cbc_decrypt+0x2a>
 8000384:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8000386:	b104      	cbz	r4, 800038a <cmox_cbc_decrypt+0x42>
 8000388:	6025      	str	r5, [r4, #0]
 800038a:	f017 0f0f 	tst.w	r7, #15
 800038e:	bf08      	it	eq
 8000390:	463d      	moveq	r5, r7
 8000392:	d009      	beq.n	80003a8 <cmox_cbc_decrypt+0x60>
 8000394:	2f20      	cmp	r7, #32
 8000396:	bf38      	it	cc
 8000398:	6075      	strcc	r5, [r6, #4]
 800039a:	d305      	bcc.n	80003a8 <cmox_cbc_decrypt+0x60>
 800039c:	093d      	lsrs	r5, r7, #4
 800039e:	1e6d      	subs	r5, r5, #1
 80003a0:	2000      	movs	r0, #0
 80003a2:	012d      	lsls	r5, r5, #4
 80003a4:	f8ca 0010 	str.w	r0, [sl, #16]
 80003a8:	2600      	movs	r6, #0
 80003aa:	f50a 7b82 	add.w	fp, sl, #260	; 0x104
 80003ae:	e01f      	b.n	80003f0 <cmox_cbc_decrypt+0xa8>
 80003b0:	a904      	add	r1, sp, #16
 80003b2:	eb09 0006 	add.w	r0, r9, r6
 80003b6:	f000 fc39 	bl	8000c2c <convert_block_2_words>
 80003ba:	f8da 3008 	ldr.w	r3, [sl, #8]
 80003be:	f8d3 c000 	ldr.w	ip, [r3]
 80003c2:	466a      	mov	r2, sp
 80003c4:	a904      	add	r1, sp, #16
 80003c6:	f10a 0008 	add.w	r0, sl, #8
 80003ca:	47e0      	blx	ip
 80003cc:	4659      	mov	r1, fp
 80003ce:	4668      	mov	r0, sp
 80003d0:	f000 fc57 	bl	8000c82 <xor_blocks>
 80003d4:	eb08 0106 	add.w	r1, r8, r6
 80003d8:	4668      	mov	r0, sp
 80003da:	f000 fc3b 	bl	8000c54 <convert_block_2_bytes>
 80003de:	4659      	mov	r1, fp
 80003e0:	a804      	add	r0, sp, #16
 80003e2:	f000 fc5b 	bl	8000c9c <copy_block>
 80003e6:	b114      	cbz	r4, 80003ee <cmox_cbc_decrypt+0xa6>
 80003e8:	6820      	ldr	r0, [r4, #0]
 80003ea:	3010      	adds	r0, #16
 80003ec:	6020      	str	r0, [r4, #0]
 80003ee:	3610      	adds	r6, #16
 80003f0:	42ae      	cmp	r6, r5
 80003f2:	d3dd      	bcc.n	80003b0 <cmox_cbc_decrypt+0x68>
 80003f4:	42bd      	cmp	r5, r7
 80003f6:	f080 808e 	bcs.w	8000516 <cmox_cbc_decrypt+0x1ce>
 80003fa:	a904      	add	r1, sp, #16
 80003fc:	eb09 0005 	add.w	r0, r9, r5
 8000400:	f000 fc14 	bl	8000c2c <convert_block_2_words>
 8000404:	f8da 3008 	ldr.w	r3, [sl, #8]
 8000408:	f8d3 c000 	ldr.w	ip, [r3]
 800040c:	466a      	mov	r2, sp
 800040e:	a904      	add	r1, sp, #16
 8000410:	f10a 0008 	add.w	r0, sl, #8
 8000414:	47e0      	blx	ip
 8000416:	f105 0110 	add.w	r1, r5, #16
 800041a:	1a7b      	subs	r3, r7, r1
 800041c:	4620      	mov	r0, r4
 800041e:	f04f 0e00 	mov.w	lr, #0
 8000422:	aa04      	add	r2, sp, #16
 8000424:	089c      	lsrs	r4, r3, #2
 8000426:	e014      	b.n	8000452 <cmox_cbc_decrypt+0x10a>
 8000428:	eb01 038e 	add.w	r3, r1, lr, lsl #2
 800042c:	f859 5003 	ldr.w	r5, [r9, r3]
 8000430:	ba2d      	rev	r5, r5
 8000432:	f842 502e 	str.w	r5, [r2, lr, lsl #2]
 8000436:	f85d 602e 	ldr.w	r6, [sp, lr, lsl #2]
 800043a:	4075      	eors	r5, r6
 800043c:	f84d 502e 	str.w	r5, [sp, lr, lsl #2]
 8000440:	ba2d      	rev	r5, r5
 8000442:	f848 5003 	str.w	r5, [r8, r3]
 8000446:	b110      	cbz	r0, 800044e <cmox_cbc_decrypt+0x106>
 8000448:	6803      	ldr	r3, [r0, #0]
 800044a:	1d1b      	adds	r3, r3, #4
 800044c:	6003      	str	r3, [r0, #0]
 800044e:	f10e 0e01 	add.w	lr, lr, #1
 8000452:	45a6      	cmp	lr, r4
 8000454:	d3e8      	bcc.n	8000428 <cmox_cbc_decrypt+0xe0>
 8000456:	4643      	mov	r3, r8
 8000458:	4688      	mov	r8, r1
 800045a:	2100      	movs	r1, #0
 800045c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8000460:	f04f 0e00 	mov.w	lr, #0
 8000464:	eb08 0184 	add.w	r1, r8, r4, lsl #2
 8000468:	1a7f      	subs	r7, r7, r1
 800046a:	4625      	mov	r5, r4
 800046c:	9108      	str	r1, [sp, #32]
 800046e:	e01c      	b.n	80004aa <cmox_cbc_decrypt+0x162>
 8000470:	9c08      	ldr	r4, [sp, #32]
 8000472:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 8000476:	4474      	add	r4, lr
 8000478:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 800047c:	f819 1004 	ldrb.w	r1, [r9, r4]
 8000480:	f1cc 0c18 	rsb	ip, ip, #24
 8000484:	fa01 f10c 	lsl.w	r1, r1, ip
 8000488:	404e      	eors	r6, r1
 800048a:	f842 6025 	str.w	r6, [r2, r5, lsl #2]
 800048e:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
 8000492:	f819 1004 	ldrb.w	r1, [r9, r4]
 8000496:	fa26 f60c 	lsr.w	r6, r6, ip
 800049a:	404e      	eors	r6, r1
 800049c:	551e      	strb	r6, [r3, r4]
 800049e:	b110      	cbz	r0, 80004a6 <cmox_cbc_decrypt+0x15e>
 80004a0:	6804      	ldr	r4, [r0, #0]
 80004a2:	1c64      	adds	r4, r4, #1
 80004a4:	6004      	str	r4, [r0, #0]
 80004a6:	f10e 0e01 	add.w	lr, lr, #1
 80004aa:	45be      	cmp	lr, r7
 80004ac:	d3e0      	bcc.n	8000470 <cmox_cbc_decrypt+0x128>
 80004ae:	461e      	mov	r6, r3
 80004b0:	4604      	mov	r4, r0
 80004b2:	f85d 1025 	ldr.w	r1, [sp, r5, lsl #2]
 80004b6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ba:	00ff      	lsls	r7, r7, #3
 80004bc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80004c0:	40fb      	lsrs	r3, r7
 80004c2:	4019      	ands	r1, r3
 80004c4:	4048      	eors	r0, r1
 80004c6:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
 80004ca:	1c68      	adds	r0, r5, #1
 80004cc:	2804      	cmp	r0, #4
 80004ce:	d20a      	bcs.n	80004e6 <cmox_cbc_decrypt+0x19e>
 80004d0:	4669      	mov	r1, sp
 80004d2:	f1c5 0503 	rsb	r5, r5, #3
 80004d6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80004da:	ab04      	add	r3, sp, #16
 80004dc:	00aa      	lsls	r2, r5, #2
 80004de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80004e2:	f00c fcf8 	bl	800ced6 <__aeabi_memcpy>
 80004e6:	f8da 3008 	ldr.w	r3, [sl, #8]
 80004ea:	681f      	ldr	r7, [r3, #0]
 80004ec:	466a      	mov	r2, sp
 80004ee:	a904      	add	r1, sp, #16
 80004f0:	f10a 0008 	add.w	r0, sl, #8
 80004f4:	47b8      	blx	r7
 80004f6:	f50a 7182 	add.w	r1, sl, #260	; 0x104
 80004fa:	4668      	mov	r0, sp
 80004fc:	f000 fbc1 	bl	8000c82 <xor_blocks>
 8000500:	eb06 0008 	add.w	r0, r6, r8
 8000504:	f1a0 0110 	sub.w	r1, r0, #16
 8000508:	4668      	mov	r0, sp
 800050a:	f000 fba3 	bl	8000c54 <convert_block_2_bytes>
 800050e:	b114      	cbz	r4, 8000516 <cmox_cbc_decrypt+0x1ce>
 8000510:	6820      	ldr	r0, [r4, #0]
 8000512:	3010      	adds	r0, #16
 8000514:	6020      	str	r0, [r4, #0]
 8000516:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800051a:	b009      	add	sp, #36	; 0x24
 800051c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000520:	0800db1c 	.word	0x0800db1c
 8000524:	00010003 	.word	0x00010003
 8000528:	00010004 	.word	0x00010004

0800052c <cmox_cbc_encrypt_cleanup>:
 800052c:	4901      	ldr	r1, [pc, #4]	; (8000534 <cmox_cbc_encrypt_cleanup+0x8>)
 800052e:	f7ff be95 	b.w	800025c <cmox_cbc_cleanup>
 8000532:	bf00      	nop
 8000534:	0800db48 	.word	0x0800db48

08000538 <cmox_cbc_encrypt_init>:
 8000538:	4901      	ldr	r1, [pc, #4]	; (8000540 <cmox_cbc_encrypt_init+0x8>)
 800053a:	f7ff be9f 	b.w	800027c <cmox_cbc_init>
 800053e:	bf00      	nop
 8000540:	0800db48 	.word	0x0800db48

08000544 <cmox_cbc_encrypt_setKey>:
 8000544:	4b01      	ldr	r3, [pc, #4]	; (800054c <cmox_cbc_encrypt_setKey+0x8>)
 8000546:	f7ff beab 	b.w	80002a0 <cmox_cbc_setKey>
 800054a:	bf00      	nop
 800054c:	0800db48 	.word	0x0800db48

08000550 <cmox_cbc_encrypt_setIV>:
 8000550:	4b01      	ldr	r3, [pc, #4]	; (8000558 <cmox_cbc_encrypt_setIV+0x8>)
 8000552:	f7ff beb9 	b.w	80002c8 <cmox_cbc_setIV>
 8000556:	bf00      	nop
 8000558:	0800db48 	.word	0x0800db48

0800055c <cmox_cbc_encrypt>:
 800055c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000560:	4615      	mov	r5, r2
 8000562:	2d10      	cmp	r5, #16
 8000564:	b086      	sub	sp, #24
 8000566:	4606      	mov	r6, r0
 8000568:	460f      	mov	r7, r1
 800056a:	4698      	mov	r8, r3
 800056c:	d307      	bcc.n	800057e <cmox_cbc_encrypt+0x22>
 800056e:	7930      	ldrb	r0, [r6, #4]
 8000570:	07c2      	lsls	r2, r0, #31
 8000572:	d504      	bpl.n	800057e <cmox_cbc_encrypt+0x22>
 8000574:	4951      	ldr	r1, [pc, #324]	; (80006bc <cmox_cbc_encrypt+0x160>)
 8000576:	4630      	mov	r0, r6
 8000578:	f7ff fe6a 	bl	8000250 <cmox_cbc_getByCipher>
 800057c:	b908      	cbnz	r0, 8000582 <cmox_cbc_encrypt+0x26>
 800057e:	4850      	ldr	r0, [pc, #320]	; (80006c0 <cmox_cbc_encrypt+0x164>)
 8000580:	e098      	b.n	80006b4 <cmox_cbc_encrypt+0x158>
 8000582:	7c01      	ldrb	r1, [r0, #16]
 8000584:	f001 0105 	and.w	r1, r1, #5
 8000588:	2905      	cmp	r1, #5
 800058a:	bf18      	it	ne
 800058c:	484d      	ldrne	r0, [pc, #308]	; (80006c4 <cmox_cbc_encrypt+0x168>)
 800058e:	d1f7      	bne.n	8000580 <cmox_cbc_encrypt+0x24>
 8000590:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8000592:	b10c      	cbz	r4, 8000598 <cmox_cbc_encrypt+0x3c>
 8000594:	2100      	movs	r1, #0
 8000596:	6021      	str	r1, [r4, #0]
 8000598:	f015 0f0f 	tst.w	r5, #15
 800059c:	bf08      	it	eq
 800059e:	46a9      	moveq	r9, r5
 80005a0:	d004      	beq.n	80005ac <cmox_cbc_encrypt+0x50>
 80005a2:	0929      	lsrs	r1, r5, #4
 80005a4:	ea4f 1901 	mov.w	r9, r1, lsl #4
 80005a8:	2100      	movs	r1, #0
 80005aa:	6071      	str	r1, [r6, #4]
 80005ac:	2600      	movs	r6, #0
 80005ae:	f500 7b82 	add.w	fp, r0, #260	; 0x104
 80005b2:	4682      	mov	sl, r0
 80005b4:	e01e      	b.n	80005f4 <cmox_cbc_encrypt+0x98>
 80005b6:	4669      	mov	r1, sp
 80005b8:	19b8      	adds	r0, r7, r6
 80005ba:	f000 fb37 	bl	8000c2c <convert_block_2_words>
 80005be:	4659      	mov	r1, fp
 80005c0:	4668      	mov	r0, sp
 80005c2:	f000 fb5e 	bl	8000c82 <xor_blocks>
 80005c6:	f8da 3008 	ldr.w	r3, [sl, #8]
 80005ca:	f8d3 c000 	ldr.w	ip, [r3]
 80005ce:	466a      	mov	r2, sp
 80005d0:	4669      	mov	r1, sp
 80005d2:	f10a 0008 	add.w	r0, sl, #8
 80005d6:	47e0      	blx	ip
 80005d8:	eb08 0106 	add.w	r1, r8, r6
 80005dc:	4668      	mov	r0, sp
 80005de:	f000 fb39 	bl	8000c54 <convert_block_2_bytes>
 80005e2:	4659      	mov	r1, fp
 80005e4:	4668      	mov	r0, sp
 80005e6:	f000 fb59 	bl	8000c9c <copy_block>
 80005ea:	b114      	cbz	r4, 80005f2 <cmox_cbc_encrypt+0x96>
 80005ec:	6820      	ldr	r0, [r4, #0]
 80005ee:	3010      	adds	r0, #16
 80005f0:	6020      	str	r0, [r4, #0]
 80005f2:	3610      	adds	r6, #16
 80005f4:	454e      	cmp	r6, r9
 80005f6:	d3de      	bcc.n	80005b6 <cmox_cbc_encrypt+0x5a>
 80005f8:	45a9      	cmp	r9, r5
 80005fa:	d259      	bcs.n	80006b0 <cmox_cbc_encrypt+0x154>
 80005fc:	eba5 0109 	sub.w	r1, r5, r9
 8000600:	0889      	lsrs	r1, r1, #2
 8000602:	2300      	movs	r3, #0
 8000604:	e010      	b.n	8000628 <cmox_cbc_encrypt+0xcc>
 8000606:	eb09 0283 	add.w	r2, r9, r3, lsl #2
 800060a:	58b8      	ldr	r0, [r7, r2]
 800060c:	ba00      	rev	r0, r0
 800060e:	f84d 0023 	str.w	r0, [sp, r3, lsl #2]
 8000612:	f85b 6023 	ldr.w	r6, [fp, r3, lsl #2]
 8000616:	4070      	eors	r0, r6
 8000618:	f84d 0023 	str.w	r0, [sp, r3, lsl #2]
 800061c:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 8000620:	ba00      	rev	r0, r0
 8000622:	f848 0002 	str.w	r0, [r8, r2]
 8000626:	1c5b      	adds	r3, r3, #1
 8000628:	428b      	cmp	r3, r1
 800062a:	d3ec      	bcc.n	8000606 <cmox_cbc_encrypt+0xaa>
 800062c:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 8000630:	9204      	str	r2, [sp, #16]
 8000632:	4613      	mov	r3, r2
 8000634:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 8000638:	f84d 2021 	str.w	r2, [sp, r1, lsl #2]
 800063c:	9705      	str	r7, [sp, #20]
 800063e:	2200      	movs	r2, #0
 8000640:	e015      	b.n	800066e <cmox_cbc_encrypt+0x112>
 8000642:	9f04      	ldr	r7, [sp, #16]
 8000644:	9e05      	ldr	r6, [sp, #20]
 8000646:	f85d 0021 	ldr.w	r0, [sp, r1, lsl #2]
 800064a:	19d7      	adds	r7, r2, r7
 800064c:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8000650:	5df6      	ldrb	r6, [r6, r7]
 8000652:	f1cc 0c18 	rsb	ip, ip, #24
 8000656:	fa06 f60c 	lsl.w	r6, r6, ip
 800065a:	4070      	eors	r0, r6
 800065c:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
 8000660:	1c52      	adds	r2, r2, #1
 8000662:	f85b 0021 	ldr.w	r0, [fp, r1, lsl #2]
 8000666:	fa20 f00c 	lsr.w	r0, r0, ip
 800066a:	f808 0007 	strb.w	r0, [r8, r7]
 800066e:	1aef      	subs	r7, r5, r3
 8000670:	42ba      	cmp	r2, r7
 8000672:	d3e6      	bcc.n	8000642 <cmox_cbc_encrypt+0xe6>
 8000674:	e003      	b.n	800067e <cmox_cbc_encrypt+0x122>
 8000676:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 800067a:	f84d 2021 	str.w	r2, [sp, r1, lsl #2]
 800067e:	1c49      	adds	r1, r1, #1
 8000680:	2904      	cmp	r1, #4
 8000682:	d3f8      	bcc.n	8000676 <cmox_cbc_encrypt+0x11a>
 8000684:	f8da 3008 	ldr.w	r3, [sl, #8]
 8000688:	f8d3 b000 	ldr.w	fp, [r3]
 800068c:	466a      	mov	r2, sp
 800068e:	4669      	mov	r1, sp
 8000690:	f10a 0008 	add.w	r0, sl, #8
 8000694:	47d8      	blx	fp
 8000696:	eb08 0009 	add.w	r0, r8, r9
 800069a:	f1a0 0110 	sub.w	r1, r0, #16
 800069e:	4668      	mov	r0, sp
 80006a0:	f000 fad8 	bl	8000c54 <convert_block_2_bytes>
 80006a4:	b124      	cbz	r4, 80006b0 <cmox_cbc_encrypt+0x154>
 80006a6:	6820      	ldr	r0, [r4, #0]
 80006a8:	182d      	adds	r5, r5, r0
 80006aa:	eba5 0509 	sub.w	r5, r5, r9
 80006ae:	6025      	str	r5, [r4, #0]
 80006b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80006b4:	b007      	add	sp, #28
 80006b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006ba:	bf00      	nop
 80006bc:	0800db48 	.word	0x0800db48
 80006c0:	00010003 	.word	0x00010003
 80006c4:	00010004 	.word	0x00010004

080006c8 <cmox_cbcEncrypt_construct>:
 80006c8:	b110      	cbz	r0, 80006d0 <cmox_cbcEncrypt_construct+0x8>
 80006ca:	4a02      	ldr	r2, [pc, #8]	; (80006d4 <cmox_cbcEncrypt_construct+0xc>)
 80006cc:	6002      	str	r2, [r0, #0]
 80006ce:	6081      	str	r1, [r0, #8]
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	0800db48 	.word	0x0800db48

080006d8 <cmox_cipher_encrypt>:
 80006d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006da:	460c      	mov	r4, r1
 80006dc:	4611      	mov	r1, r2
 80006de:	0005      	movs	r5, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	b084      	sub	sp, #16
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <cmox_cipher_encrypt+0x50>)
 80006e6:	d01b      	beq.n	8000720 <cmox_cipher_encrypt+0x48>
 80006e8:	6868      	ldr	r0, [r5, #4]
 80006ea:	283a      	cmp	r0, #58	; 0x3a
 80006ec:	bf18      	it	ne
 80006ee:	4b0f      	ldrne	r3, [pc, #60]	; (800072c <cmox_cipher_encrypt+0x54>)
 80006f0:	d116      	bne.n	8000720 <cmox_cipher_encrypt+0x48>
 80006f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80006f4:	b90c      	cbnz	r4, 80006fa <cmox_cipher_encrypt+0x22>
 80006f6:	b109      	cbz	r1, 80006fc <cmox_cipher_encrypt+0x24>
 80006f8:	e012      	b.n	8000720 <cmox_cipher_encrypt+0x48>
 80006fa:	b188      	cbz	r0, 8000720 <cmox_cipher_encrypt+0x48>
 80006fc:	b182      	cbz	r2, 8000720 <cmox_cipher_encrypt+0x48>
 80006fe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8000700:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8000702:	b907      	cbnz	r7, 8000706 <cmox_cipher_encrypt+0x2e>
 8000704:	b966      	cbnz	r6, 8000720 <cmox_cipher_encrypt+0x48>
 8000706:	b158      	cbz	r0, 8000720 <cmox_cipher_encrypt+0x48>
 8000708:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800070c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800070e:	9002      	str	r0, [sp, #8]
 8000710:	f8cd c00c 	str.w	ip, [sp, #12]
 8000714:	9601      	str	r6, [sp, #4]
 8000716:	9700      	str	r7, [sp, #0]
 8000718:	4620      	mov	r0, r4
 800071a:	682c      	ldr	r4, [r5, #0]
 800071c:	47a0      	blx	r4
 800071e:	4603      	mov	r3, r0
 8000720:	4618      	mov	r0, r3
 8000722:	b005      	add	sp, #20
 8000724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000726:	bf00      	nop
 8000728:	00010003 	.word	0x00010003
 800072c:	00010002 	.word	0x00010002

08000730 <cmox_cipher_decrypt>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	460c      	mov	r4, r1
 8000734:	4611      	mov	r1, r2
 8000736:	0005      	movs	r5, r0
 8000738:	461a      	mov	r2, r3
 800073a:	b084      	sub	sp, #16
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <cmox_cipher_decrypt+0x50>)
 800073e:	d01c      	beq.n	800077a <cmox_cipher_decrypt+0x4a>
 8000740:	6868      	ldr	r0, [r5, #4]
 8000742:	f110 0f3b 	cmn.w	r0, #59	; 0x3b
 8000746:	bf18      	it	ne
 8000748:	4b0e      	ldrne	r3, [pc, #56]	; (8000784 <cmox_cipher_decrypt+0x54>)
 800074a:	d116      	bne.n	800077a <cmox_cipher_decrypt+0x4a>
 800074c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800074e:	b90c      	cbnz	r4, 8000754 <cmox_cipher_decrypt+0x24>
 8000750:	b109      	cbz	r1, 8000756 <cmox_cipher_decrypt+0x26>
 8000752:	e012      	b.n	800077a <cmox_cipher_decrypt+0x4a>
 8000754:	b188      	cbz	r0, 800077a <cmox_cipher_decrypt+0x4a>
 8000756:	b182      	cbz	r2, 800077a <cmox_cipher_decrypt+0x4a>
 8000758:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800075a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800075c:	b907      	cbnz	r7, 8000760 <cmox_cipher_decrypt+0x30>
 800075e:	b966      	cbnz	r6, 800077a <cmox_cipher_decrypt+0x4a>
 8000760:	b158      	cbz	r0, 800077a <cmox_cipher_decrypt+0x4a>
 8000762:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8000766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000768:	9002      	str	r0, [sp, #8]
 800076a:	f8cd c00c 	str.w	ip, [sp, #12]
 800076e:	9601      	str	r6, [sp, #4]
 8000770:	9700      	str	r7, [sp, #0]
 8000772:	4620      	mov	r0, r4
 8000774:	682c      	ldr	r4, [r5, #0]
 8000776:	47a0      	blx	r4
 8000778:	4603      	mov	r3, r0
 800077a:	4618      	mov	r0, r3
 800077c:	b005      	add	sp, #20
 800077e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000780:	00010003 	.word	0x00010003
 8000784:	00010002 	.word	0x00010002

08000788 <cmox_cipher_innerCompute>:
 8000788:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800078c:	4604      	mov	r4, r0
 800078e:	460d      	mov	r5, r1
 8000790:	6821      	ldr	r1, [r4, #0]
 8000792:	4616      	mov	r6, r2
 8000794:	684a      	ldr	r2, [r1, #4]
 8000796:	461f      	mov	r7, r3
 8000798:	4790      	blx	r2
 800079a:	4680      	mov	r8, r0
 800079c:	f5b8 3f80 	cmp.w	r8, #65536	; 0x10000
 80007a0:	d11d      	bne.n	80007de <cmox_cipher_innerCompute+0x56>
 80007a2:	6823      	ldr	r3, [r4, #0]
 80007a4:	9a08      	ldr	r2, [sp, #32]
 80007a6:	4639      	mov	r1, r7
 80007a8:	689f      	ldr	r7, [r3, #8]
 80007aa:	4620      	mov	r0, r4
 80007ac:	47b8      	blx	r7
 80007ae:	4680      	mov	r8, r0
 80007b0:	f5b8 3f80 	cmp.w	r8, #65536	; 0x10000
 80007b4:	d113      	bne.n	80007de <cmox_cipher_innerCompute+0x56>
 80007b6:	6823      	ldr	r3, [r4, #0]
 80007b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80007ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80007bc:	68df      	ldr	r7, [r3, #12]
 80007be:	4620      	mov	r0, r4
 80007c0:	47b8      	blx	r7
 80007c2:	4680      	mov	r8, r0
 80007c4:	f5b8 3f80 	cmp.w	r8, #65536	; 0x10000
 80007c8:	d109      	bne.n	80007de <cmox_cipher_innerCompute+0x56>
 80007ca:	4629      	mov	r1, r5
 80007cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80007ce:	9000      	str	r0, [sp, #0]
 80007d0:	4632      	mov	r2, r6
 80007d2:	6825      	ldr	r5, [r4, #0]
 80007d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80007d6:	6a2e      	ldr	r6, [r5, #32]
 80007d8:	4620      	mov	r0, r4
 80007da:	47b0      	blx	r6
 80007dc:	4680      	mov	r8, r0
 80007de:	6821      	ldr	r1, [r4, #0]
 80007e0:	680a      	ldr	r2, [r1, #0]
 80007e2:	4620      	mov	r0, r4
 80007e4:	4790      	blx	r2
 80007e6:	4640      	mov	r0, r8
 80007e8:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

080007ec <cmox_cipherMode_init>:
 80007ec:	2200      	movs	r2, #0
 80007ee:	6042      	str	r2, [r0, #4]
 80007f0:	2001      	movs	r0, #1
 80007f2:	6088      	str	r0, [r1, #8]
 80007f4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80007f8:	4770      	bx	lr
	...

080007fc <cmox_cipherMode_setKey>:
 80007fc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000800:	b08c      	sub	sp, #48	; 0x30
 8000802:	4692      	mov	sl, r2
 8000804:	f1ba 0f10 	cmp.w	sl, #16
 8000808:	4ae7      	ldr	r2, [pc, #924]	; (8000ba8 <cmox_cipherMode_setKey+0x3ac>)
 800080a:	4be8      	ldr	r3, [pc, #928]	; (8000bac <cmox_cipherMode_setKey+0x3b0>)
 800080c:	4de8      	ldr	r5, [pc, #928]	; (8000bb0 <cmox_cipherMode_setKey+0x3b4>)
 800080e:	f8df 83a4 	ldr.w	r8, [pc, #932]	; 8000bb4 <cmox_cipherMode_setKey+0x3b8>
 8000812:	4ee9      	ldr	r6, [pc, #932]	; (8000bb8 <cmox_cipherMode_setKey+0x3bc>)
 8000814:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 8000bbc <cmox_cipherMode_setKey+0x3c0>
 8000818:	f10d 0c04 	add.w	ip, sp, #4
 800081c:	d008      	beq.n	8000830 <cmox_cipherMode_setKey+0x34>
 800081e:	f1ba 0f18 	cmp.w	sl, #24
 8000822:	f000 8092 	beq.w	800094a <cmox_cipherMode_setKey+0x14e>
 8000826:	f1ba 0f20 	cmp.w	sl, #32
 800082a:	f000 8118 	beq.w	8000a5e <cmox_cipherMode_setKey+0x262>
 800082e:	e1a8      	b.n	8000b82 <cmox_cipherMode_setKey+0x386>
 8000830:	e9db 0400 	ldrd	r0, r4, [fp]
 8000834:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 8000838:	4fe1      	ldr	r7, [pc, #900]	; (8000bc0 <cmox_cipherMode_setKey+0x3c4>)
 800083a:	e9ce 0400 	strd	r0, r4, [lr]
 800083e:	7838      	ldrb	r0, [r7, #0]
 8000840:	2800      	cmp	r0, #0
 8000842:	bf0c      	ite	eq
 8000844:	f04f 0900 	moveq.w	r9, #0
 8000848:	f04f 0904 	movne.w	r9, #4
 800084c:	f856 4009 	ldr.w	r4, [r6, r9]
 8000850:	f85e 7009 	ldr.w	r7, [lr, r9]
 8000854:	443c      	add	r4, r7
 8000856:	6023      	str	r3, [r4, #0]
 8000858:	2301      	movs	r3, #1
 800085a:	6827      	ldr	r7, [r4, #0]
 800085c:	60a3      	str	r3, [r4, #8]
 800085e:	f8d6 9000 	ldr.w	r9, [r6]
 8000862:	6873      	ldr	r3, [r6, #4]
 8000864:	7b8c      	ldrb	r4, [r1, #14]
 8000866:	9400      	str	r4, [sp, #0]
 8000868:	405f      	eors	r7, r3
 800086a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800086c:	407c      	eors	r4, r7
 800086e:	f8de 7004 	ldr.w	r7, [lr, #4]
 8000872:	ea87 0709 	eor.w	r7, r7, r9
 8000876:	f084 0404 	eor.w	r4, r4, #4
 800087a:	f087 0efc 	eor.w	lr, r7, #252	; 0xfc
 800087e:	4474      	add	r4, lr
 8000880:	9f00      	ldr	r7, [sp, #0]
 8000882:	f084 0e52 	eor.w	lr, r4, #82	; 0x52
 8000886:	44be      	add	lr, r7
 8000888:	f88c e00e 	strb.w	lr, [ip, #14]
 800088c:	f04f 0e01 	mov.w	lr, #1
 8000890:	f811 400e 	ldrb.w	r4, [r1, lr]
 8000894:	f80c 400e 	strb.w	r4, [ip, lr]
 8000898:	f10e 0e01 	add.w	lr, lr, #1
 800089c:	f1be 0f0e 	cmp.w	lr, #14
 80008a0:	d3f6      	bcc.n	8000890 <cmox_cipherMode_setKey+0x94>
 80008a2:	e9db 4700 	ldrd	r4, r7, [fp]
 80008a6:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 80008aa:	2800      	cmp	r0, #0
 80008ac:	e9ce 4700 	strd	r4, r7, [lr]
 80008b0:	bf0c      	ite	eq
 80008b2:	2700      	moveq	r7, #0
 80008b4:	2704      	movne	r7, #4
 80008b6:	463c      	mov	r4, r7
 80008b8:	59f7      	ldr	r7, [r6, r7]
 80008ba:	f85e 4004 	ldr.w	r4, [lr, r4]
 80008be:	19e4      	adds	r4, r4, r7
 80008c0:	2701      	movs	r7, #1
 80008c2:	f8c4 8000 	str.w	r8, [r4]
 80008c6:	2800      	cmp	r0, #0
 80008c8:	f8d4 8000 	ldr.w	r8, [r4]
 80008cc:	60a7      	str	r7, [r4, #8]
 80008ce:	ea83 0808 	eor.w	r8, r3, r8
 80008d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80008d4:	780f      	ldrb	r7, [r1, #0]
 80008d6:	ea84 0408 	eor.w	r4, r4, r8
 80008da:	f084 0804 	eor.w	r8, r4, #4
 80008de:	f8de 4004 	ldr.w	r4, [lr, #4]
 80008e2:	ea84 0409 	eor.w	r4, r4, r9
 80008e6:	f084 04fc 	eor.w	r4, r4, #252	; 0xfc
 80008ea:	4444      	add	r4, r8
 80008ec:	f084 080b 	eor.w	r8, r4, #11
 80008f0:	e9db 4e00 	ldrd	r4, lr, [fp]
 80008f4:	44b8      	add	r8, r7
 80008f6:	af09      	add	r7, sp, #36	; 0x24
 80008f8:	f88d 8004 	strb.w	r8, [sp, #4]
 80008fc:	e9c7 4e00 	strd	r4, lr, [r7]
 8000900:	bf0e      	itee	eq
 8000902:	f04f 0e00 	moveq.w	lr, #0
 8000906:	2004      	movne	r0, #4
 8000908:	4686      	movne	lr, r0
 800090a:	ac09      	add	r4, sp, #36	; 0x24
 800090c:	5836      	ldr	r6, [r6, r0]
 800090e:	f854 000e 	ldr.w	r0, [r4, lr]
 8000912:	1986      	adds	r6, r0, r6
 8000914:	6035      	str	r5, [r6, #0]
 8000916:	2501      	movs	r5, #1
 8000918:	6830      	ldr	r0, [r6, #0]
 800091a:	60b5      	str	r5, [r6, #8]
 800091c:	4043      	eors	r3, r0
 800091e:	7bce      	ldrb	r6, [r1, #15]
 8000920:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000922:	6860      	ldr	r0, [r4, #4]
 8000924:	404b      	eors	r3, r1
 8000926:	ea80 0009 	eor.w	r0, r0, r9
 800092a:	f083 0304 	eor.w	r3, r3, #4
 800092e:	f080 00fc 	eor.w	r0, r0, #252	; 0xfc
 8000932:	4403      	add	r3, r0
 8000934:	f083 0385 	eor.w	r3, r3, #133	; 0x85
 8000938:	199b      	adds	r3, r3, r6
 800093a:	f88c 300f 	strb.w	r3, [ip, #15]
 800093e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000940:	7a28      	ldrb	r0, [r5, #8]
 8000942:	07c1      	lsls	r1, r0, #31
 8000944:	f100 811f 	bmi.w	8000b86 <cmox_cipherMode_setKey+0x38a>
 8000948:	e11b      	b.n	8000b82 <cmox_cipherMode_setKey+0x386>
 800094a:	e9db e900 	ldrd	lr, r9, [fp]
 800094e:	a809      	add	r0, sp, #36	; 0x24
 8000950:	4c9b      	ldr	r4, [pc, #620]	; (8000bc0 <cmox_cipherMode_setKey+0x3c4>)
 8000952:	e9c0 e900 	strd	lr, r9, [r0]
 8000956:	7820      	ldrb	r0, [r4, #0]
 8000958:	2800      	cmp	r0, #0
 800095a:	bf0c      	ite	eq
 800095c:	f04f 0900 	moveq.w	r9, #0
 8000960:	f04f 0904 	movne.w	r9, #4
 8000964:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 8000968:	f856 4009 	ldr.w	r4, [r6, r9]
 800096c:	f85e 7009 	ldr.w	r7, [lr, r9]
 8000970:	443c      	add	r4, r7
 8000972:	6025      	str	r5, [r4, #0]
 8000974:	2501      	movs	r5, #1
 8000976:	6827      	ldr	r7, [r4, #0]
 8000978:	60a5      	str	r5, [r4, #8]
 800097a:	f8d6 9000 	ldr.w	r9, [r6]
 800097e:	6875      	ldr	r5, [r6, #4]
 8000980:	7b8c      	ldrb	r4, [r1, #14]
 8000982:	9400      	str	r4, [sp, #0]
 8000984:	406f      	eors	r7, r5
 8000986:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8000988:	407c      	eors	r4, r7
 800098a:	f8de 7004 	ldr.w	r7, [lr, #4]
 800098e:	ea87 0709 	eor.w	r7, r7, r9
 8000992:	f084 0404 	eor.w	r4, r4, #4
 8000996:	f087 0efc 	eor.w	lr, r7, #252	; 0xfc
 800099a:	4474      	add	r4, lr
 800099c:	9f00      	ldr	r7, [sp, #0]
 800099e:	f084 0e85 	eor.w	lr, r4, #133	; 0x85
 80009a2:	44be      	add	lr, r7
 80009a4:	f88c e00e 	strb.w	lr, [ip, #14]
 80009a8:	f04f 0e01 	mov.w	lr, #1
 80009ac:	f811 400e 	ldrb.w	r4, [r1, lr]
 80009b0:	f80c 400e 	strb.w	r4, [ip, lr]
 80009b4:	f10e 0e01 	add.w	lr, lr, #1
 80009b8:	f1be 0f0e 	cmp.w	lr, #14
 80009bc:	d3f6      	bcc.n	80009ac <cmox_cipherMode_setKey+0x1b0>
 80009be:	e9db 4700 	ldrd	r4, r7, [fp]
 80009c2:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 80009c6:	2800      	cmp	r0, #0
 80009c8:	e9ce 4700 	strd	r4, r7, [lr]
 80009cc:	bf0c      	ite	eq
 80009ce:	2700      	moveq	r7, #0
 80009d0:	2704      	movne	r7, #4
 80009d2:	463c      	mov	r4, r7
 80009d4:	59f7      	ldr	r7, [r6, r7]
 80009d6:	f85e 4004 	ldr.w	r4, [lr, r4]
 80009da:	19e4      	adds	r4, r4, r7
 80009dc:	6023      	str	r3, [r4, #0]
 80009de:	2301      	movs	r3, #1
 80009e0:	6827      	ldr	r7, [r4, #0]
 80009e2:	60a3      	str	r3, [r4, #8]
 80009e4:	406f      	eors	r7, r5
 80009e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80009e8:	780c      	ldrb	r4, [r1, #0]
 80009ea:	405f      	eors	r7, r3
 80009ec:	f8de 3004 	ldr.w	r3, [lr, #4]
 80009f0:	ea83 0309 	eor.w	r3, r3, r9
 80009f4:	f087 0704 	eor.w	r7, r7, #4
 80009f8:	f083 03fc 	eor.w	r3, r3, #252	; 0xfc
 80009fc:	441f      	add	r7, r3
 80009fe:	f087 0752 	eor.w	r7, r7, #82	; 0x52
 8000a02:	193f      	adds	r7, r7, r4
 8000a04:	f88d 7004 	strb.w	r7, [sp, #4]
 8000a08:	ac09      	add	r4, sp, #36	; 0x24
 8000a0a:	e9db 7300 	ldrd	r7, r3, [fp]
 8000a0e:	e9c4 7300 	strd	r7, r3, [r4]
 8000a12:	2800      	cmp	r0, #0
 8000a14:	bf0e      	itee	eq
 8000a16:	2300      	moveq	r3, #0
 8000a18:	2004      	movne	r0, #4
 8000a1a:	2304      	movne	r3, #4
 8000a1c:	5836      	ldr	r6, [r6, r0]
 8000a1e:	58e0      	ldr	r0, [r4, r3]
 8000a20:	1986      	adds	r6, r0, r6
 8000a22:	2301      	movs	r3, #1
 8000a24:	f8c6 8000 	str.w	r8, [r6]
 8000a28:	6830      	ldr	r0, [r6, #0]
 8000a2a:	60b3      	str	r3, [r6, #8]
 8000a2c:	4045      	eors	r5, r0
 8000a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a30:	6860      	ldr	r0, [r4, #4]
 8000a32:	405d      	eors	r5, r3
 8000a34:	ea80 0009 	eor.w	r0, r0, r9
 8000a38:	f085 0504 	eor.w	r5, r5, #4
 8000a3c:	f080 00fc 	eor.w	r0, r0, #252	; 0xfc
 8000a40:	7bce      	ldrb	r6, [r1, #15]
 8000a42:	4405      	add	r5, r0
 8000a44:	f085 050b 	eor.w	r5, r5, #11
 8000a48:	19ad      	adds	r5, r5, r6
 8000a4a:	f88c 500f 	strb.w	r5, [ip, #15]
 8000a4e:	2010      	movs	r0, #16
 8000a50:	5c0b      	ldrb	r3, [r1, r0]
 8000a52:	f80c 3000 	strb.w	r3, [ip, r0]
 8000a56:	1c40      	adds	r0, r0, #1
 8000a58:	2818      	cmp	r0, #24
 8000a5a:	d3f9      	bcc.n	8000a50 <cmox_cipherMode_setKey+0x254>
 8000a5c:	e76f      	b.n	800093e <cmox_cipherMode_setKey+0x142>
 8000a5e:	e9db e900 	ldrd	lr, r9, [fp]
 8000a62:	a809      	add	r0, sp, #36	; 0x24
 8000a64:	4c56      	ldr	r4, [pc, #344]	; (8000bc0 <cmox_cipherMode_setKey+0x3c4>)
 8000a66:	e9c0 e900 	strd	lr, r9, [r0]
 8000a6a:	7820      	ldrb	r0, [r4, #0]
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	bf0c      	ite	eq
 8000a70:	f04f 0900 	moveq.w	r9, #0
 8000a74:	f04f 0904 	movne.w	r9, #4
 8000a78:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 8000a7c:	f856 4009 	ldr.w	r4, [r6, r9]
 8000a80:	f85e 7009 	ldr.w	r7, [lr, r9]
 8000a84:	443c      	add	r4, r7
 8000a86:	f8c4 8000 	str.w	r8, [r4]
 8000a8a:	f04f 0801 	mov.w	r8, #1
 8000a8e:	6827      	ldr	r7, [r4, #0]
 8000a90:	f8c4 8008 	str.w	r8, [r4, #8]
 8000a94:	f8d6 9000 	ldr.w	r9, [r6]
 8000a98:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8000a9c:	7fcc      	ldrb	r4, [r1, #31]
 8000a9e:	9400      	str	r4, [sp, #0]
 8000aa0:	ea88 0707 	eor.w	r7, r8, r7
 8000aa4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8000aa6:	407c      	eors	r4, r7
 8000aa8:	f8de 7004 	ldr.w	r7, [lr, #4]
 8000aac:	ea87 0709 	eor.w	r7, r7, r9
 8000ab0:	f084 0404 	eor.w	r4, r4, #4
 8000ab4:	f087 0efc 	eor.w	lr, r7, #252	; 0xfc
 8000ab8:	4474      	add	r4, lr
 8000aba:	9f00      	ldr	r7, [sp, #0]
 8000abc:	f084 0e0b 	eor.w	lr, r4, #11
 8000ac0:	44be      	add	lr, r7
 8000ac2:	f88c e01f 	strb.w	lr, [ip, #31]
 8000ac6:	f04f 0e00 	mov.w	lr, #0
 8000aca:	f811 400e 	ldrb.w	r4, [r1, lr]
 8000ace:	f80c 400e 	strb.w	r4, [ip, lr]
 8000ad2:	f10e 0e01 	add.w	lr, lr, #1
 8000ad6:	f1be 0f10 	cmp.w	lr, #16
 8000ada:	d3f6      	bcc.n	8000aca <cmox_cipherMode_setKey+0x2ce>
 8000adc:	e9db 4700 	ldrd	r4, r7, [fp]
 8000ae0:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	e9ce 4700 	strd	r4, r7, [lr]
 8000aea:	bf0c      	ite	eq
 8000aec:	2700      	moveq	r7, #0
 8000aee:	2704      	movne	r7, #4
 8000af0:	463c      	mov	r4, r7
 8000af2:	59f7      	ldr	r7, [r6, r7]
 8000af4:	f85e 4004 	ldr.w	r4, [lr, r4]
 8000af8:	19e4      	adds	r4, r4, r7
 8000afa:	6025      	str	r5, [r4, #0]
 8000afc:	2501      	movs	r5, #1
 8000afe:	6827      	ldr	r7, [r4, #0]
 8000b00:	60a5      	str	r5, [r4, #8]
 8000b02:	ea88 0707 	eor.w	r7, r8, r7
 8000b06:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000b08:	7c4c      	ldrb	r4, [r1, #17]
 8000b0a:	406f      	eors	r7, r5
 8000b0c:	f8de 5004 	ldr.w	r5, [lr, #4]
 8000b10:	ea85 0509 	eor.w	r5, r5, r9
 8000b14:	f087 0704 	eor.w	r7, r7, #4
 8000b18:	f085 05fc 	eor.w	r5, r5, #252	; 0xfc
 8000b1c:	442f      	add	r7, r5
 8000b1e:	f087 0785 	eor.w	r7, r7, #133	; 0x85
 8000b22:	193f      	adds	r7, r7, r4
 8000b24:	f88c 7011 	strb.w	r7, [ip, #17]
 8000b28:	ad09      	add	r5, sp, #36	; 0x24
 8000b2a:	e9db 4700 	ldrd	r4, r7, [fp]
 8000b2e:	e9c5 4700 	strd	r4, r7, [r5]
 8000b32:	2800      	cmp	r0, #0
 8000b34:	bf0e      	itee	eq
 8000b36:	f04f 0b00 	moveq.w	fp, #0
 8000b3a:	2004      	movne	r0, #4
 8000b3c:	4683      	movne	fp, r0
 8000b3e:	5836      	ldr	r6, [r6, r0]
 8000b40:	f855 000b 	ldr.w	r0, [r5, fp]
 8000b44:	1986      	adds	r6, r0, r6
 8000b46:	6033      	str	r3, [r6, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	6830      	ldr	r0, [r6, #0]
 8000b4c:	60b3      	str	r3, [r6, #8]
 8000b4e:	ea88 0000 	eor.w	r0, r8, r0
 8000b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b54:	7c0e      	ldrb	r6, [r1, #16]
 8000b56:	4058      	eors	r0, r3
 8000b58:	f080 0804 	eor.w	r8, r0, #4
 8000b5c:	6868      	ldr	r0, [r5, #4]
 8000b5e:	ea80 0009 	eor.w	r0, r0, r9
 8000b62:	f080 00fc 	eor.w	r0, r0, #252	; 0xfc
 8000b66:	4440      	add	r0, r8
 8000b68:	f080 0852 	eor.w	r8, r0, #82	; 0x52
 8000b6c:	44b0      	add	r8, r6
 8000b6e:	f88c 8010 	strb.w	r8, [ip, #16]
 8000b72:	2012      	movs	r0, #18
 8000b74:	5c0b      	ldrb	r3, [r1, r0]
 8000b76:	f80c 3000 	strb.w	r3, [ip, r0]
 8000b7a:	1c40      	adds	r0, r0, #1
 8000b7c:	281f      	cmp	r0, #31
 8000b7e:	d3f9      	bcc.n	8000b74 <cmox_cipherMode_setKey+0x378>
 8000b80:	e6dd      	b.n	800093e <cmox_cipherMode_setKey+0x142>
 8000b82:	4610      	mov	r0, r2
 8000b84:	e00d      	b.n	8000ba2 <cmox_cipherMode_setKey+0x3a6>
 8000b86:	682b      	ldr	r3, [r5, #0]
 8000b88:	685e      	ldr	r6, [r3, #4]
 8000b8a:	4652      	mov	r2, sl
 8000b8c:	a901      	add	r1, sp, #4
 8000b8e:	4628      	mov	r0, r5
 8000b90:	47b0      	blx	r6
 8000b92:	68a8      	ldr	r0, [r5, #8]
 8000b94:	f8c5 a004 	str.w	sl, [r5, #4]
 8000b98:	f040 0004 	orr.w	r0, r0, #4
 8000b9c:	60a8      	str	r0, [r5, #8]
 8000b9e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000ba2:	b00d      	add	sp, #52	; 0x34
 8000ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ba8:	00010003 	.word	0x00010003
 8000bac:	f78e2254 	.word	0xf78e2254
 8000bb0:	2e8f137d 	.word	0x2e8f137d
 8000bb4:	910e0ba4 	.word	0x910e0ba4
 8000bb8:	0800db74 	.word	0x0800db74
 8000bbc:	08000c24 	.word	0x08000c24
 8000bc0:	20000188 	.word	0x20000188

08000bc4 <cmox_cipherMode_setIV>:
 8000bc4:	b530      	push	{r4, r5, lr}
 8000bc6:	9c03      	ldr	r4, [sp, #12]
 8000bc8:	2c00      	cmp	r4, #0
 8000bca:	bf18      	it	ne
 8000bcc:	2a00      	cmpne	r2, #0
 8000bce:	d101      	bne.n	8000bd4 <cmox_cipherMode_setIV+0x10>
 8000bd0:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <cmox_cipherMode_setIV+0x34>)
 8000bd2:	bd30      	pop	{r4, r5, pc}
 8000bd4:	2400      	movs	r4, #0
 8000bd6:	e004      	b.n	8000be2 <cmox_cipherMode_setIV+0x1e>
 8000bd8:	5955      	ldr	r5, [r2, r5]
 8000bda:	ba2d      	rev	r5, r5
 8000bdc:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
 8000be0:	1c64      	adds	r4, r4, #1
 8000be2:	00a5      	lsls	r5, r4, #2
 8000be4:	429d      	cmp	r5, r3
 8000be6:	d3f7      	bcc.n	8000bd8 <cmox_cipherMode_setIV+0x14>
 8000be8:	6841      	ldr	r1, [r0, #4]
 8000bea:	f041 0101 	orr.w	r1, r1, #1
 8000bee:	6041      	str	r1, [r0, #4]
 8000bf0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000bf4:	bd30      	pop	{r4, r5, pc}
 8000bf6:	bf00      	nop
 8000bf8:	00010003 	.word	0x00010003

08000bfc <cmox_cipher_setTagLen_empty>:
 8000bfc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000c00:	4770      	bx	lr

08000c02 <cmox_cipher_setPayloadLen_empty>:
 8000c02:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000c06:	4770      	bx	lr

08000c08 <cmox_cipher_setADLen_empty>:
 8000c08:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000c0c:	4770      	bx	lr

08000c0e <cmox_cipher_appendAD_empty>:
 8000c0e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000c12:	4770      	bx	lr

08000c14 <cmox_cipher_generateTag_empty>:
 8000c14:	4800      	ldr	r0, [pc, #0]	; (8000c18 <cmox_cipher_generateTag_empty+0x4>)
 8000c16:	4770      	bx	lr
 8000c18:	00010002 	.word	0x00010002

08000c1c <cmox_cipher_verifyTag_empty>:
 8000c1c:	4800      	ldr	r0, [pc, #0]	; (8000c20 <cmox_cipher_verifyTag_empty+0x4>)
 8000c1e:	4770      	bx	lr
 8000c20:	00010002 	.word	0x00010002
 8000c24:	0101b004 	.word	0x0101b004
 8000c28:	45011700 	.word	0x45011700

08000c2c <convert_block_2_words>:
 8000c2c:	b530      	push	{r4, r5, lr}
 8000c2e:	2200      	movs	r2, #0
 8000c30:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8000c34:	785d      	ldrb	r5, [r3, #1]
 8000c36:	781c      	ldrb	r4, [r3, #0]
 8000c38:	042d      	lsls	r5, r5, #16
 8000c3a:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
 8000c3e:	789c      	ldrb	r4, [r3, #2]
 8000c40:	78db      	ldrb	r3, [r3, #3]
 8000c42:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
 8000c46:	431d      	orrs	r5, r3
 8000c48:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 8000c4c:	1c52      	adds	r2, r2, #1
 8000c4e:	2a04      	cmp	r2, #4
 8000c50:	d3ee      	bcc.n	8000c30 <convert_block_2_words+0x4>
 8000c52:	bd30      	pop	{r4, r5, pc}

08000c54 <convert_block_2_bytes>:
 8000c54:	b530      	push	{r4, r5, lr}
 8000c56:	2200      	movs	r2, #0
 8000c58:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8000c5c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8000c60:	70dc      	strb	r4, [r3, #3]
 8000c62:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8000c66:	0a2d      	lsrs	r5, r5, #8
 8000c68:	709d      	strb	r5, [r3, #2]
 8000c6a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8000c6e:	0c24      	lsrs	r4, r4, #16
 8000c70:	705c      	strb	r4, [r3, #1]
 8000c72:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8000c76:	1c52      	adds	r2, r2, #1
 8000c78:	0e24      	lsrs	r4, r4, #24
 8000c7a:	2a04      	cmp	r2, #4
 8000c7c:	701c      	strb	r4, [r3, #0]
 8000c7e:	d3eb      	bcc.n	8000c58 <convert_block_2_bytes+0x4>
 8000c80:	bd30      	pop	{r4, r5, pc}

08000c82 <xor_blocks>:
 8000c82:	b510      	push	{r4, lr}
 8000c84:	2200      	movs	r2, #0
 8000c86:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8000c8a:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 8000c8e:	4063      	eors	r3, r4
 8000c90:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8000c94:	1c52      	adds	r2, r2, #1
 8000c96:	2a04      	cmp	r2, #4
 8000c98:	d3f5      	bcc.n	8000c86 <xor_blocks+0x4>
 8000c9a:	bd10      	pop	{r4, pc}

08000c9c <copy_block>:
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8000ca2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8000ca6:	1c52      	adds	r2, r2, #1
 8000ca8:	2a04      	cmp	r2, #4
 8000caa:	d3f8      	bcc.n	8000c9e <copy_block+0x2>
 8000cac:	4770      	bx	lr
	...

08000cb0 <cmox_hash_compute>:
 8000cb0:	b538      	push	{r3, r4, r5, lr}
 8000cb2:	460c      	mov	r4, r1
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	461a      	mov	r2, r3
 8000cba:	bf1c      	itt	ne
 8000cbc:	6805      	ldrne	r5, [r0, #0]
 8000cbe:	2d00      	cmpne	r5, #0
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <cmox_hash_compute+0x30>)
 8000cc2:	d00a      	beq.n	8000cda <cmox_hash_compute+0x2a>
 8000cc4:	b14a      	cbz	r2, 8000cda <cmox_hash_compute+0x2a>
 8000cc6:	b904      	cbnz	r4, 8000cca <cmox_hash_compute+0x1a>
 8000cc8:	b939      	cbnz	r1, 8000cda <cmox_hash_compute+0x2a>
 8000cca:	9804      	ldr	r0, [sp, #16]
 8000ccc:	b128      	cbz	r0, 8000cda <cmox_hash_compute+0x2a>
 8000cce:	9b05      	ldr	r3, [sp, #20]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	47a8      	blx	r5
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd32      	pop	{r1, r4, r5, pc}
 8000cde:	bf00      	nop
 8000ce0:	00020003 	.word	0x00020003

08000ce4 <cmox_hash_common_compute>:
 8000ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ce8:	4604      	mov	r4, r0
 8000cea:	460e      	mov	r6, r1
 8000cec:	6821      	ldr	r1, [r4, #0]
 8000cee:	4617      	mov	r7, r2
 8000cf0:	684a      	ldr	r2, [r1, #4]
 8000cf2:	461d      	mov	r5, r3
 8000cf4:	4790      	blx	r2
 8000cf6:	4680      	mov	r8, r0
 8000cf8:	f5b8 3f00 	cmp.w	r8, #131072	; 0x20000
 8000cfc:	d119      	bne.n	8000d32 <cmox_hash_common_compute+0x4e>
 8000cfe:	6822      	ldr	r2, [r4, #0]
 8000d00:	9906      	ldr	r1, [sp, #24]
 8000d02:	6893      	ldr	r3, [r2, #8]
 8000d04:	4620      	mov	r0, r4
 8000d06:	4798      	blx	r3
 8000d08:	4680      	mov	r8, r0
 8000d0a:	f5b8 3f00 	cmp.w	r8, #131072	; 0x20000
 8000d0e:	d110      	bne.n	8000d32 <cmox_hash_common_compute+0x4e>
 8000d10:	6823      	ldr	r3, [r4, #0]
 8000d12:	4631      	mov	r1, r6
 8000d14:	68de      	ldr	r6, [r3, #12]
 8000d16:	463a      	mov	r2, r7
 8000d18:	4620      	mov	r0, r4
 8000d1a:	47b0      	blx	r6
 8000d1c:	4680      	mov	r8, r0
 8000d1e:	f5b8 3f00 	cmp.w	r8, #131072	; 0x20000
 8000d22:	d106      	bne.n	8000d32 <cmox_hash_common_compute+0x4e>
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	9a07      	ldr	r2, [sp, #28]
 8000d28:	4629      	mov	r1, r5
 8000d2a:	691d      	ldr	r5, [r3, #16]
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	47a8      	blx	r5
 8000d30:	4680      	mov	r8, r0
 8000d32:	6821      	ldr	r1, [r4, #0]
 8000d34:	680a      	ldr	r2, [r1, #0]
 8000d36:	4620      	mov	r0, r4
 8000d38:	4790      	blx	r2
 8000d3a:	4640      	mov	r0, r8
 8000d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000d40 <cmox_initialize>:
 8000d40:	b538      	push	{r3, r4, r5, lr}
 8000d42:	2800      	cmp	r0, #0
 8000d44:	bf1c      	itt	ne
 8000d46:	6801      	ldrne	r1, [r0, #0]
 8000d48:	2900      	cmpne	r1, #0
 8000d4a:	4a18      	ldr	r2, [pc, #96]	; (8000dac <cmox_initialize+0x6c>)
 8000d4c:	d123      	bne.n	8000d96 <cmox_initialize+0x56>
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <cmox_initialize+0x70>)
 8000d50:	681c      	ldr	r4, [r3, #0]
 8000d52:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8000d56:	400c      	ands	r4, r1
 8000d58:	f24c 2540 	movw	r5, #49728	; 0xc240
 8000d5c:	42ac      	cmp	r4, r5
 8000d5e:	bf1f      	itttt	ne
 8000d60:	681b      	ldrne	r3, [r3, #0]
 8000d62:	4019      	andne	r1, r3
 8000d64:	f24c 2470 	movwne	r4, #49776	; 0xc270
 8000d68:	42a1      	cmpne	r1, r4
 8000d6a:	d112      	bne.n	8000d92 <cmox_initialize+0x52>
 8000d6c:	4d11      	ldr	r5, [pc, #68]	; (8000db4 <cmox_initialize+0x74>)
 8000d6e:	6829      	ldr	r1, [r5, #0]
 8000d70:	b979      	cbnz	r1, 8000d92 <cmox_initialize+0x52>
 8000d72:	4911      	ldr	r1, [pc, #68]	; (8000db8 <cmox_initialize+0x78>)
 8000d74:	680b      	ldr	r3, [r1, #0]
 8000d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d7a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000d7e:	bf1f      	itttt	ne
 8000d80:	6809      	ldrne	r1, [r1, #0]
 8000d82:	f3c1 010b 	ubfxne	r1, r1, #0, #12
 8000d86:	f240 4383 	movwne	r3, #1155	; 0x483
 8000d8a:	4299      	cmpne	r1, r3
 8000d8c:	bf04      	itt	eq
 8000d8e:	2101      	moveq	r1, #1
 8000d90:	7011      	strbeq	r1, [r2, #0]
 8000d92:	b928      	cbnz	r0, 8000da0 <cmox_initialize+0x60>
 8000d94:	e005      	b.n	8000da2 <cmox_initialize+0x62>
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <cmox_initialize+0x7c>)
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	bf04      	itt	eq
 8000d9c:	2101      	moveq	r1, #1
 8000d9e:	7011      	strbeq	r1, [r2, #0]
 8000da0:	6840      	ldr	r0, [r0, #4]
 8000da2:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 8000da6:	f001 ba85 	b.w	80022b4 <cmox_ll_init>
 8000daa:	bf00      	nop
 8000dac:	20000188 	.word	0x20000188
 8000db0:	e000ed00 	.word	0xe000ed00
 8000db4:	e0042000 	.word	0xe0042000
 8000db8:	5c001000 	.word	0x5c001000
 8000dbc:	48370000 	.word	0x48370000

08000dc0 <cmox_sha256_cleanup>:
 8000dc0:	b500      	push	{lr}
 8000dc2:	b081      	sub	sp, #4
 8000dc4:	6801      	ldr	r1, [r0, #0]
 8000dc6:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <cmox_sha256_cleanup+0x24>)
 8000dc8:	4291      	cmp	r1, r2
 8000dca:	d100      	bne.n	8000dce <cmox_sha256_cleanup+0xe>
 8000dcc:	b910      	cbnz	r0, 8000dd4 <cmox_sha256_cleanup+0x14>
 8000dce:	4806      	ldr	r0, [pc, #24]	; (8000de8 <cmox_sha256_cleanup+0x28>)
 8000dd0:	b001      	add	sp, #4
 8000dd2:	bd00      	pop	{pc}
 8000dd4:	217c      	movs	r1, #124	; 0x7c
 8000dd6:	f00c f880 	bl	800ceda <__aeabi_memclr>
 8000dda:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000dde:	b001      	add	sp, #4
 8000de0:	bd00      	pop	{pc}
 8000de2:	bf00      	nop
 8000de4:	08000ecc 	.word	0x08000ecc
 8000de8:	00020003 	.word	0x00020003

08000dec <cmox_sha256_init>:
 8000dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000df0:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <cmox_sha256_init+0x34>)
 8000df2:	e892 51f8 	ldmia.w	r2, {r3, r4, r5, r6, r7, r8, ip, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	4669      	mov	r1, sp
 8000dfa:	e881 51f8 	stmia.w	r1, {r3, r4, r5, r6, r7, r8, ip, lr}
 8000dfe:	6802      	ldr	r2, [r0, #0]
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <cmox_sha256_init+0x38>)
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d100      	bne.n	8000e08 <cmox_sha256_init+0x1c>
 8000e06:	b918      	cbnz	r0, 8000e10 <cmox_sha256_init+0x24>
 8000e08:	4807      	ldr	r0, [pc, #28]	; (8000e28 <cmox_sha256_init+0x3c>)
 8000e0a:	b008      	add	sp, #32
 8000e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e10:	2220      	movs	r2, #32
 8000e12:	3008      	adds	r0, #8
 8000e14:	f000 fd23 	bl	800185e <cmox_md_init>
 8000e18:	b008      	add	sp, #32
 8000e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e1e:	bf00      	nop
 8000e20:	08000eac 	.word	0x08000eac
 8000e24:	08000ecc 	.word	0x08000ecc
 8000e28:	00020003 	.word	0x00020003

08000e2c <cmox_sha256_setTagLen>:
 8000e2c:	2921      	cmp	r1, #33	; 0x21
 8000e2e:	d204      	bcs.n	8000e3a <cmox_sha256_setTagLen+0xe>
 8000e30:	6802      	ldr	r2, [r0, #0]
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <cmox_sha256_setTagLen+0x18>)
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d100      	bne.n	8000e3a <cmox_sha256_setTagLen+0xe>
 8000e38:	b908      	cbnz	r0, 8000e3e <cmox_sha256_setTagLen+0x12>
 8000e3a:	4803      	ldr	r0, [pc, #12]	; (8000e48 <cmox_sha256_setTagLen+0x1c>)
 8000e3c:	4770      	bx	lr
 8000e3e:	3008      	adds	r0, #8
 8000e40:	f000 bd1c 	b.w	800187c <cmox_md_setTagSize>
 8000e44:	08000ecc 	.word	0x08000ecc
 8000e48:	00020003 	.word	0x00020003

08000e4c <cmox_sha256_append>:
 8000e4c:	b410      	push	{r4}
 8000e4e:	b081      	sub	sp, #4
 8000e50:	4613      	mov	r3, r2
 8000e52:	6802      	ldr	r2, [r0, #0]
 8000e54:	4c07      	ldr	r4, [pc, #28]	; (8000e74 <cmox_sha256_append+0x28>)
 8000e56:	42a2      	cmp	r2, r4
 8000e58:	d100      	bne.n	8000e5c <cmox_sha256_append+0x10>
 8000e5a:	b918      	cbnz	r0, 8000e64 <cmox_sha256_append+0x18>
 8000e5c:	b001      	add	sp, #4
 8000e5e:	bc10      	pop	{r4}
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <cmox_sha256_append+0x2c>)
 8000e62:	4770      	bx	lr
 8000e64:	b001      	add	sp, #4
 8000e66:	f100 0224 	add.w	r2, r0, #36	; 0x24
 8000e6a:	bc10      	pop	{r4}
 8000e6c:	3008      	adds	r0, #8
 8000e6e:	f000 bd09 	b.w	8001884 <cmox_md_append>
 8000e72:	bf00      	nop
 8000e74:	08000ecc 	.word	0x08000ecc
 8000e78:	00020003 	.word	0x00020003

08000e7c <cmox_sha256_generateTag>:
 8000e7c:	b410      	push	{r4}
 8000e7e:	b081      	sub	sp, #4
 8000e80:	4613      	mov	r3, r2
 8000e82:	6802      	ldr	r2, [r0, #0]
 8000e84:	4c07      	ldr	r4, [pc, #28]	; (8000ea4 <cmox_sha256_generateTag+0x28>)
 8000e86:	42a2      	cmp	r2, r4
 8000e88:	d100      	bne.n	8000e8c <cmox_sha256_generateTag+0x10>
 8000e8a:	b918      	cbnz	r0, 8000e94 <cmox_sha256_generateTag+0x18>
 8000e8c:	b001      	add	sp, #4
 8000e8e:	bc10      	pop	{r4}
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <cmox_sha256_generateTag+0x2c>)
 8000e92:	4770      	bx	lr
 8000e94:	460a      	mov	r2, r1
 8000e96:	b001      	add	sp, #4
 8000e98:	f100 0124 	add.w	r1, r0, #36	; 0x24
 8000e9c:	bc10      	pop	{r4}
 8000e9e:	3008      	adds	r0, #8
 8000ea0:	f000 bd44 	b.w	800192c <cmox_md_generateTag>
 8000ea4:	08000ecc 	.word	0x08000ecc
 8000ea8:	00020003 	.word	0x00020003
 8000eac:	6a09e667 	.word	0x6a09e667
 8000eb0:	bb67ae85 	.word	0xbb67ae85
 8000eb4:	3c6ef372 	.word	0x3c6ef372
 8000eb8:	a54ff53a 	.word	0xa54ff53a
 8000ebc:	510e527f 	.word	0x510e527f
 8000ec0:	9b05688c 	.word	0x9b05688c
 8000ec4:	1f83d9ab 	.word	0x1f83d9ab
 8000ec8:	5be0cd19 	.word	0x5be0cd19

08000ecc <CMOX_SHA256_VTABLE>:
 8000ecc:	08000dc1 08000ded 08000e2d 08000e4d     ........-...M...
 8000edc:	08000e7d                                }...

08000ee0 <cmox_sha256_compute>:
 8000ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee2:	b0a3      	sub	sp, #140	; 0x8c
 8000ee4:	4604      	mov	r4, r0
 8000ee6:	480b      	ldr	r0, [pc, #44]	; (8000f14 <cmox_sha256_compute+0x34>)
 8000ee8:	9002      	str	r0, [sp, #8]
 8000eea:	460d      	mov	r5, r1
 8000eec:	4616      	mov	r6, r2
 8000eee:	461f      	mov	r7, r3
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <cmox_sha256_compute+0x38>)
 8000ef2:	2208      	movs	r2, #8
 8000ef4:	2140      	movs	r1, #64	; 0x40
 8000ef6:	a804      	add	r0, sp, #16
 8000ef8:	f000 fcad 	bl	8001856 <cmox_md_construct>
 8000efc:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8000efe:	9001      	str	r0, [sp, #4]
 8000f00:	9700      	str	r7, [sp, #0]
 8000f02:	4633      	mov	r3, r6
 8000f04:	462a      	mov	r2, r5
 8000f06:	4621      	mov	r1, r4
 8000f08:	a802      	add	r0, sp, #8
 8000f0a:	f7ff feeb 	bl	8000ce4 <cmox_hash_common_compute>
 8000f0e:	b023      	add	sp, #140	; 0x8c
 8000f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f12:	bf00      	nop
 8000f14:	08000ecc 	.word	0x08000ecc
 8000f18:	0800dc84 	.word	0x0800dc84

08000f1c <cmox_sha256_transform>:
 8000f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f20:	b0c1      	sub	sp, #260	; 0x104
 8000f22:	680b      	ldr	r3, [r1, #0]
 8000f24:	ba1b      	rev	r3, r3
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	4602      	mov	r2, r0
 8000f2a:	684b      	ldr	r3, [r1, #4]
 8000f2c:	a801      	add	r0, sp, #4
 8000f2e:	ba1b      	rev	r3, r3
 8000f30:	6043      	str	r3, [r0, #4]
 8000f32:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8000f36:	688b      	ldr	r3, [r1, #8]
 8000f38:	ba1b      	rev	r3, r3
 8000f3a:	6083      	str	r3, [r0, #8]
 8000f3c:	68cb      	ldr	r3, [r1, #12]
 8000f3e:	ba1b      	rev	r3, r3
 8000f40:	60c3      	str	r3, [r0, #12]
 8000f42:	690b      	ldr	r3, [r1, #16]
 8000f44:	ba1b      	rev	r3, r3
 8000f46:	6103      	str	r3, [r0, #16]
 8000f48:	694b      	ldr	r3, [r1, #20]
 8000f4a:	ba1b      	rev	r3, r3
 8000f4c:	6143      	str	r3, [r0, #20]
 8000f4e:	698b      	ldr	r3, [r1, #24]
 8000f50:	ba1b      	rev	r3, r3
 8000f52:	6183      	str	r3, [r0, #24]
 8000f54:	69cb      	ldr	r3, [r1, #28]
 8000f56:	ba1b      	rev	r3, r3
 8000f58:	61c3      	str	r3, [r0, #28]
 8000f5a:	6a0b      	ldr	r3, [r1, #32]
 8000f5c:	ba1b      	rev	r3, r3
 8000f5e:	6203      	str	r3, [r0, #32]
 8000f60:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000f62:	ba1b      	rev	r3, r3
 8000f64:	6243      	str	r3, [r0, #36]	; 0x24
 8000f66:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8000f68:	ba1b      	rev	r3, r3
 8000f6a:	6283      	str	r3, [r0, #40]	; 0x28
 8000f6c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000f6e:	ba1b      	rev	r3, r3
 8000f70:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000f72:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000f74:	ba1b      	rev	r3, r3
 8000f76:	6303      	str	r3, [r0, #48]	; 0x30
 8000f78:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8000f7a:	ba1b      	rev	r3, r3
 8000f7c:	6343      	str	r3, [r0, #52]	; 0x34
 8000f7e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8000f80:	ba1b      	rev	r3, r3
 8000f82:	6383      	str	r3, [r0, #56]	; 0x38
 8000f84:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000f86:	ba09      	rev	r1, r1
 8000f88:	63c1      	str	r1, [r0, #60]	; 0x3c
 8000f8a:	2018      	movs	r0, #24
 8000f8c:	f85c 4c08 	ldr.w	r4, [ip, #-8]
 8000f90:	ea4f 41f4 	mov.w	r1, r4, ror #19
 8000f94:	ea91 4374 	eors.w	r3, r1, r4, ror #17
 8000f98:	f85c 1c3c 	ldr.w	r1, [ip, #-60]
 8000f9c:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
 8000fa0:	ea4f 47b1 	mov.w	r7, r1, ror #18
 8000fa4:	f85c 4c1c 	ldr.w	r4, [ip, #-28]
 8000fa8:	ea97 16f1 	eors.w	r6, r7, r1, ror #7
 8000fac:	4423      	add	r3, r4
 8000fae:	ea86 06d1 	eor.w	r6, r6, r1, lsr #3
 8000fb2:	18f3      	adds	r3, r6, r3
 8000fb4:	f85c 6c40 	ldr.w	r6, [ip, #-64]
 8000fb8:	18f3      	adds	r3, r6, r3
 8000fba:	f8cc 3000 	str.w	r3, [ip]
 8000fbe:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 8000fc2:	ea4f 46f4 	mov.w	r6, r4, ror #19
 8000fc6:	ea96 4374 	eors.w	r3, r6, r4, ror #17
 8000fca:	f85c 6c38 	ldr.w	r6, [ip, #-56]
 8000fce:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
 8000fd2:	ea4f 4ab6 	mov.w	sl, r6, ror #18
 8000fd6:	f85c 4c18 	ldr.w	r4, [ip, #-24]
 8000fda:	ea8a 17f6 	eor.w	r7, sl, r6, ror #7
 8000fde:	4423      	add	r3, r4
 8000fe0:	ea87 07d6 	eor.w	r7, r7, r6, lsr #3
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	18c9      	adds	r1, r1, r3
 8000fe8:	f8cc 1004 	str.w	r1, [ip, #4]
 8000fec:	1e40      	subs	r0, r0, #1
 8000fee:	f10c 0c08 	add.w	ip, ip, #8
 8000ff2:	d1cb      	bne.n	8000f8c <cmox_sha256_transform+0x70>
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	9200      	str	r2, [sp, #0]
 8000ff8:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8000ffa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8000ffc:	f8d0 e060 	ldr.w	lr, [r0, #96]	; 0x60
 8001000:	f8d0 8070 	ldr.w	r8, [r0, #112]	; 0x70
 8001004:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8001006:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8001008:	f8d0 a068 	ldr.w	sl, [r0, #104]	; 0x68
 800100c:	6f85      	ldr	r5, [r0, #120]	; 0x78
 800100e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8001104 <cmox_sha256_transform+0x1e8>
 8001012:	f10d 0c04 	add.w	ip, sp, #4
 8001016:	2020      	movs	r0, #32
 8001018:	ea4f 16b3 	mov.w	r6, r3, ror #6
 800101c:	ea86 26f3 	eor.w	r6, r6, r3, ror #11
 8001020:	ea86 6673 	eor.w	r6, r6, r3, ror #25
 8001024:	1975      	adds	r5, r6, r5
 8001026:	ea84 0608 	eor.w	r6, r4, r8
 800102a:	401e      	ands	r6, r3
 800102c:	4066      	eors	r6, r4
 800102e:	1975      	adds	r5, r6, r5
 8001030:	f859 6b04 	ldr.w	r6, [r9], #4
 8001034:	f85c 7b04 	ldr.w	r7, [ip], #4
 8001038:	1975      	adds	r5, r6, r5
 800103a:	197e      	adds	r6, r7, r5
 800103c:	ea4f 07b1 	mov.w	r7, r1, ror #2
 8001040:	ea4e 0b01 	orr.w	fp, lr, r1
 8001044:	ea87 3771 	eor.w	r7, r7, r1, ror #13
 8001048:	ea0e 0501 	and.w	r5, lr, r1
 800104c:	ea0b 0b02 	and.w	fp, fp, r2
 8001050:	ea87 57b1 	eor.w	r7, r7, r1, ror #22
 8001054:	ea4b 0505 	orr.w	r5, fp, r5
 8001058:	19ef      	adds	r7, r5, r7
 800105a:	4645      	mov	r5, r8
 800105c:	eb06 080a 	add.w	r8, r6, sl
 8001060:	4692      	mov	sl, r2
 8001062:	4672      	mov	r2, lr
 8001064:	eb07 0e06 	add.w	lr, r7, r6
 8001068:	ea4f 16b8 	mov.w	r6, r8, ror #6
 800106c:	ea86 26f8 	eor.w	r6, r6, r8, ror #11
 8001070:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 8001074:	1934      	adds	r4, r6, r4
 8001076:	ea85 0603 	eor.w	r6, r5, r3
 800107a:	ea06 0608 	and.w	r6, r6, r8
 800107e:	406e      	eors	r6, r5
 8001080:	1934      	adds	r4, r6, r4
 8001082:	f859 6b04 	ldr.w	r6, [r9], #4
 8001086:	f85c 7b04 	ldr.w	r7, [ip], #4
 800108a:	1934      	adds	r4, r6, r4
 800108c:	193e      	adds	r6, r7, r4
 800108e:	ea4f 07be 	mov.w	r7, lr, ror #2
 8001092:	ea41 0b0e 	orr.w	fp, r1, lr
 8001096:	ea87 377e 	eor.w	r7, r7, lr, ror #13
 800109a:	ea01 040e 	and.w	r4, r1, lr
 800109e:	ea0b 0b02 	and.w	fp, fp, r2
 80010a2:	ea87 57be 	eor.w	r7, r7, lr, ror #22
 80010a6:	ea4b 0404 	orr.w	r4, fp, r4
 80010aa:	19e7      	adds	r7, r4, r7
 80010ac:	461c      	mov	r4, r3
 80010ae:	eb06 030a 	add.w	r3, r6, sl
 80010b2:	4692      	mov	sl, r2
 80010b4:	460a      	mov	r2, r1
 80010b6:	19b9      	adds	r1, r7, r6
 80010b8:	1e40      	subs	r0, r0, #1
 80010ba:	d1ad      	bne.n	8001018 <cmox_sha256_transform+0xfc>
 80010bc:	9800      	ldr	r0, [sp, #0]
 80010be:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 80010c0:	4431      	add	r1, r6
 80010c2:	65c1      	str	r1, [r0, #92]	; 0x5c
 80010c4:	9900      	ldr	r1, [sp, #0]
 80010c6:	6e08      	ldr	r0, [r1, #96]	; 0x60
 80010c8:	4470      	add	r0, lr
 80010ca:	6608      	str	r0, [r1, #96]	; 0x60
 80010cc:	9800      	ldr	r0, [sp, #0]
 80010ce:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80010d0:	1852      	adds	r2, r2, r1
 80010d2:	6642      	str	r2, [r0, #100]	; 0x64
 80010d4:	9900      	ldr	r1, [sp, #0]
 80010d6:	6e88      	ldr	r0, [r1, #104]	; 0x68
 80010d8:	4450      	add	r0, sl
 80010da:	6688      	str	r0, [r1, #104]	; 0x68
 80010dc:	9800      	ldr	r0, [sp, #0]
 80010de:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80010e0:	185b      	adds	r3, r3, r1
 80010e2:	66c3      	str	r3, [r0, #108]	; 0x6c
 80010e4:	9900      	ldr	r1, [sp, #0]
 80010e6:	6f08      	ldr	r0, [r1, #112]	; 0x70
 80010e8:	4440      	add	r0, r8
 80010ea:	6708      	str	r0, [r1, #112]	; 0x70
 80010ec:	9800      	ldr	r0, [sp, #0]
 80010ee:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80010f0:	1864      	adds	r4, r4, r1
 80010f2:	6744      	str	r4, [r0, #116]	; 0x74
 80010f4:	9900      	ldr	r1, [sp, #0]
 80010f6:	6f88      	ldr	r0, [r1, #120]	; 0x78
 80010f8:	182d      	adds	r5, r5, r0
 80010fa:	678d      	str	r5, [r1, #120]	; 0x78
 80010fc:	b041      	add	sp, #260	; 0x104
 80010fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001102:	bf00      	nop
 8001104:	0800db84 	.word	0x0800db84

08001108 <cmox_aesFast_decrypt>:
 8001108:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800110c:	f100 050c 	add.w	r5, r0, #12
 8001110:	b08c      	sub	sp, #48	; 0x30
 8001112:	680e      	ldr	r6, [r1, #0]
 8001114:	684c      	ldr	r4, [r1, #4]
 8001116:	6842      	ldr	r2, [r0, #4]
 8001118:	68cf      	ldr	r7, [r1, #12]
 800111a:	08d3      	lsrs	r3, r2, #3
 800111c:	08d2      	lsrs	r2, r2, #3
 800111e:	00d2      	lsls	r2, r2, #3
 8001120:	f102 0818 	add.w	r8, r2, #24
 8001124:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 8001128:	1cdb      	adds	r3, r3, #3
 800112a:	682a      	ldr	r2, [r5, #0]
 800112c:	4056      	eors	r6, r2
 800112e:	686a      	ldr	r2, [r5, #4]
 8001130:	ea82 0e04 	eor.w	lr, r2, r4
 8001134:	688c      	ldr	r4, [r1, #8]
 8001136:	68aa      	ldr	r2, [r5, #8]
 8001138:	68e9      	ldr	r1, [r5, #12]
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 8001140:	4054      	eors	r4, r2
 8001142:	404f      	eors	r7, r1
 8001144:	f1a0 0514 	sub.w	r5, r0, #20
 8001148:	f8df 8290 	ldr.w	r8, [pc, #656]	; 80013dc <cmox_aesFast_decrypt+0x2d4>
 800114c:	e056      	b.n	80011fc <cmox_aesFast_decrypt+0xf4>
 800114e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001150:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8001154:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8001158:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 800115c:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8001160:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8001164:	ea4f 2037 	mov.w	r0, r7, ror #8
 8001168:	f858 702b 	ldr.w	r7, [r8, fp, lsl #2]
 800116c:	4070      	eors	r0, r6
 800116e:	ea90 4037 	eors.w	r0, r0, r7, ror #16
 8001172:	ea90 6031 	eors.w	r0, r0, r1, ror #24
 8001176:	ea82 0600 	eor.w	r6, r2, r0
 800117a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800117c:	f858 1020 	ldr.w	r1, [r8, r0, lsl #2]
 8001180:	f858 202e 	ldr.w	r2, [r8, lr, lsl #2]
 8001184:	ea4f 2031 	mov.w	r0, r1, ror #8
 8001188:	ea4f 4132 	mov.w	r1, r2, ror #16
 800118c:	ea4f 6233 	mov.w	r2, r3, ror #24
 8001190:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8001194:	4058      	eors	r0, r3
 8001196:	4048      	eors	r0, r1
 8001198:	ea82 0100 	eor.w	r1, r2, r0
 800119c:	6868      	ldr	r0, [r5, #4]
 800119e:	9b05      	ldr	r3, [sp, #20]
 80011a0:	ea80 0e01 	eor.w	lr, r0, r1
 80011a4:	9908      	ldr	r1, [sp, #32]
 80011a6:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 80011aa:	9907      	ldr	r1, [sp, #28]
 80011ac:	ea4f 2430 	mov.w	r4, r0, ror #8
 80011b0:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 80011b4:	9906      	ldr	r1, [sp, #24]
 80011b6:	f858 2021 	ldr.w	r2, [r8, r1, lsl #2]
 80011ba:	ea4f 6132 	mov.w	r1, r2, ror #24
 80011be:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
 80011c2:	9b01      	ldr	r3, [sp, #4]
 80011c4:	4054      	eors	r4, r2
 80011c6:	ea94 4430 	eors.w	r4, r4, r0, ror #16
 80011ca:	68a8      	ldr	r0, [r5, #8]
 80011cc:	404c      	eors	r4, r1
 80011ce:	9904      	ldr	r1, [sp, #16]
 80011d0:	4044      	eors	r4, r0
 80011d2:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 80011d6:	9903      	ldr	r1, [sp, #12]
 80011d8:	ea4f 2730 	mov.w	r7, r0, ror #8
 80011dc:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 80011e0:	9902      	ldr	r1, [sp, #8]
 80011e2:	f858 2021 	ldr.w	r2, [r8, r1, lsl #2]
 80011e6:	ea4f 6132 	mov.w	r1, r2, ror #24
 80011ea:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
 80011ee:	4057      	eors	r7, r2
 80011f0:	ea97 4730 	eors.w	r7, r7, r0, ror #16
 80011f4:	68e8      	ldr	r0, [r5, #12]
 80011f6:	404f      	eors	r7, r1
 80011f8:	4047      	eors	r7, r0
 80011fa:	3d20      	subs	r5, #32
 80011fc:	0238      	lsls	r0, r7, #8
 80011fe:	0e00      	lsrs	r0, r0, #24
 8001200:	f858 1020 	ldr.w	r1, [r8, r0, lsl #2]
 8001204:	0420      	lsls	r0, r4, #16
 8001206:	ea4f 2231 	mov.w	r2, r1, ror #8
 800120a:	0e00      	lsrs	r0, r0, #24
 800120c:	f858 1020 	ldr.w	r1, [r8, r0, lsl #2]
 8001210:	ea4f 4031 	mov.w	r0, r1, ror #16
 8001214:	fa5f f38e 	uxtb.w	r3, lr
 8001218:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 800121c:	0e33      	lsrs	r3, r6, #24
 800121e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8001222:	405a      	eors	r2, r3
 8001224:	4042      	eors	r2, r0
 8001226:	6928      	ldr	r0, [r5, #16]
 8001228:	ea92 6231 	eors.w	r2, r2, r1, ror #24
 800122c:	0231      	lsls	r1, r6, #8
 800122e:	0e09      	lsrs	r1, r1, #24
 8001230:	4042      	eors	r2, r0
 8001232:	f858 3021 	ldr.w	r3, [r8, r1, lsl #2]
 8001236:	0438      	lsls	r0, r7, #16
 8001238:	ea4f 2133 	mov.w	r1, r3, ror #8
 800123c:	0e00      	lsrs	r0, r0, #24
 800123e:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
 8001242:	ea4f 4033 	mov.w	r0, r3, ror #16
 8001246:	b2e3      	uxtb	r3, r4
 8001248:	f858 b023 	ldr.w	fp, [r8, r3, lsl #2]
 800124c:	ea4f 633b 	mov.w	r3, fp, ror #24
 8001250:	ea4f 6b1e 	mov.w	fp, lr, lsr #24
 8001254:	f858 b02b 	ldr.w	fp, [r8, fp, lsl #2]
 8001258:	ea81 010b 	eor.w	r1, r1, fp
 800125c:	4041      	eors	r1, r0
 800125e:	6968      	ldr	r0, [r5, #20]
 8001260:	4059      	eors	r1, r3
 8001262:	ea4f 230e 	mov.w	r3, lr, lsl #8
 8001266:	4041      	eors	r1, r0
 8001268:	0e1b      	lsrs	r3, r3, #24
 800126a:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800126e:	ea4f 2330 	mov.w	r3, r0, ror #8
 8001272:	0430      	lsls	r0, r6, #16
 8001274:	0e00      	lsrs	r0, r0, #24
 8001276:	f858 b020 	ldr.w	fp, [r8, r0, lsl #2]
 800127a:	ea4f 4b3b 	mov.w	fp, fp, ror #16
 800127e:	f8cd b004 	str.w	fp, [sp, #4]
 8001282:	b2f8      	uxtb	r0, r7
 8001284:	f858 b020 	ldr.w	fp, [r8, r0, lsl #2]
 8001288:	ea4f 603b 	mov.w	r0, fp, ror #24
 800128c:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8001290:	f858 b02b 	ldr.w	fp, [r8, fp, lsl #2]
 8001294:	ea83 030b 	eor.w	r3, r3, fp
 8001298:	f8dd b004 	ldr.w	fp, [sp, #4]
 800129c:	ea8b 0303 	eor.w	r3, fp, r3
 80012a0:	4043      	eors	r3, r0
 80012a2:	0224      	lsls	r4, r4, #8
 80012a4:	69a8      	ldr	r0, [r5, #24]
 80012a6:	0e24      	lsrs	r4, r4, #24
 80012a8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80012ac:	4043      	eors	r3, r0
 80012ae:	ea4f 2034 	mov.w	r0, r4, ror #8
 80012b2:	ea4f 440e 	mov.w	r4, lr, lsl #16
 80012b6:	0e3f      	lsrs	r7, r7, #24
 80012b8:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80012bc:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
 80012c0:	f858 e02e 	ldr.w	lr, [r8, lr, lsl #2]
 80012c4:	b2f6      	uxtb	r6, r6
 80012c6:	f858 4026 	ldr.w	r4, [r8, r6, lsl #2]
 80012ca:	4047      	eors	r7, r0
 80012cc:	ea87 473e 	eor.w	r7, r7, lr, ror #16
 80012d0:	69e8      	ldr	r0, [r5, #28]
 80012d2:	ea97 6734 	eors.w	r7, r7, r4, ror #24
 80012d6:	9c00      	ldr	r4, [sp, #0]
 80012d8:	4047      	eors	r7, r0
 80012da:	0438      	lsls	r0, r7, #16
 80012dc:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 80012e0:	0210      	lsls	r0, r2, #8
 80012e2:	0e00      	lsrs	r0, r0, #24
 80012e4:	1e64      	subs	r4, r4, #1
 80012e6:	9400      	str	r4, [sp, #0]
 80012e8:	0e3e      	lsrs	r6, r7, #24
 80012ea:	040c      	lsls	r4, r1, #16
 80012ec:	9601      	str	r6, [sp, #4]
 80012ee:	0e24      	lsrs	r4, r4, #24
 80012f0:	021e      	lsls	r6, r3, #8
 80012f2:	9403      	str	r4, [sp, #12]
 80012f4:	0e36      	lsrs	r6, r6, #24
 80012f6:	9604      	str	r6, [sp, #16]
 80012f8:	0e1c      	lsrs	r4, r3, #24
 80012fa:	0416      	lsls	r6, r2, #16
 80012fc:	9405      	str	r4, [sp, #20]
 80012fe:	0e36      	lsrs	r6, r6, #24
 8001300:	020c      	lsls	r4, r1, #8
 8001302:	9607      	str	r6, [sp, #28]
 8001304:	0e24      	lsrs	r4, r4, #24
 8001306:	0e16      	lsrs	r6, r2, #24
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	9408      	str	r4, [sp, #32]
 800130c:	9009      	str	r0, [sp, #36]	; 0x24
 800130e:	0e0c      	lsrs	r4, r1, #24
 8001310:	0418      	lsls	r0, r3, #16
 8001312:	0e00      	lsrs	r0, r0, #24
 8001314:	900a      	str	r0, [sp, #40]	; 0x28
 8001316:	9202      	str	r2, [sp, #8]
 8001318:	0238      	lsls	r0, r7, #8
 800131a:	0e00      	lsrs	r0, r0, #24
 800131c:	900b      	str	r0, [sp, #44]	; 0x2c
 800131e:	b2ff      	uxtb	r7, r7
 8001320:	9706      	str	r7, [sp, #24]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	9800      	ldr	r0, [sp, #0]
 8001326:	682a      	ldr	r2, [r5, #0]
 8001328:	2800      	cmp	r0, #0
 800132a:	b2c9      	uxtb	r1, r1
 800132c:	f47f af0f 	bne.w	800114e <cmox_aesFast_decrypt+0x46>
 8001330:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80013e0 <cmox_aesFast_decrypt+0x2d8>
 8001334:	f819 0006 	ldrb.w	r0, [r9, r6]
 8001338:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800133a:	f819 6006 	ldrb.w	r6, [r9, r6]
 800133e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8001342:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001344:	0436      	lsls	r6, r6, #16
 8001346:	ea46 6000 	orr.w	r0, r6, r0, lsl #24
 800134a:	f819 600a 	ldrb.w	r6, [r9, sl]
 800134e:	ea40 2606 	orr.w	r6, r0, r6, lsl #8
 8001352:	f819 0001 	ldrb.w	r0, [r9, r1]
 8001356:	4330      	orrs	r0, r6
 8001358:	4042      	eors	r2, r0
 800135a:	603a      	str	r2, [r7, #0]
 800135c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800135e:	f819 2000 	ldrb.w	r2, [r9, r0]
 8001362:	f819 1004 	ldrb.w	r1, [r9, r4]
 8001366:	f819 000e 	ldrb.w	r0, [r9, lr]
 800136a:	0412      	lsls	r2, r2, #16
 800136c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001370:	f819 1003 	ldrb.w	r1, [r9, r3]
 8001374:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001378:	6868      	ldr	r0, [r5, #4]
 800137a:	430a      	orrs	r2, r1
 800137c:	4042      	eors	r2, r0
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	9905      	ldr	r1, [sp, #20]
 8001382:	f819 0001 	ldrb.w	r0, [r9, r1]
 8001386:	9908      	ldr	r1, [sp, #32]
 8001388:	f819 2001 	ldrb.w	r2, [r9, r1]
 800138c:	9b06      	ldr	r3, [sp, #24]
 800138e:	0412      	lsls	r2, r2, #16
 8001390:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001394:	9807      	ldr	r0, [sp, #28]
 8001396:	f819 1000 	ldrb.w	r1, [r9, r0]
 800139a:	68a8      	ldr	r0, [r5, #8]
 800139c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80013a0:	f819 1003 	ldrb.w	r1, [r9, r3]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	4042      	eors	r2, r0
 80013a8:	60ba      	str	r2, [r7, #8]
 80013aa:	9901      	ldr	r1, [sp, #4]
 80013ac:	f819 0001 	ldrb.w	r0, [r9, r1]
 80013b0:	9904      	ldr	r1, [sp, #16]
 80013b2:	f819 2001 	ldrb.w	r2, [r9, r1]
 80013b6:	9b02      	ldr	r3, [sp, #8]
 80013b8:	0412      	lsls	r2, r2, #16
 80013ba:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80013be:	9803      	ldr	r0, [sp, #12]
 80013c0:	f819 1000 	ldrb.w	r1, [r9, r0]
 80013c4:	f819 0003 	ldrb.w	r0, [r9, r3]
 80013c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80013cc:	68e9      	ldr	r1, [r5, #12]
 80013ce:	4302      	orrs	r2, r0
 80013d0:	404a      	eors	r2, r1
 80013d2:	60fa      	str	r2, [r7, #12]
 80013d4:	b00d      	add	sp, #52	; 0x34
 80013d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013da:	bf00      	nop
 80013dc:	0800f60c 	.word	0x0800f60c
 80013e0:	0800ff0c 	.word	0x0800ff0c

080013e4 <cmox_aesFast_keySchedule_dec>:
 80013e4:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 80013e8:	4615      	mov	r5, r2
 80013ea:	f100 040c 	add.w	r4, r0, #12
 80013ee:	f000 fb71 	bl	8001ad4 <cmox_aesSmall_keySchedule>
 80013f2:	08ed      	lsrs	r5, r5, #3
 80013f4:	1ce8      	adds	r0, r5, #3
 80013f6:	0040      	lsls	r0, r0, #1
 80013f8:	2802      	cmp	r0, #2
 80013fa:	f0c0 808c 	bcc.w	8001516 <cmox_aesFast_keySchedule_dec+0x132>
 80013fe:	006d      	lsls	r5, r5, #1
 8001400:	1d68      	adds	r0, r5, #5
 8001402:	4a46      	ldr	r2, [pc, #280]	; (800151c <cmox_aesFast_keySchedule_dec+0x138>)
 8001404:	f8df 3118 	ldr.w	r3, [pc, #280]	; 8001520 <cmox_aesFast_keySchedule_dec+0x13c>
 8001408:	f854 7f10 	ldr.w	r7, [r4, #16]!
 800140c:	0239      	lsls	r1, r7, #8
 800140e:	0e09      	lsrs	r1, r1, #24
 8001410:	043e      	lsls	r6, r7, #16
 8001412:	f812 c001 	ldrb.w	ip, [r2, r1]
 8001416:	f853 102c 	ldr.w	r1, [r3, ip, lsl #2]
 800141a:	0e36      	lsrs	r6, r6, #24
 800141c:	ea4f 2c31 	mov.w	ip, r1, ror #8
 8001420:	f812 e006 	ldrb.w	lr, [r2, r6]
 8001424:	f853 102e 	ldr.w	r1, [r3, lr, lsl #2]
 8001428:	b2fe      	uxtb	r6, r7
 800142a:	ea4f 4e31 	mov.w	lr, r1, ror #16
 800142e:	5d96      	ldrb	r6, [r2, r6]
 8001430:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8001434:	0e3f      	lsrs	r7, r7, #24
 8001436:	ea4f 6631 	mov.w	r6, r1, ror #24
 800143a:	5dd7      	ldrb	r7, [r2, r7]
 800143c:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8001440:	ea8c 0101 	eor.w	r1, ip, r1
 8001444:	ea8e 0101 	eor.w	r1, lr, r1
 8001448:	4071      	eors	r1, r6
 800144a:	6021      	str	r1, [r4, #0]
 800144c:	6867      	ldr	r7, [r4, #4]
 800144e:	0239      	lsls	r1, r7, #8
 8001450:	0e09      	lsrs	r1, r1, #24
 8001452:	f812 e001 	ldrb.w	lr, [r2, r1]
 8001456:	f853 602e 	ldr.w	r6, [r3, lr, lsl #2]
 800145a:	0439      	lsls	r1, r7, #16
 800145c:	0e09      	lsrs	r1, r1, #24
 800145e:	ea4f 2c36 	mov.w	ip, r6, ror #8
 8001462:	f812 9001 	ldrb.w	r9, [r2, r1]
 8001466:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 800146a:	ea4f 4e36 	mov.w	lr, r6, ror #16
 800146e:	b2fe      	uxtb	r6, r7
 8001470:	0e3f      	lsrs	r7, r7, #24
 8001472:	5dd7      	ldrb	r7, [r2, r7]
 8001474:	f812 9006 	ldrb.w	r9, [r2, r6]
 8001478:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800147c:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 8001480:	ea8c 0101 	eor.w	r1, ip, r1
 8001484:	ea8e 0101 	eor.w	r1, lr, r1
 8001488:	ea91 6136 	eors.w	r1, r1, r6, ror #24
 800148c:	6061      	str	r1, [r4, #4]
 800148e:	68a7      	ldr	r7, [r4, #8]
 8001490:	0239      	lsls	r1, r7, #8
 8001492:	0e09      	lsrs	r1, r1, #24
 8001494:	f812 e001 	ldrb.w	lr, [r2, r1]
 8001498:	f853 602e 	ldr.w	r6, [r3, lr, lsl #2]
 800149c:	0439      	lsls	r1, r7, #16
 800149e:	0e09      	lsrs	r1, r1, #24
 80014a0:	ea4f 2c36 	mov.w	ip, r6, ror #8
 80014a4:	f812 9001 	ldrb.w	r9, [r2, r1]
 80014a8:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 80014ac:	ea4f 4e36 	mov.w	lr, r6, ror #16
 80014b0:	b2fe      	uxtb	r6, r7
 80014b2:	0e3f      	lsrs	r7, r7, #24
 80014b4:	5dd7      	ldrb	r7, [r2, r7]
 80014b6:	f812 9006 	ldrb.w	r9, [r2, r6]
 80014ba:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 80014be:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 80014c2:	ea8c 0101 	eor.w	r1, ip, r1
 80014c6:	ea8e 0101 	eor.w	r1, lr, r1
 80014ca:	ea91 6136 	eors.w	r1, r1, r6, ror #24
 80014ce:	60a1      	str	r1, [r4, #8]
 80014d0:	68e7      	ldr	r7, [r4, #12]
 80014d2:	0239      	lsls	r1, r7, #8
 80014d4:	0e09      	lsrs	r1, r1, #24
 80014d6:	f812 e001 	ldrb.w	lr, [r2, r1]
 80014da:	f853 602e 	ldr.w	r6, [r3, lr, lsl #2]
 80014de:	0439      	lsls	r1, r7, #16
 80014e0:	0e09      	lsrs	r1, r1, #24
 80014e2:	ea4f 2536 	mov.w	r5, r6, ror #8
 80014e6:	f812 e001 	ldrb.w	lr, [r2, r1]
 80014ea:	f853 602e 	ldr.w	r6, [r3, lr, lsl #2]
 80014ee:	b2f9      	uxtb	r1, r7
 80014f0:	0e3f      	lsrs	r7, r7, #24
 80014f2:	f812 c001 	ldrb.w	ip, [r2, r1]
 80014f6:	f853 102c 	ldr.w	r1, [r3, ip, lsl #2]
 80014fa:	5dd7      	ldrb	r7, [r2, r7]
 80014fc:	ea4f 6c31 	mov.w	ip, r1, ror #24
 8001500:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8001504:	404d      	eors	r5, r1
 8001506:	ea85 4536 	eor.w	r5, r5, r6, ror #16
 800150a:	ea8c 0505 	eor.w	r5, ip, r5
 800150e:	1e40      	subs	r0, r0, #1
 8001510:	60e5      	str	r5, [r4, #12]
 8001512:	f47f af79 	bne.w	8001408 <cmox_aesFast_keySchedule_dec+0x24>
 8001516:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 800151a:	bf00      	nop
 800151c:	0800fe0c 	.word	0x0800fe0c
 8001520:	0800f60c 	.word	0x0800f60c

08001524 <cmox_aesFast_encrypt>:
 8001524:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001528:	f100 030c 	add.w	r3, r0, #12
 800152c:	b08c      	sub	sp, #48	; 0x30
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	684c      	ldr	r4, [r1, #4]
 8001532:	688f      	ldr	r7, [r1, #8]
 8001534:	6845      	ldr	r5, [r0, #4]
 8001536:	6808      	ldr	r0, [r1, #0]
 8001538:	4050      	eors	r0, r2
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	4054      	eors	r4, r2
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	4057      	eors	r7, r2
 8001542:	68ca      	ldr	r2, [r1, #12]
 8001544:	68d9      	ldr	r1, [r3, #12]
 8001546:	08ed      	lsrs	r5, r5, #3
 8001548:	1ced      	adds	r5, r5, #3
 800154a:	ea81 0e02 	eor.w	lr, r1, r2
 800154e:	4aa6      	ldr	r2, [pc, #664]	; (80017e8 <cmox_aesFast_encrypt+0x2c4>)
 8001550:	9500      	str	r5, [sp, #0]
 8001552:	4621      	mov	r1, r4
 8001554:	e059      	b.n	800160a <cmox_aesFast_encrypt+0xe6>
 8001556:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001558:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 800155c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8001560:	f852 c02a 	ldr.w	ip, [r2, sl, lsl #2]
 8001564:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001568:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 800156c:	ea4f 2034 	mov.w	r0, r4, ror #8
 8001570:	f852 4028 	ldr.w	r4, [r2, r8, lsl #2]
 8001574:	4060      	eors	r0, r4
 8001576:	ea80 403c 	eor.w	r0, r0, ip, ror #16
 800157a:	ea90 6031 	eors.w	r0, r0, r1, ror #24
 800157e:	6819      	ldr	r1, [r3, #0]
 8001580:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8001584:	685c      	ldr	r4, [r3, #4]
 8001586:	4048      	eors	r0, r1
 8001588:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 800158c:	f852 c02e 	ldr.w	ip, [r2, lr, lsl #2]
 8001590:	f852 e029 	ldr.w	lr, [r2, r9, lsl #2]
 8001594:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8001598:	ea97 2131 	eors.w	r1, r7, r1, ror #8
 800159c:	ea81 413c 	eor.w	r1, r1, ip, ror #16
 80015a0:	ea81 613e 	eor.w	r1, r1, lr, ror #24
 80015a4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80015a8:	9f08      	ldr	r7, [sp, #32]
 80015aa:	f852 c02e 	ldr.w	ip, [r2, lr, lsl #2]
 80015ae:	f8dd e018 	ldr.w	lr, [sp, #24]
 80015b2:	4061      	eors	r1, r4
 80015b4:	f852 4027 	ldr.w	r4, [r2, r7, lsl #2]
 80015b8:	ea4f 2734 	mov.w	r7, r4, ror #8
 80015bc:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 80015c0:	ea4f 6e34 	mov.w	lr, r4, ror #24
 80015c4:	f852 4029 	ldr.w	r4, [r2, r9, lsl #2]
 80015c8:	4067      	eors	r7, r4
 80015ca:	ea87 473c 	eor.w	r7, r7, ip, ror #16
 80015ce:	689c      	ldr	r4, [r3, #8]
 80015d0:	ea8e 0707 	eor.w	r7, lr, r7
 80015d4:	f8dd e010 	ldr.w	lr, [sp, #16]
 80015d8:	4067      	eors	r7, r4
 80015da:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 80015de:	ea4f 2e34 	mov.w	lr, r4, ror #8
 80015e2:	9c03      	ldr	r4, [sp, #12]
 80015e4:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 80015e8:	ea4f 4435 	mov.w	r4, r5, ror #16
 80015ec:	9d02      	ldr	r5, [sp, #8]
 80015ee:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 80015f2:	ea4f 6536 	mov.w	r5, r6, ror #24
 80015f6:	9e01      	ldr	r6, [sp, #4]
 80015f8:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
 80015fc:	ea8e 0606 	eor.w	r6, lr, r6
 8001600:	4074      	eors	r4, r6
 8001602:	4065      	eors	r5, r4
 8001604:	68dc      	ldr	r4, [r3, #12]
 8001606:	ea84 0e05 	eor.w	lr, r4, r5
 800160a:	020d      	lsls	r5, r1, #8
 800160c:	fa5f f88e 	uxtb.w	r8, lr
 8001610:	0e2d      	lsrs	r5, r5, #24
 8001612:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
 8001616:	043c      	lsls	r4, r7, #16
 8001618:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 800161c:	ea4f 2936 	mov.w	r9, r6, ror #8
 8001620:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8001624:	f852 4028 	ldr.w	r4, [r2, r8, lsl #2]
 8001628:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 800162c:	691d      	ldr	r5, [r3, #16]
 800162e:	ea4f 6834 	mov.w	r8, r4, ror #24
 8001632:	f852 402b 	ldr.w	r4, [r2, fp, lsl #2]
 8001636:	ea89 0404 	eor.w	r4, r9, r4
 800163a:	ea84 4436 	eor.w	r4, r4, r6, ror #16
 800163e:	ea88 0404 	eor.w	r4, r8, r4
 8001642:	406c      	eors	r4, r5
 8001644:	023d      	lsls	r5, r7, #8
 8001646:	ea4f 6815 	mov.w	r8, r5, lsr #24
 800164a:	ea4f 450e 	mov.w	r5, lr, lsl #16
 800164e:	ea4f 6c15 	mov.w	ip, r5, lsr #24
 8001652:	f852 a028 	ldr.w	sl, [r2, r8, lsl #2]
 8001656:	f852 502c 	ldr.w	r5, [r2, ip, lsl #2]
 800165a:	ea4f 4c35 	mov.w	ip, r5, ror #16
 800165e:	fa5f f880 	uxtb.w	r8, r0
 8001662:	f852 5028 	ldr.w	r5, [r2, r8, lsl #2]
 8001666:	ea4f 6835 	mov.w	r8, r5, ror #24
 800166a:	ea4f 6b11 	mov.w	fp, r1, lsr #24
 800166e:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 8001672:	695e      	ldr	r6, [r3, #20]
 8001674:	ea85 253a 	eor.w	r5, r5, sl, ror #8
 8001678:	ea8c 0505 	eor.w	r5, ip, r5
 800167c:	ea88 0505 	eor.w	r5, r8, r5
 8001680:	4075      	eors	r5, r6
 8001682:	ea4f 260e 	mov.w	r6, lr, lsl #8
 8001686:	ea4f 6816 	mov.w	r8, r6, lsr #24
 800168a:	f852 b028 	ldr.w	fp, [r2, r8, lsl #2]
 800168e:	0406      	lsls	r6, r0, #16
 8001690:	ea4f 6c16 	mov.w	ip, r6, lsr #24
 8001694:	f852 802c 	ldr.w	r8, [r2, ip, lsl #2]
 8001698:	ea4f 4838 	mov.w	r8, r8, ror #16
 800169c:	f8cd 8004 	str.w	r8, [sp, #4]
 80016a0:	fa5f fc81 	uxtb.w	ip, r1
 80016a4:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 80016a8:	ea4f 6c36 	mov.w	ip, r6, ror #24
 80016ac:	ea4f 6817 	mov.w	r8, r7, lsr #24
 80016b0:	f852 6028 	ldr.w	r6, [r2, r8, lsl #2]
 80016b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80016b8:	ea86 263b 	eor.w	r6, r6, fp, ror #8
 80016bc:	ea88 0606 	eor.w	r6, r8, r6
 80016c0:	ea8c 0606 	eor.w	r6, ip, r6
 80016c4:	0409      	lsls	r1, r1, #16
 80016c6:	f8d3 c018 	ldr.w	ip, [r3, #24]
 80016ca:	0e09      	lsrs	r1, r1, #24
 80016cc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80016d0:	ea8c 0606 	eor.w	r6, ip, r6
 80016d4:	0200      	lsls	r0, r0, #8
 80016d6:	0e00      	lsrs	r0, r0, #24
 80016d8:	ea4f 4c31 	mov.w	ip, r1, ror #16
 80016dc:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 80016e0:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80016e4:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
 80016e8:	b2ff      	uxtb	r7, r7
 80016ea:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 80016ee:	ea91 2030 	eors.w	r0, r1, r0, ror #8
 80016f2:	ea8c 0100 	eor.w	r1, ip, r0
 80016f6:	69d8      	ldr	r0, [r3, #28]
 80016f8:	ea91 6137 	eors.w	r1, r1, r7, ror #24
 80016fc:	9f00      	ldr	r7, [sp, #0]
 80016fe:	4041      	eors	r1, r0
 8001700:	1e7f      	subs	r7, r7, #1
 8001702:	9700      	str	r7, [sp, #0]
 8001704:	0e08      	lsrs	r0, r1, #24
 8001706:	042f      	lsls	r7, r5, #16
 8001708:	9001      	str	r0, [sp, #4]
 800170a:	0e3f      	lsrs	r7, r7, #24
 800170c:	0220      	lsls	r0, r4, #8
 800170e:	9703      	str	r7, [sp, #12]
 8001710:	0e00      	lsrs	r0, r0, #24
 8001712:	9004      	str	r0, [sp, #16]
 8001714:	0e37      	lsrs	r7, r6, #24
 8001716:	0420      	lsls	r0, r4, #16
 8001718:	9705      	str	r7, [sp, #20]
 800171a:	0e00      	lsrs	r0, r0, #24
 800171c:	020f      	lsls	r7, r1, #8
 800171e:	9007      	str	r0, [sp, #28]
 8001720:	0e3f      	lsrs	r7, r7, #24
 8001722:	0408      	lsls	r0, r1, #16
 8001724:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8001728:	0230      	lsls	r0, r6, #8
 800172a:	0e00      	lsrs	r0, r0, #24
 800172c:	9708      	str	r7, [sp, #32]
 800172e:	9009      	str	r0, [sp, #36]	; 0x24
 8001730:	3320      	adds	r3, #32
 8001732:	0430      	lsls	r0, r6, #16
 8001734:	0e00      	lsrs	r0, r0, #24
 8001736:	900a      	str	r0, [sp, #40]	; 0x28
 8001738:	0e2f      	lsrs	r7, r5, #24
 800173a:	0228      	lsls	r0, r5, #8
 800173c:	0e00      	lsrs	r0, r0, #24
 800173e:	900b      	str	r0, [sp, #44]	; 0x2c
 8001740:	ea4f 6814 	mov.w	r8, r4, lsr #24
 8001744:	b2f0      	uxtb	r0, r6
 8001746:	9002      	str	r0, [sp, #8]
 8001748:	fa5f f984 	uxtb.w	r9, r4
 800174c:	b2e8      	uxtb	r0, r5
 800174e:	9006      	str	r0, [sp, #24]
 8001750:	b2c9      	uxtb	r1, r1
 8001752:	9800      	ldr	r0, [sp, #0]
 8001754:	2800      	cmp	r0, #0
 8001756:	f47f aefe 	bne.w	8001556 <cmox_aesFast_encrypt+0x32>
 800175a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800175c:	4c23      	ldr	r4, [pc, #140]	; (80017ec <cmox_aesFast_encrypt+0x2c8>)
 800175e:	5d66      	ldrb	r6, [r4, r5]
 8001760:	f814 0008 	ldrb.w	r0, [r4, r8]
 8001764:	5c61      	ldrb	r1, [r4, r1]
 8001766:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001768:	0436      	lsls	r6, r6, #16
 800176a:	ea46 6600 	orr.w	r6, r6, r0, lsl #24
 800176e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001770:	5c25      	ldrb	r5, [r4, r0]
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
 8001778:	430e      	orrs	r6, r1
 800177a:	4046      	eors	r6, r0
 800177c:	6016      	str	r6, [r2, #0]
 800177e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001780:	5c26      	ldrb	r6, [r4, r0]
 8001782:	5de5      	ldrb	r5, [r4, r7]
 8001784:	f814 1009 	ldrb.w	r1, [r4, r9]
 8001788:	6858      	ldr	r0, [r3, #4]
 800178a:	0436      	lsls	r6, r6, #16
 800178c:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
 8001790:	f814 500e 	ldrb.w	r5, [r4, lr]
 8001794:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
 8001798:	430e      	orrs	r6, r1
 800179a:	4046      	eors	r6, r0
 800179c:	6056      	str	r6, [r2, #4]
 800179e:	9905      	ldr	r1, [sp, #20]
 80017a0:	5c60      	ldrb	r0, [r4, r1]
 80017a2:	9908      	ldr	r1, [sp, #32]
 80017a4:	5c65      	ldrb	r5, [r4, r1]
 80017a6:	9e06      	ldr	r6, [sp, #24]
 80017a8:	042d      	lsls	r5, r5, #16
 80017aa:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
 80017ae:	9807      	ldr	r0, [sp, #28]
 80017b0:	5c21      	ldrb	r1, [r4, r0]
 80017b2:	6898      	ldr	r0, [r3, #8]
 80017b4:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
 80017b8:	5da1      	ldrb	r1, [r4, r6]
 80017ba:	430d      	orrs	r5, r1
 80017bc:	4045      	eors	r5, r0
 80017be:	6095      	str	r5, [r2, #8]
 80017c0:	9901      	ldr	r1, [sp, #4]
 80017c2:	5c60      	ldrb	r0, [r4, r1]
 80017c4:	9904      	ldr	r1, [sp, #16]
 80017c6:	5c65      	ldrb	r5, [r4, r1]
 80017c8:	9e02      	ldr	r6, [sp, #8]
 80017ca:	042d      	lsls	r5, r5, #16
 80017cc:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
 80017d0:	9803      	ldr	r0, [sp, #12]
 80017d2:	5c21      	ldrb	r1, [r4, r0]
 80017d4:	5da0      	ldrb	r0, [r4, r6]
 80017d6:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
 80017da:	68d9      	ldr	r1, [r3, #12]
 80017dc:	4305      	orrs	r5, r0
 80017de:	404d      	eors	r5, r1
 80017e0:	60d5      	str	r5, [r2, #12]
 80017e2:	b00d      	add	sp, #52	; 0x34
 80017e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017e8:	0800fa0c 	.word	0x0800fa0c
 80017ec:	0800fe0c 	.word	0x0800fe0c

080017f0 <cmox_md_updateState_small>:
 80017f0:	2220      	movs	r2, #32
 80017f2:	305c      	adds	r0, #92	; 0x5c
 80017f4:	f00b bb6f 	b.w	800ced6 <__aeabi_memcpy>

080017f8 <cmox_md_copyLastState_small>:
 80017f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fa:	6884      	ldr	r4, [r0, #8]
 80017fc:	08a3      	lsrs	r3, r4, #2
 80017fe:	2200      	movs	r2, #0
 8001800:	f004 0403 	and.w	r4, r4, #3
 8001804:	e007      	b.n	8001816 <cmox_md_copyLastState_small+0x1e>
 8001806:	f100 055c 	add.w	r5, r0, #92	; 0x5c
 800180a:	f855 6022 	ldr.w	r6, [r5, r2, lsl #2]
 800180e:	ba35      	rev	r5, r6
 8001810:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 8001814:	1c52      	adds	r2, r2, #1
 8001816:	429a      	cmp	r2, r3
 8001818:	d3f5      	bcc.n	8001806 <cmox_md_copyLastState_small+0xe>
 800181a:	2200      	movs	r2, #0
 800181c:	e00b      	b.n	8001836 <cmox_md_copyLastState_small+0x3e>
 800181e:	f100 055c 	add.w	r5, r0, #92	; 0x5c
 8001822:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8001826:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
 800182a:	00d5      	lsls	r5, r2, #3
 800182c:	f1c5 0518 	rsb	r5, r5, #24
 8001830:	40ee      	lsrs	r6, r5
 8001832:	55ce      	strb	r6, [r1, r7]
 8001834:	1c52      	adds	r2, r2, #1
 8001836:	42a2      	cmp	r2, r4
 8001838:	d3f1      	bcc.n	800181e <cmox_md_copyLastState_small+0x26>
 800183a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800183c <cmox_md_padMsgLen_small>:
 800183c:	b530      	push	{r4, r5, lr}
 800183e:	68c4      	ldr	r4, [r0, #12]
 8001840:	6903      	ldr	r3, [r0, #16]
 8001842:	2200      	movs	r2, #0
 8001844:	1ae3      	subs	r3, r4, r3
 8001846:	18d5      	adds	r5, r2, r3
 8001848:	5c8c      	ldrb	r4, [r1, r2]
 800184a:	4405      	add	r5, r0
 800184c:	1c52      	adds	r2, r2, #1
 800184e:	2a08      	cmp	r2, #8
 8001850:	772c      	strb	r4, [r5, #28]
 8001852:	d3f8      	bcc.n	8001846 <cmox_md_padMsgLen_small+0xa>
 8001854:	bd30      	pop	{r4, r5, pc}

08001856 <cmox_md_construct>:
 8001856:	6003      	str	r3, [r0, #0]
 8001858:	60c1      	str	r1, [r0, #12]
 800185a:	6102      	str	r2, [r0, #16]
 800185c:	4770      	bx	lr

0800185e <cmox_md_init>:
 800185e:	b538      	push	{r3, r4, r5, lr}
 8001860:	4604      	mov	r4, r0
 8001862:	4615      	mov	r5, r2
 8001864:	2200      	movs	r2, #0
 8001866:	6062      	str	r2, [r4, #4]
 8001868:	6823      	ldr	r3, [r4, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4790      	blx	r2
 800186e:	2000      	movs	r0, #0
 8001870:	6160      	str	r0, [r4, #20]
 8001872:	61a0      	str	r0, [r4, #24]
 8001874:	60a5      	str	r5, [r4, #8]
 8001876:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800187a:	bd32      	pop	{r1, r4, r5, pc}

0800187c <cmox_md_setTagSize>:
 800187c:	6081      	str	r1, [r0, #8]
 800187e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001882:	4770      	bx	lr

08001884 <cmox_md_append>:
 8001884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001888:	4604      	mov	r4, r0
 800188a:	7920      	ldrb	r0, [r4, #4]
 800188c:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8001890:	0745      	lsls	r5, r0, #29
 8001892:	bf48      	it	mi
 8001894:	4824      	ldrmi	r0, [pc, #144]	; (8001928 <cmox_md_append+0xa4>)
 8001896:	d445      	bmi.n	8001924 <cmox_md_append+0xa0>
 8001898:	6966      	ldr	r6, [r4, #20]
 800189a:	461d      	mov	r5, r3
 800189c:	f1a8 0001 	sub.w	r0, r8, #1
 80018a0:	ea00 03d6 	and.w	r3, r0, r6, lsr #3
 80018a4:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 80018a8:	ebb6 0fc5 	cmp.w	r6, r5, lsl #3
 80018ac:	6166      	str	r6, [r4, #20]
 80018ae:	d202      	bcs.n	80018b6 <cmox_md_append+0x32>
 80018b0:	69a6      	ldr	r6, [r4, #24]
 80018b2:	1c76      	adds	r6, r6, #1
 80018b4:	61a6      	str	r6, [r4, #24]
 80018b6:	4617      	mov	r7, r2
 80018b8:	69a6      	ldr	r6, [r4, #24]
 80018ba:	eb06 7655 	add.w	r6, r6, r5, lsr #29
 80018be:	61a6      	str	r6, [r4, #24]
 80018c0:	460e      	mov	r6, r1
 80018c2:	18e9      	adds	r1, r5, r3
 80018c4:	4288      	cmp	r0, r1
 80018c6:	d225      	bcs.n	8001914 <cmox_md_append+0x90>
 80018c8:	eba8 0903 	sub.w	r9, r8, r3
 80018cc:	464a      	mov	r2, r9
 80018ce:	4631      	mov	r1, r6
 80018d0:	18f8      	adds	r0, r7, r3
 80018d2:	f00b fb00 	bl	800ced6 <__aeabi_memcpy>
 80018d6:	6822      	ldr	r2, [r4, #0]
 80018d8:	6813      	ldr	r3, [r2, #0]
 80018da:	4639      	mov	r1, r7
 80018dc:	e00f      	b.n	80018fe <cmox_md_append+0x7a>
 80018de:	4642      	mov	r2, r8
 80018e0:	4638      	mov	r0, r7
 80018e2:	f00b faf8 	bl	800ced6 <__aeabi_memcpy>
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4639      	mov	r1, r7
 80018ec:	4620      	mov	r0, r4
 80018ee:	4790      	blx	r2
 80018f0:	e007      	b.n	8001902 <cmox_md_append+0x7e>
 80018f2:	1831      	adds	r1, r6, r0
 80018f4:	f011 0003 	ands.w	r0, r1, #3
 80018f8:	d1f1      	bne.n	80018de <cmox_md_append+0x5a>
 80018fa:	6822      	ldr	r2, [r4, #0]
 80018fc:	6813      	ldr	r3, [r2, #0]
 80018fe:	4620      	mov	r0, r4
 8001900:	4798      	blx	r3
 8001902:	4648      	mov	r0, r9
 8001904:	eb00 0908 	add.w	r9, r0, r8
 8001908:	f1a9 0101 	sub.w	r1, r9, #1
 800190c:	42a9      	cmp	r1, r5
 800190e:	d3f0      	bcc.n	80018f2 <cmox_md_append+0x6e>
 8001910:	2300      	movs	r3, #0
 8001912:	e000      	b.n	8001916 <cmox_md_append+0x92>
 8001914:	2000      	movs	r0, #0
 8001916:	1a2a      	subs	r2, r5, r0
 8001918:	1831      	adds	r1, r6, r0
 800191a:	18f8      	adds	r0, r7, r3
 800191c:	f00b fadb 	bl	800ced6 <__aeabi_memcpy>
 8001920:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001924:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
 8001928:	00020004 	.word	0x00020004

0800192c <cmox_md_generateTag>:
 800192c:	e92d 4ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001930:	4602      	mov	r2, r0
 8001932:	b085      	sub	sp, #20
 8001934:	68d0      	ldr	r0, [r2, #12]
 8001936:	6913      	ldr	r3, [r2, #16]
 8001938:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8001aa8 <cmox_md_generateTag+0x17c>
 800193c:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8001aac <cmox_md_generateTag+0x180>
 8001940:	eba0 0a03 	sub.w	sl, r0, r3
 8001944:	6850      	ldr	r0, [r2, #4]
 8001946:	f040 0004 	orr.w	r0, r0, #4
 800194a:	6050      	str	r0, [r2, #4]
 800194c:	2700      	movs	r7, #0
 800194e:	a803      	add	r0, sp, #12
 8001950:	9002      	str	r0, [sp, #8]
 8001952:	f10d 0e0c 	add.w	lr, sp, #12
 8001956:	e9d8 3400 	ldrd	r3, r4, [r8]
 800195a:	a803      	add	r0, sp, #12
 800195c:	4d54      	ldr	r5, [pc, #336]	; (8001ab0 <cmox_md_generateTag+0x184>)
 800195e:	e9c0 3400 	strd	r3, r4, [r0]
 8001962:	7828      	ldrb	r0, [r5, #0]
 8001964:	4d53      	ldr	r5, [pc, #332]	; (8001ab4 <cmox_md_generateTag+0x188>)
 8001966:	2800      	cmp	r0, #0
 8001968:	bf0c      	ite	eq
 800196a:	2300      	moveq	r3, #0
 800196c:	2304      	movne	r3, #4
 800196e:	4699      	mov	r9, r3
 8001970:	f85c 3003 	ldr.w	r3, [ip, r3]
 8001974:	f85e 4009 	ldr.w	r4, [lr, r9]
 8001978:	4423      	add	r3, r4
 800197a:	2601      	movs	r6, #1
 800197c:	601d      	str	r5, [r3, #0]
 800197e:	681c      	ldr	r4, [r3, #0]
 8001980:	609e      	str	r6, [r3, #8]
 8001982:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8001986:	9d03      	ldr	r5, [sp, #12]
 8001988:	f8dc 9000 	ldr.w	r9, [ip]
 800198c:	f8de 6004 	ldr.w	r6, [lr, #4]
 8001990:	405d      	eors	r5, r3
 8001992:	4065      	eors	r5, r4
 8001994:	4c48      	ldr	r4, [pc, #288]	; (8001ab8 <cmox_md_generateTag+0x18c>)
 8001996:	4065      	eors	r5, r4
 8001998:	ea89 0606 	eor.w	r6, r9, r6
 800199c:	4c47      	ldr	r4, [pc, #284]	; (8001abc <cmox_md_generateTag+0x190>)
 800199e:	4066      	eors	r6, r4
 80019a0:	1975      	adds	r5, r6, r5
 80019a2:	4c47      	ldr	r4, [pc, #284]	; (8001ac0 <cmox_md_generateTag+0x194>)
 80019a4:	4065      	eors	r5, r4
 80019a6:	e9d8 6b00 	ldrd	r6, fp, [r8]
 80019aa:	ac03      	add	r4, sp, #12
 80019ac:	2800      	cmp	r0, #0
 80019ae:	e9c4 6b00 	strd	r6, fp, [r4]
 80019b2:	bf0e      	itee	eq
 80019b4:	2400      	moveq	r4, #0
 80019b6:	2004      	movne	r0, #4
 80019b8:	2404      	movne	r4, #4
 80019ba:	9e02      	ldr	r6, [sp, #8]
 80019bc:	f85c 0000 	ldr.w	r0, [ip, r0]
 80019c0:	5934      	ldr	r4, [r6, r4]
 80019c2:	1820      	adds	r0, r4, r0
 80019c4:	4c3f      	ldr	r4, [pc, #252]	; (8001ac4 <cmox_md_generateTag+0x198>)
 80019c6:	6004      	str	r4, [r0, #0]
 80019c8:	2601      	movs	r6, #1
 80019ca:	6804      	ldr	r4, [r0, #0]
 80019cc:	6086      	str	r6, [r0, #8]
 80019ce:	9803      	ldr	r0, [sp, #12]
 80019d0:	9e02      	ldr	r6, [sp, #8]
 80019d2:	4043      	eors	r3, r0
 80019d4:	4063      	eors	r3, r4
 80019d6:	4c38      	ldr	r4, [pc, #224]	; (8001ab8 <cmox_md_generateTag+0x18c>)
 80019d8:	6870      	ldr	r0, [r6, #4]
 80019da:	4063      	eors	r3, r4
 80019dc:	ea89 0000 	eor.w	r0, r9, r0
 80019e0:	4c36      	ldr	r4, [pc, #216]	; (8001abc <cmox_md_generateTag+0x190>)
 80019e2:	4060      	eors	r0, r4
 80019e4:	4403      	add	r3, r0
 80019e6:	4838      	ldr	r0, [pc, #224]	; (8001ac8 <cmox_md_generateTag+0x19c>)
 80019e8:	4043      	eors	r3, r0
 80019ea:	0028      	movs	r0, r5
 80019ec:	bf18      	it	ne
 80019ee:	2001      	movne	r0, #1
 80019f0:	1e5b      	subs	r3, r3, #1
 80019f2:	419b      	sbcs	r3, r3
 80019f4:	2f04      	cmp	r7, #4
 80019f6:	bf2c      	ite	cs
 80019f8:	b2c0      	uxtbcs	r0, r0
 80019fa:	0fd8      	lsrcc	r0, r3, #31
 80019fc:	f102 0314 	add.w	r3, r2, #20
 8001a00:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001a04:	f007 0303 	and.w	r3, r7, #3
 8001a08:	f1c3 0303 	rsb	r3, r3, #3
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	40d8      	lsrs	r0, r3
 8001a10:	f80d 0007 	strb.w	r0, [sp, r7]
 8001a14:	1c7f      	adds	r7, r7, #1
 8001a16:	2f08      	cmp	r7, #8
 8001a18:	d39d      	bcc.n	8001956 <cmox_md_generateTag+0x2a>
 8001a1a:	4615      	mov	r5, r2
 8001a1c:	460c      	mov	r4, r1
 8001a1e:	696a      	ldr	r2, [r5, #20]
 8001a20:	69ab      	ldr	r3, [r5, #24]
 8001a22:	68e8      	ldr	r0, [r5, #12]
 8001a24:	08d2      	lsrs	r2, r2, #3
 8001a26:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
 8001a2a:	1e40      	subs	r0, r0, #1
 8001a2c:	ea00 0702 	and.w	r7, r0, r2
 8001a30:	2300      	movs	r3, #0
 8001a32:	4002      	ands	r2, r0
 8001a34:	429b      	cmp	r3, r3
 8001a36:	d80a      	bhi.n	8001a4e <cmox_md_generateTag+0x122>
 8001a38:	4552      	cmp	r2, sl
 8001a3a:	d208      	bcs.n	8001a4e <cmox_md_generateTag+0x122>
 8001a3c:	2080      	movs	r0, #128	; 0x80
 8001a3e:	55e0      	strb	r0, [r4, r7]
 8001a40:	1c7f      	adds	r7, r7, #1
 8001a42:	4557      	cmp	r7, sl
 8001a44:	d216      	bcs.n	8001a74 <cmox_md_generateTag+0x148>
 8001a46:	ebaa 0107 	sub.w	r1, sl, r7
 8001a4a:	19e0      	adds	r0, r4, r7
 8001a4c:	e010      	b.n	8001a70 <cmox_md_generateTag+0x144>
 8001a4e:	2080      	movs	r0, #128	; 0x80
 8001a50:	55e0      	strb	r0, [r4, r7]
 8001a52:	e000      	b.n	8001a56 <cmox_md_generateTag+0x12a>
 8001a54:	55e3      	strb	r3, [r4, r7]
 8001a56:	68e8      	ldr	r0, [r5, #12]
 8001a58:	1c7f      	adds	r7, r7, #1
 8001a5a:	4287      	cmp	r7, r0
 8001a5c:	d3fa      	bcc.n	8001a54 <cmox_md_generateTag+0x128>
 8001a5e:	682a      	ldr	r2, [r5, #0]
 8001a60:	6813      	ldr	r3, [r2, #0]
 8001a62:	4628      	mov	r0, r5
 8001a64:	4798      	blx	r3
 8001a66:	f1ba 0f00 	cmp.w	sl, #0
 8001a6a:	d003      	beq.n	8001a74 <cmox_md_generateTag+0x148>
 8001a6c:	4651      	mov	r1, sl
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f00b fa33 	bl	800ceda <__aeabi_memclr>
 8001a74:	682a      	ldr	r2, [r5, #0]
 8001a76:	9e06      	ldr	r6, [sp, #24]
 8001a78:	9f05      	ldr	r7, [sp, #20]
 8001a7a:	6893      	ldr	r3, [r2, #8]
 8001a7c:	4669      	mov	r1, sp
 8001a7e:	4628      	mov	r0, r5
 8001a80:	4798      	blx	r3
 8001a82:	682a      	ldr	r2, [r5, #0]
 8001a84:	f8d2 9000 	ldr.w	r9, [r2]
 8001a88:	4621      	mov	r1, r4
 8001a8a:	4628      	mov	r0, r5
 8001a8c:	47c8      	blx	r9
 8001a8e:	682b      	ldr	r3, [r5, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	4639      	mov	r1, r7
 8001a94:	4628      	mov	r0, r5
 8001a96:	4790      	blx	r2
 8001a98:	b10e      	cbz	r6, 8001a9e <cmox_md_generateTag+0x172>
 8001a9a:	68a8      	ldr	r0, [r5, #8]
 8001a9c:	6030      	str	r0, [r6, #0]
 8001a9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001aa2:	b007      	add	sp, #28
 8001aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aa8:	0800db74 	.word	0x0800db74
 8001aac:	08001acc 	.word	0x08001acc
 8001ab0:	20000188 	.word	0x20000188
 8001ab4:	9310c55f 	.word	0x9310c55f
 8001ab8:	12008504 	.word	0x12008504
 8001abc:	7a0168fc 	.word	0x7a0168fc
 8001ac0:	ff24f5c0 	.word	0xff24f5c0
 8001ac4:	d433af24 	.word	0xd433af24
 8001ac8:	8b69af26 	.word	0x8b69af26
 8001acc:	0101b004 	.word	0x0101b004
 8001ad0:	45011700 	.word	0x45011700

08001ad4 <cmox_aesSmall_keySchedule>:
 8001ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad8:	f100 050c 	add.w	r5, r0, #12
 8001adc:	2400      	movs	r4, #0
 8001ade:	0892      	lsrs	r2, r2, #2
 8001ae0:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <cmox_aesSmall_keySchedule+0x104>)
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	e005      	b.n	8001af2 <cmox_aesSmall_keySchedule+0x1e>
 8001ae6:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8001aea:	ba36      	rev	r6, r6
 8001aec:	f845 6020 	str.w	r6, [r5, r0, lsl #2]
 8001af0:	1c40      	adds	r0, r0, #1
 8001af2:	4290      	cmp	r0, r2
 8001af4:	d3f7      	bcc.n	8001ae6 <cmox_aesSmall_keySchedule+0x12>
 8001af6:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8001afa:	4f38      	ldr	r7, [pc, #224]	; (8001bdc <cmox_aesSmall_keySchedule+0x108>)
 8001afc:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8001b00:	f8d5 c000 	ldr.w	ip, [r5]
 8001b04:	0406      	lsls	r6, r0, #16
 8001b06:	0201      	lsls	r1, r0, #8
 8001b08:	0e36      	lsrs	r6, r6, #24
 8001b0a:	0e09      	lsrs	r1, r1, #24
 8001b0c:	5dbe      	ldrb	r6, [r7, r6]
 8001b0e:	5c79      	ldrb	r1, [r7, r1]
 8001b10:	0436      	lsls	r6, r6, #16
 8001b12:	ea46 6601 	orr.w	r6, r6, r1, lsl #24
 8001b16:	b2c1      	uxtb	r1, r0
 8001b18:	0e00      	lsrs	r0, r0, #24
 8001b1a:	5c79      	ldrb	r1, [r7, r1]
 8001b1c:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
 8001b20:	5c39      	ldrb	r1, [r7, r0]
 8001b22:	ea41 0006 	orr.w	r0, r1, r6
 8001b26:	4e2e      	ldr	r6, [pc, #184]	; (8001be0 <cmox_aesSmall_keySchedule+0x10c>)
 8001b28:	ea80 010c 	eor.w	r1, r0, ip
 8001b2c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001b30:	4048      	eors	r0, r1
 8001b32:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 8001b36:	1c64      	adds	r4, r4, #1
 8001b38:	2001      	movs	r0, #1
 8001b3a:	1f2e      	subs	r6, r5, #4
 8001b3c:	1881      	adds	r1, r0, r2
 8001b3e:	f856 6021 	ldr.w	r6, [r6, r1, lsl #2]
 8001b42:	f855 c020 	ldr.w	ip, [r5, r0, lsl #2]
 8001b46:	ea8c 0606 	eor.w	r6, ip, r6
 8001b4a:	1c40      	adds	r0, r0, #1
 8001b4c:	f845 6021 	str.w	r6, [r5, r1, lsl #2]
 8001b50:	2804      	cmp	r0, #4
 8001b52:	d3f2      	bcc.n	8001b3a <cmox_aesSmall_keySchedule+0x66>
 8001b54:	2a04      	cmp	r2, #4
 8001b56:	d004      	beq.n	8001b62 <cmox_aesSmall_keySchedule+0x8e>
 8001b58:	2a06      	cmp	r2, #6
 8001b5a:	d00b      	beq.n	8001b74 <cmox_aesSmall_keySchedule+0xa0>
 8001b5c:	2a08      	cmp	r2, #8
 8001b5e:	d014      	beq.n	8001b8a <cmox_aesSmall_keySchedule+0xb6>
 8001b60:	e037      	b.n	8001bd2 <cmox_aesSmall_keySchedule+0xfe>
 8001b62:	2c0a      	cmp	r4, #10
 8001b64:	d204      	bcs.n	8001b70 <cmox_aesSmall_keySchedule+0x9c>
 8001b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6a:	d001      	beq.n	8001b70 <cmox_aesSmall_keySchedule+0x9c>
 8001b6c:	4645      	mov	r5, r8
 8001b6e:	e7c2      	b.n	8001af6 <cmox_aesSmall_keySchedule+0x22>
 8001b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b74:	2c07      	cmp	r4, #7
 8001b76:	d8fb      	bhi.n	8001b70 <cmox_aesSmall_keySchedule+0x9c>
 8001b78:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8001b7a:	6928      	ldr	r0, [r5, #16]
 8001b7c:	4047      	eors	r7, r0
 8001b7e:	62af      	str	r7, [r5, #40]	; 0x28
 8001b80:	6968      	ldr	r0, [r5, #20]
 8001b82:	ea80 0107 	eor.w	r1, r0, r7
 8001b86:	62e9      	str	r1, [r5, #44]	; 0x2c
 8001b88:	e7ed      	b.n	8001b66 <cmox_aesSmall_keySchedule+0x92>
 8001b8a:	2c07      	cmp	r4, #7
 8001b8c:	d2f0      	bcs.n	8001b70 <cmox_aesSmall_keySchedule+0x9c>
 8001b8e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001b90:	6929      	ldr	r1, [r5, #16]
 8001b92:	0e06      	lsrs	r6, r0, #24
 8001b94:	f817 e006 	ldrb.w	lr, [r7, r6]
 8001b98:	0206      	lsls	r6, r0, #8
 8001b9a:	0e36      	lsrs	r6, r6, #24
 8001b9c:	5dbe      	ldrb	r6, [r7, r6]
 8001b9e:	0436      	lsls	r6, r6, #16
 8001ba0:	ea46 6c0e 	orr.w	ip, r6, lr, lsl #24
 8001ba4:	0406      	lsls	r6, r0, #16
 8001ba6:	ea4f 6e16 	mov.w	lr, r6, lsr #24
 8001baa:	b2c0      	uxtb	r0, r0
 8001bac:	f817 600e 	ldrb.w	r6, [r7, lr]
 8001bb0:	5c38      	ldrb	r0, [r7, r0]
 8001bb2:	ea4c 2606 	orr.w	r6, ip, r6, lsl #8
 8001bb6:	4330      	orrs	r0, r6
 8001bb8:	4041      	eors	r1, r0
 8001bba:	6329      	str	r1, [r5, #48]	; 0x30
 8001bbc:	2005      	movs	r0, #5
 8001bbe:	eb05 0180 	add.w	r1, r5, r0, lsl #2
 8001bc2:	69cf      	ldr	r7, [r1, #28]
 8001bc4:	680e      	ldr	r6, [r1, #0]
 8001bc6:	1c40      	adds	r0, r0, #1
 8001bc8:	4077      	eors	r7, r6
 8001bca:	2807      	cmp	r0, #7
 8001bcc:	620f      	str	r7, [r1, #32]
 8001bce:	d9f6      	bls.n	8001bbe <cmox_aesSmall_keySchedule+0xea>
 8001bd0:	e7c9      	b.n	8001b66 <cmox_aesSmall_keySchedule+0x92>
 8001bd2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001bd6:	e7c9      	b.n	8001b6c <cmox_aesSmall_keySchedule+0x98>
 8001bd8:	00010004 	.word	0x00010004
 8001bdc:	0800fe0c 	.word	0x0800fe0c
 8001be0:	0800dcac 	.word	0x0800dcac

08001be4 <__aeabi_memset>:
 8001be4:	b470      	push	{r4, r5, r6}
 8001be6:	0784      	lsls	r4, r0, #30
 8001be8:	d046      	beq.n	8001c78 <__aeabi_memset+0x94>
 8001bea:	1e4c      	subs	r4, r1, #1
 8001bec:	2900      	cmp	r1, #0
 8001bee:	d041      	beq.n	8001c74 <__aeabi_memset+0x90>
 8001bf0:	b2d5      	uxtb	r5, r2
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	e002      	b.n	8001bfc <__aeabi_memset+0x18>
 8001bf6:	1e61      	subs	r1, r4, #1
 8001bf8:	b3e4      	cbz	r4, 8001c74 <__aeabi_memset+0x90>
 8001bfa:	460c      	mov	r4, r1
 8001bfc:	f803 5b01 	strb.w	r5, [r3], #1
 8001c00:	0799      	lsls	r1, r3, #30
 8001c02:	d1f8      	bne.n	8001bf6 <__aeabi_memset+0x12>
 8001c04:	2c03      	cmp	r4, #3
 8001c06:	d92e      	bls.n	8001c66 <__aeabi_memset+0x82>
 8001c08:	b2d5      	uxtb	r5, r2
 8001c0a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001c0e:	2c0f      	cmp	r4, #15
 8001c10:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001c14:	d919      	bls.n	8001c4a <__aeabi_memset+0x66>
 8001c16:	4626      	mov	r6, r4
 8001c18:	f103 0110 	add.w	r1, r3, #16
 8001c1c:	3e10      	subs	r6, #16
 8001c1e:	2e0f      	cmp	r6, #15
 8001c20:	f841 5c10 	str.w	r5, [r1, #-16]
 8001c24:	f841 5c0c 	str.w	r5, [r1, #-12]
 8001c28:	f841 5c08 	str.w	r5, [r1, #-8]
 8001c2c:	f841 5c04 	str.w	r5, [r1, #-4]
 8001c30:	f101 0110 	add.w	r1, r1, #16
 8001c34:	d8f2      	bhi.n	8001c1c <__aeabi_memset+0x38>
 8001c36:	f1a4 0110 	sub.w	r1, r4, #16
 8001c3a:	f021 010f 	bic.w	r1, r1, #15
 8001c3e:	f004 040f 	and.w	r4, r4, #15
 8001c42:	3110      	adds	r1, #16
 8001c44:	2c03      	cmp	r4, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	d90d      	bls.n	8001c66 <__aeabi_memset+0x82>
 8001c4a:	461e      	mov	r6, r3
 8001c4c:	4621      	mov	r1, r4
 8001c4e:	3904      	subs	r1, #4
 8001c50:	2903      	cmp	r1, #3
 8001c52:	f846 5b04 	str.w	r5, [r6], #4
 8001c56:	d8fa      	bhi.n	8001c4e <__aeabi_memset+0x6a>
 8001c58:	1f21      	subs	r1, r4, #4
 8001c5a:	f021 0103 	bic.w	r1, r1, #3
 8001c5e:	3104      	adds	r1, #4
 8001c60:	440b      	add	r3, r1
 8001c62:	f004 0403 	and.w	r4, r4, #3
 8001c66:	b12c      	cbz	r4, 8001c74 <__aeabi_memset+0x90>
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	441c      	add	r4, r3
 8001c6c:	f803 2b01 	strb.w	r2, [r3], #1
 8001c70:	42a3      	cmp	r3, r4
 8001c72:	d1fb      	bne.n	8001c6c <__aeabi_memset+0x88>
 8001c74:	bc70      	pop	{r4, r5, r6}
 8001c76:	4770      	bx	lr
 8001c78:	460c      	mov	r4, r1
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	e7c2      	b.n	8001c04 <__aeabi_memset+0x20>
	...

08001c80 <memchr>:
 8001c80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001c84:	2a10      	cmp	r2, #16
 8001c86:	db2b      	blt.n	8001ce0 <memchr+0x60>
 8001c88:	f010 0f07 	tst.w	r0, #7
 8001c8c:	d008      	beq.n	8001ca0 <memchr+0x20>
 8001c8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001c92:	3a01      	subs	r2, #1
 8001c94:	428b      	cmp	r3, r1
 8001c96:	d02d      	beq.n	8001cf4 <memchr+0x74>
 8001c98:	f010 0f07 	tst.w	r0, #7
 8001c9c:	b342      	cbz	r2, 8001cf0 <memchr+0x70>
 8001c9e:	d1f6      	bne.n	8001c8e <memchr+0xe>
 8001ca0:	b4f0      	push	{r4, r5, r6, r7}
 8001ca2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001ca6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8001caa:	f022 0407 	bic.w	r4, r2, #7
 8001cae:	f07f 0700 	mvns.w	r7, #0
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001cb8:	3c08      	subs	r4, #8
 8001cba:	ea85 0501 	eor.w	r5, r5, r1
 8001cbe:	ea86 0601 	eor.w	r6, r6, r1
 8001cc2:	fa85 f547 	uadd8	r5, r5, r7
 8001cc6:	faa3 f587 	sel	r5, r3, r7
 8001cca:	fa86 f647 	uadd8	r6, r6, r7
 8001cce:	faa5 f687 	sel	r6, r5, r7
 8001cd2:	b98e      	cbnz	r6, 8001cf8 <memchr+0x78>
 8001cd4:	d1ee      	bne.n	8001cb4 <memchr+0x34>
 8001cd6:	bcf0      	pop	{r4, r5, r6, r7}
 8001cd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001cdc:	f002 0207 	and.w	r2, r2, #7
 8001ce0:	b132      	cbz	r2, 8001cf0 <memchr+0x70>
 8001ce2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001ce6:	3a01      	subs	r2, #1
 8001ce8:	ea83 0301 	eor.w	r3, r3, r1
 8001cec:	b113      	cbz	r3, 8001cf4 <memchr+0x74>
 8001cee:	d1f8      	bne.n	8001ce2 <memchr+0x62>
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	4770      	bx	lr
 8001cf4:	3801      	subs	r0, #1
 8001cf6:	4770      	bx	lr
 8001cf8:	2d00      	cmp	r5, #0
 8001cfa:	bf06      	itte	eq
 8001cfc:	4635      	moveq	r5, r6
 8001cfe:	3803      	subeq	r0, #3
 8001d00:	3807      	subne	r0, #7
 8001d02:	f015 0f01 	tst.w	r5, #1
 8001d06:	d107      	bne.n	8001d18 <memchr+0x98>
 8001d08:	3001      	adds	r0, #1
 8001d0a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8001d0e:	bf02      	ittt	eq
 8001d10:	3001      	addeq	r0, #1
 8001d12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001d16:	3001      	addeq	r0, #1
 8001d18:	bcf0      	pop	{r4, r5, r6, r7}
 8001d1a:	3801      	subs	r0, #1
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop

08001d20 <__aeabi_uldivmod>:
 8001d20:	b953      	cbnz	r3, 8001d38 <__aeabi_uldivmod+0x18>
 8001d22:	b94a      	cbnz	r2, 8001d38 <__aeabi_uldivmod+0x18>
 8001d24:	2900      	cmp	r1, #0
 8001d26:	bf08      	it	eq
 8001d28:	2800      	cmpeq	r0, #0
 8001d2a:	bf1c      	itt	ne
 8001d2c:	f04f 31ff 	movne.w	r1, #4294967295
 8001d30:	f04f 30ff 	movne.w	r0, #4294967295
 8001d34:	f000 b970 	b.w	8002018 <__aeabi_idiv0>
 8001d38:	f1ad 0c08 	sub.w	ip, sp, #8
 8001d3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001d40:	f000 f806 	bl	8001d50 <__udivmoddi4>
 8001d44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001d48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001d4c:	b004      	add	sp, #16
 8001d4e:	4770      	bx	lr

08001d50 <__udivmoddi4>:
 8001d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d54:	9e08      	ldr	r6, [sp, #32]
 8001d56:	460d      	mov	r5, r1
 8001d58:	4604      	mov	r4, r0
 8001d5a:	460f      	mov	r7, r1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d14a      	bne.n	8001df6 <__udivmoddi4+0xa6>
 8001d60:	428a      	cmp	r2, r1
 8001d62:	4694      	mov	ip, r2
 8001d64:	d965      	bls.n	8001e32 <__udivmoddi4+0xe2>
 8001d66:	fab2 f382 	clz	r3, r2
 8001d6a:	b143      	cbz	r3, 8001d7e <__udivmoddi4+0x2e>
 8001d6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001d70:	f1c3 0220 	rsb	r2, r3, #32
 8001d74:	409f      	lsls	r7, r3
 8001d76:	fa20 f202 	lsr.w	r2, r0, r2
 8001d7a:	4317      	orrs	r7, r2
 8001d7c:	409c      	lsls	r4, r3
 8001d7e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001d82:	fa1f f58c 	uxth.w	r5, ip
 8001d86:	fbb7 f1fe 	udiv	r1, r7, lr
 8001d8a:	0c22      	lsrs	r2, r4, #16
 8001d8c:	fb0e 7711 	mls	r7, lr, r1, r7
 8001d90:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001d94:	fb01 f005 	mul.w	r0, r1, r5
 8001d98:	4290      	cmp	r0, r2
 8001d9a:	d90a      	bls.n	8001db2 <__udivmoddi4+0x62>
 8001d9c:	eb1c 0202 	adds.w	r2, ip, r2
 8001da0:	f101 37ff 	add.w	r7, r1, #4294967295
 8001da4:	f080 811c 	bcs.w	8001fe0 <__udivmoddi4+0x290>
 8001da8:	4290      	cmp	r0, r2
 8001daa:	f240 8119 	bls.w	8001fe0 <__udivmoddi4+0x290>
 8001dae:	3902      	subs	r1, #2
 8001db0:	4462      	add	r2, ip
 8001db2:	1a12      	subs	r2, r2, r0
 8001db4:	b2a4      	uxth	r4, r4
 8001db6:	fbb2 f0fe 	udiv	r0, r2, lr
 8001dba:	fb0e 2210 	mls	r2, lr, r0, r2
 8001dbe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001dc2:	fb00 f505 	mul.w	r5, r0, r5
 8001dc6:	42a5      	cmp	r5, r4
 8001dc8:	d90a      	bls.n	8001de0 <__udivmoddi4+0x90>
 8001dca:	eb1c 0404 	adds.w	r4, ip, r4
 8001dce:	f100 32ff 	add.w	r2, r0, #4294967295
 8001dd2:	f080 8107 	bcs.w	8001fe4 <__udivmoddi4+0x294>
 8001dd6:	42a5      	cmp	r5, r4
 8001dd8:	f240 8104 	bls.w	8001fe4 <__udivmoddi4+0x294>
 8001ddc:	4464      	add	r4, ip
 8001dde:	3802      	subs	r0, #2
 8001de0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001de4:	1b64      	subs	r4, r4, r5
 8001de6:	2100      	movs	r1, #0
 8001de8:	b11e      	cbz	r6, 8001df2 <__udivmoddi4+0xa2>
 8001dea:	40dc      	lsrs	r4, r3
 8001dec:	2300      	movs	r3, #0
 8001dee:	e9c6 4300 	strd	r4, r3, [r6]
 8001df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001df6:	428b      	cmp	r3, r1
 8001df8:	d908      	bls.n	8001e0c <__udivmoddi4+0xbc>
 8001dfa:	2e00      	cmp	r6, #0
 8001dfc:	f000 80ed 	beq.w	8001fda <__udivmoddi4+0x28a>
 8001e00:	2100      	movs	r1, #0
 8001e02:	e9c6 0500 	strd	r0, r5, [r6]
 8001e06:	4608      	mov	r0, r1
 8001e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e0c:	fab3 f183 	clz	r1, r3
 8001e10:	2900      	cmp	r1, #0
 8001e12:	d149      	bne.n	8001ea8 <__udivmoddi4+0x158>
 8001e14:	42ab      	cmp	r3, r5
 8001e16:	d302      	bcc.n	8001e1e <__udivmoddi4+0xce>
 8001e18:	4282      	cmp	r2, r0
 8001e1a:	f200 80f8 	bhi.w	800200e <__udivmoddi4+0x2be>
 8001e1e:	1a84      	subs	r4, r0, r2
 8001e20:	eb65 0203 	sbc.w	r2, r5, r3
 8001e24:	2001      	movs	r0, #1
 8001e26:	4617      	mov	r7, r2
 8001e28:	2e00      	cmp	r6, #0
 8001e2a:	d0e2      	beq.n	8001df2 <__udivmoddi4+0xa2>
 8001e2c:	e9c6 4700 	strd	r4, r7, [r6]
 8001e30:	e7df      	b.n	8001df2 <__udivmoddi4+0xa2>
 8001e32:	b902      	cbnz	r2, 8001e36 <__udivmoddi4+0xe6>
 8001e34:	deff      	udf	#255	; 0xff
 8001e36:	fab2 f382 	clz	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f040 8090 	bne.w	8001f60 <__udivmoddi4+0x210>
 8001e40:	1a8a      	subs	r2, r1, r2
 8001e42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001e46:	fa1f fe8c 	uxth.w	lr, ip
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	fbb2 f5f7 	udiv	r5, r2, r7
 8001e50:	fb07 2015 	mls	r0, r7, r5, r2
 8001e54:	0c22      	lsrs	r2, r4, #16
 8001e56:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001e5a:	fb0e f005 	mul.w	r0, lr, r5
 8001e5e:	4290      	cmp	r0, r2
 8001e60:	d908      	bls.n	8001e74 <__udivmoddi4+0x124>
 8001e62:	eb1c 0202 	adds.w	r2, ip, r2
 8001e66:	f105 38ff 	add.w	r8, r5, #4294967295
 8001e6a:	d202      	bcs.n	8001e72 <__udivmoddi4+0x122>
 8001e6c:	4290      	cmp	r0, r2
 8001e6e:	f200 80cb 	bhi.w	8002008 <__udivmoddi4+0x2b8>
 8001e72:	4645      	mov	r5, r8
 8001e74:	1a12      	subs	r2, r2, r0
 8001e76:	b2a4      	uxth	r4, r4
 8001e78:	fbb2 f0f7 	udiv	r0, r2, r7
 8001e7c:	fb07 2210 	mls	r2, r7, r0, r2
 8001e80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001e84:	fb0e fe00 	mul.w	lr, lr, r0
 8001e88:	45a6      	cmp	lr, r4
 8001e8a:	d908      	bls.n	8001e9e <__udivmoddi4+0x14e>
 8001e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8001e90:	f100 32ff 	add.w	r2, r0, #4294967295
 8001e94:	d202      	bcs.n	8001e9c <__udivmoddi4+0x14c>
 8001e96:	45a6      	cmp	lr, r4
 8001e98:	f200 80bb 	bhi.w	8002012 <__udivmoddi4+0x2c2>
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	eba4 040e 	sub.w	r4, r4, lr
 8001ea2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001ea6:	e79f      	b.n	8001de8 <__udivmoddi4+0x98>
 8001ea8:	f1c1 0720 	rsb	r7, r1, #32
 8001eac:	408b      	lsls	r3, r1
 8001eae:	fa22 fc07 	lsr.w	ip, r2, r7
 8001eb2:	ea4c 0c03 	orr.w	ip, ip, r3
 8001eb6:	fa05 f401 	lsl.w	r4, r5, r1
 8001eba:	fa20 f307 	lsr.w	r3, r0, r7
 8001ebe:	40fd      	lsrs	r5, r7
 8001ec0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001ec4:	4323      	orrs	r3, r4
 8001ec6:	fbb5 f8f9 	udiv	r8, r5, r9
 8001eca:	fa1f fe8c 	uxth.w	lr, ip
 8001ece:	fb09 5518 	mls	r5, r9, r8, r5
 8001ed2:	0c1c      	lsrs	r4, r3, #16
 8001ed4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001ed8:	fb08 f50e 	mul.w	r5, r8, lr
 8001edc:	42a5      	cmp	r5, r4
 8001ede:	fa02 f201 	lsl.w	r2, r2, r1
 8001ee2:	fa00 f001 	lsl.w	r0, r0, r1
 8001ee6:	d90b      	bls.n	8001f00 <__udivmoddi4+0x1b0>
 8001ee8:	eb1c 0404 	adds.w	r4, ip, r4
 8001eec:	f108 3aff 	add.w	sl, r8, #4294967295
 8001ef0:	f080 8088 	bcs.w	8002004 <__udivmoddi4+0x2b4>
 8001ef4:	42a5      	cmp	r5, r4
 8001ef6:	f240 8085 	bls.w	8002004 <__udivmoddi4+0x2b4>
 8001efa:	f1a8 0802 	sub.w	r8, r8, #2
 8001efe:	4464      	add	r4, ip
 8001f00:	1b64      	subs	r4, r4, r5
 8001f02:	b29d      	uxth	r5, r3
 8001f04:	fbb4 f3f9 	udiv	r3, r4, r9
 8001f08:	fb09 4413 	mls	r4, r9, r3, r4
 8001f0c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001f10:	fb03 fe0e 	mul.w	lr, r3, lr
 8001f14:	45a6      	cmp	lr, r4
 8001f16:	d908      	bls.n	8001f2a <__udivmoddi4+0x1da>
 8001f18:	eb1c 0404 	adds.w	r4, ip, r4
 8001f1c:	f103 35ff 	add.w	r5, r3, #4294967295
 8001f20:	d26c      	bcs.n	8001ffc <__udivmoddi4+0x2ac>
 8001f22:	45a6      	cmp	lr, r4
 8001f24:	d96a      	bls.n	8001ffc <__udivmoddi4+0x2ac>
 8001f26:	3b02      	subs	r3, #2
 8001f28:	4464      	add	r4, ip
 8001f2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001f2e:	fba3 9502 	umull	r9, r5, r3, r2
 8001f32:	eba4 040e 	sub.w	r4, r4, lr
 8001f36:	42ac      	cmp	r4, r5
 8001f38:	46c8      	mov	r8, r9
 8001f3a:	46ae      	mov	lr, r5
 8001f3c:	d356      	bcc.n	8001fec <__udivmoddi4+0x29c>
 8001f3e:	d053      	beq.n	8001fe8 <__udivmoddi4+0x298>
 8001f40:	b156      	cbz	r6, 8001f58 <__udivmoddi4+0x208>
 8001f42:	ebb0 0208 	subs.w	r2, r0, r8
 8001f46:	eb64 040e 	sbc.w	r4, r4, lr
 8001f4a:	fa04 f707 	lsl.w	r7, r4, r7
 8001f4e:	40ca      	lsrs	r2, r1
 8001f50:	40cc      	lsrs	r4, r1
 8001f52:	4317      	orrs	r7, r2
 8001f54:	e9c6 7400 	strd	r7, r4, [r6]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f60:	f1c3 0120 	rsb	r1, r3, #32
 8001f64:	fa02 fc03 	lsl.w	ip, r2, r3
 8001f68:	fa20 f201 	lsr.w	r2, r0, r1
 8001f6c:	fa25 f101 	lsr.w	r1, r5, r1
 8001f70:	409d      	lsls	r5, r3
 8001f72:	432a      	orrs	r2, r5
 8001f74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001f78:	fa1f fe8c 	uxth.w	lr, ip
 8001f7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001f80:	fb07 1510 	mls	r5, r7, r0, r1
 8001f84:	0c11      	lsrs	r1, r2, #16
 8001f86:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001f8a:	fb00 f50e 	mul.w	r5, r0, lr
 8001f8e:	428d      	cmp	r5, r1
 8001f90:	fa04 f403 	lsl.w	r4, r4, r3
 8001f94:	d908      	bls.n	8001fa8 <__udivmoddi4+0x258>
 8001f96:	eb1c 0101 	adds.w	r1, ip, r1
 8001f9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8001f9e:	d22f      	bcs.n	8002000 <__udivmoddi4+0x2b0>
 8001fa0:	428d      	cmp	r5, r1
 8001fa2:	d92d      	bls.n	8002000 <__udivmoddi4+0x2b0>
 8001fa4:	3802      	subs	r0, #2
 8001fa6:	4461      	add	r1, ip
 8001fa8:	1b49      	subs	r1, r1, r5
 8001faa:	b292      	uxth	r2, r2
 8001fac:	fbb1 f5f7 	udiv	r5, r1, r7
 8001fb0:	fb07 1115 	mls	r1, r7, r5, r1
 8001fb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001fb8:	fb05 f10e 	mul.w	r1, r5, lr
 8001fbc:	4291      	cmp	r1, r2
 8001fbe:	d908      	bls.n	8001fd2 <__udivmoddi4+0x282>
 8001fc0:	eb1c 0202 	adds.w	r2, ip, r2
 8001fc4:	f105 38ff 	add.w	r8, r5, #4294967295
 8001fc8:	d216      	bcs.n	8001ff8 <__udivmoddi4+0x2a8>
 8001fca:	4291      	cmp	r1, r2
 8001fcc:	d914      	bls.n	8001ff8 <__udivmoddi4+0x2a8>
 8001fce:	3d02      	subs	r5, #2
 8001fd0:	4462      	add	r2, ip
 8001fd2:	1a52      	subs	r2, r2, r1
 8001fd4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001fd8:	e738      	b.n	8001e4c <__udivmoddi4+0xfc>
 8001fda:	4631      	mov	r1, r6
 8001fdc:	4630      	mov	r0, r6
 8001fde:	e708      	b.n	8001df2 <__udivmoddi4+0xa2>
 8001fe0:	4639      	mov	r1, r7
 8001fe2:	e6e6      	b.n	8001db2 <__udivmoddi4+0x62>
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	e6fb      	b.n	8001de0 <__udivmoddi4+0x90>
 8001fe8:	4548      	cmp	r0, r9
 8001fea:	d2a9      	bcs.n	8001f40 <__udivmoddi4+0x1f0>
 8001fec:	ebb9 0802 	subs.w	r8, r9, r2
 8001ff0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	e7a3      	b.n	8001f40 <__udivmoddi4+0x1f0>
 8001ff8:	4645      	mov	r5, r8
 8001ffa:	e7ea      	b.n	8001fd2 <__udivmoddi4+0x282>
 8001ffc:	462b      	mov	r3, r5
 8001ffe:	e794      	b.n	8001f2a <__udivmoddi4+0x1da>
 8002000:	4640      	mov	r0, r8
 8002002:	e7d1      	b.n	8001fa8 <__udivmoddi4+0x258>
 8002004:	46d0      	mov	r8, sl
 8002006:	e77b      	b.n	8001f00 <__udivmoddi4+0x1b0>
 8002008:	3d02      	subs	r5, #2
 800200a:	4462      	add	r2, ip
 800200c:	e732      	b.n	8001e74 <__udivmoddi4+0x124>
 800200e:	4608      	mov	r0, r1
 8002010:	e70a      	b.n	8001e28 <__udivmoddi4+0xd8>
 8002012:	4464      	add	r4, ip
 8002014:	3802      	subs	r0, #2
 8002016:	e742      	b.n	8001e9e <__udivmoddi4+0x14e>

08002018 <__aeabi_idiv0>:
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop

0800201c <MY_FLASH_EraseSector>:
static uint8_t MY_SectorNum;

//functions definitions
//1. Erase Sector
static void MY_FLASH_EraseSector(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8002020:	f002 fece 	bl	8004dc0 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(MY_SectorNum, FLASH_VOLTAGE_RANGE_3);
 8002024:	4b04      	ldr	r3, [pc, #16]	; (8002038 <MY_FLASH_EraseSector+0x1c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2102      	movs	r1, #2
 800202a:	4618      	mov	r0, r3
 800202c:	f003 f82a 	bl	8005084 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8002030:	f002 fee8 	bl	8004e04 <HAL_FLASH_Lock>
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000190 	.word	0x20000190

0800203c <MY_FLASH_SetSectorAddrs>:

//2. Set Sector Adress
void MY_FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
	MY_SectorNum = sector;
 8002048:	4a05      	ldr	r2, [pc, #20]	; (8002060 <MY_FLASH_SetSectorAddrs+0x24>)
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	7013      	strb	r3, [r2, #0]
	MY_SectorAddrs = addrs;
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <MY_FLASH_SetSectorAddrs+0x28>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	20000190 	.word	0x20000190
 8002064:	2000018c 	.word	0x2000018c

08002068 <MY_FLASH_WriteN>:

//3. Write Flash
void MY_FLASH_WriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8002068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800206c:	b088      	sub	sp, #32
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 8002078:	4b37      	ldr	r3, [pc, #220]	; (8002158 <MY_FLASH_WriteN+0xf0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	61fb      	str	r3, [r7, #28]
	
	//Erase sector before write
	MY_FLASH_EraseSector();
 8002082:	f7ff ffcb 	bl	800201c <MY_FLASH_EraseSector>
	
	//Unlock Flash
	HAL_FLASH_Unlock();
 8002086:	f002 fe9b 	bl	8004dc0 <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d03f      	beq.n	8002110 <MY_FLASH_WriteN+0xa8>
 8002090:	2b02      	cmp	r3, #2
 8002092:	dc59      	bgt.n	8002148 <MY_FLASH_WriteN+0xe0>
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <MY_FLASH_WriteN+0x36>
 8002098:	2b01      	cmp	r3, #1
 800209a:	d01c      	beq.n	80020d6 <MY_FLASH_WriteN+0x6e>
 800209c:	e054      	b.n	8002148 <MY_FLASH_WriteN+0xe0>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	e013      	b.n	80020cc <MY_FLASH_WriteN+0x64>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	4413      	add	r3, r2
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2200      	movs	r2, #0
 80020b0:	469a      	mov	sl, r3
 80020b2:	4693      	mov	fp, r2
 80020b4:	4652      	mov	r2, sl
 80020b6:	465b      	mov	r3, fp
 80020b8:	69f9      	ldr	r1, [r7, #28]
 80020ba:	2000      	movs	r0, #0
 80020bc:	f002 fe2c 	bl	8004d18 <HAL_FLASH_Program>
					flashAddress++;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	3301      	adds	r3, #1
 80020c4:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	3301      	adds	r3, #1
 80020ca:	61bb      	str	r3, [r7, #24]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d3e7      	bcc.n	80020a4 <MY_FLASH_WriteN+0x3c>
				}
			break;
 80020d4:	e038      	b.n	8002148 <MY_FLASH_WriteN+0xe0>
		
		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	e014      	b.n	8002106 <MY_FLASH_WriteN+0x9e>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	4413      	add	r3, r2
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2200      	movs	r2, #0
 80020ea:	4698      	mov	r8, r3
 80020ec:	4691      	mov	r9, r2
 80020ee:	4642      	mov	r2, r8
 80020f0:	464b      	mov	r3, r9
 80020f2:	69f9      	ldr	r1, [r7, #28]
 80020f4:	2001      	movs	r0, #1
 80020f6:	f002 fe0f 	bl	8004d18 <HAL_FLASH_Program>
					flashAddress+=2;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3302      	adds	r3, #2
 80020fe:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3301      	adds	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	d3e6      	bcc.n	80020dc <MY_FLASH_WriteN+0x74>
				}
			break;
 800210e:	e01b      	b.n	8002148 <MY_FLASH_WriteN+0xe0>
		
		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	e013      	b.n	800213e <MY_FLASH_WriteN+0xd6>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	4413      	add	r3, r2
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2200      	movs	r2, #0
 8002122:	461c      	mov	r4, r3
 8002124:	4615      	mov	r5, r2
 8002126:	4622      	mov	r2, r4
 8002128:	462b      	mov	r3, r5
 800212a:	69f9      	ldr	r1, [r7, #28]
 800212c:	2002      	movs	r0, #2
 800212e:	f002 fdf3 	bl	8004d18 <HAL_FLASH_Program>
					flashAddress+=4;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3304      	adds	r3, #4
 8002136:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	3301      	adds	r3, #1
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	d3e7      	bcc.n	8002116 <MY_FLASH_WriteN+0xae>
				}
			break;
 8002146:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 8002148:	f002 fe5c 	bl	8004e04 <HAL_FLASH_Lock>
}
 800214c:	bf00      	nop
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002156:	bf00      	nop
 8002158:	2000018c 	.word	0x2000018c

0800215c <MY_FLASH_ReadN>:
//4. Read Flash
void MY_FLASH_ReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 800216a:	4b29      	ldr	r3, [pc, #164]	; (8002210 <MY_FLASH_ReadN+0xb4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4413      	add	r3, r2
 8002172:	61fb      	str	r3, [r7, #28]
	
	switch(dataType)
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d02f      	beq.n	80021da <MY_FLASH_ReadN+0x7e>
 800217a:	2b02      	cmp	r3, #2
 800217c:	dc42      	bgt.n	8002204 <MY_FLASH_ReadN+0xa8>
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <MY_FLASH_ReadN+0x2c>
 8002182:	2b01      	cmp	r3, #1
 8002184:	d014      	beq.n	80021b0 <MY_FLASH_ReadN+0x54>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 8002186:	e03d      	b.n	8002204 <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 8002188:	2300      	movs	r3, #0
 800218a:	61bb      	str	r3, [r7, #24]
 800218c:	e00b      	b.n	80021a6 <MY_FLASH_ReadN+0x4a>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	440b      	add	r3, r1
 8002196:	7812      	ldrb	r2, [r2, #0]
 8002198:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3301      	adds	r3, #1
 800219e:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	3301      	adds	r3, #1
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d3ef      	bcc.n	800218e <MY_FLASH_ReadN+0x32>
			break;
 80021ae:	e029      	b.n	8002204 <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	e00c      	b.n	80021d0 <MY_FLASH_ReadN+0x74>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	440b      	add	r3, r1
 80021c0:	8812      	ldrh	r2, [r2, #0]
 80021c2:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	3302      	adds	r3, #2
 80021c8:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	3301      	adds	r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d3ee      	bcc.n	80021b6 <MY_FLASH_ReadN+0x5a>
			break;
 80021d8:	e014      	b.n	8002204 <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	e00c      	b.n	80021fa <MY_FLASH_ReadN+0x9e>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	440b      	add	r3, r1
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	3301      	adds	r3, #1
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d3ee      	bcc.n	80021e0 <MY_FLASH_ReadN+0x84>
			break;
 8002202:	bf00      	nop
}
 8002204:	bf00      	nop
 8002206:	3724      	adds	r7, #36	; 0x24
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	2000018c 	.word	0x2000018c

08002214 <write_flash>:
void write_flash(uint32_t idx, uint8_t *wrBuf, uint32_t Nsize){
 8002214:	b580      	push	{r7, lr}
 8002216:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 800221a:	af00      	add	r7, sp, #0
 800221c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002220:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8002224:	6018      	str	r0, [r3, #0]
 8002226:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800222a:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800222e:	6019      	str	r1, [r3, #0]
 8002230:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002234:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002238:	601a      	str	r2, [r3, #0]
	uint8_t temp_mem[1000];
	MY_FLASH_ReadN(0,temp_mem,500,DATA_TYPE_8);
 800223a:	f107 0114 	add.w	r1, r7, #20
 800223e:	2300      	movs	r3, #0
 8002240:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff ff89 	bl	800215c <MY_FLASH_ReadN>
	for (int i=0;i<Nsize;i++){
 800224a:	2300      	movs	r3, #0
 800224c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8002250:	e01a      	b.n	8002288 <write_flash+0x74>
		temp_mem[idx+i] = wrBuf[i];
 8002252:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002256:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800225a:	f5a2 727e 	sub.w	r2, r2, #1016	; 0x3f8
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	441a      	add	r2, r3
 8002262:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 8002266:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800226a:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	440b      	add	r3, r1
 8002272:	7811      	ldrb	r1, [r2, #0]
 8002274:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8002278:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 800227c:	54d1      	strb	r1, [r2, r3]
	for (int i=0;i<Nsize;i++){
 800227e:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002282:	3301      	adds	r3, #1
 8002284:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8002288:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 800228c:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8002290:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d8db      	bhi.n	8002252 <write_flash+0x3e>
		//printf("temp is = %02x\n",wrBuf[i]);
	}
	MY_FLASH_WriteN(0,temp_mem,500,DATA_TYPE_8);
 800229a:	f107 0114 	add.w	r1, r7, #20
 800229e:	2300      	movs	r3, #0
 80022a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7ff fedf 	bl	8002068 <MY_FLASH_WriteN>
}
 80022aa:	bf00      	nop
 80022ac:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <cmox_ll_init>:
  * @brief          CMOX library low level initialization
  * @param          pArg User defined parameter that is transmitted from initialize service
  * @retval         Initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_init(void *pArg)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Ensure CRC is enabled for cryptographic processing */
  __HAL_RCC_CRC_RELEASE_RESET();
 80022bc:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <cmox_ll_init+0x40>)
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	4a0c      	ldr	r2, [pc, #48]	; (80022f4 <cmox_ll_init+0x40>)
 80022c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022c6:	6113      	str	r3, [r2, #16]
  __HAL_RCC_CRC_CLK_ENABLE();
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <cmox_ll_init+0x40>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <cmox_ll_init+0x40>)
 80022d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022d6:	6313      	str	r3, [r2, #48]	; 0x30
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <cmox_ll_init+0x40>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
  return CMOX_INIT_SUCCESS;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800

080022f8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002300:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002304:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002310:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002314:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002318:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00b      	beq.n	8002338 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002320:	e000      	b.n	8002324 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002322:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002324:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f9      	beq.n	8002322 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800232e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002338:	687b      	ldr	r3, [r7, #4]
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800234c:	f002 fb20 	bl	8004990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002350:	f000 f848 	bl	80023e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002354:	f000 f954 	bl	8002600 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002358:	f000 f8c2 	bl	80024e0 <MX_I2C1_Init>
  MX_RNG_Init();
 800235c:	f000 f8ee 	bl	800253c <MX_RNG_Init>
  MX_USB_DEVICE_Init();
 8002360:	f009 fda2 	bl	800bea8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8002364:	f000 f8fe 	bl	8002564 <MX_TIM2_Init>
  MX_CRC_Init();
 8002368:	f000 f8a6 	bl	80024b8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  MY_FLASH_SetSectorAddrs(sector_name, sector_base_address);
 800236c:	4919      	ldr	r1, [pc, #100]	; (80023d4 <main+0x8c>)
 800236e:	200b      	movs	r0, #11
 8002370:	f7ff fe64 	bl	800203c <MY_FLASH_SetSectorAddrs>
  SSD1306_Init();
 8002374:	f001 fd10 	bl	8003d98 <SSD1306_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8002378:	4817      	ldr	r0, [pc, #92]	; (80023d8 <main+0x90>)
 800237a:	f005 fe65 	bl	8008048 <HAL_TIM_Base_Start_IT>
  /*
    write_flash(BrandNew_address, &Brand_new, 1);
    write_flash(Nusers_address, &user_num, 1);
    write_flash(WrongPassword_address, &WrongPassword, 1);
    */
	if (cmox_initialize(NULL) != CMOX_INIT_SUCCESS)
 800237e:	2000      	movs	r0, #0
 8002380:	f7fe fcde 	bl	8000d40 <cmox_initialize>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <main+0x48>
	{
		  printf("Init is not done\n");
 800238a:	4814      	ldr	r0, [pc, #80]	; (80023dc <main+0x94>)
 800238c:	f00a fc38 	bl	800cc00 <puts>
	}
	Startup();
 8002390:	f000 f9b2 	bl	80026f8 <Startup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(state == Lock)LockDevice();
 8002394:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <main+0x98>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <main+0x58>
 800239c:	f000 fd68 	bl	8002e70 <LockDevice>
	  if(state == Reset)ResetFactory();
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <main+0x98>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <main+0x64>
 80023a8:	f000 ffba 	bl	8003320 <ResetFactory>
	  if(state == Timeout)TimeoutMenu();
 80023ac:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <main+0x98>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d101      	bne.n	80023b8 <main+0x70>
 80023b4:	f000 faf4 	bl	80029a0 <TimeoutMenu>
	  if(state == Enrollment)Enroll();
 80023b8:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <main+0x98>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d101      	bne.n	80023c4 <main+0x7c>
 80023c0:	f000 fb24 	bl	8002a0c <Enroll>
	  if(state == Menu)MainMenu();
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <main+0x98>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d1e3      	bne.n	8002394 <main+0x4c>
 80023cc:	f000 f9f6 	bl	80027bc <MainMenu>
	  if(state == Lock)LockDevice();
 80023d0:	e7e0      	b.n	8002394 <main+0x4c>
 80023d2:	bf00      	nop
 80023d4:	080e0000 	.word	0x080e0000
 80023d8:	20000200 	.word	0x20000200
 80023dc:	0800d998 	.word	0x0800d998
 80023e0:	200002c1 	.word	0x200002c1

080023e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b094      	sub	sp, #80	; 0x50
 80023e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ea:	f107 0320 	add.w	r3, r7, #32
 80023ee:	2230      	movs	r2, #48	; 0x30
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f00a fcf4 	bl	800cde0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f8:	f107 030c 	add.w	r3, r7, #12
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002408:	2300      	movs	r3, #0
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <SystemClock_Config+0xcc>)
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	4a27      	ldr	r2, [pc, #156]	; (80024b0 <SystemClock_Config+0xcc>)
 8002412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002416:	6413      	str	r3, [r2, #64]	; 0x40
 8002418:	4b25      	ldr	r3, [pc, #148]	; (80024b0 <SystemClock_Config+0xcc>)
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002424:	2300      	movs	r3, #0
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <SystemClock_Config+0xd0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a21      	ldr	r2, [pc, #132]	; (80024b4 <SystemClock_Config+0xd0>)
 800242e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <SystemClock_Config+0xd0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243c:	607b      	str	r3, [r7, #4]
 800243e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002440:	2301      	movs	r3, #1
 8002442:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800244a:	2302      	movs	r3, #2
 800244c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800244e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002452:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002454:	2308      	movs	r3, #8
 8002456:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002458:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800245c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800245e:	2302      	movs	r3, #2
 8002460:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002462:	2307      	movs	r3, #7
 8002464:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002466:	f107 0320 	add.w	r3, r7, #32
 800246a:	4618      	mov	r0, r3
 800246c:	f005 f856 	bl	800751c <HAL_RCC_OscConfig>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002476:	f001 fc21 	bl	8003cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800247a:	230f      	movs	r3, #15
 800247c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800247e:	2302      	movs	r3, #2
 8002480:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002486:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800248a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800248c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002490:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002492:	f107 030c 	add.w	r3, r7, #12
 8002496:	2105      	movs	r1, #5
 8002498:	4618      	mov	r0, r3
 800249a:	f005 fab7 	bl	8007a0c <HAL_RCC_ClockConfig>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80024a4:	f001 fc0a 	bl	8003cbc <Error_Handler>
  }
}
 80024a8:	bf00      	nop
 80024aa:	3750      	adds	r7, #80	; 0x50
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40007000 	.word	0x40007000

080024b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <MX_CRC_Init+0x20>)
 80024be:	4a07      	ldr	r2, [pc, #28]	; (80024dc <MX_CRC_Init+0x24>)
 80024c0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80024c2:	4805      	ldr	r0, [pc, #20]	; (80024d8 <MX_CRC_Init+0x20>)
 80024c4:	f002 fc0b 	bl	8004cde <HAL_CRC_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80024ce:	f001 fbf5 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000194 	.word	0x20000194
 80024dc:	40023000 	.word	0x40023000

080024e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <MX_I2C1_Init+0x50>)
 80024e6:	4a13      	ldr	r2, [pc, #76]	; (8002534 <MX_I2C1_Init+0x54>)
 80024e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80024ea:	4b11      	ldr	r3, [pc, #68]	; (8002530 <MX_I2C1_Init+0x50>)
 80024ec:	4a12      	ldr	r2, [pc, #72]	; (8002538 <MX_I2C1_Init+0x58>)
 80024ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024f0:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <MX_I2C1_Init+0x50>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <MX_I2C1_Init+0x50>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <MX_I2C1_Init+0x50>)
 80024fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002502:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <MX_I2C1_Init+0x50>)
 8002506:	2200      	movs	r2, #0
 8002508:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <MX_I2C1_Init+0x50>)
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <MX_I2C1_Init+0x50>)
 8002512:	2200      	movs	r2, #0
 8002514:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <MX_I2C1_Init+0x50>)
 8002518:	2200      	movs	r2, #0
 800251a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800251c:	4804      	ldr	r0, [pc, #16]	; (8002530 <MX_I2C1_Init+0x50>)
 800251e:	f002 ffe1 	bl	80054e4 <HAL_I2C_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002528:	f001 fbc8 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}
 8002530:	2000019c 	.word	0x2000019c
 8002534:	40005400 	.word	0x40005400
 8002538:	00061a80 	.word	0x00061a80

0800253c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <MX_RNG_Init+0x20>)
 8002542:	4a07      	ldr	r2, [pc, #28]	; (8002560 <MX_RNG_Init+0x24>)
 8002544:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002546:	4805      	ldr	r0, [pc, #20]	; (800255c <MX_RNG_Init+0x20>)
 8002548:	f005 fc6c 	bl	8007e24 <HAL_RNG_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002552:	f001 fbb3 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200001f0 	.word	0x200001f0
 8002560:	50060800 	.word	0x50060800

08002564 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800256a:	f107 0308 	add.w	r3, r7, #8
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002578:	463b      	mov	r3, r7
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002580:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <MX_TIM2_Init+0x98>)
 8002582:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002586:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000;
 8002588:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <MX_TIM2_Init+0x98>)
 800258a:	f24a 4210 	movw	r2, #42000	; 0xa410
 800258e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <MX_TIM2_Init+0x98>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002596:	4b19      	ldr	r3, [pc, #100]	; (80025fc <MX_TIM2_Init+0x98>)
 8002598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800259c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259e:	4b17      	ldr	r3, [pc, #92]	; (80025fc <MX_TIM2_Init+0x98>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a4:	4b15      	ldr	r3, [pc, #84]	; (80025fc <MX_TIM2_Init+0x98>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025aa:	4814      	ldr	r0, [pc, #80]	; (80025fc <MX_TIM2_Init+0x98>)
 80025ac:	f005 fcfd 	bl	8007faa <HAL_TIM_Base_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80025b6:	f001 fb81 	bl	8003cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025c0:	f107 0308 	add.w	r3, r7, #8
 80025c4:	4619      	mov	r1, r3
 80025c6:	480d      	ldr	r0, [pc, #52]	; (80025fc <MX_TIM2_Init+0x98>)
 80025c8:	f005 fe9e 	bl	8008308 <HAL_TIM_ConfigClockSource>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80025d2:	f001 fb73 	bl	8003cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025d6:	2320      	movs	r3, #32
 80025d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025de:	463b      	mov	r3, r7
 80025e0:	4619      	mov	r1, r3
 80025e2:	4806      	ldr	r0, [pc, #24]	; (80025fc <MX_TIM2_Init+0x98>)
 80025e4:	f006 f8c6 	bl	8008774 <HAL_TIMEx_MasterConfigSynchronization>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80025ee:	f001 fb65 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000200 	.word	0x20000200

08002600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002606:	f107 0314 	add.w	r3, r7, #20
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	605a      	str	r2, [r3, #4]
 8002610:	609a      	str	r2, [r3, #8]
 8002612:	60da      	str	r2, [r3, #12]
 8002614:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	4b34      	ldr	r3, [pc, #208]	; (80026ec <MX_GPIO_Init+0xec>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a33      	ldr	r2, [pc, #204]	; (80026ec <MX_GPIO_Init+0xec>)
 8002620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b31      	ldr	r3, [pc, #196]	; (80026ec <MX_GPIO_Init+0xec>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <MX_GPIO_Init+0xec>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a2c      	ldr	r2, [pc, #176]	; (80026ec <MX_GPIO_Init+0xec>)
 800263c:	f043 0308 	orr.w	r3, r3, #8
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <MX_GPIO_Init+0xec>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	4b26      	ldr	r3, [pc, #152]	; (80026ec <MX_GPIO_Init+0xec>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a25      	ldr	r2, [pc, #148]	; (80026ec <MX_GPIO_Init+0xec>)
 8002658:	f043 0304 	orr.w	r3, r3, #4
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b23      	ldr	r3, [pc, #140]	; (80026ec <MX_GPIO_Init+0xec>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <MX_GPIO_Init+0xec>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a1e      	ldr	r2, [pc, #120]	; (80026ec <MX_GPIO_Init+0xec>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <MX_GPIO_Init+0xec>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	4b18      	ldr	r3, [pc, #96]	; (80026ec <MX_GPIO_Init+0xec>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a17      	ldr	r2, [pc, #92]	; (80026ec <MX_GPIO_Init+0xec>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <MX_GPIO_Init+0xec>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_Pin|Orange_Pin|Red_Pin|Blue_Pin, GPIO_PIN_RESET);
 80026a2:	2200      	movs	r2, #0
 80026a4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80026a8:	4811      	ldr	r0, [pc, #68]	; (80026f0 <MX_GPIO_Init+0xf0>)
 80026aa:	f002 fee7 	bl	800547c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_Pin Orange_Pin Red_Pin Blue_Pin */
  GPIO_InitStruct.Pin = Green_Pin|Orange_Pin|Red_Pin|Blue_Pin;
 80026ae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80026b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b4:	2301      	movs	r3, #1
 80026b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026bc:	2300      	movs	r3, #0
 80026be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	4619      	mov	r1, r3
 80026c6:	480a      	ldr	r0, [pc, #40]	; (80026f0 <MX_GPIO_Init+0xf0>)
 80026c8:	f002 fd24 	bl	8005114 <HAL_GPIO_Init>

  /*Configure GPIO pins : Bt1_Pin Bt2_Pin */
  GPIO_InitStruct.Pin = Bt1_Pin|Bt2_Pin;
 80026cc:	23c0      	movs	r3, #192	; 0xc0
 80026ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	4619      	mov	r1, r3
 80026de:	4805      	ldr	r0, [pc, #20]	; (80026f4 <MX_GPIO_Init+0xf4>)
 80026e0:	f002 fd18 	bl	8005114 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026e4:	bf00      	nop
 80026e6:	3728      	adds	r7, #40	; 0x28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40020c00 	.word	0x40020c00
 80026f4:	40020800 	.word	0x40020800

080026f8 <Startup>:

/* USER CODE BEGIN 4 */
void Startup(){
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af02      	add	r7, sp, #8
	MY_FLASH_ReadN(BrandNew_address,&Brand_new,1,DATA_TYPE_8);
 80026fe:	2300      	movs	r3, #0
 8002700:	2201      	movs	r2, #1
 8002702:	4927      	ldr	r1, [pc, #156]	; (80027a0 <Startup+0xa8>)
 8002704:	2000      	movs	r0, #0
 8002706:	f7ff fd29 	bl	800215c <MY_FLASH_ReadN>
	SSD1306_DrawBitmap(0,0,logo, 128, 64, 1);
 800270a:	2301      	movs	r3, #1
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	2340      	movs	r3, #64	; 0x40
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	4a23      	ldr	r2, [pc, #140]	; (80027a4 <Startup+0xac>)
 8002716:	2100      	movs	r1, #0
 8002718:	2000      	movs	r0, #0
 800271a:	f001 fad4 	bl	8003cc6 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 800271e:	f001 fbff 	bl	8003f20 <SSD1306_UpdateScreen>
	HAL_Delay (1000);
 8002722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002726:	f002 f9a5 	bl	8004a74 <HAL_Delay>
	SSD1306_Clear();
 800272a:	f001 fea2 	bl	8004472 <SSD1306_Clear>
	MY_FLASH_ReadN(GlobalSalt_address,GlobalSalt,8,DATA_TYPE_8);
 800272e:	2300      	movs	r3, #0
 8002730:	2208      	movs	r2, #8
 8002732:	491d      	ldr	r1, [pc, #116]	; (80027a8 <Startup+0xb0>)
 8002734:	2003      	movs	r0, #3
 8002736:	f7ff fd11 	bl	800215c <MY_FLASH_ReadN>
	if(Brand_new == 0){
 800273a:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <Startup+0xa8>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d125      	bne.n	800278e <Startup+0x96>
		printf("Brand new = %02x\n",Brand_new);
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <Startup+0xa8>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	4619      	mov	r1, r3
 8002748:	4818      	ldr	r0, [pc, #96]	; (80027ac <Startup+0xb4>)
 800274a:	f00a f9eb 	bl	800cb24 <iprintf>
		SSD1306_Clear();
 800274e:	f001 fe90 	bl	8004472 <SSD1306_Clear>
	    SSD1306_GotoXY (15,25);
 8002752:	2119      	movs	r1, #25
 8002754:	200f      	movs	r0, #15
 8002756:	f001 fc89 	bl	800406c <SSD1306_GotoXY>
	    SSD1306_Puts ("Brand new", &Font_11x18, 1);
 800275a:	2201      	movs	r2, #1
 800275c:	4914      	ldr	r1, [pc, #80]	; (80027b0 <Startup+0xb8>)
 800275e:	4815      	ldr	r0, [pc, #84]	; (80027b4 <Startup+0xbc>)
 8002760:	f001 fd1a 	bl	8004198 <SSD1306_Puts>
	    SSD1306_UpdateScreen();
 8002764:	f001 fbdc 	bl	8003f20 <SSD1306_UpdateScreen>
	    HAL_Delay (2000);
 8002768:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800276c:	f002 f982 	bl	8004a74 <HAL_Delay>
	    SSD1306_Clear();
 8002770:	f001 fe7f 	bl	8004472 <SSD1306_Clear>
		Get_rng(GlobalSalt,2);
 8002774:	2102      	movs	r1, #2
 8002776:	480c      	ldr	r0, [pc, #48]	; (80027a8 <Startup+0xb0>)
 8002778:	f001 fa1e 	bl	8003bb8 <Get_rng>
		write_flash(GlobalSalt_address, GlobalSalt, 8); //saving global salt
 800277c:	2208      	movs	r2, #8
 800277e:	490a      	ldr	r1, [pc, #40]	; (80027a8 <Startup+0xb0>)
 8002780:	2003      	movs	r0, #3
 8002782:	f7ff fd47 	bl	8002214 <write_flash>
	    state=Enrollment;
 8002786:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <Startup+0xc0>)
 8002788:	2203      	movs	r2, #3
 800278a:	701a      	strb	r2, [r3, #0]
	}else{
		wrong_LEDs();
		state=Lock;
	}
}
 800278c:	e004      	b.n	8002798 <Startup+0xa0>
		wrong_LEDs();
 800278e:	f000 ff0b 	bl	80035a8 <wrong_LEDs>
		state=Lock;
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <Startup+0xc0>)
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000248 	.word	0x20000248
 80027a4:	0800f19c 	.word	0x0800f19c
 80027a8:	2000024c 	.word	0x2000024c
 80027ac:	0800d9ac 	.word	0x0800d9ac
 80027b0:	20000008 	.word	0x20000008
 80027b4:	0800d9c0 	.word	0x0800d9c0
 80027b8:	200002c1 	.word	0x200002c1

080027bc <MainMenu>:

void MainMenu(){
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af02      	add	r7, sp, #8
	SSD1306_Clear();
 80027c2:	f001 fe56 	bl	8004472 <SSD1306_Clear>
	SSD1306_GotoXY (50,9);
 80027c6:	2109      	movs	r1, #9
 80027c8:	2032      	movs	r0, #50	; 0x32
 80027ca:	f001 fc4f 	bl	800406c <SSD1306_GotoXY>
	SSD1306_Puts ("lock",&Font_7x10, 1);
 80027ce:	2201      	movs	r2, #1
 80027d0:	496b      	ldr	r1, [pc, #428]	; (8002980 <MainMenu+0x1c4>)
 80027d2:	486c      	ldr	r0, [pc, #432]	; (8002984 <MainMenu+0x1c8>)
 80027d4:	f001 fce0 	bl	8004198 <SSD1306_Puts>
	SSD1306_GotoXY (46,21);
 80027d8:	2115      	movs	r1, #21
 80027da:	202e      	movs	r0, #46	; 0x2e
 80027dc:	f001 fc46 	bl	800406c <SSD1306_GotoXY>
	SSD1306_Puts ("Reset",&Font_7x10, 1);
 80027e0:	2201      	movs	r2, #1
 80027e2:	4967      	ldr	r1, [pc, #412]	; (8002980 <MainMenu+0x1c4>)
 80027e4:	4868      	ldr	r0, [pc, #416]	; (8002988 <MainMenu+0x1cc>)
 80027e6:	f001 fcd7 	bl	8004198 <SSD1306_Puts>
	SSD1306_GotoXY (39,33);
 80027ea:	2121      	movs	r1, #33	; 0x21
 80027ec:	2027      	movs	r0, #39	; 0x27
 80027ee:	f001 fc3d 	bl	800406c <SSD1306_GotoXY>
	SSD1306_Puts ("Timeout",&Font_7x10, 1);
 80027f2:	2201      	movs	r2, #1
 80027f4:	4962      	ldr	r1, [pc, #392]	; (8002980 <MainMenu+0x1c4>)
 80027f6:	4865      	ldr	r0, [pc, #404]	; (800298c <MainMenu+0x1d0>)
 80027f8:	f001 fcce 	bl	8004198 <SSD1306_Puts>
	SSD1306_GotoXY (29,45);
 80027fc:	212d      	movs	r1, #45	; 0x2d
 80027fe:	201d      	movs	r0, #29
 8002800:	f001 fc34 	bl	800406c <SSD1306_GotoXY>
	SSD1306_Puts ("Enrollment",&Font_7x10, 1);
 8002804:	2201      	movs	r2, #1
 8002806:	495e      	ldr	r1, [pc, #376]	; (8002980 <MainMenu+0x1c4>)
 8002808:	4861      	ldr	r0, [pc, #388]	; (8002990 <MainMenu+0x1d4>)
 800280a:	f001 fcc5 	bl	8004198 <SSD1306_Puts>
	if(MenuState == Lock){SSD1306_DrawFilledRectangle(27,7,78,12,1);SSD1306_GotoXY (50,9);SSD1306_Puts ("lock",&Font_7x10, 0);}
 800280e:	4b61      	ldr	r3, [pc, #388]	; (8002994 <MainMenu+0x1d8>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d110      	bne.n	8002838 <MainMenu+0x7c>
 8002816:	2301      	movs	r3, #1
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	230c      	movs	r3, #12
 800281c:	224e      	movs	r2, #78	; 0x4e
 800281e:	2107      	movs	r1, #7
 8002820:	201b      	movs	r0, #27
 8002822:	f001 fdd9 	bl	80043d8 <SSD1306_DrawFilledRectangle>
 8002826:	2109      	movs	r1, #9
 8002828:	2032      	movs	r0, #50	; 0x32
 800282a:	f001 fc1f 	bl	800406c <SSD1306_GotoXY>
 800282e:	2200      	movs	r2, #0
 8002830:	4953      	ldr	r1, [pc, #332]	; (8002980 <MainMenu+0x1c4>)
 8002832:	4854      	ldr	r0, [pc, #336]	; (8002984 <MainMenu+0x1c8>)
 8002834:	f001 fcb0 	bl	8004198 <SSD1306_Puts>
	if(MenuState == Reset){SSD1306_DrawFilledRectangle(27,19,78,12,1);SSD1306_GotoXY (46,21);SSD1306_Puts ("Reset",&Font_7x10, 0);}
 8002838:	4b56      	ldr	r3, [pc, #344]	; (8002994 <MainMenu+0x1d8>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d110      	bne.n	8002862 <MainMenu+0xa6>
 8002840:	2301      	movs	r3, #1
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	230c      	movs	r3, #12
 8002846:	224e      	movs	r2, #78	; 0x4e
 8002848:	2113      	movs	r1, #19
 800284a:	201b      	movs	r0, #27
 800284c:	f001 fdc4 	bl	80043d8 <SSD1306_DrawFilledRectangle>
 8002850:	2115      	movs	r1, #21
 8002852:	202e      	movs	r0, #46	; 0x2e
 8002854:	f001 fc0a 	bl	800406c <SSD1306_GotoXY>
 8002858:	2200      	movs	r2, #0
 800285a:	4949      	ldr	r1, [pc, #292]	; (8002980 <MainMenu+0x1c4>)
 800285c:	484a      	ldr	r0, [pc, #296]	; (8002988 <MainMenu+0x1cc>)
 800285e:	f001 fc9b 	bl	8004198 <SSD1306_Puts>
	if(MenuState == Timeout){SSD1306_DrawFilledRectangle(27,31,78,12,1);SSD1306_GotoXY (36,33);SSD1306_Puts ("Timeout",&Font_7x10, 0);}
 8002862:	4b4c      	ldr	r3, [pc, #304]	; (8002994 <MainMenu+0x1d8>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d110      	bne.n	800288c <MainMenu+0xd0>
 800286a:	2301      	movs	r3, #1
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	230c      	movs	r3, #12
 8002870:	224e      	movs	r2, #78	; 0x4e
 8002872:	211f      	movs	r1, #31
 8002874:	201b      	movs	r0, #27
 8002876:	f001 fdaf 	bl	80043d8 <SSD1306_DrawFilledRectangle>
 800287a:	2121      	movs	r1, #33	; 0x21
 800287c:	2024      	movs	r0, #36	; 0x24
 800287e:	f001 fbf5 	bl	800406c <SSD1306_GotoXY>
 8002882:	2200      	movs	r2, #0
 8002884:	493e      	ldr	r1, [pc, #248]	; (8002980 <MainMenu+0x1c4>)
 8002886:	4841      	ldr	r0, [pc, #260]	; (800298c <MainMenu+0x1d0>)
 8002888:	f001 fc86 	bl	8004198 <SSD1306_Puts>
	if(MenuState == Enrollment){SSD1306_DrawFilledRectangle(27,43,78,12,1);SSD1306_GotoXY (29,45);SSD1306_Puts ("Enrollment",&Font_7x10, 0);}
 800288c:	4b41      	ldr	r3, [pc, #260]	; (8002994 <MainMenu+0x1d8>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d110      	bne.n	80028b6 <MainMenu+0xfa>
 8002894:	2301      	movs	r3, #1
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	230c      	movs	r3, #12
 800289a:	224e      	movs	r2, #78	; 0x4e
 800289c:	212b      	movs	r1, #43	; 0x2b
 800289e:	201b      	movs	r0, #27
 80028a0:	f001 fd9a 	bl	80043d8 <SSD1306_DrawFilledRectangle>
 80028a4:	212d      	movs	r1, #45	; 0x2d
 80028a6:	201d      	movs	r0, #29
 80028a8:	f001 fbe0 	bl	800406c <SSD1306_GotoXY>
 80028ac:	2200      	movs	r2, #0
 80028ae:	4934      	ldr	r1, [pc, #208]	; (8002980 <MainMenu+0x1c4>)
 80028b0:	4837      	ldr	r0, [pc, #220]	; (8002990 <MainMenu+0x1d4>)
 80028b2:	f001 fc71 	bl	8004198 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80028b6:	f001 fb33 	bl	8003f20 <SSD1306_UpdateScreen>
	while(1){
		if(!DeviceState){state=Lock;break;}
 80028ba:	4b37      	ldr	r3, [pc, #220]	; (8002998 <MainMenu+0x1dc>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	f083 0301 	eor.w	r3, r3, #1
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <MainMenu+0x114>
 80028c8:	4b34      	ldr	r3, [pc, #208]	; (800299c <MainMenu+0x1e0>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	e052      	b.n	8002976 <MainMenu+0x1ba>
		uint8_t btn_state =checkButtons();
 80028d0:	f001 f89e 	bl	8003a10 <checkButtons>
 80028d4:	4603      	mov	r3, r0
 80028d6:	71fb      	strb	r3, [r7, #7]
		if(btn_state==0){//up
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d110      	bne.n	8002900 <MainMenu+0x144>
			MenuState--;
 80028de:	4b2d      	ldr	r3, [pc, #180]	; (8002994 <MainMenu+0x1d8>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4b2b      	ldr	r3, [pc, #172]	; (8002994 <MainMenu+0x1d8>)
 80028e8:	701a      	strb	r2, [r3, #0]
			if(MenuState==255)MenuState=3;
 80028ea:	4b2a      	ldr	r3, [pc, #168]	; (8002994 <MainMenu+0x1d8>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2bff      	cmp	r3, #255	; 0xff
 80028f0:	d102      	bne.n	80028f8 <MainMenu+0x13c>
 80028f2:	4b28      	ldr	r3, [pc, #160]	; (8002994 <MainMenu+0x1d8>)
 80028f4:	2203      	movs	r2, #3
 80028f6:	701a      	strb	r2, [r3, #0]
			state = Menu;
 80028f8:	4b28      	ldr	r3, [pc, #160]	; (800299c <MainMenu+0x1e0>)
 80028fa:	2204      	movs	r2, #4
 80028fc:	701a      	strb	r2, [r3, #0]
			break;
 80028fe:	e03a      	b.n	8002976 <MainMenu+0x1ba>
		}else if(btn_state == 1){//down
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d110      	bne.n	8002928 <MainMenu+0x16c>
			MenuState++;
 8002906:	4b23      	ldr	r3, [pc, #140]	; (8002994 <MainMenu+0x1d8>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	3301      	adds	r3, #1
 800290c:	b2da      	uxtb	r2, r3
 800290e:	4b21      	ldr	r3, [pc, #132]	; (8002994 <MainMenu+0x1d8>)
 8002910:	701a      	strb	r2, [r3, #0]
			if(MenuState==4)MenuState=0;
 8002912:	4b20      	ldr	r3, [pc, #128]	; (8002994 <MainMenu+0x1d8>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b04      	cmp	r3, #4
 8002918:	d102      	bne.n	8002920 <MainMenu+0x164>
 800291a:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <MainMenu+0x1d8>)
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
			state = Menu;
 8002920:	4b1e      	ldr	r3, [pc, #120]	; (800299c <MainMenu+0x1e0>)
 8002922:	2204      	movs	r2, #4
 8002924:	701a      	strb	r2, [r3, #0]
			break;
 8002926:	e026      	b.n	8002976 <MainMenu+0x1ba>
		}else if(btn_state ==2){//both
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d1c5      	bne.n	80028ba <MainMenu+0xfe>
			if(MenuState==0)state=Lock;
 800292e:	4b19      	ldr	r3, [pc, #100]	; (8002994 <MainMenu+0x1d8>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d102      	bne.n	800293c <MainMenu+0x180>
 8002936:	4b19      	ldr	r3, [pc, #100]	; (800299c <MainMenu+0x1e0>)
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
			if(MenuState==1)state=Reset;
 800293c:	4b15      	ldr	r3, [pc, #84]	; (8002994 <MainMenu+0x1d8>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d102      	bne.n	800294a <MainMenu+0x18e>
 8002944:	4b15      	ldr	r3, [pc, #84]	; (800299c <MainMenu+0x1e0>)
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
			if(MenuState==2)state=Timeout;
 800294a:	4b12      	ldr	r3, [pc, #72]	; (8002994 <MainMenu+0x1d8>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d102      	bne.n	8002958 <MainMenu+0x19c>
 8002952:	4b12      	ldr	r3, [pc, #72]	; (800299c <MainMenu+0x1e0>)
 8002954:	2202      	movs	r2, #2
 8002956:	701a      	strb	r2, [r3, #0]
			if(MenuState==3)state=Enrollment;
 8002958:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <MainMenu+0x1d8>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d102      	bne.n	8002966 <MainMenu+0x1aa>
 8002960:	4b0e      	ldr	r3, [pc, #56]	; (800299c <MainMenu+0x1e0>)
 8002962:	2203      	movs	r2, #3
 8002964:	701a      	strb	r2, [r3, #0]
			if(MenuState==4)state=Menu;
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <MainMenu+0x1d8>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b04      	cmp	r3, #4
 800296c:	d102      	bne.n	8002974 <MainMenu+0x1b8>
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <MainMenu+0x1e0>)
 8002970:	2204      	movs	r2, #4
 8002972:	701a      	strb	r2, [r3, #0]
			break;
 8002974:	bf00      	nop
		}
	}
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000000 	.word	0x20000000
 8002984:	0800d9cc 	.word	0x0800d9cc
 8002988:	0800d9d4 	.word	0x0800d9d4
 800298c:	0800d9dc 	.word	0x0800d9dc
 8002990:	0800d9e4 	.word	0x0800d9e4
 8002994:	200002c2 	.word	0x200002c2
 8002998:	200002c4 	.word	0x200002c4
 800299c:	200002c1 	.word	0x200002c1

080029a0 <TimeoutMenu>:

void TimeoutMenu() {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
	static uint32_t previousRevTimer = 0xFFFFFFFF;
	uint32_t RevTimer = TimeoutValue - Timer;
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <TimeoutMenu+0x5c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80029ae:	60fb      	str	r3, [r7, #12]
	if (RevTimer != previousRevTimer) {
 80029b0:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <TimeoutMenu+0x60>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d01b      	beq.n	80029f2 <TimeoutMenu+0x52>
		previousRevTimer = RevTimer;
 80029ba:	4a11      	ldr	r2, [pc, #68]	; (8002a00 <TimeoutMenu+0x60>)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6013      	str	r3, [r2, #0]
		SSD1306_Clear();
 80029c0:	f001 fd57 	bl	8004472 <SSD1306_Clear>
		SSD1306_GotoXY(15, 27);
 80029c4:	211b      	movs	r1, #27
 80029c6:	200f      	movs	r0, #15
 80029c8:	f001 fb50 	bl	800406c <SSD1306_GotoXY>
		SSD1306_Puts("Timeout in ", &Font_7x10, 1);
 80029cc:	2201      	movs	r2, #1
 80029ce:	490d      	ldr	r1, [pc, #52]	; (8002a04 <TimeoutMenu+0x64>)
 80029d0:	480d      	ldr	r0, [pc, #52]	; (8002a08 <TimeoutMenu+0x68>)
 80029d2:	f001 fbe1 	bl	8004198 <SSD1306_Puts>
		char str[12];
		itoa(RevTimer, str, 10);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4639      	mov	r1, r7
 80029da:	220a      	movs	r2, #10
 80029dc:	4618      	mov	r0, r3
 80029de:	f009 ff9b 	bl	800c918 <itoa>
		SSD1306_Puts(str, &Font_7x10, 1);
 80029e2:	463b      	mov	r3, r7
 80029e4:	2201      	movs	r2, #1
 80029e6:	4907      	ldr	r1, [pc, #28]	; (8002a04 <TimeoutMenu+0x64>)
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 fbd5 	bl	8004198 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80029ee:	f001 fa97 	bl	8003f20 <SSD1306_UpdateScreen>
	}
}
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	200002c8 	.word	0x200002c8
 8002a00:	20000010 	.word	0x20000010
 8002a04:	20000000 	.word	0x20000000
 8002a08:	0800d9f0 	.word	0x0800d9f0

08002a0c <Enroll>:
void Enroll(){
 8002a0c:	b590      	push	{r4, r7, lr}
 8002a0e:	b09b      	sub	sp, #108	; 0x6c
 8002a10:	af04      	add	r7, sp, #16
	printf("Enroll\n");
 8002a12:	48b2      	ldr	r0, [pc, #712]	; (8002cdc <Enroll+0x2d0>)
 8002a14:	f00a f8f4 	bl	800cc00 <puts>
	SSD1306_Clear();
 8002a18:	f001 fd2b 	bl	8004472 <SSD1306_Clear>
	SSD1306_GotoXY (20,5);
 8002a1c:	2105      	movs	r1, #5
 8002a1e:	2014      	movs	r0, #20
 8002a20:	f001 fb24 	bl	800406c <SSD1306_GotoXY>
	SSD1306_Puts ("Enter new pin", &Font_7x10, 1);
 8002a24:	2201      	movs	r2, #1
 8002a26:	49ae      	ldr	r1, [pc, #696]	; (8002ce0 <Enroll+0x2d4>)
 8002a28:	48ae      	ldr	r0, [pc, #696]	; (8002ce4 <Enroll+0x2d8>)
 8002a2a:	f001 fbb5 	bl	8004198 <SSD1306_Puts>
	SSD1306_DrawFilledRectangle(3,20,122,30,1);
 8002a2e:	2301      	movs	r3, #1
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	231e      	movs	r3, #30
 8002a34:	227a      	movs	r2, #122	; 0x7a
 8002a36:	2114      	movs	r1, #20
 8002a38:	2003      	movs	r0, #3
 8002a3a:	f001 fccd 	bl	80043d8 <SSD1306_DrawFilledRectangle>
	SSD1306_DrawLine(6 ,40,12,40,0);
 8002a3e:	2300      	movs	r3, #0
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	2328      	movs	r3, #40	; 0x28
 8002a44:	220c      	movs	r2, #12
 8002a46:	2128      	movs	r1, #40	; 0x28
 8002a48:	2006      	movs	r0, #6
 8002a4a:	f001 fbca 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(16,40,22,40,0);
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2328      	movs	r3, #40	; 0x28
 8002a54:	2216      	movs	r2, #22
 8002a56:	2128      	movs	r1, #40	; 0x28
 8002a58:	2010      	movs	r0, #16
 8002a5a:	f001 fbc2 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(26,40,32,40,0);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	2328      	movs	r3, #40	; 0x28
 8002a64:	2220      	movs	r2, #32
 8002a66:	2128      	movs	r1, #40	; 0x28
 8002a68:	201a      	movs	r0, #26
 8002a6a:	f001 fbba 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(36,40,42,40,0);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2328      	movs	r3, #40	; 0x28
 8002a74:	222a      	movs	r2, #42	; 0x2a
 8002a76:	2128      	movs	r1, #40	; 0x28
 8002a78:	2024      	movs	r0, #36	; 0x24
 8002a7a:	f001 fbb2 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(46,40,52,40,0);
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	2328      	movs	r3, #40	; 0x28
 8002a84:	2234      	movs	r2, #52	; 0x34
 8002a86:	2128      	movs	r1, #40	; 0x28
 8002a88:	202e      	movs	r0, #46	; 0x2e
 8002a8a:	f001 fbaa 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(56,40,62,40,0);
 8002a8e:	2300      	movs	r3, #0
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2328      	movs	r3, #40	; 0x28
 8002a94:	223e      	movs	r2, #62	; 0x3e
 8002a96:	2128      	movs	r1, #40	; 0x28
 8002a98:	2038      	movs	r0, #56	; 0x38
 8002a9a:	f001 fba2 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(66,40,72,40,0);
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	2328      	movs	r3, #40	; 0x28
 8002aa4:	2248      	movs	r2, #72	; 0x48
 8002aa6:	2128      	movs	r1, #40	; 0x28
 8002aa8:	2042      	movs	r0, #66	; 0x42
 8002aaa:	f001 fb9a 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(76,40,82,40,0);
 8002aae:	2300      	movs	r3, #0
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	2328      	movs	r3, #40	; 0x28
 8002ab4:	2252      	movs	r2, #82	; 0x52
 8002ab6:	2128      	movs	r1, #40	; 0x28
 8002ab8:	204c      	movs	r0, #76	; 0x4c
 8002aba:	f001 fb92 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(86,40,92,40,0);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2328      	movs	r3, #40	; 0x28
 8002ac4:	225c      	movs	r2, #92	; 0x5c
 8002ac6:	2128      	movs	r1, #40	; 0x28
 8002ac8:	2056      	movs	r0, #86	; 0x56
 8002aca:	f001 fb8a 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(96,40,102,40,0);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	2328      	movs	r3, #40	; 0x28
 8002ad4:	2266      	movs	r2, #102	; 0x66
 8002ad6:	2128      	movs	r1, #40	; 0x28
 8002ad8:	2060      	movs	r0, #96	; 0x60
 8002ada:	f001 fb82 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(106,40,112,40,0);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	2328      	movs	r3, #40	; 0x28
 8002ae4:	2270      	movs	r2, #112	; 0x70
 8002ae6:	2128      	movs	r1, #40	; 0x28
 8002ae8:	206a      	movs	r0, #106	; 0x6a
 8002aea:	f001 fb7a 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(116,40,122,40,0);
 8002aee:	2300      	movs	r3, #0
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	2328      	movs	r3, #40	; 0x28
 8002af4:	227a      	movs	r2, #122	; 0x7a
 8002af6:	2128      	movs	r1, #40	; 0x28
 8002af8:	2074      	movs	r0, #116	; 0x74
 8002afa:	f001 fb72 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_GotoXY (6,33);
 8002afe:	2121      	movs	r1, #33	; 0x21
 8002b00:	2006      	movs	r0, #6
 8002b02:	f001 fab3 	bl	800406c <SSD1306_GotoXY>
	SSD1306_Putc('!',&Font_7x10,0);
 8002b06:	2200      	movs	r2, #0
 8002b08:	4975      	ldr	r1, [pc, #468]	; (8002ce0 <Enroll+0x2d4>)
 8002b0a:	2021      	movs	r0, #33	; 0x21
 8002b0c:	f001 fac4 	bl	8004098 <SSD1306_Putc>
	SSD1306_UpdateScreen();
 8002b10:	f001 fa06 	bl	8003f20 <SSD1306_UpdateScreen>
	bool flag = true;
 8002b14:	2301      	movs	r3, #1
 8002b16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t index=0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t temp_num=33;
 8002b20:	2321      	movs	r3, #33	; 0x21
 8002b22:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	while(flag){
 8002b26:	e189      	b.n	8002e3c <Enroll+0x430>
		//if(!DeviceState){state=Lock;break;}
		uint8_t temp =checkButtons();
 8002b28:	f000 ff72 	bl	8003a10 <checkButtons>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if(temp == 0){
 8002b32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d122      	bne.n	8002b80 <Enroll+0x174>
			//printf("Up\n");
			temp_num++;
 8002b3a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			if(temp_num==127)temp_num=33;
 8002b44:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002b48:	2b7f      	cmp	r3, #127	; 0x7f
 8002b4a:	d102      	bne.n	8002b52 <Enroll+0x146>
 8002b4c:	2321      	movs	r3, #33	; 0x21
 8002b4e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			SSD1306_GotoXY (6+index*10,33);
 8002b52:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	461a      	mov	r2, r3
 8002b5a:	0092      	lsls	r2, r2, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3306      	adds	r3, #6
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2121      	movs	r1, #33	; 0x21
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f001 fa7f 	bl	800406c <SSD1306_GotoXY>
			SSD1306_Putc((char)temp_num,&Font_7x10,0);
 8002b6e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002b72:	2200      	movs	r2, #0
 8002b74:	495a      	ldr	r1, [pc, #360]	; (8002ce0 <Enroll+0x2d4>)
 8002b76:	4618      	mov	r0, r3
 8002b78:	f001 fa8e 	bl	8004098 <SSD1306_Putc>
			SSD1306_UpdateScreen();
 8002b7c:	f001 f9d0 	bl	8003f20 <SSD1306_UpdateScreen>

		}
		if(temp == 1){
 8002b80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d122      	bne.n	8002bce <Enroll+0x1c2>
			//printf("Down\n");
			temp_num--;
 8002b88:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			if(temp_num<33)temp_num=126;
 8002b92:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	d802      	bhi.n	8002ba0 <Enroll+0x194>
 8002b9a:	237e      	movs	r3, #126	; 0x7e
 8002b9c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			SSD1306_GotoXY (6+index*10,33);
 8002ba0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	0092      	lsls	r2, r2, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3306      	adds	r3, #6
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2121      	movs	r1, #33	; 0x21
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f001 fa58 	bl	800406c <SSD1306_GotoXY>
			SSD1306_Putc((char)temp_num,&Font_7x10,0);
 8002bbc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	4947      	ldr	r1, [pc, #284]	; (8002ce0 <Enroll+0x2d4>)
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f001 fa67 	bl	8004098 <SSD1306_Putc>
			SSD1306_UpdateScreen();
 8002bca:	f001 f9a9 	bl	8003f20 <SSD1306_UpdateScreen>

			}
		if(temp == 2){
 8002bce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	f040 8132 	bne.w	8002e3c <Enroll+0x430>
			//printf("Both\n");
			if(index == 11){
 8002bd8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002bdc:	2b0b      	cmp	r3, #11
 8002bde:	f040 80f3 	bne.w	8002dc8 <Enroll+0x3bc>
				password[index]=temp_num;
 8002be2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002be6:	4940      	ldr	r1, [pc, #256]	; (8002ce8 <Enroll+0x2dc>)
 8002be8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002bec:	54ca      	strb	r2, [r1, r3]
				flag = false;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				SSD1306_GotoXY (6+index*10,33);
 8002bf4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	0092      	lsls	r2, r2, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3306      	adds	r3, #6
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2121      	movs	r1, #33	; 0x21
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f001 fa2e 	bl	800406c <SSD1306_GotoXY>
				SSD1306_Putc('*',&Font_7x10,0);
 8002c10:	2200      	movs	r2, #0
 8002c12:	4933      	ldr	r1, [pc, #204]	; (8002ce0 <Enroll+0x2d4>)
 8002c14:	202a      	movs	r0, #42	; 0x2a
 8002c16:	f001 fa3f 	bl	8004098 <SSD1306_Putc>
				SSD1306_UpdateScreen();
 8002c1a:	f001 f981 	bl	8003f20 <SSD1306_UpdateScreen>
				MY_FLASH_ReadN(Nusers_address,&user_num,1,DATA_TYPE_8);
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2201      	movs	r2, #1
 8002c22:	4932      	ldr	r1, [pc, #200]	; (8002cec <Enroll+0x2e0>)
 8002c24:	2001      	movs	r0, #1
 8002c26:	f7ff fa99 	bl	800215c <MY_FLASH_ReadN>
				Get_rng(LocalSalt,2);
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	4830      	ldr	r0, [pc, #192]	; (8002cf0 <Enroll+0x2e4>)
 8002c2e:	f000 ffc3 	bl	8003bb8 <Get_rng>
				write_flash(MemDatastartpoint + (user_num*72), LocalSalt, 8); //saving local salt
 8002c32:	4b2e      	ldr	r3, [pc, #184]	; (8002cec <Enroll+0x2e0>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	330b      	adds	r3, #11
 8002c42:	2208      	movs	r2, #8
 8002c44:	492a      	ldr	r1, [pc, #168]	; (8002cf0 <Enroll+0x2e4>)
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fae4 	bl	8002214 <write_flash>
				Get_rng(IV,4);
 8002c4c:	2104      	movs	r1, #4
 8002c4e:	4829      	ldr	r0, [pc, #164]	; (8002cf4 <Enroll+0x2e8>)
 8002c50:	f000 ffb2 	bl	8003bb8 <Get_rng>
				write_flash(MemDatastartpoint + 8 + (user_num*72), IV, 16); //saving local IV
 8002c54:	4b25      	ldr	r3, [pc, #148]	; (8002cec <Enroll+0x2e0>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	3313      	adds	r3, #19
 8002c64:	2210      	movs	r2, #16
 8002c66:	4923      	ldr	r1, [pc, #140]	; (8002cf4 <Enroll+0x2e8>)
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fad3 	bl	8002214 <write_flash>
				MY_FLASH_ReadN(GlobalSalt_address,GlobalSalt,8,DATA_TYPE_8);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	2208      	movs	r2, #8
 8002c72:	4921      	ldr	r1, [pc, #132]	; (8002cf8 <Enroll+0x2ec>)
 8002c74:	2003      	movs	r0, #3
 8002c76:	f7ff fa71 	bl	800215c <MY_FLASH_ReadN>
				printf("GS: \n");
				for(int i=0;i<8;i++)printf("%02x ",GlobalSalt[i]);
				printf("\n");
				*/
				uint8_t temp[20];
				memcpy(temp, GlobalSalt, sizeof(GlobalSalt));
 8002c7a:	4a1f      	ldr	r2, [pc, #124]	; (8002cf8 <Enroll+0x2ec>)
 8002c7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c84:	e883 0003 	stmia.w	r3, {r0, r1}
				memcpy(temp + sizeof(GlobalSalt), password, sizeof(password));
 8002c88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <Enroll+0x2dc>)
 8002c90:	461c      	mov	r4, r3
 8002c92:	4613      	mov	r3, r2
 8002c94:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c96:	6020      	str	r0, [r4, #0]
 8002c98:	6061      	str	r1, [r4, #4]
 8002c9a:	60a2      	str	r2, [r4, #8]
				printf("temp: \n");
				for(int i=0;i<20;i++)printf("%02x",temp[i]);
				printf("\n");
				*/
				uint8_t computedSha256[32];
				sha256(temp, computedSha256,sizeof(temp));
 8002c9c:	1d39      	adds	r1, r7, #4
 8002c9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ca2:	2214      	movs	r2, #20
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fe51 	bl	800394c <sha256>
				/*
				printf("SHA256: \n");
				for(int i=0;i<32;i++)printf("%02x ",computedSha256[i]);
				printf("\n");
				*/
				write_flash(MemDatastartpoint + 8 + 16 + (user_num*72), computedSha256, 32); //saving password
 8002caa:	4b10      	ldr	r3, [pc, #64]	; (8002cec <Enroll+0x2e0>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	3323      	adds	r3, #35	; 0x23
 8002cba:	4618      	mov	r0, r3
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f7ff faa7 	bl	8002214 <write_flash>
				Get_rng(MasterKey,4);
 8002cc6:	2104      	movs	r1, #4
 8002cc8:	480c      	ldr	r0, [pc, #48]	; (8002cfc <Enroll+0x2f0>)
 8002cca:	f000 ff75 	bl	8003bb8 <Get_rng>

				printf("Master: \n");
 8002cce:	480c      	ldr	r0, [pc, #48]	; (8002d00 <Enroll+0x2f4>)
 8002cd0:	f009 ff96 	bl	800cc00 <puts>
				for(int i=0;i<16;i++)printf("%02x ",MasterKey[i]);
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	653b      	str	r3, [r7, #80]	; 0x50
 8002cd8:	e01f      	b.n	8002d1a <Enroll+0x30e>
 8002cda:	bf00      	nop
 8002cdc:	0800d9fc 	.word	0x0800d9fc
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	0800da04 	.word	0x0800da04
 8002ce8:	2000026c 	.word	0x2000026c
 8002cec:	20000288 	.word	0x20000288
 8002cf0:	20000254 	.word	0x20000254
 8002cf4:	2000025c 	.word	0x2000025c
 8002cf8:	2000024c 	.word	0x2000024c
 8002cfc:	20000278 	.word	0x20000278
 8002d00:	0800da14 	.word	0x0800da14
 8002d04:	4a52      	ldr	r2, [pc, #328]	; (8002e50 <Enroll+0x444>)
 8002d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d08:	4413      	add	r3, r2
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4851      	ldr	r0, [pc, #324]	; (8002e54 <Enroll+0x448>)
 8002d10:	f009 ff08 	bl	800cb24 <iprintf>
 8002d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d16:	3301      	adds	r3, #1
 8002d18:	653b      	str	r3, [r7, #80]	; 0x50
 8002d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d1c:	2b0f      	cmp	r3, #15
 8002d1e:	ddf1      	ble.n	8002d04 <Enroll+0x2f8>
				printf("\n");
 8002d20:	200a      	movs	r0, #10
 8002d22:	f009 ff11 	bl	800cb48 <putchar>
				/*
				printf("LS: \n");
				for(int i=0;i<8;i++)printf("%02x ",LocalSalt[i]);
				printf("\n");
				*/
				memcpy(temp, LocalSalt, sizeof(LocalSalt));
 8002d26:	4a4c      	ldr	r2, [pc, #304]	; (8002e58 <Enroll+0x44c>)
 8002d28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d30:	e883 0003 	stmia.w	r3, {r0, r1}
				memcpy(temp + sizeof(LocalSalt), password, sizeof(password));
 8002d34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d38:	3308      	adds	r3, #8
 8002d3a:	4a48      	ldr	r2, [pc, #288]	; (8002e5c <Enroll+0x450>)
 8002d3c:	461c      	mov	r4, r3
 8002d3e:	4613      	mov	r3, r2
 8002d40:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002d42:	6020      	str	r0, [r4, #0]
 8002d44:	6061      	str	r1, [r4, #4]
 8002d46:	60a2      	str	r2, [r4, #8]
				/*
				printf("temp: \n");
				for(int i=0;i<20;i++)printf("%02x",temp[i]);
				printf("\n");
				*/
				sha256(temp, computedSha256,sizeof(temp));
 8002d48:	1d39      	adds	r1, r7, #4
 8002d4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d4e:	2214      	movs	r2, #20
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fdfb 	bl	800394c <sha256>
				printf("IV: \n");
				for(int i=0;i<16;i++)printf("%02x ",IV[i]);
				printf("\n");
				*/
				uint8_t computedAES[16];
				AESCBC(MasterKey, sizeof(MasterKey), computedSha256, sizeof(computedSha256),IV, sizeof(IV),computedAES);
 8002d56:	1d3a      	adds	r2, r7, #4
 8002d58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d5c:	9302      	str	r3, [sp, #8]
 8002d5e:	2310      	movs	r3, #16
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	4b3f      	ldr	r3, [pc, #252]	; (8002e60 <Enroll+0x454>)
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	2320      	movs	r3, #32
 8002d68:	2110      	movs	r1, #16
 8002d6a:	4839      	ldr	r0, [pc, #228]	; (8002e50 <Enroll+0x444>)
 8002d6c:	f000 fe08 	bl	8003980 <AESCBC>
				/*
				printf("AESCBC: \n");
				for(int i=0;i<16;i++)printf("%02x ",computedAES[i]);
				printf("\n");
				*/
				write_flash(MemDatastartpoint + 8 + 16 + 32 + (user_num*72), computedAES, 16); //saving master
 8002d70:	4b3c      	ldr	r3, [pc, #240]	; (8002e64 <Enroll+0x458>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	3343      	adds	r3, #67	; 0x43
 8002d80:	4618      	mov	r0, r3
 8002d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d86:	2210      	movs	r2, #16
 8002d88:	4619      	mov	r1, r3
 8002d8a:	f7ff fa43 	bl	8002214 <write_flash>
				uint8_t value =1;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				write_flash(BrandNew_address, &value, 1);	//update brand new
 8002d94:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8002d98:	2201      	movs	r2, #1
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7ff fa39 	bl	8002214 <write_flash>
				user_num++;
 8002da2:	4b30      	ldr	r3, [pc, #192]	; (8002e64 <Enroll+0x458>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	3301      	adds	r3, #1
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4b2e      	ldr	r3, [pc, #184]	; (8002e64 <Enroll+0x458>)
 8002dac:	701a      	strb	r2, [r3, #0]
				write_flash(Nusers_address, &user_num, 1);	//update numusers
 8002dae:	2201      	movs	r2, #1
 8002db0:	492c      	ldr	r1, [pc, #176]	; (8002e64 <Enroll+0x458>)
 8002db2:	2001      	movs	r0, #1
 8002db4:	f7ff fa2e 	bl	8002214 <write_flash>
				blink();
 8002db8:	f000 fc36 	bl	8003628 <blink>
				SSD1306_Clear();
 8002dbc:	f001 fb59 	bl	8004472 <SSD1306_Clear>
				state=Lock;
 8002dc0:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <Enroll+0x45c>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	e039      	b.n	8002e3c <Enroll+0x430>

			}else{
				password[index]=temp_num;
 8002dc8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002dcc:	4923      	ldr	r1, [pc, #140]	; (8002e5c <Enroll+0x450>)
 8002dce:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002dd2:	54ca      	strb	r2, [r1, r3]
				temp_num = 33;
 8002dd4:	2321      	movs	r3, #33	; 0x21
 8002dd6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
				SSD1306_GotoXY (6+index*10,33);
 8002dda:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	0092      	lsls	r2, r2, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3306      	adds	r3, #6
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2121      	movs	r1, #33	; 0x21
 8002df0:	4618      	mov	r0, r3
 8002df2:	f001 f93b 	bl	800406c <SSD1306_GotoXY>
				SSD1306_Putc('*',&Font_7x10,0);
 8002df6:	2200      	movs	r2, #0
 8002df8:	491c      	ldr	r1, [pc, #112]	; (8002e6c <Enroll+0x460>)
 8002dfa:	202a      	movs	r0, #42	; 0x2a
 8002dfc:	f001 f94c 	bl	8004098 <SSD1306_Putc>
				SSD1306_UpdateScreen();
 8002e00:	f001 f88e 	bl	8003f20 <SSD1306_UpdateScreen>
				index++;
 8002e04:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e08:	3301      	adds	r3, #1
 8002e0a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
				SSD1306_GotoXY (6+index*10,33);
 8002e0e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	0092      	lsls	r2, r2, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3306      	adds	r3, #6
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2121      	movs	r1, #33	; 0x21
 8002e24:	4618      	mov	r0, r3
 8002e26:	f001 f921 	bl	800406c <SSD1306_GotoXY>
				SSD1306_Putc((char)temp_num,&Font_7x10,0);
 8002e2a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002e2e:	2200      	movs	r2, #0
 8002e30:	490e      	ldr	r1, [pc, #56]	; (8002e6c <Enroll+0x460>)
 8002e32:	4618      	mov	r0, r3
 8002e34:	f001 f930 	bl	8004098 <SSD1306_Putc>
				SSD1306_UpdateScreen();
 8002e38:	f001 f872 	bl	8003f20 <SSD1306_UpdateScreen>
	while(flag){
 8002e3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f47f ae71 	bne.w	8002b28 <Enroll+0x11c>
			}
		}
	}
}
 8002e46:	bf00      	nop
 8002e48:	bf00      	nop
 8002e4a:	375c      	adds	r7, #92	; 0x5c
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd90      	pop	{r4, r7, pc}
 8002e50:	20000278 	.word	0x20000278
 8002e54:	0800da20 	.word	0x0800da20
 8002e58:	20000254 	.word	0x20000254
 8002e5c:	2000026c 	.word	0x2000026c
 8002e60:	2000025c 	.word	0x2000025c
 8002e64:	20000288 	.word	0x20000288
 8002e68:	200002c1 	.word	0x200002c1
 8002e6c:	20000000 	.word	0x20000000

08002e70 <LockDevice>:

void LockDevice(){
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b095      	sub	sp, #84	; 0x54
 8002e74:	af04      	add	r7, sp, #16
	DeviceState=false;
 8002e76:	4bb1      	ldr	r3, [pc, #708]	; (800313c <LockDevice+0x2cc>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
	TimerState=false;
 8002e7c:	4bb0      	ldr	r3, [pc, #704]	; (8003140 <LockDevice+0x2d0>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
	SSD1306_Clear();
 8002e82:	f001 faf6 	bl	8004472 <SSD1306_Clear>
	SSD1306_GotoXY (32,5);
 8002e86:	2105      	movs	r1, #5
 8002e88:	2020      	movs	r0, #32
 8002e8a:	f001 f8ef 	bl	800406c <SSD1306_GotoXY>
	SSD1306_Puts ("Enter pin", &Font_7x10, 1);
 8002e8e:	2201      	movs	r2, #1
 8002e90:	49ac      	ldr	r1, [pc, #688]	; (8003144 <LockDevice+0x2d4>)
 8002e92:	48ad      	ldr	r0, [pc, #692]	; (8003148 <LockDevice+0x2d8>)
 8002e94:	f001 f980 	bl	8004198 <SSD1306_Puts>
	SSD1306_DrawFilledRectangle(3,20,122,30,1);
 8002e98:	2301      	movs	r3, #1
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	231e      	movs	r3, #30
 8002e9e:	227a      	movs	r2, #122	; 0x7a
 8002ea0:	2114      	movs	r1, #20
 8002ea2:	2003      	movs	r0, #3
 8002ea4:	f001 fa98 	bl	80043d8 <SSD1306_DrawFilledRectangle>
	SSD1306_DrawLine(6 ,40,12,40,0);
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	2328      	movs	r3, #40	; 0x28
 8002eae:	220c      	movs	r2, #12
 8002eb0:	2128      	movs	r1, #40	; 0x28
 8002eb2:	2006      	movs	r0, #6
 8002eb4:	f001 f995 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(16,40,22,40,0);
 8002eb8:	2300      	movs	r3, #0
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	2328      	movs	r3, #40	; 0x28
 8002ebe:	2216      	movs	r2, #22
 8002ec0:	2128      	movs	r1, #40	; 0x28
 8002ec2:	2010      	movs	r0, #16
 8002ec4:	f001 f98d 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(26,40,32,40,0);
 8002ec8:	2300      	movs	r3, #0
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	2328      	movs	r3, #40	; 0x28
 8002ece:	2220      	movs	r2, #32
 8002ed0:	2128      	movs	r1, #40	; 0x28
 8002ed2:	201a      	movs	r0, #26
 8002ed4:	f001 f985 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(36,40,42,40,0);
 8002ed8:	2300      	movs	r3, #0
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	2328      	movs	r3, #40	; 0x28
 8002ede:	222a      	movs	r2, #42	; 0x2a
 8002ee0:	2128      	movs	r1, #40	; 0x28
 8002ee2:	2024      	movs	r0, #36	; 0x24
 8002ee4:	f001 f97d 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(46,40,52,40,0);
 8002ee8:	2300      	movs	r3, #0
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2328      	movs	r3, #40	; 0x28
 8002eee:	2234      	movs	r2, #52	; 0x34
 8002ef0:	2128      	movs	r1, #40	; 0x28
 8002ef2:	202e      	movs	r0, #46	; 0x2e
 8002ef4:	f001 f975 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(56,40,62,40,0);
 8002ef8:	2300      	movs	r3, #0
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2328      	movs	r3, #40	; 0x28
 8002efe:	223e      	movs	r2, #62	; 0x3e
 8002f00:	2128      	movs	r1, #40	; 0x28
 8002f02:	2038      	movs	r0, #56	; 0x38
 8002f04:	f001 f96d 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(66,40,72,40,0);
 8002f08:	2300      	movs	r3, #0
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2328      	movs	r3, #40	; 0x28
 8002f0e:	2248      	movs	r2, #72	; 0x48
 8002f10:	2128      	movs	r1, #40	; 0x28
 8002f12:	2042      	movs	r0, #66	; 0x42
 8002f14:	f001 f965 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(76,40,82,40,0);
 8002f18:	2300      	movs	r3, #0
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	2328      	movs	r3, #40	; 0x28
 8002f1e:	2252      	movs	r2, #82	; 0x52
 8002f20:	2128      	movs	r1, #40	; 0x28
 8002f22:	204c      	movs	r0, #76	; 0x4c
 8002f24:	f001 f95d 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(86,40,92,40,0);
 8002f28:	2300      	movs	r3, #0
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	2328      	movs	r3, #40	; 0x28
 8002f2e:	225c      	movs	r2, #92	; 0x5c
 8002f30:	2128      	movs	r1, #40	; 0x28
 8002f32:	2056      	movs	r0, #86	; 0x56
 8002f34:	f001 f955 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(96,40,102,40,0);
 8002f38:	2300      	movs	r3, #0
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	2328      	movs	r3, #40	; 0x28
 8002f3e:	2266      	movs	r2, #102	; 0x66
 8002f40:	2128      	movs	r1, #40	; 0x28
 8002f42:	2060      	movs	r0, #96	; 0x60
 8002f44:	f001 f94d 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(106,40,112,40,0);
 8002f48:	2300      	movs	r3, #0
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2328      	movs	r3, #40	; 0x28
 8002f4e:	2270      	movs	r2, #112	; 0x70
 8002f50:	2128      	movs	r1, #40	; 0x28
 8002f52:	206a      	movs	r0, #106	; 0x6a
 8002f54:	f001 f945 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_DrawLine(116,40,122,40,0);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	2328      	movs	r3, #40	; 0x28
 8002f5e:	227a      	movs	r2, #122	; 0x7a
 8002f60:	2128      	movs	r1, #40	; 0x28
 8002f62:	2074      	movs	r0, #116	; 0x74
 8002f64:	f001 f93d 	bl	80041e2 <SSD1306_DrawLine>
	SSD1306_GotoXY (6,33);
 8002f68:	2121      	movs	r1, #33	; 0x21
 8002f6a:	2006      	movs	r0, #6
 8002f6c:	f001 f87e 	bl	800406c <SSD1306_GotoXY>
	SSD1306_Putc('!',&Font_7x10,0);
 8002f70:	2200      	movs	r2, #0
 8002f72:	4974      	ldr	r1, [pc, #464]	; (8003144 <LockDevice+0x2d4>)
 8002f74:	2021      	movs	r0, #33	; 0x21
 8002f76:	f001 f88f 	bl	8004098 <SSD1306_Putc>
	SSD1306_UpdateScreen();
 8002f7a:	f000 ffd1 	bl	8003f20 <SSD1306_UpdateScreen>
	bool flag = true;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t index=0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t temp_num=33;
 8002f8a:	2321      	movs	r3, #33	; 0x21
 8002f8c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	while(flag){
 8002f90:	e1ac      	b.n	80032ec <LockDevice+0x47c>
		uint8_t temp =checkButtons();
 8002f92:	f000 fd3d 	bl	8003a10 <checkButtons>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if(temp == 0){
 8002f9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d122      	bne.n	8002fea <LockDevice+0x17a>
			//printf("Up\n");
			temp_num++;
 8002fa4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002fa8:	3301      	adds	r3, #1
 8002faa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if(temp_num==127)temp_num=33;
 8002fae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002fb2:	2b7f      	cmp	r3, #127	; 0x7f
 8002fb4:	d102      	bne.n	8002fbc <LockDevice+0x14c>
 8002fb6:	2321      	movs	r3, #33	; 0x21
 8002fb8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			SSD1306_GotoXY (6+index*10,33);
 8002fbc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	0092      	lsls	r2, r2, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3306      	adds	r3, #6
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2121      	movs	r1, #33	; 0x21
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 f84a 	bl	800406c <SSD1306_GotoXY>
			SSD1306_Putc((char)temp_num,&Font_7x10,0);
 8002fd8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002fdc:	2200      	movs	r2, #0
 8002fde:	4959      	ldr	r1, [pc, #356]	; (8003144 <LockDevice+0x2d4>)
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f001 f859 	bl	8004098 <SSD1306_Putc>
			SSD1306_UpdateScreen();
 8002fe6:	f000 ff9b 	bl	8003f20 <SSD1306_UpdateScreen>

		}
		if(temp == 1){
 8002fea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d122      	bne.n	8003038 <LockDevice+0x1c8>
			//printf("Down\n");
			temp_num--;
 8002ff2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if(temp_num<33)temp_num=126;
 8002ffc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003000:	2b20      	cmp	r3, #32
 8003002:	d802      	bhi.n	800300a <LockDevice+0x19a>
 8003004:	237e      	movs	r3, #126	; 0x7e
 8003006:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			SSD1306_GotoXY (6+index*10,33);
 800300a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800300e:	b29b      	uxth	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	0092      	lsls	r2, r2, #2
 8003014:	4413      	add	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	b29b      	uxth	r3, r3
 800301a:	3306      	adds	r3, #6
 800301c:	b29b      	uxth	r3, r3
 800301e:	2121      	movs	r1, #33	; 0x21
 8003020:	4618      	mov	r0, r3
 8003022:	f001 f823 	bl	800406c <SSD1306_GotoXY>
			SSD1306_Putc((char)temp_num,&Font_7x10,0);
 8003026:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800302a:	2200      	movs	r2, #0
 800302c:	4945      	ldr	r1, [pc, #276]	; (8003144 <LockDevice+0x2d4>)
 800302e:	4618      	mov	r0, r3
 8003030:	f001 f832 	bl	8004098 <SSD1306_Putc>
			SSD1306_UpdateScreen();
 8003034:	f000 ff74 	bl	8003f20 <SSD1306_UpdateScreen>

			}
		if(temp == 2){
 8003038:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800303c:	2b02      	cmp	r3, #2
 800303e:	f040 8155 	bne.w	80032ec <LockDevice+0x47c>
			//printf("Both\n");
			if(index == 11){
 8003042:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003046:	2b0b      	cmp	r3, #11
 8003048:	f040 8116 	bne.w	8003278 <LockDevice+0x408>
				password[index]=temp_num;
 800304c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003050:	493e      	ldr	r1, [pc, #248]	; (800314c <LockDevice+0x2dc>)
 8003052:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003056:	54ca      	strb	r2, [r1, r3]
				flag = false;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				SSD1306_GotoXY (6+index*10,33);
 800305e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003062:	b29b      	uxth	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	0092      	lsls	r2, r2, #2
 8003068:	4413      	add	r3, r2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	b29b      	uxth	r3, r3
 800306e:	3306      	adds	r3, #6
 8003070:	b29b      	uxth	r3, r3
 8003072:	2121      	movs	r1, #33	; 0x21
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fff9 	bl	800406c <SSD1306_GotoXY>
				SSD1306_Putc('*',&Font_7x10,0);
 800307a:	2200      	movs	r2, #0
 800307c:	4931      	ldr	r1, [pc, #196]	; (8003144 <LockDevice+0x2d4>)
 800307e:	202a      	movs	r0, #42	; 0x2a
 8003080:	f001 f80a 	bl	8004098 <SSD1306_Putc>
				SSD1306_UpdateScreen();
 8003084:	f000 ff4c 	bl	8003f20 <SSD1306_UpdateScreen>
				//check password
				if(CheckPassword()){
 8003088:	f000 fb12 	bl	80036b0 <CheckPassword>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 8083 	beq.w	800319a <LockDevice+0x32a>
					MY_FLASH_ReadN(MemDatastartpoint + (CurrentUser*72), CurrentLocalSalt, 8, DATA_TYPE_8); //Loading local salt
 8003094:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <LockDevice+0x2e0>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	330b      	adds	r3, #11
 80030a4:	4618      	mov	r0, r3
 80030a6:	2300      	movs	r3, #0
 80030a8:	2208      	movs	r2, #8
 80030aa:	492a      	ldr	r1, [pc, #168]	; (8003154 <LockDevice+0x2e4>)
 80030ac:	f7ff f856 	bl	800215c <MY_FLASH_ReadN>
					MY_FLASH_ReadN(MemDatastartpoint + 8 + (CurrentUser*72), CurrentIV, 16, DATA_TYPE_8); //Loading local IV
 80030b0:	4b27      	ldr	r3, [pc, #156]	; (8003150 <LockDevice+0x2e0>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4413      	add	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	3313      	adds	r3, #19
 80030c0:	4618      	mov	r0, r3
 80030c2:	2300      	movs	r3, #0
 80030c4:	2210      	movs	r2, #16
 80030c6:	4924      	ldr	r1, [pc, #144]	; (8003158 <LockDevice+0x2e8>)
 80030c8:	f7ff f848 	bl	800215c <MY_FLASH_ReadN>
					MY_FLASH_ReadN(MemDatastartpoint + 8 + 16 + 32 + (CurrentUser*72), CurrentMasterKey, 16, DATA_TYPE_8); //Loading encrypted master key
 80030cc:	4b20      	ldr	r3, [pc, #128]	; (8003150 <LockDevice+0x2e0>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4413      	add	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	3343      	adds	r3, #67	; 0x43
 80030dc:	4618      	mov	r0, r3
 80030de:	2300      	movs	r3, #0
 80030e0:	2210      	movs	r2, #16
 80030e2:	491e      	ldr	r1, [pc, #120]	; (800315c <LockDevice+0x2ec>)
 80030e4:	f7ff f83a 	bl	800215c <MY_FLASH_ReadN>
					uint8_t temp[20];
					memcpy(temp, CurrentLocalSalt, sizeof(CurrentLocalSalt));
 80030e8:	4a1a      	ldr	r2, [pc, #104]	; (8003154 <LockDevice+0x2e4>)
 80030ea:	f107 0320 	add.w	r3, r7, #32
 80030ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030f2:	e883 0003 	stmia.w	r3, {r0, r1}
					memcpy(temp + sizeof(CurrentLocalSalt), CurrentPassword, sizeof(CurrentPassword));
 80030f6:	f107 0320 	add.w	r3, r7, #32
 80030fa:	3308      	adds	r3, #8
 80030fc:	4a18      	ldr	r2, [pc, #96]	; (8003160 <LockDevice+0x2f0>)
 80030fe:	461c      	mov	r4, r3
 8003100:	4613      	mov	r3, r2
 8003102:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003104:	6020      	str	r0, [r4, #0]
 8003106:	6061      	str	r1, [r4, #4]
 8003108:	60a2      	str	r2, [r4, #8]
					uint8_t computedSha256[32];
					sha256(temp, computedSha256,sizeof(temp));
 800310a:	4639      	mov	r1, r7
 800310c:	f107 0320 	add.w	r3, r7, #32
 8003110:	2214      	movs	r2, #20
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fc1a 	bl	800394c <sha256>
					DecryptAES(CurrentMasterKey, sizeof(CurrentMasterKey), computedSha256, sizeof(computedSha256), CurrentIV, sizeof(CurrentIV), CurrentMasterKey);
 8003118:	463a      	mov	r2, r7
 800311a:	4b10      	ldr	r3, [pc, #64]	; (800315c <LockDevice+0x2ec>)
 800311c:	9302      	str	r3, [sp, #8]
 800311e:	2310      	movs	r3, #16
 8003120:	9301      	str	r3, [sp, #4]
 8003122:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <LockDevice+0x2e8>)
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	2320      	movs	r3, #32
 8003128:	2110      	movs	r1, #16
 800312a:	480c      	ldr	r0, [pc, #48]	; (800315c <LockDevice+0x2ec>)
 800312c:	f000 fc4c 	bl	80039c8 <DecryptAES>
					printf("DECKey: \n");
 8003130:	480c      	ldr	r0, [pc, #48]	; (8003164 <LockDevice+0x2f4>)
 8003132:	f009 fd65 	bl	800cc00 <puts>
					for(int i=0;i<16;i++)printf("%02x ",CurrentMasterKey[i]);
 8003136:	2300      	movs	r3, #0
 8003138:	63bb      	str	r3, [r7, #56]	; 0x38
 800313a:	e020      	b.n	800317e <LockDevice+0x30e>
 800313c:	200002c4 	.word	0x200002c4
 8003140:	200002c3 	.word	0x200002c3
 8003144:	20000000 	.word	0x20000000
 8003148:	0800da28 	.word	0x0800da28
 800314c:	2000026c 	.word	0x2000026c
 8003150:	2000028a 	.word	0x2000028a
 8003154:	200002a8 	.word	0x200002a8
 8003158:	200002b0 	.word	0x200002b0
 800315c:	20000298 	.word	0x20000298
 8003160:	2000028c 	.word	0x2000028c
 8003164:	0800da34 	.word	0x0800da34
 8003168:	4a65      	ldr	r2, [pc, #404]	; (8003300 <LockDevice+0x490>)
 800316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316c:	4413      	add	r3, r2
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	4619      	mov	r1, r3
 8003172:	4864      	ldr	r0, [pc, #400]	; (8003304 <LockDevice+0x494>)
 8003174:	f009 fcd6 	bl	800cb24 <iprintf>
 8003178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317a:	3301      	adds	r3, #1
 800317c:	63bb      	str	r3, [r7, #56]	; 0x38
 800317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003180:	2b0f      	cmp	r3, #15
 8003182:	ddf1      	ble.n	8003168 <LockDevice+0x2f8>
					printf("\n");
 8003184:	200a      	movs	r0, #10
 8003186:	f009 fcdf 	bl	800cb48 <putchar>
//					while(1);
				  	blink();
 800318a:	f000 fa4d 	bl	8003628 <blink>
				  	DeviceState=true;
 800318e:	4b5e      	ldr	r3, [pc, #376]	; (8003308 <LockDevice+0x498>)
 8003190:	2201      	movs	r2, #1
 8003192:	701a      	strb	r2, [r3, #0]
				  	state=Menu;
 8003194:	4b5d      	ldr	r3, [pc, #372]	; (800330c <LockDevice+0x49c>)
 8003196:	2204      	movs	r2, #4
 8003198:	701a      	strb	r2, [r3, #0]
				}
				if(!CheckPassword()){
 800319a:	f000 fa89 	bl	80036b0 <CheckPassword>
 800319e:	4603      	mov	r3, r0
 80031a0:	f083 0301 	eor.w	r3, r3, #1
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d063      	beq.n	8003272 <LockDevice+0x402>
					//printf("wrong\n");
					MY_FLASH_ReadN(WrongPassword_address,&WrongPassword,1,DATA_TYPE_8);
 80031aa:	2300      	movs	r3, #0
 80031ac:	2201      	movs	r2, #1
 80031ae:	4958      	ldr	r1, [pc, #352]	; (8003310 <LockDevice+0x4a0>)
 80031b0:	2002      	movs	r0, #2
 80031b2:	f7fe ffd3 	bl	800215c <MY_FLASH_ReadN>
					WrongPassword++;
 80031b6:	4b56      	ldr	r3, [pc, #344]	; (8003310 <LockDevice+0x4a0>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	3301      	adds	r3, #1
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	4b54      	ldr	r3, [pc, #336]	; (8003310 <LockDevice+0x4a0>)
 80031c0:	701a      	strb	r2, [r3, #0]
					if(WrongPassword<5){
 80031c2:	4b53      	ldr	r3, [pc, #332]	; (8003310 <LockDevice+0x4a0>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d832      	bhi.n	8003230 <LockDevice+0x3c0>
						if(WrongPassword==1)HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, GPIO_PIN_SET);
 80031ca:	4b51      	ldr	r3, [pc, #324]	; (8003310 <LockDevice+0x4a0>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d105      	bne.n	80031de <LockDevice+0x36e>
 80031d2:	2201      	movs	r2, #1
 80031d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031d8:	484e      	ldr	r0, [pc, #312]	; (8003314 <LockDevice+0x4a4>)
 80031da:	f002 f94f 	bl	800547c <HAL_GPIO_WritePin>
						if(WrongPassword==2)HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_SET);
 80031de:	4b4c      	ldr	r3, [pc, #304]	; (8003310 <LockDevice+0x4a0>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d105      	bne.n	80031f2 <LockDevice+0x382>
 80031e6:	2201      	movs	r2, #1
 80031e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031ec:	4849      	ldr	r0, [pc, #292]	; (8003314 <LockDevice+0x4a4>)
 80031ee:	f002 f945 	bl	800547c <HAL_GPIO_WritePin>
						if(WrongPassword==3)HAL_GPIO_WritePin(Orange_GPIO_Port, Orange_Pin, GPIO_PIN_SET);
 80031f2:	4b47      	ldr	r3, [pc, #284]	; (8003310 <LockDevice+0x4a0>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d105      	bne.n	8003206 <LockDevice+0x396>
 80031fa:	2201      	movs	r2, #1
 80031fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003200:	4844      	ldr	r0, [pc, #272]	; (8003314 <LockDevice+0x4a4>)
 8003202:	f002 f93b 	bl	800547c <HAL_GPIO_WritePin>
						if(WrongPassword==4)HAL_GPIO_WritePin(Red_GPIO_Port,Red_Pin, GPIO_PIN_SET);
 8003206:	4b42      	ldr	r3, [pc, #264]	; (8003310 <LockDevice+0x4a0>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b04      	cmp	r3, #4
 800320c:	d105      	bne.n	800321a <LockDevice+0x3aa>
 800320e:	2201      	movs	r2, #1
 8003210:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003214:	483f      	ldr	r0, [pc, #252]	; (8003314 <LockDevice+0x4a4>)
 8003216:	f002 f931 	bl	800547c <HAL_GPIO_WritePin>
						write_flash(WrongPassword_address, &WrongPassword, 1);
 800321a:	2201      	movs	r2, #1
 800321c:	493c      	ldr	r1, [pc, #240]	; (8003310 <LockDevice+0x4a0>)
 800321e:	2002      	movs	r0, #2
 8003220:	f7fe fff8 	bl	8002214 <write_flash>
						OledAlarm();
 8003224:	f000 f954 	bl	80034d0 <OledAlarm>
						state=Lock;
 8003228:	4b38      	ldr	r3, [pc, #224]	; (800330c <LockDevice+0x49c>)
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	e020      	b.n	8003272 <LockDevice+0x402>
					}else{
						//printf("Erasing\n");
						EraseAlaram();
 8003230:	f000 f980 	bl	8003534 <EraseAlaram>
						EraseMem();
 8003234:	f000 f9a2 	bl	800357c <EraseMem>
						blink();
 8003238:	f000 f9f6 	bl	8003628 <blink>
						HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, GPIO_PIN_RESET);
 800323c:	2200      	movs	r2, #0
 800323e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003242:	4834      	ldr	r0, [pc, #208]	; (8003314 <LockDevice+0x4a4>)
 8003244:	f002 f91a 	bl	800547c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_RESET);
 8003248:	2200      	movs	r2, #0
 800324a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800324e:	4831      	ldr	r0, [pc, #196]	; (8003314 <LockDevice+0x4a4>)
 8003250:	f002 f914 	bl	800547c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Orange_GPIO_Port, Orange_Pin, GPIO_PIN_RESET);
 8003254:	2200      	movs	r2, #0
 8003256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800325a:	482e      	ldr	r0, [pc, #184]	; (8003314 <LockDevice+0x4a4>)
 800325c:	f002 f90e 	bl	800547c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Red_GPIO_Port,Red_Pin, GPIO_PIN_RESET);
 8003260:	2200      	movs	r2, #0
 8003262:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003266:	482b      	ldr	r0, [pc, #172]	; (8003314 <LockDevice+0x4a4>)
 8003268:	f002 f908 	bl	800547c <HAL_GPIO_WritePin>
						state=Enrollment;
 800326c:	4b27      	ldr	r3, [pc, #156]	; (800330c <LockDevice+0x49c>)
 800326e:	2203      	movs	r2, #3
 8003270:	701a      	strb	r2, [r3, #0]
					}
				}
				SSD1306_Clear();
 8003272:	f001 f8fe 	bl	8004472 <SSD1306_Clear>
 8003276:	e039      	b.n	80032ec <LockDevice+0x47c>

			}else{
				password[index]=temp_num;
 8003278:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800327c:	4926      	ldr	r1, [pc, #152]	; (8003318 <LockDevice+0x4a8>)
 800327e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003282:	54ca      	strb	r2, [r1, r3]
				temp_num = 33;
 8003284:	2321      	movs	r3, #33	; 0x21
 8003286:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				SSD1306_GotoXY (6+index*10,33);
 800328a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800328e:	b29b      	uxth	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	0092      	lsls	r2, r2, #2
 8003294:	4413      	add	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	b29b      	uxth	r3, r3
 800329a:	3306      	adds	r3, #6
 800329c:	b29b      	uxth	r3, r3
 800329e:	2121      	movs	r1, #33	; 0x21
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fee3 	bl	800406c <SSD1306_GotoXY>
				SSD1306_Putc('*',&Font_7x10,0);
 80032a6:	2200      	movs	r2, #0
 80032a8:	491c      	ldr	r1, [pc, #112]	; (800331c <LockDevice+0x4ac>)
 80032aa:	202a      	movs	r0, #42	; 0x2a
 80032ac:	f000 fef4 	bl	8004098 <SSD1306_Putc>
				SSD1306_UpdateScreen();
 80032b0:	f000 fe36 	bl	8003f20 <SSD1306_UpdateScreen>
				index++;
 80032b4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80032b8:	3301      	adds	r3, #1
 80032ba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				SSD1306_GotoXY (6+index*10,33);
 80032be:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	0092      	lsls	r2, r2, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3306      	adds	r3, #6
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2121      	movs	r1, #33	; 0x21
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fec9 	bl	800406c <SSD1306_GotoXY>
				SSD1306_Putc((char)temp_num,&Font_7x10,0);
 80032da:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80032de:	2200      	movs	r2, #0
 80032e0:	490e      	ldr	r1, [pc, #56]	; (800331c <LockDevice+0x4ac>)
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fed8 	bl	8004098 <SSD1306_Putc>
				SSD1306_UpdateScreen();
 80032e8:	f000 fe1a 	bl	8003f20 <SSD1306_UpdateScreen>
	while(flag){
 80032ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f47f ae4e 	bne.w	8002f92 <LockDevice+0x122>
			}
		}
	}
}
 80032f6:	bf00      	nop
 80032f8:	bf00      	nop
 80032fa:	3744      	adds	r7, #68	; 0x44
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd90      	pop	{r4, r7, pc}
 8003300:	20000298 	.word	0x20000298
 8003304:	0800da20 	.word	0x0800da20
 8003308:	200002c4 	.word	0x200002c4
 800330c:	200002c1 	.word	0x200002c1
 8003310:	200002c0 	.word	0x200002c0
 8003314:	40020c00 	.word	0x40020c00
 8003318:	2000026c 	.word	0x2000026c
 800331c:	20000000 	.word	0x20000000

08003320 <ResetFactory>:

void ResetFactory(){
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af02      	add	r7, sp, #8
	SSD1306_Clear();
 8003326:	f001 f8a4 	bl	8004472 <SSD1306_Clear>
	SSD1306_DrawFilledRectangle(71,35,25,12,1);
 800332a:	2301      	movs	r3, #1
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	230c      	movs	r3, #12
 8003330:	2219      	movs	r2, #25
 8003332:	2123      	movs	r1, #35	; 0x23
 8003334:	2047      	movs	r0, #71	; 0x47
 8003336:	f001 f84f 	bl	80043d8 <SSD1306_DrawFilledRectangle>
	SSD1306_GotoXY (18,17);
 800333a:	2111      	movs	r1, #17
 800333c:	2012      	movs	r0, #18
 800333e:	f000 fe95 	bl	800406c <SSD1306_GotoXY>
	SSD1306_Puts ("Reset factory",&Font_7x10, 1);
 8003342:	2201      	movs	r2, #1
 8003344:	495b      	ldr	r1, [pc, #364]	; (80034b4 <ResetFactory+0x194>)
 8003346:	485c      	ldr	r0, [pc, #368]	; (80034b8 <ResetFactory+0x198>)
 8003348:	f000 ff26 	bl	8004198 <SSD1306_Puts>
	SSD1306_GotoXY (38,37);
 800334c:	2125      	movs	r1, #37	; 0x25
 800334e:	2026      	movs	r0, #38	; 0x26
 8003350:	f000 fe8c 	bl	800406c <SSD1306_GotoXY>
	SSD1306_Puts ("Yes",&Font_7x10, 1);
 8003354:	2201      	movs	r2, #1
 8003356:	4957      	ldr	r1, [pc, #348]	; (80034b4 <ResetFactory+0x194>)
 8003358:	4858      	ldr	r0, [pc, #352]	; (80034bc <ResetFactory+0x19c>)
 800335a:	f000 ff1d 	bl	8004198 <SSD1306_Puts>
	SSD1306_GotoXY (78,37);
 800335e:	2125      	movs	r1, #37	; 0x25
 8003360:	204e      	movs	r0, #78	; 0x4e
 8003362:	f000 fe83 	bl	800406c <SSD1306_GotoXY>
	SSD1306_Puts ("No",&Font_7x10, 0);
 8003366:	2200      	movs	r2, #0
 8003368:	4952      	ldr	r1, [pc, #328]	; (80034b4 <ResetFactory+0x194>)
 800336a:	4855      	ldr	r0, [pc, #340]	; (80034c0 <ResetFactory+0x1a0>)
 800336c:	f000 ff14 	bl	8004198 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8003370:	f000 fdd6 	bl	8003f20 <SSD1306_UpdateScreen>
	bool YesNo = false;
 8003374:	2300      	movs	r3, #0
 8003376:	71fb      	strb	r3, [r7, #7]
	while(1){
		if(!DeviceState){state=Lock;break;}
 8003378:	4b52      	ldr	r3, [pc, #328]	; (80034c4 <ResetFactory+0x1a4>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	f083 0301 	eor.w	r3, r3, #1
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <ResetFactory+0x6e>
 8003386:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <ResetFactory+0x1a8>)
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	e08e      	b.n	80034ac <ResetFactory+0x18c>
		uint8_t btn_state =checkButtons();
 800338e:	f000 fb3f 	bl	8003a10 <checkButtons>
 8003392:	4603      	mov	r3, r0
 8003394:	71bb      	strb	r3, [r7, #6]
		if(btn_state==0){//up
 8003396:	79bb      	ldrb	r3, [r7, #6]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d129      	bne.n	80033f0 <ResetFactory+0xd0>
			SSD1306_Clear();
 800339c:	f001 f869 	bl	8004472 <SSD1306_Clear>
			SSD1306_DrawFilledRectangle(36,35,25,12,1);
 80033a0:	2301      	movs	r3, #1
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	230c      	movs	r3, #12
 80033a6:	2219      	movs	r2, #25
 80033a8:	2123      	movs	r1, #35	; 0x23
 80033aa:	2024      	movs	r0, #36	; 0x24
 80033ac:	f001 f814 	bl	80043d8 <SSD1306_DrawFilledRectangle>
			SSD1306_GotoXY (18,17);
 80033b0:	2111      	movs	r1, #17
 80033b2:	2012      	movs	r0, #18
 80033b4:	f000 fe5a 	bl	800406c <SSD1306_GotoXY>
			SSD1306_Puts ("Reset factory",&Font_7x10, 1);
 80033b8:	2201      	movs	r2, #1
 80033ba:	493e      	ldr	r1, [pc, #248]	; (80034b4 <ResetFactory+0x194>)
 80033bc:	483e      	ldr	r0, [pc, #248]	; (80034b8 <ResetFactory+0x198>)
 80033be:	f000 feeb 	bl	8004198 <SSD1306_Puts>
			SSD1306_GotoXY (38,37);
 80033c2:	2125      	movs	r1, #37	; 0x25
 80033c4:	2026      	movs	r0, #38	; 0x26
 80033c6:	f000 fe51 	bl	800406c <SSD1306_GotoXY>
			SSD1306_Puts ("Yes",&Font_7x10, 0);
 80033ca:	2200      	movs	r2, #0
 80033cc:	4939      	ldr	r1, [pc, #228]	; (80034b4 <ResetFactory+0x194>)
 80033ce:	483b      	ldr	r0, [pc, #236]	; (80034bc <ResetFactory+0x19c>)
 80033d0:	f000 fee2 	bl	8004198 <SSD1306_Puts>
			SSD1306_GotoXY (78,37);
 80033d4:	2125      	movs	r1, #37	; 0x25
 80033d6:	204e      	movs	r0, #78	; 0x4e
 80033d8:	f000 fe48 	bl	800406c <SSD1306_GotoXY>
			SSD1306_Puts ("No",&Font_7x10, 1);
 80033dc:	2201      	movs	r2, #1
 80033de:	4935      	ldr	r1, [pc, #212]	; (80034b4 <ResetFactory+0x194>)
 80033e0:	4837      	ldr	r0, [pc, #220]	; (80034c0 <ResetFactory+0x1a0>)
 80033e2:	f000 fed9 	bl	8004198 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 80033e6:	f000 fd9b 	bl	8003f20 <SSD1306_UpdateScreen>
			YesNo = true;
 80033ea:	2301      	movs	r3, #1
 80033ec:	71fb      	strb	r3, [r7, #7]
 80033ee:	e7c3      	b.n	8003378 <ResetFactory+0x58>
		}else if(btn_state == 1){//down
 80033f0:	79bb      	ldrb	r3, [r7, #6]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d129      	bne.n	800344a <ResetFactory+0x12a>
			SSD1306_Clear();
 80033f6:	f001 f83c 	bl	8004472 <SSD1306_Clear>
			SSD1306_DrawFilledRectangle(71,35,25,12,1);
 80033fa:	2301      	movs	r3, #1
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	230c      	movs	r3, #12
 8003400:	2219      	movs	r2, #25
 8003402:	2123      	movs	r1, #35	; 0x23
 8003404:	2047      	movs	r0, #71	; 0x47
 8003406:	f000 ffe7 	bl	80043d8 <SSD1306_DrawFilledRectangle>
			SSD1306_GotoXY (18,17);
 800340a:	2111      	movs	r1, #17
 800340c:	2012      	movs	r0, #18
 800340e:	f000 fe2d 	bl	800406c <SSD1306_GotoXY>
			SSD1306_Puts ("Reset factory",&Font_7x10, 1);
 8003412:	2201      	movs	r2, #1
 8003414:	4927      	ldr	r1, [pc, #156]	; (80034b4 <ResetFactory+0x194>)
 8003416:	4828      	ldr	r0, [pc, #160]	; (80034b8 <ResetFactory+0x198>)
 8003418:	f000 febe 	bl	8004198 <SSD1306_Puts>
			SSD1306_GotoXY (38,37);
 800341c:	2125      	movs	r1, #37	; 0x25
 800341e:	2026      	movs	r0, #38	; 0x26
 8003420:	f000 fe24 	bl	800406c <SSD1306_GotoXY>
			SSD1306_Puts ("Yes",&Font_7x10, 1);
 8003424:	2201      	movs	r2, #1
 8003426:	4923      	ldr	r1, [pc, #140]	; (80034b4 <ResetFactory+0x194>)
 8003428:	4824      	ldr	r0, [pc, #144]	; (80034bc <ResetFactory+0x19c>)
 800342a:	f000 feb5 	bl	8004198 <SSD1306_Puts>
			SSD1306_GotoXY (78,37);
 800342e:	2125      	movs	r1, #37	; 0x25
 8003430:	204e      	movs	r0, #78	; 0x4e
 8003432:	f000 fe1b 	bl	800406c <SSD1306_GotoXY>
			SSD1306_Puts ("No",&Font_7x10, 0);
 8003436:	2200      	movs	r2, #0
 8003438:	491e      	ldr	r1, [pc, #120]	; (80034b4 <ResetFactory+0x194>)
 800343a:	4821      	ldr	r0, [pc, #132]	; (80034c0 <ResetFactory+0x1a0>)
 800343c:	f000 feac 	bl	8004198 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8003440:	f000 fd6e 	bl	8003f20 <SSD1306_UpdateScreen>
			YesNo = false;
 8003444:	2300      	movs	r3, #0
 8003446:	71fb      	strb	r3, [r7, #7]
 8003448:	e796      	b.n	8003378 <ResetFactory+0x58>
		}else if(btn_state ==2){//both
 800344a:	79bb      	ldrb	r3, [r7, #6]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d193      	bne.n	8003378 <ResetFactory+0x58>
			if(YesNo){
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d020      	beq.n	8003498 <ResetFactory+0x178>
				EraseAlaram();
 8003456:	f000 f86d 	bl	8003534 <EraseAlaram>
				EraseMem();
 800345a:	f000 f88f 	bl	800357c <EraseMem>
				blink();
 800345e:	f000 f8e3 	bl	8003628 <blink>
				HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, GPIO_PIN_RESET);
 8003462:	2200      	movs	r2, #0
 8003464:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003468:	4818      	ldr	r0, [pc, #96]	; (80034cc <ResetFactory+0x1ac>)
 800346a:	f002 f807 	bl	800547c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_RESET);
 800346e:	2200      	movs	r2, #0
 8003470:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003474:	4815      	ldr	r0, [pc, #84]	; (80034cc <ResetFactory+0x1ac>)
 8003476:	f002 f801 	bl	800547c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Orange_GPIO_Port, Orange_Pin, GPIO_PIN_RESET);
 800347a:	2200      	movs	r2, #0
 800347c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003480:	4812      	ldr	r0, [pc, #72]	; (80034cc <ResetFactory+0x1ac>)
 8003482:	f001 fffb 	bl	800547c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Red_GPIO_Port,Red_Pin, GPIO_PIN_RESET);
 8003486:	2200      	movs	r2, #0
 8003488:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800348c:	480f      	ldr	r0, [pc, #60]	; (80034cc <ResetFactory+0x1ac>)
 800348e:	f001 fff5 	bl	800547c <HAL_GPIO_WritePin>
				state=Enrollment;
 8003492:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <ResetFactory+0x1a8>)
 8003494:	2203      	movs	r2, #3
 8003496:	701a      	strb	r2, [r3, #0]
			}
			if(!YesNo){
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	f083 0301 	eor.w	r3, r3, #1
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <ResetFactory+0x18a>
				//printf("resetCanceled\n");
				state=Menu;
 80034a4:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <ResetFactory+0x1a8>)
 80034a6:	2204      	movs	r2, #4
 80034a8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80034aa:	bf00      	nop
		}
	}
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000000 	.word	0x20000000
 80034b8:	0800da40 	.word	0x0800da40
 80034bc:	0800da50 	.word	0x0800da50
 80034c0:	0800da54 	.word	0x0800da54
 80034c4:	200002c4 	.word	0x200002c4
 80034c8:	200002c1 	.word	0x200002c1
 80034cc:	40020c00 	.word	0x40020c00

080034d0 <OledAlarm>:

void OledAlarm(){
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80034d4:	f000 ffcd 	bl	8004472 <SSD1306_Clear>
	SSD1306_GotoXY (25,0);
 80034d8:	2100      	movs	r1, #0
 80034da:	2019      	movs	r0, #25
 80034dc:	f000 fdc6 	bl	800406c <SSD1306_GotoXY>
	SSD1306_Puts ("Warning", &Font_11x18, 1);
 80034e0:	2201      	movs	r2, #1
 80034e2:	490f      	ldr	r1, [pc, #60]	; (8003520 <OledAlarm+0x50>)
 80034e4:	480f      	ldr	r0, [pc, #60]	; (8003524 <OledAlarm+0x54>)
 80034e6:	f000 fe57 	bl	8004198 <SSD1306_Puts>
	SSD1306_GotoXY (11,36);
 80034ea:	2124      	movs	r1, #36	; 0x24
 80034ec:	200b      	movs	r0, #11
 80034ee:	f000 fdbd 	bl	800406c <SSD1306_GotoXY>
	SSD1306_Putc (4 - WrongPassword + '0', &Font_7x10, 1);
 80034f2:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <OledAlarm+0x58>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2201      	movs	r2, #1
 80034fe:	490b      	ldr	r1, [pc, #44]	; (800352c <OledAlarm+0x5c>)
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fdc9 	bl	8004098 <SSD1306_Putc>
	SSD1306_Puts (" more attempts", &Font_7x10, 1);
 8003506:	2201      	movs	r2, #1
 8003508:	4908      	ldr	r1, [pc, #32]	; (800352c <OledAlarm+0x5c>)
 800350a:	4809      	ldr	r0, [pc, #36]	; (8003530 <OledAlarm+0x60>)
 800350c:	f000 fe44 	bl	8004198 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8003510:	f000 fd06 	bl	8003f20 <SSD1306_UpdateScreen>
	HAL_Delay(3000);
 8003514:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003518:	f001 faac 	bl	8004a74 <HAL_Delay>

}
 800351c:	bf00      	nop
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20000008 	.word	0x20000008
 8003524:	0800da58 	.word	0x0800da58
 8003528:	200002c0 	.word	0x200002c0
 800352c:	20000000 	.word	0x20000000
 8003530:	0800da60 	.word	0x0800da60

08003534 <EraseAlaram>:

void EraseAlaram(){
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8003538:	f000 ff9b 	bl	8004472 <SSD1306_Clear>
	SSD1306_GotoXY (31,14);
 800353c:	210e      	movs	r1, #14
 800353e:	201f      	movs	r0, #31
 8003540:	f000 fd94 	bl	800406c <SSD1306_GotoXY>
	SSD1306_Puts ("Memory", &Font_11x18, 1);
 8003544:	2201      	movs	r2, #1
 8003546:	490a      	ldr	r1, [pc, #40]	; (8003570 <EraseAlaram+0x3c>)
 8003548:	480a      	ldr	r0, [pc, #40]	; (8003574 <EraseAlaram+0x40>)
 800354a:	f000 fe25 	bl	8004198 <SSD1306_Puts>
	SSD1306_GotoXY (14,32);
 800354e:	2120      	movs	r1, #32
 8003550:	200e      	movs	r0, #14
 8003552:	f000 fd8b 	bl	800406c <SSD1306_GotoXY>
	SSD1306_Puts ("erasing:(", &Font_11x18, 1);
 8003556:	2201      	movs	r2, #1
 8003558:	4905      	ldr	r1, [pc, #20]	; (8003570 <EraseAlaram+0x3c>)
 800355a:	4807      	ldr	r0, [pc, #28]	; (8003578 <EraseAlaram+0x44>)
 800355c:	f000 fe1c 	bl	8004198 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8003560:	f000 fcde 	bl	8003f20 <SSD1306_UpdateScreen>
	HAL_Delay(3000);
 8003564:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003568:	f001 fa84 	bl	8004a74 <HAL_Delay>
}
 800356c:	bf00      	nop
 800356e:	bd80      	pop	{r7, pc}
 8003570:	20000008 	.word	0x20000008
 8003574:	0800da70 	.word	0x0800da70
 8003578:	0800da78 	.word	0x0800da78

0800357c <EraseMem>:

void EraseMem(){
 800357c:	b580      	push	{r7, lr}
 800357e:	b0be      	sub	sp, #248	; 0xf8
 8003580:	af00      	add	r7, sp, #0
	uint8_t All0[243] = {0};
 8003582:	2300      	movs	r3, #0
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	f107 0308 	add.w	r3, r7, #8
 800358a:	22ef      	movs	r2, #239	; 0xef
 800358c:	2100      	movs	r1, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f009 fc26 	bl	800cde0 <memset>
	write_flash(0, All0, 243);
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	22f3      	movs	r2, #243	; 0xf3
 8003598:	4619      	mov	r1, r3
 800359a:	2000      	movs	r0, #0
 800359c:	f7fe fe3a 	bl	8002214 <write_flash>
}
 80035a0:	bf00      	nop
 80035a2:	37f8      	adds	r7, #248	; 0xf8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <wrong_LEDs>:

void wrong_LEDs(){
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
	MY_FLASH_ReadN(WrongPassword_address,&WrongPassword,1,DATA_TYPE_8);
 80035ae:	2300      	movs	r3, #0
 80035b0:	2201      	movs	r2, #1
 80035b2:	491b      	ldr	r1, [pc, #108]	; (8003620 <wrong_LEDs+0x78>)
 80035b4:	2002      	movs	r0, #2
 80035b6:	f7fe fdd1 	bl	800215c <MY_FLASH_ReadN>
	for(int i=WrongPassword;i>=0;i--){
 80035ba:	4b19      	ldr	r3, [pc, #100]	; (8003620 <wrong_LEDs+0x78>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	607b      	str	r3, [r7, #4]
 80035c0:	e026      	b.n	8003610 <wrong_LEDs+0x68>
		if(i==1)HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, GPIO_PIN_SET);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d105      	bne.n	80035d4 <wrong_LEDs+0x2c>
 80035c8:	2201      	movs	r2, #1
 80035ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035ce:	4815      	ldr	r0, [pc, #84]	; (8003624 <wrong_LEDs+0x7c>)
 80035d0:	f001 ff54 	bl	800547c <HAL_GPIO_WritePin>
		if(i==2)HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_SET);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d105      	bne.n	80035e6 <wrong_LEDs+0x3e>
 80035da:	2201      	movs	r2, #1
 80035dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035e0:	4810      	ldr	r0, [pc, #64]	; (8003624 <wrong_LEDs+0x7c>)
 80035e2:	f001 ff4b 	bl	800547c <HAL_GPIO_WritePin>
		if(i==3)HAL_GPIO_WritePin(Orange_GPIO_Port, Orange_Pin, GPIO_PIN_SET);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d105      	bne.n	80035f8 <wrong_LEDs+0x50>
 80035ec:	2201      	movs	r2, #1
 80035ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035f2:	480c      	ldr	r0, [pc, #48]	; (8003624 <wrong_LEDs+0x7c>)
 80035f4:	f001 ff42 	bl	800547c <HAL_GPIO_WritePin>
		if(i==4)HAL_GPIO_WritePin(Red_GPIO_Port,Red_Pin, GPIO_PIN_SET);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d105      	bne.n	800360a <wrong_LEDs+0x62>
 80035fe:	2201      	movs	r2, #1
 8003600:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003604:	4807      	ldr	r0, [pc, #28]	; (8003624 <wrong_LEDs+0x7c>)
 8003606:	f001 ff39 	bl	800547c <HAL_GPIO_WritePin>
	for(int i=WrongPassword;i>=0;i--){
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3b01      	subs	r3, #1
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	dad5      	bge.n	80035c2 <wrong_LEDs+0x1a>
	}
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	200002c0 	.word	0x200002c0
 8003624:	40020c00 	.word	0x40020c00

08003628 <blink>:

void blink(){
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, GPIO_PIN_RESET);
 800362e:	2200      	movs	r2, #0
 8003630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003634:	481d      	ldr	r0, [pc, #116]	; (80036ac <blink+0x84>)
 8003636:	f001 ff21 	bl	800547c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_RESET);
 800363a:	2200      	movs	r2, #0
 800363c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003640:	481a      	ldr	r0, [pc, #104]	; (80036ac <blink+0x84>)
 8003642:	f001 ff1b 	bl	800547c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Orange_GPIO_Port, Orange_Pin, GPIO_PIN_RESET);
 8003646:	2200      	movs	r2, #0
 8003648:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800364c:	4817      	ldr	r0, [pc, #92]	; (80036ac <blink+0x84>)
 800364e:	f001 ff15 	bl	800547c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Red_GPIO_Port,Red_Pin, GPIO_PIN_RESET);
 8003652:	2200      	movs	r2, #0
 8003654:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003658:	4814      	ldr	r0, [pc, #80]	; (80036ac <blink+0x84>)
 800365a:	f001 ff0f 	bl	800547c <HAL_GPIO_WritePin>
	for(int i=0;i<6;i++){
 800365e:	2300      	movs	r3, #0
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	e01a      	b.n	800369a <blink+0x72>
		HAL_GPIO_TogglePin(Green_GPIO_Port, Green_Pin);
 8003664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003668:	4810      	ldr	r0, [pc, #64]	; (80036ac <blink+0x84>)
 800366a:	f001 ff20 	bl	80054ae <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Orange_GPIO_Port, Orange_Pin);
 800366e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003672:	480e      	ldr	r0, [pc, #56]	; (80036ac <blink+0x84>)
 8003674:	f001 ff1b 	bl	80054ae <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Red_GPIO_Port, Red_Pin);
 8003678:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800367c:	480b      	ldr	r0, [pc, #44]	; (80036ac <blink+0x84>)
 800367e:	f001 ff16 	bl	80054ae <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Blue_GPIO_Port, Blue_Pin);
 8003682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003686:	4809      	ldr	r0, [pc, #36]	; (80036ac <blink+0x84>)
 8003688:	f001 ff11 	bl	80054ae <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800368c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003690:	f001 f9f0 	bl	8004a74 <HAL_Delay>
	for(int i=0;i<6;i++){
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3301      	adds	r3, #1
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b05      	cmp	r3, #5
 800369e:	dde1      	ble.n	8003664 <blink+0x3c>
	}
	wrong_LEDs();
 80036a0:	f7ff ff82 	bl	80035a8 <wrong_LEDs>
}
 80036a4:	bf00      	nop
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40020c00 	.word	0x40020c00

080036b0 <CheckPassword>:

bool CheckPassword(){
 80036b0:	b590      	push	{r4, r7, lr}
 80036b2:	b097      	sub	sp, #92	; 0x5c
 80036b4:	af00      	add	r7, sp, #0
  uint8_t tempPassword[32];
  MY_FLASH_ReadN(Nusers_address,&user_num,1,DATA_TYPE_8);
 80036b6:	2300      	movs	r3, #0
 80036b8:	2201      	movs	r2, #1
 80036ba:	4927      	ldr	r1, [pc, #156]	; (8003758 <CheckPassword+0xa8>)
 80036bc:	2001      	movs	r0, #1
 80036be:	f7fe fd4d 	bl	800215c <MY_FLASH_ReadN>
  for (int i=0;i<user_num;i++){
 80036c2:	2300      	movs	r3, #0
 80036c4:	657b      	str	r3, [r7, #84]	; 0x54
 80036c6:	e03c      	b.n	8003742 <CheckPassword+0x92>
	    //MY_FLASH_ReadN(GlobalSalt_address,GlobalSalt,8,DATA_TYPE_8);
		uint8_t temp[20];
		memcpy(temp, GlobalSalt, sizeof(GlobalSalt));
 80036c8:	4a24      	ldr	r2, [pc, #144]	; (800375c <CheckPassword+0xac>)
 80036ca:	f107 0320 	add.w	r3, r7, #32
 80036ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036d2:	e883 0003 	stmia.w	r3, {r0, r1}
		memcpy(temp + sizeof(GlobalSalt), password, sizeof(password));
 80036d6:	f107 0320 	add.w	r3, r7, #32
 80036da:	3308      	adds	r3, #8
 80036dc:	4a20      	ldr	r2, [pc, #128]	; (8003760 <CheckPassword+0xb0>)
 80036de:	461c      	mov	r4, r3
 80036e0:	4613      	mov	r3, r2
 80036e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80036e4:	6020      	str	r0, [r4, #0]
 80036e6:	6061      	str	r1, [r4, #4]
 80036e8:	60a2      	str	r2, [r4, #8]
		uint8_t computedSha256[32];
		sha256(temp, computedSha256,sizeof(temp));
 80036ea:	4639      	mov	r1, r7
 80036ec:	f107 0320 	add.w	r3, r7, #32
 80036f0:	2214      	movs	r2, #20
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 f92a 	bl	800394c <sha256>
		MY_FLASH_ReadN(MemDatastartpoint + 8 + 16 + (i*72), tempPassword, 32, DATA_TYPE_8); //saving password
 80036f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	3323      	adds	r3, #35	; 0x23
 8003704:	4618      	mov	r0, r3
 8003706:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800370a:	2300      	movs	r3, #0
 800370c:	2220      	movs	r2, #32
 800370e:	f7fe fd25 	bl	800215c <MY_FLASH_ReadN>
	  if (memcmp(tempPassword, computedSha256, 32) == 0) {
 8003712:	4639      	mov	r1, r7
 8003714:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003718:	2220      	movs	r2, #32
 800371a:	4618      	mov	r0, r3
 800371c:	f009 fb50 	bl	800cdc0 <memcmp>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10a      	bne.n	800373c <CheckPassword+0x8c>
		  CurrentUser = i;
 8003726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003728:	b2da      	uxtb	r2, r3
 800372a:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <CheckPassword+0xb4>)
 800372c:	701a      	strb	r2, [r3, #0]
		  memcpy(CurrentPassword, password, sizeof(password));
 800372e:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <CheckPassword+0xb8>)
 8003730:	4a0b      	ldr	r2, [pc, #44]	; (8003760 <CheckPassword+0xb0>)
 8003732:	ca07      	ldmia	r2, {r0, r1, r2}
 8003734:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  return true;
 8003738:	2301      	movs	r3, #1
 800373a:	e009      	b.n	8003750 <CheckPassword+0xa0>
  for (int i=0;i<user_num;i++){
 800373c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800373e:	3301      	adds	r3, #1
 8003740:	657b      	str	r3, [r7, #84]	; 0x54
 8003742:	4b05      	ldr	r3, [pc, #20]	; (8003758 <CheckPassword+0xa8>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800374a:	4293      	cmp	r3, r2
 800374c:	dbbc      	blt.n	80036c8 <CheckPassword+0x18>
	  }
  }
  return false;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	375c      	adds	r7, #92	; 0x5c
 8003754:	46bd      	mov	sp, r7
 8003756:	bd90      	pop	{r4, r7, pc}
 8003758:	20000288 	.word	0x20000288
 800375c:	2000024c 	.word	0x2000024c
 8003760:	2000026c 	.word	0x2000026c
 8003764:	2000028a 	.word	0x2000028a
 8003768:	2000028c 	.word	0x2000028c

0800376c <CDC_recieveCALLBACK>:

void CDC_recieveCALLBACK(uint8_t *buf, uint32_t len){
 800376c:	b5b0      	push	{r4, r5, r7, lr}
 800376e:	b09e      	sub	sp, #120	; 0x78
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
	//uint8_t status=0;	//0 lock 1 unlock 2 brand new
	uint8_t hwinfo[33] = {
 8003776:	4b6e      	ldr	r3, [pc, #440]	; (8003930 <CDC_recieveCALLBACK+0x1c4>)
 8003778:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800377c:	461d      	mov	r5, r3
 800377e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003786:	682b      	ldr	r3, [r5, #0]
 8003788:	7023      	strb	r3, [r4, #0]
	    0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	};
	if(buf[0]==0){
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d12b      	bne.n	80037ea <CDC_recieveCALLBACK+0x7e>
		MY_FLASH_ReadN(BrandNew_address,&Brand_new,1,DATA_TYPE_8);
 8003792:	2300      	movs	r3, #0
 8003794:	2201      	movs	r2, #1
 8003796:	4967      	ldr	r1, [pc, #412]	; (8003934 <CDC_recieveCALLBACK+0x1c8>)
 8003798:	2000      	movs	r0, #0
 800379a:	f7fe fcdf 	bl	800215c <MY_FLASH_ReadN>
		if(Brand_new == 0){
 800379e:	4b65      	ldr	r3, [pc, #404]	; (8003934 <CDC_recieveCALLBACK+0x1c8>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d109      	bne.n	80037ba <CDC_recieveCALLBACK+0x4e>
			hwinfo[0] = 2;
 80037a6:	2302      	movs	r3, #2
 80037a8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			CDC_Transmit_FS(hwinfo, 33);
 80037ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037b0:	2121      	movs	r1, #33	; 0x21
 80037b2:	4618      	mov	r0, r3
 80037b4:	f008 fc3c 	bl	800c030 <CDC_Transmit_FS>
		printf("\n");
		sha256(result, computed_hash, sizeof(result));
		CDC_Transmit_FS(computed_hash, 32);
		}
	}
}
 80037b8:	e0b6      	b.n	8003928 <CDC_recieveCALLBACK+0x1bc>
		}else if(DeviceState){
 80037ba:	4b5f      	ldr	r3, [pc, #380]	; (8003938 <CDC_recieveCALLBACK+0x1cc>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <CDC_recieveCALLBACK+0x6a>
			hwinfo[0] = 1;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			CDC_Transmit_FS(hwinfo, 33);
 80037c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037cc:	2121      	movs	r1, #33	; 0x21
 80037ce:	4618      	mov	r0, r3
 80037d0:	f008 fc2e 	bl	800c030 <CDC_Transmit_FS>
}
 80037d4:	e0a8      	b.n	8003928 <CDC_recieveCALLBACK+0x1bc>
			hwinfo[0] = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			CDC_Transmit_FS(hwinfo, 33);
 80037dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037e0:	2121      	movs	r1, #33	; 0x21
 80037e2:	4618      	mov	r0, r3
 80037e4:	f008 fc24 	bl	800c030 <CDC_Transmit_FS>
}
 80037e8:	e09e      	b.n	8003928 <CDC_recieveCALLBACK+0x1bc>
	}else if(buf[0]==1){
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d11d      	bne.n	800382e <CDC_recieveCALLBACK+0xc2>
		if(DeviceState){
 80037f2:	4b51      	ldr	r3, [pc, #324]	; (8003938 <CDC_recieveCALLBACK+0x1cc>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00f      	beq.n	800381a <CDC_recieveCALLBACK+0xae>
			hwinfo[0] = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			CDC_Transmit_FS(hwinfo, 33);
 8003800:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003804:	2121      	movs	r1, #33	; 0x21
 8003806:	4618      	mov	r0, r3
 8003808:	f008 fc12 	bl	800c030 <CDC_Transmit_FS>
			DeviceState=0;
 800380c:	4b4a      	ldr	r3, [pc, #296]	; (8003938 <CDC_recieveCALLBACK+0x1cc>)
 800380e:	2200      	movs	r2, #0
 8003810:	701a      	strb	r2, [r3, #0]
			TimerState = 1;
 8003812:	4b4a      	ldr	r3, [pc, #296]	; (800393c <CDC_recieveCALLBACK+0x1d0>)
 8003814:	2201      	movs	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
}
 8003818:	e086      	b.n	8003928 <CDC_recieveCALLBACK+0x1bc>
			hwinfo[0] = 1;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			CDC_Transmit_FS(hwinfo, 33);
 8003820:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003824:	2121      	movs	r1, #33	; 0x21
 8003826:	4618      	mov	r0, r3
 8003828:	f008 fc02 	bl	800c030 <CDC_Transmit_FS>
}
 800382c:	e07c      	b.n	8003928 <CDC_recieveCALLBACK+0x1bc>
	}else if(buf[0]==2){
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d178      	bne.n	8003928 <CDC_recieveCALLBACK+0x1bc>
		if(DeviceState){
 8003836:	4b40      	ldr	r3, [pc, #256]	; (8003938 <CDC_recieveCALLBACK+0x1cc>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d074      	beq.n	8003928 <CDC_recieveCALLBACK+0x1bc>
	    uint32_t carry = 0;
 800383e:	2300      	movs	r3, #0
 8003840:	677b      	str	r3, [r7, #116]	; 0x74
	    uint8_t Key[9] = {buf[1], buf[2], buf[3], buf[4], buf[5], buf[6], buf[7], buf[8], buf[9]};
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	785b      	ldrb	r3, [r3, #1]
 8003846:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	789b      	ldrb	r3, [r3, #2]
 800384e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	78db      	ldrb	r3, [r3, #3]
 8003856:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	791b      	ldrb	r3, [r3, #4]
 800385e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	795b      	ldrb	r3, [r3, #5]
 8003866:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	799b      	ldrb	r3, [r3, #6]
 800386e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	79db      	ldrb	r3, [r3, #7]
 8003876:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	7a1b      	ldrb	r3, [r3, #8]
 800387e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	7a5b      	ldrb	r3, [r3, #9]
 8003886:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	    for (int i = 0; i < 16; i++) {
 800388a:	2300      	movs	r3, #0
 800388c:	673b      	str	r3, [r7, #112]	; 0x70
 800388e:	e022      	b.n	80038d6 <CDC_recieveCALLBACK+0x16a>
	        uint32_t sum = CurrentMasterKey[i] + (i < 9 ? Key[i] : 0) + carry;
 8003890:	4a2b      	ldr	r2, [pc, #172]	; (8003940 <CDC_recieveCALLBACK+0x1d4>)
 8003892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003894:	4413      	add	r3, r2
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	4619      	mov	r1, r3
 800389a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800389c:	2b08      	cmp	r3, #8
 800389e:	dc05      	bgt.n	80038ac <CDC_recieveCALLBACK+0x140>
 80038a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038a6:	4413      	add	r3, r2
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	e000      	b.n	80038ae <CDC_recieveCALLBACK+0x142>
 80038ac:	2300      	movs	r3, #0
 80038ae:	440b      	add	r3, r1
 80038b0:	461a      	mov	r2, r3
 80038b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038b4:	4413      	add	r3, r2
 80038b6:	66bb      	str	r3, [r7, #104]	; 0x68
	        result[i] = sum & 0xFF;
 80038b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038ba:	b2d9      	uxtb	r1, r3
 80038bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80038c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038c2:	4413      	add	r3, r2
 80038c4:	460a      	mov	r2, r1
 80038c6:	701a      	strb	r2, [r3, #0]
	        carry = (sum >> 8) & 0xFF;
 80038c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038ca:	0a1b      	lsrs	r3, r3, #8
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	677b      	str	r3, [r7, #116]	; 0x74
	    for (int i = 0; i < 16; i++) {
 80038d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038d2:	3301      	adds	r3, #1
 80038d4:	673b      	str	r3, [r7, #112]	; 0x70
 80038d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038d8:	2b0f      	cmp	r3, #15
 80038da:	ddd9      	ble.n	8003890 <CDC_recieveCALLBACK+0x124>
		printf("result = ");
 80038dc:	4819      	ldr	r0, [pc, #100]	; (8003944 <CDC_recieveCALLBACK+0x1d8>)
 80038de:	f009 f921 	bl	800cb24 <iprintf>
		for (int i=0;i<16;i++)printf("%02x",result[i]);
 80038e2:	2300      	movs	r3, #0
 80038e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038e6:	e00b      	b.n	8003900 <CDC_recieveCALLBACK+0x194>
 80038e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80038ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ee:	4413      	add	r3, r2
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	4619      	mov	r1, r3
 80038f4:	4814      	ldr	r0, [pc, #80]	; (8003948 <CDC_recieveCALLBACK+0x1dc>)
 80038f6:	f009 f915 	bl	800cb24 <iprintf>
 80038fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fc:	3301      	adds	r3, #1
 80038fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003902:	2b0f      	cmp	r3, #15
 8003904:	ddf0      	ble.n	80038e8 <CDC_recieveCALLBACK+0x17c>
		printf("\n");
 8003906:	200a      	movs	r0, #10
 8003908:	f009 f91e 	bl	800cb48 <putchar>
		sha256(result, computed_hash, sizeof(result));
 800390c:	f107 0108 	add.w	r1, r7, #8
 8003910:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003914:	2210      	movs	r2, #16
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f818 	bl	800394c <sha256>
		CDC_Transmit_FS(computed_hash, 32);
 800391c:	f107 0308 	add.w	r3, r7, #8
 8003920:	2120      	movs	r1, #32
 8003922:	4618      	mov	r0, r3
 8003924:	f008 fb84 	bl	800c030 <CDC_Transmit_FS>
}
 8003928:	bf00      	nop
 800392a:	3778      	adds	r7, #120	; 0x78
 800392c:	46bd      	mov	sp, r7
 800392e:	bdb0      	pop	{r4, r5, r7, pc}
 8003930:	0800da98 	.word	0x0800da98
 8003934:	20000248 	.word	0x20000248
 8003938:	200002c4 	.word	0x200002c4
 800393c:	200002c3 	.word	0x200002c3
 8003940:	20000298 	.word	0x20000298
 8003944:	0800da84 	.word	0x0800da84
 8003948:	0800da90 	.word	0x0800da90

0800394c <sha256>:

void sha256(uint8_t *data,uint8_t *result,uint8_t DataSize){
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	4613      	mov	r3, r2
 8003958:	71fb      	strb	r3, [r7, #7]
	size_t computed_size;
    cmox_hash_compute(CMOX_SHA256_ALGO,         /* Use SHA256 algorithm */
 800395a:	4b08      	ldr	r3, [pc, #32]	; (800397c <sha256+0x30>)
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	79fa      	ldrb	r2, [r7, #7]
 8003960:	f107 0314 	add.w	r3, r7, #20
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	2320      	movs	r3, #32
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	68f9      	ldr	r1, [r7, #12]
 800396e:	f7fd f99f 	bl	8000cb0 <cmox_hash_compute>
    						 data, DataSize, /* Message to digest */
							 result,            /* Data buffer to receive digest data */
							 CMOX_SHA256_SIZE,         /* Expected digest size */
							 &computed_size);          /* Size of computed digest */
}
 8003972:	bf00      	nop
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	0800db80 	.word	0x0800db80

08003980 <AESCBC>:

void AESCBC(uint8_t *Data, uint8_t DataSize, uint8_t *Key, uint8_t KeySize, uint8_t *IVF,uint8_t IVFSize, uint8_t *result){
 8003980:	b590      	push	{r4, r7, lr}
 8003982:	b08d      	sub	sp, #52	; 0x34
 8003984:	af06      	add	r7, sp, #24
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	607a      	str	r2, [r7, #4]
 800398a:	461a      	mov	r2, r3
 800398c:	460b      	mov	r3, r1
 800398e:	72fb      	strb	r3, [r7, #11]
 8003990:	4613      	mov	r3, r2
 8003992:	72bb      	strb	r3, [r7, #10]
	size_t computed_size;
	cmox_cipher_encrypt(CMOX_AES_CBC_ENC_ALGO,                  /* Use AES CBC algorithm */
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <AESCBC+0x44>)
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	7afc      	ldrb	r4, [r7, #11]
 800399a:	7abb      	ldrb	r3, [r7, #10]
 800399c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80039a0:	f107 0114 	add.w	r1, r7, #20
 80039a4:	9104      	str	r1, [sp, #16]
 80039a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039a8:	9103      	str	r1, [sp, #12]
 80039aa:	9202      	str	r2, [sp, #8]
 80039ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039ae:	9201      	str	r2, [sp, #4]
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4622      	mov	r2, r4
 80039b6:	68f9      	ldr	r1, [r7, #12]
 80039b8:	f7fc fe8e 	bl	80006d8 <cmox_cipher_encrypt>
										 Data, DataSize,           /* Plaintext to encrypt */
										 Key, KeySize,                       /* AES key to use */
										 IVF, IVFSize,                         /* Initialization vector */
										 result, &computed_size);   /* Data buffer to receive generated ciphertext */
}
 80039bc:	bf00      	nop
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd90      	pop	{r4, r7, pc}
 80039c4:	0800db18 	.word	0x0800db18

080039c8 <DecryptAES>:

void DecryptAES(uint8_t *Data, uint8_t DataSize, uint8_t *Key, uint8_t KeySize, uint8_t *IVF,uint8_t IVFSize, uint8_t *result){
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b08d      	sub	sp, #52	; 0x34
 80039cc:	af06      	add	r7, sp, #24
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	461a      	mov	r2, r3
 80039d4:	460b      	mov	r3, r1
 80039d6:	72fb      	strb	r3, [r7, #11]
 80039d8:	4613      	mov	r3, r2
 80039da:	72bb      	strb	r3, [r7, #10]
	size_t computed_size;
	cmox_cipher_decrypt(CMOX_AES_CBC_DEC_ALGO,                 /* Use AES CBC algorithm */
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <DecryptAES+0x44>)
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	7afc      	ldrb	r4, [r7, #11]
 80039e2:	7abb      	ldrb	r3, [r7, #10]
 80039e4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80039e8:	f107 0114 	add.w	r1, r7, #20
 80039ec:	9104      	str	r1, [sp, #16]
 80039ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039f0:	9103      	str	r1, [sp, #12]
 80039f2:	9202      	str	r2, [sp, #8]
 80039f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039f6:	9201      	str	r2, [sp, #4]
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4622      	mov	r2, r4
 80039fe:	68f9      	ldr	r1, [r7, #12]
 8003a00:	f7fc fe96 	bl	8000730 <cmox_cipher_decrypt>
								   Data, DataSize,             /* Ciphertext to decrypt */
	                               Key, KeySize,               /* AES key to use */
								   IVF, IVFSize,              /* Initialization vector */
								   result, &computed_size);   /* Data buffer to receive generated plaintext */
}
 8003a04:	bf00      	nop
 8003a06:	371c      	adds	r7, #28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd90      	pop	{r4, r7, pc}
 8003a0c:	0800db0c 	.word	0x0800db0c

08003a10 <checkButtons>:

int checkButtons(){
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
	bool flag_bt1  = true;
 8003a16:	2301      	movs	r3, #1
 8003a18:	71fb      	strb	r3, [r7, #7]
	bool flag_bt2  = true;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	71bb      	strb	r3, [r7, #6]
	bool flag_both = true;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	717b      	strb	r3, [r7, #5]
	while(1){
		if(!DeviceState && TimerState){state=Lock;break;}
 8003a22:	4b40      	ldr	r3, [pc, #256]	; (8003b24 <checkButtons+0x114>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	f083 0301 	eor.w	r3, r3, #1
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d009      	beq.n	8003a44 <checkButtons+0x34>
 8003a30:	4b3d      	ldr	r3, [pc, #244]	; (8003b28 <checkButtons+0x118>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <checkButtons+0x34>
 8003a38:	4b3c      	ldr	r3, [pc, #240]	; (8003b2c <checkButtons+0x11c>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
 8003a3e:	bf00      	nop
		}else if(!read_Bt2() && !flag_bt2 && flag_both){
			flag_bt2  = true;
			return 1;
		}
	}
	return 3;//nothing
 8003a40:	2303      	movs	r3, #3
 8003a42:	e06a      	b.n	8003b1a <checkButtons+0x10a>
		if(read_Bt1() && read_Bt2() && flag_both){
 8003a44:	f000 f874 	bl	8003b30 <read_Bt1>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <checkButtons+0x54>
 8003a4e:	f000 f883 	bl	8003b58 <read_Bt2>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <checkButtons+0x54>
 8003a58:	797b      	ldrb	r3, [r7, #5]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <checkButtons+0x54>
			flag_both = false;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	717b      	strb	r3, [r7, #5]
 8003a62:	e059      	b.n	8003b18 <checkButtons+0x108>
		}else if(read_Bt1() && flag_bt1){
 8003a64:	f000 f864 	bl	8003b30 <read_Bt1>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <checkButtons+0x6a>
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <checkButtons+0x6a>
			flag_bt1 = false;
 8003a74:	2300      	movs	r3, #0
 8003a76:	71fb      	strb	r3, [r7, #7]
 8003a78:	e04e      	b.n	8003b18 <checkButtons+0x108>
		}else if(read_Bt2() && flag_bt2){
 8003a7a:	f000 f86d 	bl	8003b58 <read_Bt2>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <checkButtons+0x80>
 8003a84:	79bb      	ldrb	r3, [r7, #6]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <checkButtons+0x80>
			flag_bt2 = false;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	71bb      	strb	r3, [r7, #6]
 8003a8e:	e043      	b.n	8003b18 <checkButtons+0x108>
		}else if(!read_Bt1() && !read_Bt2() && !flag_both){
 8003a90:	f000 f84e 	bl	8003b30 <read_Bt1>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f083 0301 	eor.w	r3, r3, #1
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d011      	beq.n	8003ac4 <checkButtons+0xb4>
 8003aa0:	f000 f85a 	bl	8003b58 <read_Bt2>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f083 0301 	eor.w	r3, r3, #1
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d009      	beq.n	8003ac4 <checkButtons+0xb4>
 8003ab0:	797b      	ldrb	r3, [r7, #5]
 8003ab2:	f083 0301 	eor.w	r3, r3, #1
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <checkButtons+0xb4>
			flag_both = true;
 8003abc:	2301      	movs	r3, #1
 8003abe:	717b      	strb	r3, [r7, #5]
			return 2;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e02a      	b.n	8003b1a <checkButtons+0x10a>
		}else if(!read_Bt1() && !flag_bt1 && flag_both){
 8003ac4:	f000 f834 	bl	8003b30 <read_Bt1>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f083 0301 	eor.w	r3, r3, #1
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00c      	beq.n	8003aee <checkButtons+0xde>
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	f083 0301 	eor.w	r3, r3, #1
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d006      	beq.n	8003aee <checkButtons+0xde>
 8003ae0:	797b      	ldrb	r3, [r7, #5]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <checkButtons+0xde>
			flag_bt1  = true;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	71fb      	strb	r3, [r7, #7]
			return 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	e015      	b.n	8003b1a <checkButtons+0x10a>
		}else if(!read_Bt2() && !flag_bt2 && flag_both){
 8003aee:	f000 f833 	bl	8003b58 <read_Bt2>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f083 0301 	eor.w	r3, r3, #1
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d091      	beq.n	8003a22 <checkButtons+0x12>
 8003afe:	79bb      	ldrb	r3, [r7, #6]
 8003b00:	f083 0301 	eor.w	r3, r3, #1
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d08b      	beq.n	8003a22 <checkButtons+0x12>
 8003b0a:	797b      	ldrb	r3, [r7, #5]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d088      	beq.n	8003a22 <checkButtons+0x12>
			flag_bt2  = true;
 8003b10:	2301      	movs	r3, #1
 8003b12:	71bb      	strb	r3, [r7, #6]
			return 1;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <checkButtons+0x10a>
		if(!DeviceState && TimerState){state=Lock;break;}
 8003b18:	e783      	b.n	8003a22 <checkButtons+0x12>
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	200002c4 	.word	0x200002c4
 8003b28:	200002c3 	.word	0x200002c3
 8003b2c:	200002c1 	.word	0x200002c1

08003b30 <read_Bt1>:

bool read_Bt1(){
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 8003b34:	2005      	movs	r0, #5
 8003b36:	f000 ff9d 	bl	8004a74 <HAL_Delay>
	return HAL_GPIO_ReadPin(Bt1_GPIO_Port, Bt1_Pin);
 8003b3a:	2140      	movs	r1, #64	; 0x40
 8003b3c:	4805      	ldr	r0, [pc, #20]	; (8003b54 <read_Bt1+0x24>)
 8003b3e:	f001 fc85 	bl	800544c <HAL_GPIO_ReadPin>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40020800 	.word	0x40020800

08003b58 <read_Bt2>:

bool read_Bt2(){
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 8003b5c:	2005      	movs	r0, #5
 8003b5e:	f000 ff89 	bl	8004a74 <HAL_Delay>
	return HAL_GPIO_ReadPin(Bt2_GPIO_Port, Bt2_Pin);
 8003b62:	2180      	movs	r1, #128	; 0x80
 8003b64:	4805      	ldr	r0, [pc, #20]	; (8003b7c <read_Bt2+0x24>)
 8003b66:	f001 fc71 	bl	800544c <HAL_GPIO_ReadPin>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bf14      	ite	ne
 8003b70:	2301      	movne	r3, #1
 8003b72:	2300      	moveq	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40020800 	.word	0x40020800

08003b80 <_write>:

int _write(int file, char *ptr, int len){
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for (DataIdx = 0; DataIdx < len; DataIdx++){
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	e009      	b.n	8003ba6 <_write+0x26>
	 ITM_SendChar(*ptr++);
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	60ba      	str	r2, [r7, #8]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe fbac 	bl	80022f8 <ITM_SendChar>
 for (DataIdx = 0; DataIdx < len; DataIdx++){
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	dbf1      	blt.n	8003b92 <_write+0x12>
 }
 return len;
 8003bae:	687b      	ldr	r3, [r7, #4]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <Get_rng>:

void Get_rng(uint8_t *rng,uint8_t NumRNG){
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<NumRNG;i++){
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	e02b      	b.n	8003c22 <Get_rng+0x6a>
		HAL_RNG_GenerateRandomNumber_IT(&hrng);
 8003bca:	481a      	ldr	r0, [pc, #104]	; (8003c34 <Get_rng+0x7c>)
 8003bcc:	f004 f954 	bl	8007e78 <HAL_RNG_GenerateRandomNumber_IT>
		while(!rngflag);
 8003bd0:	bf00      	nop
 8003bd2:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <Get_rng+0x80>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	f083 0301 	eor.w	r3, r3, #1
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f8      	bne.n	8003bd2 <Get_rng+0x1a>
		rngflag =0;
 8003be0:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <Get_rng+0x80>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
		uint32_t temp_rng = HAL_RNG_ReadLastRandomNumber(&hrng);
 8003be6:	4813      	ldr	r0, [pc, #76]	; (8003c34 <Get_rng+0x7c>)
 8003be8:	f004 f9c9 	bl	8007f7e <HAL_RNG_ReadLastRandomNumber>
 8003bec:	60f8      	str	r0, [r7, #12]
		//printf("temp_rng %d=%08x\n",i,temp_rng);
		for(int j=0;j<4;j++){
 8003bee:	2300      	movs	r3, #0
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	e010      	b.n	8003c16 <Get_rng+0x5e>
			rng[j+i*4] = (uint8_t)(temp_rng >> (j*8));
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	fa22 f103 	lsr.w	r1, r2, r3
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	009a      	lsls	r2, r3, #2
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4413      	add	r3, r2
 8003c06:	461a      	mov	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	b2ca      	uxtb	r2, r1
 8003c0e:	701a      	strb	r2, [r3, #0]
		for(int j=0;j<4;j++){
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	3301      	adds	r3, #1
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	ddeb      	ble.n	8003bf4 <Get_rng+0x3c>
	for(int i=0;i<NumRNG;i++){
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	78fb      	ldrb	r3, [r7, #3]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	dbcf      	blt.n	8003bca <Get_rng+0x12>
			//printf("temp_rng %d=%08x\n",j+i*4,rng[j+i*4]);
		}
	}
}
 8003c2a:	bf00      	nop
 8003c2c:	bf00      	nop
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	200001f0 	.word	0x200001f0
 8003c38:	20000289 	.word	0x20000289

08003c3c <HAL_RNG_ReadyDataCallback>:

void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit){
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
  rngflag =1;
 8003c46:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <HAL_RNG_ReadyDataCallback+0x1c>)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	701a      	strb	r2, [r3, #0]
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	20000289 	.word	0x20000289

08003c5c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  if(DeviceState){
 8003c64:	4b11      	ldr	r3, [pc, #68]	; (8003cac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d015      	beq.n	8003c98 <HAL_TIM_PeriodElapsedCallback+0x3c>
	  Timer++;
 8003c6c:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3301      	adds	r3, #1
 8003c72:	4a0f      	ldr	r2, [pc, #60]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003c74:	6013      	str	r3, [r2, #0]
	  if(Timer == TimeoutValue){
 8003c76:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b78      	cmp	r3, #120	; 0x78
 8003c7c:	d10f      	bne.n	8003c9e <HAL_TIM_PeriodElapsedCallback+0x42>
		  DeviceState=false;
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
		  TimerState=true;		//false is lock true unlock
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	701a      	strb	r2, [r3, #0]
		  state=Lock;
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
		  Timer=0;
 8003c90:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
  }else{
	  //TimerState=false;
	  Timer=0;
  }
  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
}
 8003c96:	e002      	b.n	8003c9e <HAL_TIM_PeriodElapsedCallback+0x42>
	  Timer=0;
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	200002c4 	.word	0x200002c4
 8003cb0:	200002c8 	.word	0x200002c8
 8003cb4:	200002c3 	.word	0x200002c3
 8003cb8:	200002c1 	.word	0x200002c1

08003cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cc0:	b672      	cpsid	i
}
 8003cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cc4:	e7fe      	b.n	8003cc4 <Error_Handler+0x8>

08003cc6 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b086      	sub	sp, #24
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60ba      	str	r2, [r7, #8]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	81fb      	strh	r3, [r7, #14]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	81bb      	strh	r3, [r7, #12]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8003cdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ce0:	3307      	adds	r3, #7
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	da00      	bge.n	8003ce8 <SSD1306_DrawBitmap+0x22>
 8003ce6:	3307      	adds	r3, #7
 8003ce8:	10db      	asrs	r3, r3, #3
 8003cea:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	82bb      	strh	r3, [r7, #20]
 8003cf4:	e044      	b.n	8003d80 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	827b      	strh	r3, [r7, #18]
 8003cfa:	e02f      	b.n	8003d5c <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8003cfc:	8a7b      	ldrh	r3, [r7, #18]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	75fb      	strb	r3, [r7, #23]
 8003d0c:	e012      	b.n	8003d34 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8003d0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d12:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003d16:	fb03 f202 	mul.w	r2, r3, r2
 8003d1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	da00      	bge.n	8003d24 <SSD1306_DrawBitmap+0x5e>
 8003d22:	3307      	adds	r3, #7
 8003d24:	10db      	asrs	r3, r3, #3
 8003d26:	b21b      	sxth	r3, r3
 8003d28:	4413      	add	r3, r2
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4413      	add	r3, r2
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8003d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	da09      	bge.n	8003d50 <SSD1306_DrawBitmap+0x8a>
 8003d3c:	89fa      	ldrh	r2, [r7, #14]
 8003d3e:	8a7b      	ldrh	r3, [r7, #18]
 8003d40:	4413      	add	r3, r2
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	89b9      	ldrh	r1, [r7, #12]
 8003d46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 f92e 	bl	8003fac <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8003d50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3301      	adds	r3, #1
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	827b      	strh	r3, [r7, #18]
 8003d5c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	dbc9      	blt.n	8003cfc <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8003d68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3301      	adds	r3, #1
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	82bb      	strh	r3, [r7, #20]
 8003d74:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	81bb      	strh	r3, [r7, #12]
 8003d80:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003d84:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	dbb4      	blt.n	8003cf6 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8003d8c:	bf00      	nop
 8003d8e:	bf00      	nop
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003d9e:	f000 fb71 	bl	8004484 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003da2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003da6:	2201      	movs	r2, #1
 8003da8:	2178      	movs	r1, #120	; 0x78
 8003daa:	485b      	ldr	r0, [pc, #364]	; (8003f18 <SSD1306_Init+0x180>)
 8003dac:	f001 fddc 	bl	8005968 <HAL_I2C_IsDeviceReady>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	e0a9      	b.n	8003f0e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8003dba:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003dbe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003dc0:	e002      	b.n	8003dc8 <SSD1306_Init+0x30>
		p--;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f9      	bne.n	8003dc2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003dce:	22ae      	movs	r2, #174	; 0xae
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	2078      	movs	r0, #120	; 0x78
 8003dd4:	f000 fbd2 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8003dd8:	2220      	movs	r2, #32
 8003dda:	2100      	movs	r1, #0
 8003ddc:	2078      	movs	r0, #120	; 0x78
 8003dde:	f000 fbcd 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003de2:	2210      	movs	r2, #16
 8003de4:	2100      	movs	r1, #0
 8003de6:	2078      	movs	r0, #120	; 0x78
 8003de8:	f000 fbc8 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003dec:	22b0      	movs	r2, #176	; 0xb0
 8003dee:	2100      	movs	r1, #0
 8003df0:	2078      	movs	r0, #120	; 0x78
 8003df2:	f000 fbc3 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003df6:	22c8      	movs	r2, #200	; 0xc8
 8003df8:	2100      	movs	r1, #0
 8003dfa:	2078      	movs	r0, #120	; 0x78
 8003dfc:	f000 fbbe 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003e00:	2200      	movs	r2, #0
 8003e02:	2100      	movs	r1, #0
 8003e04:	2078      	movs	r0, #120	; 0x78
 8003e06:	f000 fbb9 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003e0a:	2210      	movs	r2, #16
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	2078      	movs	r0, #120	; 0x78
 8003e10:	f000 fbb4 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003e14:	2240      	movs	r2, #64	; 0x40
 8003e16:	2100      	movs	r1, #0
 8003e18:	2078      	movs	r0, #120	; 0x78
 8003e1a:	f000 fbaf 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003e1e:	2281      	movs	r2, #129	; 0x81
 8003e20:	2100      	movs	r1, #0
 8003e22:	2078      	movs	r0, #120	; 0x78
 8003e24:	f000 fbaa 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003e28:	22ff      	movs	r2, #255	; 0xff
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	2078      	movs	r0, #120	; 0x78
 8003e2e:	f000 fba5 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003e32:	22a1      	movs	r2, #161	; 0xa1
 8003e34:	2100      	movs	r1, #0
 8003e36:	2078      	movs	r0, #120	; 0x78
 8003e38:	f000 fba0 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003e3c:	22a6      	movs	r2, #166	; 0xa6
 8003e3e:	2100      	movs	r1, #0
 8003e40:	2078      	movs	r0, #120	; 0x78
 8003e42:	f000 fb9b 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003e46:	22a8      	movs	r2, #168	; 0xa8
 8003e48:	2100      	movs	r1, #0
 8003e4a:	2078      	movs	r0, #120	; 0x78
 8003e4c:	f000 fb96 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003e50:	223f      	movs	r2, #63	; 0x3f
 8003e52:	2100      	movs	r1, #0
 8003e54:	2078      	movs	r0, #120	; 0x78
 8003e56:	f000 fb91 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003e5a:	22a4      	movs	r2, #164	; 0xa4
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	2078      	movs	r0, #120	; 0x78
 8003e60:	f000 fb8c 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003e64:	22d3      	movs	r2, #211	; 0xd3
 8003e66:	2100      	movs	r1, #0
 8003e68:	2078      	movs	r0, #120	; 0x78
 8003e6a:	f000 fb87 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2100      	movs	r1, #0
 8003e72:	2078      	movs	r0, #120	; 0x78
 8003e74:	f000 fb82 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003e78:	22d5      	movs	r2, #213	; 0xd5
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	2078      	movs	r0, #120	; 0x78
 8003e7e:	f000 fb7d 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003e82:	22f0      	movs	r2, #240	; 0xf0
 8003e84:	2100      	movs	r1, #0
 8003e86:	2078      	movs	r0, #120	; 0x78
 8003e88:	f000 fb78 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003e8c:	22d9      	movs	r2, #217	; 0xd9
 8003e8e:	2100      	movs	r1, #0
 8003e90:	2078      	movs	r0, #120	; 0x78
 8003e92:	f000 fb73 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003e96:	2222      	movs	r2, #34	; 0x22
 8003e98:	2100      	movs	r1, #0
 8003e9a:	2078      	movs	r0, #120	; 0x78
 8003e9c:	f000 fb6e 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003ea0:	22da      	movs	r2, #218	; 0xda
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	2078      	movs	r0, #120	; 0x78
 8003ea6:	f000 fb69 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003eaa:	2212      	movs	r2, #18
 8003eac:	2100      	movs	r1, #0
 8003eae:	2078      	movs	r0, #120	; 0x78
 8003eb0:	f000 fb64 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003eb4:	22db      	movs	r2, #219	; 0xdb
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	2078      	movs	r0, #120	; 0x78
 8003eba:	f000 fb5f 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	2078      	movs	r0, #120	; 0x78
 8003ec4:	f000 fb5a 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003ec8:	228d      	movs	r2, #141	; 0x8d
 8003eca:	2100      	movs	r1, #0
 8003ecc:	2078      	movs	r0, #120	; 0x78
 8003ece:	f000 fb55 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003ed2:	2214      	movs	r2, #20
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	2078      	movs	r0, #120	; 0x78
 8003ed8:	f000 fb50 	bl	800457c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003edc:	22af      	movs	r2, #175	; 0xaf
 8003ede:	2100      	movs	r1, #0
 8003ee0:	2078      	movs	r0, #120	; 0x78
 8003ee2:	f000 fb4b 	bl	800457c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8003ee6:	222e      	movs	r2, #46	; 0x2e
 8003ee8:	2100      	movs	r1, #0
 8003eea:	2078      	movs	r0, #120	; 0x78
 8003eec:	f000 fb46 	bl	800457c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	f000 f843 	bl	8003f7c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8003ef6:	f000 f813 	bl	8003f20 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8003efa:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <SSD1306_Init+0x184>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003f00:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <SSD1306_Init+0x184>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003f06:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <SSD1306_Init+0x184>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8003f0c:	2301      	movs	r3, #1
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	2000019c 	.word	0x2000019c
 8003f1c:	200006cc 	.word	0x200006cc

08003f20 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8003f26:	2300      	movs	r3, #0
 8003f28:	71fb      	strb	r3, [r7, #7]
 8003f2a:	e01d      	b.n	8003f68 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	3b50      	subs	r3, #80	; 0x50
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	2100      	movs	r1, #0
 8003f36:	2078      	movs	r0, #120	; 0x78
 8003f38:	f000 fb20 	bl	800457c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2100      	movs	r1, #0
 8003f40:	2078      	movs	r0, #120	; 0x78
 8003f42:	f000 fb1b 	bl	800457c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003f46:	2210      	movs	r2, #16
 8003f48:	2100      	movs	r1, #0
 8003f4a:	2078      	movs	r0, #120	; 0x78
 8003f4c:	f000 fb16 	bl	800457c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	01db      	lsls	r3, r3, #7
 8003f54:	4a08      	ldr	r2, [pc, #32]	; (8003f78 <SSD1306_UpdateScreen+0x58>)
 8003f56:	441a      	add	r2, r3
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	2140      	movs	r1, #64	; 0x40
 8003f5c:	2078      	movs	r0, #120	; 0x78
 8003f5e:	f000 faa7 	bl	80044b0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	3301      	adds	r3, #1
 8003f66:	71fb      	strb	r3, [r7, #7]
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	2b07      	cmp	r3, #7
 8003f6c:	d9de      	bls.n	8003f2c <SSD1306_UpdateScreen+0xc>
	}
}
 8003f6e:	bf00      	nop
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	200002cc 	.word	0x200002cc

08003f7c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <SSD1306_Fill+0x14>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e000      	b.n	8003f92 <SSD1306_Fill+0x16>
 8003f90:	23ff      	movs	r3, #255	; 0xff
 8003f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f96:	4619      	mov	r1, r3
 8003f98:	4803      	ldr	r0, [pc, #12]	; (8003fa8 <SSD1306_Fill+0x2c>)
 8003f9a:	f008 ff21 	bl	800cde0 <memset>
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	200002cc 	.word	0x200002cc

08003fac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	80fb      	strh	r3, [r7, #6]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	80bb      	strh	r3, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	70fb      	strb	r3, [r7, #3]
	if (
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	2b7f      	cmp	r3, #127	; 0x7f
 8003fc2:	d848      	bhi.n	8004056 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003fc4:	88bb      	ldrh	r3, [r7, #4]
 8003fc6:	2b3f      	cmp	r3, #63	; 0x3f
 8003fc8:	d845      	bhi.n	8004056 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003fca:	4b26      	ldr	r3, [pc, #152]	; (8004064 <SSD1306_DrawPixel+0xb8>)
 8003fcc:	791b      	ldrb	r3, [r3, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d006      	beq.n	8003fe0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d11a      	bne.n	800401c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003fe6:	88fa      	ldrh	r2, [r7, #6]
 8003fe8:	88bb      	ldrh	r3, [r7, #4]
 8003fea:	08db      	lsrs	r3, r3, #3
 8003fec:	b298      	uxth	r0, r3
 8003fee:	4603      	mov	r3, r0
 8003ff0:	01db      	lsls	r3, r3, #7
 8003ff2:	4413      	add	r3, r2
 8003ff4:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <SSD1306_DrawPixel+0xbc>)
 8003ff6:	5cd3      	ldrb	r3, [r2, r3]
 8003ff8:	b25a      	sxtb	r2, r3
 8003ffa:	88bb      	ldrh	r3, [r7, #4]
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	2101      	movs	r1, #1
 8004002:	fa01 f303 	lsl.w	r3, r1, r3
 8004006:	b25b      	sxtb	r3, r3
 8004008:	4313      	orrs	r3, r2
 800400a:	b259      	sxtb	r1, r3
 800400c:	88fa      	ldrh	r2, [r7, #6]
 800400e:	4603      	mov	r3, r0
 8004010:	01db      	lsls	r3, r3, #7
 8004012:	4413      	add	r3, r2
 8004014:	b2c9      	uxtb	r1, r1
 8004016:	4a14      	ldr	r2, [pc, #80]	; (8004068 <SSD1306_DrawPixel+0xbc>)
 8004018:	54d1      	strb	r1, [r2, r3]
 800401a:	e01d      	b.n	8004058 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800401c:	88fa      	ldrh	r2, [r7, #6]
 800401e:	88bb      	ldrh	r3, [r7, #4]
 8004020:	08db      	lsrs	r3, r3, #3
 8004022:	b298      	uxth	r0, r3
 8004024:	4603      	mov	r3, r0
 8004026:	01db      	lsls	r3, r3, #7
 8004028:	4413      	add	r3, r2
 800402a:	4a0f      	ldr	r2, [pc, #60]	; (8004068 <SSD1306_DrawPixel+0xbc>)
 800402c:	5cd3      	ldrb	r3, [r2, r3]
 800402e:	b25a      	sxtb	r2, r3
 8004030:	88bb      	ldrh	r3, [r7, #4]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	2101      	movs	r1, #1
 8004038:	fa01 f303 	lsl.w	r3, r1, r3
 800403c:	b25b      	sxtb	r3, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	b25b      	sxtb	r3, r3
 8004042:	4013      	ands	r3, r2
 8004044:	b259      	sxtb	r1, r3
 8004046:	88fa      	ldrh	r2, [r7, #6]
 8004048:	4603      	mov	r3, r0
 800404a:	01db      	lsls	r3, r3, #7
 800404c:	4413      	add	r3, r2
 800404e:	b2c9      	uxtb	r1, r1
 8004050:	4a05      	ldr	r2, [pc, #20]	; (8004068 <SSD1306_DrawPixel+0xbc>)
 8004052:	54d1      	strb	r1, [r2, r3]
 8004054:	e000      	b.n	8004058 <SSD1306_DrawPixel+0xac>
		return;
 8004056:	bf00      	nop
	}
}
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	200006cc 	.word	0x200006cc
 8004068:	200002cc 	.word	0x200002cc

0800406c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	460a      	mov	r2, r1
 8004076:	80fb      	strh	r3, [r7, #6]
 8004078:	4613      	mov	r3, r2
 800407a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800407c:	4a05      	ldr	r2, [pc, #20]	; (8004094 <SSD1306_GotoXY+0x28>)
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8004082:	4a04      	ldr	r2, [pc, #16]	; (8004094 <SSD1306_GotoXY+0x28>)
 8004084:	88bb      	ldrh	r3, [r7, #4]
 8004086:	8053      	strh	r3, [r2, #2]
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	200006cc 	.word	0x200006cc

08004098 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	6039      	str	r1, [r7, #0]
 80040a2:	71fb      	strb	r3, [r7, #7]
 80040a4:	4613      	mov	r3, r2
 80040a6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80040a8:	4b3a      	ldr	r3, [pc, #232]	; (8004194 <SSD1306_Putc+0xfc>)
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	4413      	add	r3, r2
	if (
 80040b4:	2b7f      	cmp	r3, #127	; 0x7f
 80040b6:	dc07      	bgt.n	80040c8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80040b8:	4b36      	ldr	r3, [pc, #216]	; (8004194 <SSD1306_Putc+0xfc>)
 80040ba:	885b      	ldrh	r3, [r3, #2]
 80040bc:	461a      	mov	r2, r3
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	785b      	ldrb	r3, [r3, #1]
 80040c2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80040c4:	2b3f      	cmp	r3, #63	; 0x3f
 80040c6:	dd01      	ble.n	80040cc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	e05e      	b.n	800418a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e04b      	b.n	800416a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	3b20      	subs	r3, #32
 80040da:	6839      	ldr	r1, [r7, #0]
 80040dc:	7849      	ldrb	r1, [r1, #1]
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	4619      	mov	r1, r3
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	440b      	add	r3, r1
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	4413      	add	r3, r2
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	e030      	b.n	8004158 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d010      	beq.n	8004128 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8004106:	4b23      	ldr	r3, [pc, #140]	; (8004194 <SSD1306_Putc+0xfc>)
 8004108:	881a      	ldrh	r2, [r3, #0]
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	b29b      	uxth	r3, r3
 800410e:	4413      	add	r3, r2
 8004110:	b298      	uxth	r0, r3
 8004112:	4b20      	ldr	r3, [pc, #128]	; (8004194 <SSD1306_Putc+0xfc>)
 8004114:	885a      	ldrh	r2, [r3, #2]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	b29b      	uxth	r3, r3
 800411a:	4413      	add	r3, r2
 800411c:	b29b      	uxth	r3, r3
 800411e:	79ba      	ldrb	r2, [r7, #6]
 8004120:	4619      	mov	r1, r3
 8004122:	f7ff ff43 	bl	8003fac <SSD1306_DrawPixel>
 8004126:	e014      	b.n	8004152 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8004128:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <SSD1306_Putc+0xfc>)
 800412a:	881a      	ldrh	r2, [r3, #0]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	b29b      	uxth	r3, r3
 8004130:	4413      	add	r3, r2
 8004132:	b298      	uxth	r0, r3
 8004134:	4b17      	ldr	r3, [pc, #92]	; (8004194 <SSD1306_Putc+0xfc>)
 8004136:	885a      	ldrh	r2, [r3, #2]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	b29b      	uxth	r3, r3
 800413c:	4413      	add	r3, r2
 800413e:	b299      	uxth	r1, r3
 8004140:	79bb      	ldrb	r3, [r7, #6]
 8004142:	2b00      	cmp	r3, #0
 8004144:	bf0c      	ite	eq
 8004146:	2301      	moveq	r3, #1
 8004148:	2300      	movne	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	f7ff ff2d 	bl	8003fac <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	3301      	adds	r3, #1
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4293      	cmp	r3, r2
 8004162:	d3c8      	bcc.n	80040f6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	3301      	adds	r3, #1
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	785b      	ldrb	r3, [r3, #1]
 800416e:	461a      	mov	r2, r3
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	4293      	cmp	r3, r2
 8004174:	d3ad      	bcc.n	80040d2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8004176:	4b07      	ldr	r3, [pc, #28]	; (8004194 <SSD1306_Putc+0xfc>)
 8004178:	881a      	ldrh	r2, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	4413      	add	r3, r2
 8004182:	b29a      	uxth	r2, r3
 8004184:	4b03      	ldr	r3, [pc, #12]	; (8004194 <SSD1306_Putc+0xfc>)
 8004186:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8004188:	79fb      	ldrb	r3, [r7, #7]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	200006cc 	.word	0x200006cc

08004198 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	4613      	mov	r3, r2
 80041a4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80041a6:	e012      	b.n	80041ce <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	79fa      	ldrb	r2, [r7, #7]
 80041ae:	68b9      	ldr	r1, [r7, #8]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff ff71 	bl	8004098 <SSD1306_Putc>
 80041b6:	4603      	mov	r3, r0
 80041b8:	461a      	mov	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d002      	beq.n	80041c8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	e008      	b.n	80041da <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3301      	adds	r3, #1
 80041cc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e8      	bne.n	80041a8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	781b      	ldrb	r3, [r3, #0]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80041e2:	b590      	push	{r4, r7, lr}
 80041e4:	b087      	sub	sp, #28
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	4604      	mov	r4, r0
 80041ea:	4608      	mov	r0, r1
 80041ec:	4611      	mov	r1, r2
 80041ee:	461a      	mov	r2, r3
 80041f0:	4623      	mov	r3, r4
 80041f2:	80fb      	strh	r3, [r7, #6]
 80041f4:	4603      	mov	r3, r0
 80041f6:	80bb      	strh	r3, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	807b      	strh	r3, [r7, #2]
 80041fc:	4613      	mov	r3, r2
 80041fe:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	2b7f      	cmp	r3, #127	; 0x7f
 8004204:	d901      	bls.n	800420a <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8004206:	237f      	movs	r3, #127	; 0x7f
 8004208:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800420a:	887b      	ldrh	r3, [r7, #2]
 800420c:	2b7f      	cmp	r3, #127	; 0x7f
 800420e:	d901      	bls.n	8004214 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8004210:	237f      	movs	r3, #127	; 0x7f
 8004212:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8004214:	88bb      	ldrh	r3, [r7, #4]
 8004216:	2b3f      	cmp	r3, #63	; 0x3f
 8004218:	d901      	bls.n	800421e <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 800421a:	233f      	movs	r3, #63	; 0x3f
 800421c:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800421e:	883b      	ldrh	r3, [r7, #0]
 8004220:	2b3f      	cmp	r3, #63	; 0x3f
 8004222:	d901      	bls.n	8004228 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8004224:	233f      	movs	r3, #63	; 0x3f
 8004226:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8004228:	88fa      	ldrh	r2, [r7, #6]
 800422a:	887b      	ldrh	r3, [r7, #2]
 800422c:	429a      	cmp	r2, r3
 800422e:	d205      	bcs.n	800423c <SSD1306_DrawLine+0x5a>
 8004230:	887a      	ldrh	r2, [r7, #2]
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	b29b      	uxth	r3, r3
 8004238:	b21b      	sxth	r3, r3
 800423a:	e004      	b.n	8004246 <SSD1306_DrawLine+0x64>
 800423c:	88fa      	ldrh	r2, [r7, #6]
 800423e:	887b      	ldrh	r3, [r7, #2]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	b29b      	uxth	r3, r3
 8004244:	b21b      	sxth	r3, r3
 8004246:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8004248:	88ba      	ldrh	r2, [r7, #4]
 800424a:	883b      	ldrh	r3, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d205      	bcs.n	800425c <SSD1306_DrawLine+0x7a>
 8004250:	883a      	ldrh	r2, [r7, #0]
 8004252:	88bb      	ldrh	r3, [r7, #4]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	b29b      	uxth	r3, r3
 8004258:	b21b      	sxth	r3, r3
 800425a:	e004      	b.n	8004266 <SSD1306_DrawLine+0x84>
 800425c:	88ba      	ldrh	r2, [r7, #4]
 800425e:	883b      	ldrh	r3, [r7, #0]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	b29b      	uxth	r3, r3
 8004264:	b21b      	sxth	r3, r3
 8004266:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8004268:	88fa      	ldrh	r2, [r7, #6]
 800426a:	887b      	ldrh	r3, [r7, #2]
 800426c:	429a      	cmp	r2, r3
 800426e:	d201      	bcs.n	8004274 <SSD1306_DrawLine+0x92>
 8004270:	2301      	movs	r3, #1
 8004272:	e001      	b.n	8004278 <SSD1306_DrawLine+0x96>
 8004274:	f04f 33ff 	mov.w	r3, #4294967295
 8004278:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800427a:	88ba      	ldrh	r2, [r7, #4]
 800427c:	883b      	ldrh	r3, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d201      	bcs.n	8004286 <SSD1306_DrawLine+0xa4>
 8004282:	2301      	movs	r3, #1
 8004284:	e001      	b.n	800428a <SSD1306_DrawLine+0xa8>
 8004286:	f04f 33ff 	mov.w	r3, #4294967295
 800428a:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 800428c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004290:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004294:	429a      	cmp	r2, r3
 8004296:	dd06      	ble.n	80042a6 <SSD1306_DrawLine+0xc4>
 8004298:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800429c:	0fda      	lsrs	r2, r3, #31
 800429e:	4413      	add	r3, r2
 80042a0:	105b      	asrs	r3, r3, #1
 80042a2:	b21b      	sxth	r3, r3
 80042a4:	e006      	b.n	80042b4 <SSD1306_DrawLine+0xd2>
 80042a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80042aa:	0fda      	lsrs	r2, r3, #31
 80042ac:	4413      	add	r3, r2
 80042ae:	105b      	asrs	r3, r3, #1
 80042b0:	425b      	negs	r3, r3
 80042b2:	b21b      	sxth	r3, r3
 80042b4:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80042b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d129      	bne.n	8004312 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 80042be:	883a      	ldrh	r2, [r7, #0]
 80042c0:	88bb      	ldrh	r3, [r7, #4]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d205      	bcs.n	80042d2 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80042c6:	883b      	ldrh	r3, [r7, #0]
 80042c8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80042ca:	88bb      	ldrh	r3, [r7, #4]
 80042cc:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80042ce:	893b      	ldrh	r3, [r7, #8]
 80042d0:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80042d2:	887a      	ldrh	r2, [r7, #2]
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d205      	bcs.n	80042e6 <SSD1306_DrawLine+0x104>
			tmp = x1;
 80042da:	887b      	ldrh	r3, [r7, #2]
 80042dc:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80042de:	88fb      	ldrh	r3, [r7, #6]
 80042e0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80042e2:	893b      	ldrh	r3, [r7, #8]
 80042e4:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80042e6:	88bb      	ldrh	r3, [r7, #4]
 80042e8:	82bb      	strh	r3, [r7, #20]
 80042ea:	e00c      	b.n	8004306 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80042ec:	8ab9      	ldrh	r1, [r7, #20]
 80042ee:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fe59 	bl	8003fac <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80042fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3301      	adds	r3, #1
 8004302:	b29b      	uxth	r3, r3
 8004304:	82bb      	strh	r3, [r7, #20]
 8004306:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800430a:	883b      	ldrh	r3, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	dded      	ble.n	80042ec <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8004310:	e05f      	b.n	80043d2 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8004312:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d129      	bne.n	800436e <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 800431a:	883a      	ldrh	r2, [r7, #0]
 800431c:	88bb      	ldrh	r3, [r7, #4]
 800431e:	429a      	cmp	r2, r3
 8004320:	d205      	bcs.n	800432e <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8004322:	883b      	ldrh	r3, [r7, #0]
 8004324:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8004326:	88bb      	ldrh	r3, [r7, #4]
 8004328:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800432a:	893b      	ldrh	r3, [r7, #8]
 800432c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800432e:	887a      	ldrh	r2, [r7, #2]
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	429a      	cmp	r2, r3
 8004334:	d205      	bcs.n	8004342 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8004336:	887b      	ldrh	r3, [r7, #2]
 8004338:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800433e:	893b      	ldrh	r3, [r7, #8]
 8004340:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	82bb      	strh	r3, [r7, #20]
 8004346:	e00c      	b.n	8004362 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8004348:	8abb      	ldrh	r3, [r7, #20]
 800434a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800434e:	88b9      	ldrh	r1, [r7, #4]
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff fe2b 	bl	8003fac <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8004356:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800435a:	b29b      	uxth	r3, r3
 800435c:	3301      	adds	r3, #1
 800435e:	b29b      	uxth	r3, r3
 8004360:	82bb      	strh	r3, [r7, #20]
 8004362:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004366:	887b      	ldrh	r3, [r7, #2]
 8004368:	429a      	cmp	r2, r3
 800436a:	dded      	ble.n	8004348 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 800436c:	e031      	b.n	80043d2 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800436e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004372:	88b9      	ldrh	r1, [r7, #4]
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fe18 	bl	8003fac <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800437c:	88fa      	ldrh	r2, [r7, #6]
 800437e:	887b      	ldrh	r3, [r7, #2]
 8004380:	429a      	cmp	r2, r3
 8004382:	d103      	bne.n	800438c <SSD1306_DrawLine+0x1aa>
 8004384:	88ba      	ldrh	r2, [r7, #4]
 8004386:	883b      	ldrh	r3, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d021      	beq.n	80043d0 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 800438c:	8afb      	ldrh	r3, [r7, #22]
 800438e:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8004390:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004394:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004398:	425b      	negs	r3, r3
 800439a:	429a      	cmp	r2, r3
 800439c:	dd08      	ble.n	80043b0 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800439e:	8afa      	ldrh	r2, [r7, #22]
 80043a0:	8a3b      	ldrh	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80043a8:	89fa      	ldrh	r2, [r7, #14]
 80043aa:	88fb      	ldrh	r3, [r7, #6]
 80043ac:	4413      	add	r3, r2
 80043ae:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 80043b0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80043b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	dad8      	bge.n	800436e <SSD1306_DrawLine+0x18c>
			err += dx;
 80043bc:	8afa      	ldrh	r2, [r7, #22]
 80043be:	8a7b      	ldrh	r3, [r7, #18]
 80043c0:	4413      	add	r3, r2
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80043c6:	89ba      	ldrh	r2, [r7, #12]
 80043c8:	88bb      	ldrh	r3, [r7, #4]
 80043ca:	4413      	add	r3, r2
 80043cc:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80043ce:	e7ce      	b.n	800436e <SSD1306_DrawLine+0x18c>
			break;
 80043d0:	bf00      	nop
		} 
	}
}
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd90      	pop	{r4, r7, pc}

080043d8 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b087      	sub	sp, #28
 80043dc:	af02      	add	r7, sp, #8
 80043de:	4604      	mov	r4, r0
 80043e0:	4608      	mov	r0, r1
 80043e2:	4611      	mov	r1, r2
 80043e4:	461a      	mov	r2, r3
 80043e6:	4623      	mov	r3, r4
 80043e8:	80fb      	strh	r3, [r7, #6]
 80043ea:	4603      	mov	r3, r0
 80043ec:	80bb      	strh	r3, [r7, #4]
 80043ee:	460b      	mov	r3, r1
 80043f0:	807b      	strh	r3, [r7, #2]
 80043f2:	4613      	mov	r3, r2
 80043f4:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	2b7f      	cmp	r3, #127	; 0x7f
 80043fa:	d836      	bhi.n	800446a <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 80043fc:	88bb      	ldrh	r3, [r7, #4]
 80043fe:	2b3f      	cmp	r3, #63	; 0x3f
 8004400:	d833      	bhi.n	800446a <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8004402:	88fa      	ldrh	r2, [r7, #6]
 8004404:	887b      	ldrh	r3, [r7, #2]
 8004406:	4413      	add	r3, r2
 8004408:	2b7f      	cmp	r3, #127	; 0x7f
 800440a:	dd03      	ble.n	8004414 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 800440c:	88fb      	ldrh	r3, [r7, #6]
 800440e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004412:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8004414:	88ba      	ldrh	r2, [r7, #4]
 8004416:	883b      	ldrh	r3, [r7, #0]
 8004418:	4413      	add	r3, r2
 800441a:	2b3f      	cmp	r3, #63	; 0x3f
 800441c:	dd03      	ble.n	8004426 <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 800441e:	88bb      	ldrh	r3, [r7, #4]
 8004420:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004424:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8004426:	2300      	movs	r3, #0
 8004428:	73fb      	strb	r3, [r7, #15]
 800442a:	e018      	b.n	800445e <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	b29a      	uxth	r2, r3
 8004430:	88bb      	ldrh	r3, [r7, #4]
 8004432:	4413      	add	r3, r2
 8004434:	b299      	uxth	r1, r3
 8004436:	88fa      	ldrh	r2, [r7, #6]
 8004438:	887b      	ldrh	r3, [r7, #2]
 800443a:	4413      	add	r3, r2
 800443c:	b29c      	uxth	r4, r3
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	b29a      	uxth	r2, r3
 8004442:	88bb      	ldrh	r3, [r7, #4]
 8004444:	4413      	add	r3, r2
 8004446:	b29a      	uxth	r2, r3
 8004448:	88f8      	ldrh	r0, [r7, #6]
 800444a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	4622      	mov	r2, r4
 8004454:	f7ff fec5 	bl	80041e2 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	3301      	adds	r3, #1
 800445c:	73fb      	strb	r3, [r7, #15]
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	b29b      	uxth	r3, r3
 8004462:	883a      	ldrh	r2, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d2e1      	bcs.n	800442c <SSD1306_DrawFilledRectangle+0x54>
 8004468:	e000      	b.n	800446c <SSD1306_DrawFilledRectangle+0x94>
		return;
 800446a:	bf00      	nop
	}
}
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	bd90      	pop	{r4, r7, pc}

08004472 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8004476:	2000      	movs	r0, #0
 8004478:	f7ff fd80 	bl	8003f7c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800447c:	f7ff fd50 	bl	8003f20 <SSD1306_UpdateScreen>
}
 8004480:	bf00      	nop
 8004482:	bd80      	pop	{r7, pc}

08004484 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <ssd1306_I2C_Init+0x28>)
 800448c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800448e:	e002      	b.n	8004496 <ssd1306_I2C_Init+0x12>
		p--;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3b01      	subs	r3, #1
 8004494:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1f9      	bne.n	8004490 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	0003d090 	.word	0x0003d090

080044b0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80044b0:	b590      	push	{r4, r7, lr}
 80044b2:	b0c7      	sub	sp, #284	; 0x11c
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	4604      	mov	r4, r0
 80044b8:	4608      	mov	r0, r1
 80044ba:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80044be:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80044c2:	600a      	str	r2, [r1, #0]
 80044c4:	4619      	mov	r1, r3
 80044c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80044ca:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80044ce:	4622      	mov	r2, r4
 80044d0:	701a      	strb	r2, [r3, #0]
 80044d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80044d6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80044da:	4602      	mov	r2, r0
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80044e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80044e6:	460a      	mov	r2, r1
 80044e8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80044ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80044ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044f2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80044f6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80044fa:	7812      	ldrb	r2, [r2, #0]
 80044fc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80044fe:	2300      	movs	r3, #0
 8004500:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8004504:	e015      	b.n	8004532 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8004506:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800450a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800450e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	441a      	add	r2, r3
 8004516:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800451a:	3301      	adds	r3, #1
 800451c:	7811      	ldrb	r1, [r2, #0]
 800451e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8004522:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8004526:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8004528:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800452c:	3301      	adds	r3, #1
 800452e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8004532:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8004536:	b29b      	uxth	r3, r3
 8004538:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800453c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8004540:	8812      	ldrh	r2, [r2, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d8df      	bhi.n	8004506 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8004546:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800454a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	b299      	uxth	r1, r3
 8004552:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004556:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	3301      	adds	r3, #1
 800455e:	b29b      	uxth	r3, r3
 8004560:	f107 020c 	add.w	r2, r7, #12
 8004564:	200a      	movs	r0, #10
 8004566:	9000      	str	r0, [sp, #0]
 8004568:	4803      	ldr	r0, [pc, #12]	; (8004578 <ssd1306_I2C_WriteMulti+0xc8>)
 800456a:	f001 f8ff 	bl	800576c <HAL_I2C_Master_Transmit>
}
 800456e:	bf00      	nop
 8004570:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8004574:	46bd      	mov	sp, r7
 8004576:	bd90      	pop	{r4, r7, pc}
 8004578:	2000019c 	.word	0x2000019c

0800457c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af02      	add	r7, sp, #8
 8004582:	4603      	mov	r3, r0
 8004584:	71fb      	strb	r3, [r7, #7]
 8004586:	460b      	mov	r3, r1
 8004588:	71bb      	strb	r3, [r7, #6]
 800458a:	4613      	mov	r3, r2
 800458c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800458e:	79bb      	ldrb	r3, [r7, #6]
 8004590:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8004592:	797b      	ldrb	r3, [r7, #5]
 8004594:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	b299      	uxth	r1, r3
 800459a:	f107 020c 	add.w	r2, r7, #12
 800459e:	230a      	movs	r3, #10
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	2302      	movs	r3, #2
 80045a4:	4803      	ldr	r0, [pc, #12]	; (80045b4 <ssd1306_I2C_Write+0x38>)
 80045a6:	f001 f8e1 	bl	800576c <HAL_I2C_Master_Transmit>
}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	2000019c 	.word	0x2000019c

080045b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045be:	2300      	movs	r3, #0
 80045c0:	607b      	str	r3, [r7, #4]
 80045c2:	4b10      	ldr	r3, [pc, #64]	; (8004604 <HAL_MspInit+0x4c>)
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	4a0f      	ldr	r2, [pc, #60]	; (8004604 <HAL_MspInit+0x4c>)
 80045c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045cc:	6453      	str	r3, [r2, #68]	; 0x44
 80045ce:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <HAL_MspInit+0x4c>)
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d6:	607b      	str	r3, [r7, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045da:	2300      	movs	r3, #0
 80045dc:	603b      	str	r3, [r7, #0]
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <HAL_MspInit+0x4c>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	4a08      	ldr	r2, [pc, #32]	; (8004604 <HAL_MspInit+0x4c>)
 80045e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_MspInit+0x4c>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80045f6:	2007      	movs	r0, #7
 80045f8:	f000 fb30 	bl	8004c5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045fc:	bf00      	nop
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40023800 	.word	0x40023800

08004608 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a0b      	ldr	r2, [pc, #44]	; (8004644 <HAL_CRC_MspInit+0x3c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d10d      	bne.n	8004636 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <HAL_CRC_MspInit+0x40>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	4a09      	ldr	r2, [pc, #36]	; (8004648 <HAL_CRC_MspInit+0x40>)
 8004624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004628:	6313      	str	r3, [r2, #48]	; 0x30
 800462a:	4b07      	ldr	r3, [pc, #28]	; (8004648 <HAL_CRC_MspInit+0x40>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40023000 	.word	0x40023000
 8004648:	40023800 	.word	0x40023800

0800464c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	; 0x28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004654:	f107 0314 	add.w	r3, r7, #20
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	60da      	str	r2, [r3, #12]
 8004662:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a19      	ldr	r2, [pc, #100]	; (80046d0 <HAL_I2C_MspInit+0x84>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d12b      	bne.n	80046c6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	4b18      	ldr	r3, [pc, #96]	; (80046d4 <HAL_I2C_MspInit+0x88>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	4a17      	ldr	r2, [pc, #92]	; (80046d4 <HAL_I2C_MspInit+0x88>)
 8004678:	f043 0302 	orr.w	r3, r3, #2
 800467c:	6313      	str	r3, [r2, #48]	; 0x30
 800467e:	4b15      	ldr	r3, [pc, #84]	; (80046d4 <HAL_I2C_MspInit+0x88>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800468a:	23c0      	movs	r3, #192	; 0xc0
 800468c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800468e:	2312      	movs	r3, #18
 8004690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004692:	2300      	movs	r3, #0
 8004694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004696:	2303      	movs	r3, #3
 8004698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800469a:	2304      	movs	r3, #4
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800469e:	f107 0314 	add.w	r3, r7, #20
 80046a2:	4619      	mov	r1, r3
 80046a4:	480c      	ldr	r0, [pc, #48]	; (80046d8 <HAL_I2C_MspInit+0x8c>)
 80046a6:	f000 fd35 	bl	8005114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <HAL_I2C_MspInit+0x88>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	4a08      	ldr	r2, [pc, #32]	; (80046d4 <HAL_I2C_MspInit+0x88>)
 80046b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046b8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ba:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <HAL_I2C_MspInit+0x88>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80046c6:	bf00      	nop
 80046c8:	3728      	adds	r7, #40	; 0x28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40005400 	.word	0x40005400
 80046d4:	40023800 	.word	0x40023800
 80046d8:	40020400 	.word	0x40020400

080046dc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a0e      	ldr	r2, [pc, #56]	; (8004724 <HAL_RNG_MspInit+0x48>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d115      	bne.n	800471a <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	4b0d      	ldr	r3, [pc, #52]	; (8004728 <HAL_RNG_MspInit+0x4c>)
 80046f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f6:	4a0c      	ldr	r2, [pc, #48]	; (8004728 <HAL_RNG_MspInit+0x4c>)
 80046f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046fc:	6353      	str	r3, [r2, #52]	; 0x34
 80046fe:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <HAL_RNG_MspInit+0x4c>)
 8004700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 800470a:	2200      	movs	r2, #0
 800470c:	2100      	movs	r1, #0
 800470e:	2050      	movs	r0, #80	; 0x50
 8004710:	f000 faaf 	bl	8004c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8004714:	2050      	movs	r0, #80	; 0x50
 8004716:	f000 fac8 	bl	8004caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	50060800 	.word	0x50060800
 8004728:	40023800 	.word	0x40023800

0800472c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473c:	d115      	bne.n	800476a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <HAL_TIM_Base_MspInit+0x48>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	4a0b      	ldr	r2, [pc, #44]	; (8004774 <HAL_TIM_Base_MspInit+0x48>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	6413      	str	r3, [r2, #64]	; 0x40
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <HAL_TIM_Base_MspInit+0x48>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800475a:	2200      	movs	r2, #0
 800475c:	2100      	movs	r1, #0
 800475e:	201c      	movs	r0, #28
 8004760:	f000 fa87 	bl	8004c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004764:	201c      	movs	r0, #28
 8004766:	f000 faa0 	bl	8004caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40023800 	.word	0x40023800

08004778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800477c:	e7fe      	b.n	800477c <NMI_Handler+0x4>

0800477e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800477e:	b480      	push	{r7}
 8004780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004782:	e7fe      	b.n	8004782 <HardFault_Handler+0x4>

08004784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004788:	e7fe      	b.n	8004788 <MemManage_Handler+0x4>

0800478a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800478a:	b480      	push	{r7}
 800478c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800478e:	e7fe      	b.n	800478e <BusFault_Handler+0x4>

08004790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004794:	e7fe      	b.n	8004794 <UsageFault_Handler+0x4>

08004796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004796:	b480      	push	{r7}
 8004798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800479a:	bf00      	nop
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047a8:	bf00      	nop
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047b2:	b480      	push	{r7}
 80047b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047b6:	bf00      	nop
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047c4:	f000 f936 	bl	8004a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047c8:	bf00      	nop
 80047ca:	bd80      	pop	{r7, pc}

080047cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80047d0:	4802      	ldr	r0, [pc, #8]	; (80047dc <TIM2_IRQHandler+0x10>)
 80047d2:	f003 fca9 	bl	8008128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80047d6:	bf00      	nop
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000200 	.word	0x20000200

080047e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80047e4:	4802      	ldr	r0, [pc, #8]	; (80047f0 <OTG_FS_IRQHandler+0x10>)
 80047e6:	f001 fd8c 	bl	8006302 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20001bdc 	.word	0x20001bdc

080047f4 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80047f8:	4802      	ldr	r0, [pc, #8]	; (8004804 <HASH_RNG_IRQHandler+0x10>)
 80047fa:	f003 fb6c 	bl	8007ed6 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 80047fe:	bf00      	nop
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	200001f0 	.word	0x200001f0

08004808 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	e00a      	b.n	8004830 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800481a:	f3af 8000 	nop.w
 800481e:	4601      	mov	r1, r0
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	60ba      	str	r2, [r7, #8]
 8004826:	b2ca      	uxtb	r2, r1
 8004828:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	3301      	adds	r3, #1
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	dbf0      	blt.n	800481a <_read+0x12>
  }

  return len;
 8004838:	687b      	ldr	r3, [r7, #4]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800484a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800486a:	605a      	str	r2, [r3, #4]
  return 0;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <_isatty>:

int _isatty(int file)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004882:	2301      	movs	r3, #1
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048b4:	4a14      	ldr	r2, [pc, #80]	; (8004908 <_sbrk+0x5c>)
 80048b6:	4b15      	ldr	r3, [pc, #84]	; (800490c <_sbrk+0x60>)
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048c0:	4b13      	ldr	r3, [pc, #76]	; (8004910 <_sbrk+0x64>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d102      	bne.n	80048ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048c8:	4b11      	ldr	r3, [pc, #68]	; (8004910 <_sbrk+0x64>)
 80048ca:	4a12      	ldr	r2, [pc, #72]	; (8004914 <_sbrk+0x68>)
 80048cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048ce:	4b10      	ldr	r3, [pc, #64]	; (8004910 <_sbrk+0x64>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4413      	add	r3, r2
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d207      	bcs.n	80048ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048dc:	f008 face 	bl	800ce7c <__errno>
 80048e0:	4603      	mov	r3, r0
 80048e2:	220c      	movs	r2, #12
 80048e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048e6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ea:	e009      	b.n	8004900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048ec:	4b08      	ldr	r3, [pc, #32]	; (8004910 <_sbrk+0x64>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048f2:	4b07      	ldr	r3, [pc, #28]	; (8004910 <_sbrk+0x64>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4413      	add	r3, r2
 80048fa:	4a05      	ldr	r2, [pc, #20]	; (8004910 <_sbrk+0x64>)
 80048fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048fe:	68fb      	ldr	r3, [r7, #12]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20020000 	.word	0x20020000
 800490c:	00000400 	.word	0x00000400
 8004910:	200006d4 	.word	0x200006d4
 8004914:	20002430 	.word	0x20002430

08004918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800491c:	4b06      	ldr	r3, [pc, #24]	; (8004938 <SystemInit+0x20>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	4a05      	ldr	r2, [pc, #20]	; (8004938 <SystemInit+0x20>)
 8004924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800492c:	bf00      	nop
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	e000ed00 	.word	0xe000ed00

0800493c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800493c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004974 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004940:	f7ff ffea 	bl	8004918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004944:	480c      	ldr	r0, [pc, #48]	; (8004978 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004946:	490d      	ldr	r1, [pc, #52]	; (800497c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004948:	4a0d      	ldr	r2, [pc, #52]	; (8004980 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800494a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800494c:	e002      	b.n	8004954 <LoopCopyDataInit>

0800494e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800494e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004952:	3304      	adds	r3, #4

08004954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004958:	d3f9      	bcc.n	800494e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800495a:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800495c:	4c0a      	ldr	r4, [pc, #40]	; (8004988 <LoopFillZerobss+0x22>)
  movs r3, #0
 800495e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004960:	e001      	b.n	8004966 <LoopFillZerobss>

08004962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004964:	3204      	adds	r2, #4

08004966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004968:	d3fb      	bcc.n	8004962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800496a:	f008 fa8d 	bl	800ce88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800496e:	f7fd fceb 	bl	8002348 <main>
  bx  lr    
 8004972:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800497c:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8004980:	0801001c 	.word	0x0801001c
  ldr r2, =_sbss
 8004984:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8004988:	2000242c 	.word	0x2000242c

0800498c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800498c:	e7fe      	b.n	800498c <ADC_IRQHandler>
	...

08004990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004994:	4b0e      	ldr	r3, [pc, #56]	; (80049d0 <HAL_Init+0x40>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0d      	ldr	r2, [pc, #52]	; (80049d0 <HAL_Init+0x40>)
 800499a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800499e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_Init+0x40>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a0a      	ldr	r2, [pc, #40]	; (80049d0 <HAL_Init+0x40>)
 80049a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049ac:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <HAL_Init+0x40>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a07      	ldr	r2, [pc, #28]	; (80049d0 <HAL_Init+0x40>)
 80049b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049b8:	2003      	movs	r0, #3
 80049ba:	f000 f94f 	bl	8004c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049be:	2000      	movs	r0, #0
 80049c0:	f000 f808 	bl	80049d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049c4:	f7ff fdf8 	bl	80045b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40023c00 	.word	0x40023c00

080049d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049dc:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <HAL_InitTick+0x54>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4b12      	ldr	r3, [pc, #72]	; (8004a2c <HAL_InitTick+0x58>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	4619      	mov	r1, r3
 80049e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80049ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 f967 	bl	8004cc6 <HAL_SYSTICK_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e00e      	b.n	8004a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b0f      	cmp	r3, #15
 8004a06:	d80a      	bhi.n	8004a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a08:	2200      	movs	r2, #0
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a10:	f000 f92f 	bl	8004c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a14:	4a06      	ldr	r2, [pc, #24]	; (8004a30 <HAL_InitTick+0x5c>)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e000      	b.n	8004a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000014 	.word	0x20000014
 8004a2c:	2000001c 	.word	0x2000001c
 8004a30:	20000018 	.word	0x20000018

08004a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <HAL_IncTick+0x20>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <HAL_IncTick+0x24>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4413      	add	r3, r2
 8004a44:	4a04      	ldr	r2, [pc, #16]	; (8004a58 <HAL_IncTick+0x24>)
 8004a46:	6013      	str	r3, [r2, #0]
}
 8004a48:	bf00      	nop
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	2000001c 	.word	0x2000001c
 8004a58:	200006d8 	.word	0x200006d8

08004a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8004a60:	4b03      	ldr	r3, [pc, #12]	; (8004a70 <HAL_GetTick+0x14>)
 8004a62:	681b      	ldr	r3, [r3, #0]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	200006d8 	.word	0x200006d8

08004a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a7c:	f7ff ffee 	bl	8004a5c <HAL_GetTick>
 8004a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8c:	d005      	beq.n	8004a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <HAL_Delay+0x44>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a9a:	bf00      	nop
 8004a9c:	f7ff ffde 	bl	8004a5c <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d8f7      	bhi.n	8004a9c <HAL_Delay+0x28>
  {
  }
}
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	2000001c 	.word	0x2000001c

08004abc <__NVIC_SetPriorityGrouping>:
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004acc:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <__NVIC_SetPriorityGrouping+0x44>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ad8:	4013      	ands	r3, r2
 8004ada:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aee:	4a04      	ldr	r2, [pc, #16]	; (8004b00 <__NVIC_SetPriorityGrouping+0x44>)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	60d3      	str	r3, [r2, #12]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	e000ed00 	.word	0xe000ed00

08004b04 <__NVIC_GetPriorityGrouping>:
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b08:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <__NVIC_GetPriorityGrouping+0x18>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	0a1b      	lsrs	r3, r3, #8
 8004b0e:	f003 0307 	and.w	r3, r3, #7
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	e000ed00 	.word	0xe000ed00

08004b20 <__NVIC_EnableIRQ>:
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	db0b      	blt.n	8004b4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	f003 021f 	and.w	r2, r3, #31
 8004b38:	4907      	ldr	r1, [pc, #28]	; (8004b58 <__NVIC_EnableIRQ+0x38>)
 8004b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	2001      	movs	r0, #1
 8004b42:	fa00 f202 	lsl.w	r2, r0, r2
 8004b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	e000e100 	.word	0xe000e100

08004b5c <__NVIC_SetPriority>:
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	6039      	str	r1, [r7, #0]
 8004b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	db0a      	blt.n	8004b86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	490c      	ldr	r1, [pc, #48]	; (8004ba8 <__NVIC_SetPriority+0x4c>)
 8004b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7a:	0112      	lsls	r2, r2, #4
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	440b      	add	r3, r1
 8004b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004b84:	e00a      	b.n	8004b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	4908      	ldr	r1, [pc, #32]	; (8004bac <__NVIC_SetPriority+0x50>)
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	3b04      	subs	r3, #4
 8004b94:	0112      	lsls	r2, r2, #4
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	440b      	add	r3, r1
 8004b9a:	761a      	strb	r2, [r3, #24]
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	e000e100 	.word	0xe000e100
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <NVIC_EncodePriority>:
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b089      	sub	sp, #36	; 0x24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f1c3 0307 	rsb	r3, r3, #7
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	bf28      	it	cs
 8004bce:	2304      	movcs	r3, #4
 8004bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	2b06      	cmp	r3, #6
 8004bd8:	d902      	bls.n	8004be0 <NVIC_EncodePriority+0x30>
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	3b03      	subs	r3, #3
 8004bde:	e000      	b.n	8004be2 <NVIC_EncodePriority+0x32>
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be4:	f04f 32ff 	mov.w	r2, #4294967295
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	43da      	mvns	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	401a      	ands	r2, r3
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004c02:	43d9      	mvns	r1, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c08:	4313      	orrs	r3, r2
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3724      	adds	r7, #36	; 0x24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <SysTick_Config>:
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c28:	d301      	bcc.n	8004c2e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e00f      	b.n	8004c4e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c2e:	4a0a      	ldr	r2, [pc, #40]	; (8004c58 <SysTick_Config+0x40>)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c36:	210f      	movs	r1, #15
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3c:	f7ff ff8e 	bl	8004b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c40:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <SysTick_Config+0x40>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c46:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <SysTick_Config+0x40>)
 8004c48:	2207      	movs	r2, #7
 8004c4a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	e000e010 	.word	0xe000e010

08004c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff ff29 	bl	8004abc <__NVIC_SetPriorityGrouping>
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b086      	sub	sp, #24
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	4603      	mov	r3, r0
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]
 8004c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c84:	f7ff ff3e 	bl	8004b04 <__NVIC_GetPriorityGrouping>
 8004c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	6978      	ldr	r0, [r7, #20]
 8004c90:	f7ff ff8e 	bl	8004bb0 <NVIC_EncodePriority>
 8004c94:	4602      	mov	r2, r0
 8004c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff ff5d 	bl	8004b5c <__NVIC_SetPriority>
}
 8004ca2:	bf00      	nop
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b082      	sub	sp, #8
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff ff31 	bl	8004b20 <__NVIC_EnableIRQ>
}
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b082      	sub	sp, #8
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff ffa2 	bl	8004c18 <SysTick_Config>
 8004cd4:	4603      	mov	r3, r0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b082      	sub	sp, #8
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e00e      	b.n	8004d0e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	795b      	ldrb	r3, [r3, #5]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d105      	bne.n	8004d06 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff fc81 	bl	8004608 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004d2a:	4b23      	ldr	r3, [pc, #140]	; (8004db8 <HAL_FLASH_Program+0xa0>)
 8004d2c:	7e1b      	ldrb	r3, [r3, #24]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_FLASH_Program+0x1e>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e03b      	b.n	8004dae <HAL_FLASH_Program+0x96>
 8004d36:	4b20      	ldr	r3, [pc, #128]	; (8004db8 <HAL_FLASH_Program+0xa0>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d40:	f000 f870 	bl	8004e24 <FLASH_WaitForLastOperation>
 8004d44:	4603      	mov	r3, r0
 8004d46:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d12b      	bne.n	8004da6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d105      	bne.n	8004d60 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004d54:	783b      	ldrb	r3, [r7, #0]
 8004d56:	4619      	mov	r1, r3
 8004d58:	68b8      	ldr	r0, [r7, #8]
 8004d5a:	f000 f91b 	bl	8004f94 <FLASH_Program_Byte>
 8004d5e:	e016      	b.n	8004d8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d105      	bne.n	8004d72 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004d66:	883b      	ldrh	r3, [r7, #0]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	68b8      	ldr	r0, [r7, #8]
 8004d6c:	f000 f8ee 	bl	8004f4c <FLASH_Program_HalfWord>
 8004d70:	e00d      	b.n	8004d8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d105      	bne.n	8004d84 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	68b8      	ldr	r0, [r7, #8]
 8004d7e:	f000 f8c3 	bl	8004f08 <FLASH_Program_Word>
 8004d82:	e004      	b.n	8004d8e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d88:	68b8      	ldr	r0, [r7, #8]
 8004d8a:	f000 f88b 	bl	8004ea4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d92:	f000 f847 	bl	8004e24 <FLASH_WaitForLastOperation>
 8004d96:	4603      	mov	r3, r0
 8004d98:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004d9a:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <HAL_FLASH_Program+0xa4>)
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	4a07      	ldr	r2, [pc, #28]	; (8004dbc <HAL_FLASH_Program+0xa4>)
 8004da0:	f023 0301 	bic.w	r3, r3, #1
 8004da4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004da6:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <HAL_FLASH_Program+0xa0>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	200006dc 	.word	0x200006dc
 8004dbc:	40023c00 	.word	0x40023c00

08004dc0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004dca:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <HAL_FLASH_Unlock+0x38>)
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	da0b      	bge.n	8004dea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004dd2:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <HAL_FLASH_Unlock+0x38>)
 8004dd4:	4a09      	ldr	r2, [pc, #36]	; (8004dfc <HAL_FLASH_Unlock+0x3c>)
 8004dd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004dd8:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <HAL_FLASH_Unlock+0x38>)
 8004dda:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <HAL_FLASH_Unlock+0x40>)
 8004ddc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004dde:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <HAL_FLASH_Unlock+0x38>)
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	da01      	bge.n	8004dea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004dea:	79fb      	ldrb	r3, [r7, #7]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	40023c00 	.word	0x40023c00
 8004dfc:	45670123 	.word	0x45670123
 8004e00:	cdef89ab 	.word	0xcdef89ab

08004e04 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <HAL_FLASH_Lock+0x1c>)
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	4a04      	ldr	r2, [pc, #16]	; (8004e20 <HAL_FLASH_Lock+0x1c>)
 8004e0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e12:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	40023c00 	.word	0x40023c00

08004e24 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e30:	4b1a      	ldr	r3, [pc, #104]	; (8004e9c <FLASH_WaitForLastOperation+0x78>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004e36:	f7ff fe11 	bl	8004a5c <HAL_GetTick>
 8004e3a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004e3c:	e010      	b.n	8004e60 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e44:	d00c      	beq.n	8004e60 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <FLASH_WaitForLastOperation+0x38>
 8004e4c:	f7ff fe06 	bl	8004a5c <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d201      	bcs.n	8004e60 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e019      	b.n	8004e94 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004e60:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <FLASH_WaitForLastOperation+0x7c>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e8      	bne.n	8004e3e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <FLASH_WaitForLastOperation+0x7c>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004e78:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <FLASH_WaitForLastOperation+0x7c>)
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004e7e:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <FLASH_WaitForLastOperation+0x7c>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004e8a:	f000 f8a5 	bl	8004fd8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
  
}  
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	200006dc 	.word	0x200006dc
 8004ea0:	40023c00 	.word	0x40023c00

08004ea4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004eb0:	4b14      	ldr	r3, [pc, #80]	; (8004f04 <FLASH_Program_DoubleWord+0x60>)
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <FLASH_Program_DoubleWord+0x60>)
 8004eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004ebc:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <FLASH_Program_DoubleWord+0x60>)
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	4a10      	ldr	r2, [pc, #64]	; (8004f04 <FLASH_Program_DoubleWord+0x60>)
 8004ec2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004ec6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004ec8:	4b0e      	ldr	r3, [pc, #56]	; (8004f04 <FLASH_Program_DoubleWord+0x60>)
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	4a0d      	ldr	r2, [pc, #52]	; (8004f04 <FLASH_Program_DoubleWord+0x60>)
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004eda:	f3bf 8f6f 	isb	sy
}
 8004ede:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004ee0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	000a      	movs	r2, r1
 8004eee:	2300      	movs	r3, #0
 8004ef0:	68f9      	ldr	r1, [r7, #12]
 8004ef2:	3104      	adds	r1, #4
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	600b      	str	r3, [r1, #0]
}
 8004ef8:	bf00      	nop
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	40023c00 	.word	0x40023c00

08004f08 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f12:	4b0d      	ldr	r3, [pc, #52]	; (8004f48 <FLASH_Program_Word+0x40>)
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	4a0c      	ldr	r2, [pc, #48]	; (8004f48 <FLASH_Program_Word+0x40>)
 8004f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004f1e:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <FLASH_Program_Word+0x40>)
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <FLASH_Program_Word+0x40>)
 8004f24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f28:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004f2a:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <FLASH_Program_Word+0x40>)
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	4a06      	ldr	r2, [pc, #24]	; (8004f48 <FLASH_Program_Word+0x40>)
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	601a      	str	r2, [r3, #0]
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	40023c00 	.word	0x40023c00

08004f4c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f58:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <FLASH_Program_HalfWord+0x44>)
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	4a0c      	ldr	r2, [pc, #48]	; (8004f90 <FLASH_Program_HalfWord+0x44>)
 8004f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004f64:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <FLASH_Program_HalfWord+0x44>)
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	4a09      	ldr	r2, [pc, #36]	; (8004f90 <FLASH_Program_HalfWord+0x44>)
 8004f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004f70:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <FLASH_Program_HalfWord+0x44>)
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	4a06      	ldr	r2, [pc, #24]	; (8004f90 <FLASH_Program_HalfWord+0x44>)
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	887a      	ldrh	r2, [r7, #2]
 8004f80:	801a      	strh	r2, [r3, #0]
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40023c00 	.word	0x40023c00

08004f94 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004fa0:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <FLASH_Program_Byte+0x40>)
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	4a0b      	ldr	r2, [pc, #44]	; (8004fd4 <FLASH_Program_Byte+0x40>)
 8004fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004faa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004fac:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <FLASH_Program_Byte+0x40>)
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <FLASH_Program_Byte+0x40>)
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004fb4:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <FLASH_Program_Byte+0x40>)
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	4a06      	ldr	r2, [pc, #24]	; (8004fd4 <FLASH_Program_Byte+0x40>)
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	701a      	strb	r2, [r3, #0]
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40023c00 	.word	0x40023c00

08004fd8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004fdc:	4b27      	ldr	r3, [pc, #156]	; (800507c <FLASH_SetErrorCode+0xa4>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d008      	beq.n	8004ffa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004fe8:	4b25      	ldr	r3, [pc, #148]	; (8005080 <FLASH_SetErrorCode+0xa8>)
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	f043 0310 	orr.w	r3, r3, #16
 8004ff0:	4a23      	ldr	r2, [pc, #140]	; (8005080 <FLASH_SetErrorCode+0xa8>)
 8004ff2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004ff4:	4b21      	ldr	r3, [pc, #132]	; (800507c <FLASH_SetErrorCode+0xa4>)
 8004ff6:	2210      	movs	r2, #16
 8004ff8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004ffa:	4b20      	ldr	r3, [pc, #128]	; (800507c <FLASH_SetErrorCode+0xa4>)
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	2b00      	cmp	r3, #0
 8005004:	d008      	beq.n	8005018 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005006:	4b1e      	ldr	r3, [pc, #120]	; (8005080 <FLASH_SetErrorCode+0xa8>)
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	f043 0308 	orr.w	r3, r3, #8
 800500e:	4a1c      	ldr	r2, [pc, #112]	; (8005080 <FLASH_SetErrorCode+0xa8>)
 8005010:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005012:	4b1a      	ldr	r3, [pc, #104]	; (800507c <FLASH_SetErrorCode+0xa4>)
 8005014:	2220      	movs	r2, #32
 8005016:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005018:	4b18      	ldr	r3, [pc, #96]	; (800507c <FLASH_SetErrorCode+0xa4>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005024:	4b16      	ldr	r3, [pc, #88]	; (8005080 <FLASH_SetErrorCode+0xa8>)
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	f043 0304 	orr.w	r3, r3, #4
 800502c:	4a14      	ldr	r2, [pc, #80]	; (8005080 <FLASH_SetErrorCode+0xa8>)
 800502e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005030:	4b12      	ldr	r3, [pc, #72]	; (800507c <FLASH_SetErrorCode+0xa4>)
 8005032:	2240      	movs	r2, #64	; 0x40
 8005034:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005036:	4b11      	ldr	r3, [pc, #68]	; (800507c <FLASH_SetErrorCode+0xa4>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503e:	2b00      	cmp	r3, #0
 8005040:	d008      	beq.n	8005054 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005042:	4b0f      	ldr	r3, [pc, #60]	; (8005080 <FLASH_SetErrorCode+0xa8>)
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	f043 0302 	orr.w	r3, r3, #2
 800504a:	4a0d      	ldr	r2, [pc, #52]	; (8005080 <FLASH_SetErrorCode+0xa8>)
 800504c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800504e:	4b0b      	ldr	r3, [pc, #44]	; (800507c <FLASH_SetErrorCode+0xa4>)
 8005050:	2280      	movs	r2, #128	; 0x80
 8005052:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005054:	4b09      	ldr	r3, [pc, #36]	; (800507c <FLASH_SetErrorCode+0xa4>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d008      	beq.n	8005072 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005060:	4b07      	ldr	r3, [pc, #28]	; (8005080 <FLASH_SetErrorCode+0xa8>)
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	f043 0320 	orr.w	r3, r3, #32
 8005068:	4a05      	ldr	r2, [pc, #20]	; (8005080 <FLASH_SetErrorCode+0xa8>)
 800506a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800506c:	4b03      	ldr	r3, [pc, #12]	; (800507c <FLASH_SetErrorCode+0xa4>)
 800506e:	2202      	movs	r2, #2
 8005070:	60da      	str	r2, [r3, #12]
  }
}
 8005072:	bf00      	nop
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40023c00 	.word	0x40023c00
 8005080:	200006dc 	.word	0x200006dc

08005084 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	460b      	mov	r3, r1
 800508e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	e010      	b.n	80050c2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d103      	bne.n	80050ae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80050a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	e009      	b.n	80050c2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d103      	bne.n	80050bc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80050b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	e002      	b.n	80050c2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80050bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80050c0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80050c2:	4b13      	ldr	r3, [pc, #76]	; (8005110 <FLASH_Erase_Sector+0x8c>)
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	4a12      	ldr	r2, [pc, #72]	; (8005110 <FLASH_Erase_Sector+0x8c>)
 80050c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80050ce:	4b10      	ldr	r3, [pc, #64]	; (8005110 <FLASH_Erase_Sector+0x8c>)
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	490f      	ldr	r1, [pc, #60]	; (8005110 <FLASH_Erase_Sector+0x8c>)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80050da:	4b0d      	ldr	r3, [pc, #52]	; (8005110 <FLASH_Erase_Sector+0x8c>)
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	4a0c      	ldr	r2, [pc, #48]	; (8005110 <FLASH_Erase_Sector+0x8c>)
 80050e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80050e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80050e6:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <FLASH_Erase_Sector+0x8c>)
 80050e8:	691a      	ldr	r2, [r3, #16]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	4313      	orrs	r3, r2
 80050f0:	4a07      	ldr	r2, [pc, #28]	; (8005110 <FLASH_Erase_Sector+0x8c>)
 80050f2:	f043 0302 	orr.w	r3, r3, #2
 80050f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80050f8:	4b05      	ldr	r3, [pc, #20]	; (8005110 <FLASH_Erase_Sector+0x8c>)
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	4a04      	ldr	r2, [pc, #16]	; (8005110 <FLASH_Erase_Sector+0x8c>)
 80050fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005102:	6113      	str	r3, [r2, #16]
}
 8005104:	bf00      	nop
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40023c00 	.word	0x40023c00

08005114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005114:	b480      	push	{r7}
 8005116:	b089      	sub	sp, #36	; 0x24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005122:	2300      	movs	r3, #0
 8005124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005126:	2300      	movs	r3, #0
 8005128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
 800512e:	e16b      	b.n	8005408 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005130:	2201      	movs	r2, #1
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4013      	ands	r3, r2
 8005142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	429a      	cmp	r2, r3
 800514a:	f040 815a 	bne.w	8005402 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b01      	cmp	r3, #1
 8005158:	d005      	beq.n	8005166 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005162:	2b02      	cmp	r3, #2
 8005164:	d130      	bne.n	80051c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	2203      	movs	r2, #3
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	43db      	mvns	r3, r3
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	4013      	ands	r3, r2
 800517c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4313      	orrs	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800519c:	2201      	movs	r2, #1
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	43db      	mvns	r3, r3
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	4013      	ands	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	f003 0201 	and.w	r2, r3, #1
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4313      	orrs	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d017      	beq.n	8005204 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	2203      	movs	r2, #3
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f003 0303 	and.w	r3, r3, #3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d123      	bne.n	8005258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	08da      	lsrs	r2, r3, #3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3208      	adds	r2, #8
 8005218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	220f      	movs	r2, #15
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	43db      	mvns	r3, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4013      	ands	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4313      	orrs	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	08da      	lsrs	r2, r3, #3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3208      	adds	r2, #8
 8005252:	69b9      	ldr	r1, [r7, #24]
 8005254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	2203      	movs	r2, #3
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	43db      	mvns	r3, r3
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	4013      	ands	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f003 0203 	and.w	r2, r3, #3
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	4313      	orrs	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80b4 	beq.w	8005402 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	4b60      	ldr	r3, [pc, #384]	; (8005420 <HAL_GPIO_Init+0x30c>)
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	4a5f      	ldr	r2, [pc, #380]	; (8005420 <HAL_GPIO_Init+0x30c>)
 80052a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052a8:	6453      	str	r3, [r2, #68]	; 0x44
 80052aa:	4b5d      	ldr	r3, [pc, #372]	; (8005420 <HAL_GPIO_Init+0x30c>)
 80052ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052b6:	4a5b      	ldr	r2, [pc, #364]	; (8005424 <HAL_GPIO_Init+0x310>)
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	089b      	lsrs	r3, r3, #2
 80052bc:	3302      	adds	r3, #2
 80052be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	220f      	movs	r2, #15
 80052ce:	fa02 f303 	lsl.w	r3, r2, r3
 80052d2:	43db      	mvns	r3, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	4013      	ands	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a52      	ldr	r2, [pc, #328]	; (8005428 <HAL_GPIO_Init+0x314>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d02b      	beq.n	800533a <HAL_GPIO_Init+0x226>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a51      	ldr	r2, [pc, #324]	; (800542c <HAL_GPIO_Init+0x318>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d025      	beq.n	8005336 <HAL_GPIO_Init+0x222>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a50      	ldr	r2, [pc, #320]	; (8005430 <HAL_GPIO_Init+0x31c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d01f      	beq.n	8005332 <HAL_GPIO_Init+0x21e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a4f      	ldr	r2, [pc, #316]	; (8005434 <HAL_GPIO_Init+0x320>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d019      	beq.n	800532e <HAL_GPIO_Init+0x21a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a4e      	ldr	r2, [pc, #312]	; (8005438 <HAL_GPIO_Init+0x324>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d013      	beq.n	800532a <HAL_GPIO_Init+0x216>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a4d      	ldr	r2, [pc, #308]	; (800543c <HAL_GPIO_Init+0x328>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00d      	beq.n	8005326 <HAL_GPIO_Init+0x212>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a4c      	ldr	r2, [pc, #304]	; (8005440 <HAL_GPIO_Init+0x32c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d007      	beq.n	8005322 <HAL_GPIO_Init+0x20e>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a4b      	ldr	r2, [pc, #300]	; (8005444 <HAL_GPIO_Init+0x330>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d101      	bne.n	800531e <HAL_GPIO_Init+0x20a>
 800531a:	2307      	movs	r3, #7
 800531c:	e00e      	b.n	800533c <HAL_GPIO_Init+0x228>
 800531e:	2308      	movs	r3, #8
 8005320:	e00c      	b.n	800533c <HAL_GPIO_Init+0x228>
 8005322:	2306      	movs	r3, #6
 8005324:	e00a      	b.n	800533c <HAL_GPIO_Init+0x228>
 8005326:	2305      	movs	r3, #5
 8005328:	e008      	b.n	800533c <HAL_GPIO_Init+0x228>
 800532a:	2304      	movs	r3, #4
 800532c:	e006      	b.n	800533c <HAL_GPIO_Init+0x228>
 800532e:	2303      	movs	r3, #3
 8005330:	e004      	b.n	800533c <HAL_GPIO_Init+0x228>
 8005332:	2302      	movs	r3, #2
 8005334:	e002      	b.n	800533c <HAL_GPIO_Init+0x228>
 8005336:	2301      	movs	r3, #1
 8005338:	e000      	b.n	800533c <HAL_GPIO_Init+0x228>
 800533a:	2300      	movs	r3, #0
 800533c:	69fa      	ldr	r2, [r7, #28]
 800533e:	f002 0203 	and.w	r2, r2, #3
 8005342:	0092      	lsls	r2, r2, #2
 8005344:	4093      	lsls	r3, r2
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	4313      	orrs	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800534c:	4935      	ldr	r1, [pc, #212]	; (8005424 <HAL_GPIO_Init+0x310>)
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	089b      	lsrs	r3, r3, #2
 8005352:	3302      	adds	r3, #2
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800535a:	4b3b      	ldr	r3, [pc, #236]	; (8005448 <HAL_GPIO_Init+0x334>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	43db      	mvns	r3, r3
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	4013      	ands	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800537e:	4a32      	ldr	r2, [pc, #200]	; (8005448 <HAL_GPIO_Init+0x334>)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005384:	4b30      	ldr	r3, [pc, #192]	; (8005448 <HAL_GPIO_Init+0x334>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	43db      	mvns	r3, r3
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	4013      	ands	r3, r2
 8005392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053a8:	4a27      	ldr	r2, [pc, #156]	; (8005448 <HAL_GPIO_Init+0x334>)
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053ae:	4b26      	ldr	r3, [pc, #152]	; (8005448 <HAL_GPIO_Init+0x334>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	43db      	mvns	r3, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	4013      	ands	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053d2:	4a1d      	ldr	r2, [pc, #116]	; (8005448 <HAL_GPIO_Init+0x334>)
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053d8:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <HAL_GPIO_Init+0x334>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	43db      	mvns	r3, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4013      	ands	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053fc:	4a12      	ldr	r2, [pc, #72]	; (8005448 <HAL_GPIO_Init+0x334>)
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	3301      	adds	r3, #1
 8005406:	61fb      	str	r3, [r7, #28]
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	2b0f      	cmp	r3, #15
 800540c:	f67f ae90 	bls.w	8005130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	3724      	adds	r7, #36	; 0x24
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40023800 	.word	0x40023800
 8005424:	40013800 	.word	0x40013800
 8005428:	40020000 	.word	0x40020000
 800542c:	40020400 	.word	0x40020400
 8005430:	40020800 	.word	0x40020800
 8005434:	40020c00 	.word	0x40020c00
 8005438:	40021000 	.word	0x40021000
 800543c:	40021400 	.word	0x40021400
 8005440:	40021800 	.word	0x40021800
 8005444:	40021c00 	.word	0x40021c00
 8005448:	40013c00 	.word	0x40013c00

0800544c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	887b      	ldrh	r3, [r7, #2]
 800545e:	4013      	ands	r3, r2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005464:	2301      	movs	r3, #1
 8005466:	73fb      	strb	r3, [r7, #15]
 8005468:	e001      	b.n	800546e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800546a:	2300      	movs	r3, #0
 800546c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800546e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	807b      	strh	r3, [r7, #2]
 8005488:	4613      	mov	r3, r2
 800548a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800548c:	787b      	ldrb	r3, [r7, #1]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005492:	887a      	ldrh	r2, [r7, #2]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005498:	e003      	b.n	80054a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800549a:	887b      	ldrh	r3, [r7, #2]
 800549c:	041a      	lsls	r2, r3, #16
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	619a      	str	r2, [r3, #24]
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	460b      	mov	r3, r1
 80054b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054c0:	887a      	ldrh	r2, [r7, #2]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4013      	ands	r3, r2
 80054c6:	041a      	lsls	r2, r3, #16
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	43d9      	mvns	r1, r3
 80054cc:	887b      	ldrh	r3, [r7, #2]
 80054ce:	400b      	ands	r3, r1
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	619a      	str	r2, [r3, #24]
}
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
	...

080054e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e12b      	b.n	800574e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7ff f89e 	bl	800464c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2224      	movs	r2, #36	; 0x24
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0201 	bic.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005536:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005546:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005548:	f002 fc58 	bl	8007dfc <HAL_RCC_GetPCLK1Freq>
 800554c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4a81      	ldr	r2, [pc, #516]	; (8005758 <HAL_I2C_Init+0x274>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d807      	bhi.n	8005568 <HAL_I2C_Init+0x84>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4a80      	ldr	r2, [pc, #512]	; (800575c <HAL_I2C_Init+0x278>)
 800555c:	4293      	cmp	r3, r2
 800555e:	bf94      	ite	ls
 8005560:	2301      	movls	r3, #1
 8005562:	2300      	movhi	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	e006      	b.n	8005576 <HAL_I2C_Init+0x92>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4a7d      	ldr	r2, [pc, #500]	; (8005760 <HAL_I2C_Init+0x27c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	bf94      	ite	ls
 8005570:	2301      	movls	r3, #1
 8005572:	2300      	movhi	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e0e7      	b.n	800574e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4a78      	ldr	r2, [pc, #480]	; (8005764 <HAL_I2C_Init+0x280>)
 8005582:	fba2 2303 	umull	r2, r3, r2, r3
 8005586:	0c9b      	lsrs	r3, r3, #18
 8005588:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	4a6a      	ldr	r2, [pc, #424]	; (8005758 <HAL_I2C_Init+0x274>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d802      	bhi.n	80055b8 <HAL_I2C_Init+0xd4>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	3301      	adds	r3, #1
 80055b6:	e009      	b.n	80055cc <HAL_I2C_Init+0xe8>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055be:	fb02 f303 	mul.w	r3, r2, r3
 80055c2:	4a69      	ldr	r2, [pc, #420]	; (8005768 <HAL_I2C_Init+0x284>)
 80055c4:	fba2 2303 	umull	r2, r3, r2, r3
 80055c8:	099b      	lsrs	r3, r3, #6
 80055ca:	3301      	adds	r3, #1
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	430b      	orrs	r3, r1
 80055d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	495c      	ldr	r1, [pc, #368]	; (8005758 <HAL_I2C_Init+0x274>)
 80055e8:	428b      	cmp	r3, r1
 80055ea:	d819      	bhi.n	8005620 <HAL_I2C_Init+0x13c>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	1e59      	subs	r1, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80055fa:	1c59      	adds	r1, r3, #1
 80055fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005600:	400b      	ands	r3, r1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_I2C_Init+0x138>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1e59      	subs	r1, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	fbb1 f3f3 	udiv	r3, r1, r3
 8005614:	3301      	adds	r3, #1
 8005616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800561a:	e051      	b.n	80056c0 <HAL_I2C_Init+0x1dc>
 800561c:	2304      	movs	r3, #4
 800561e:	e04f      	b.n	80056c0 <HAL_I2C_Init+0x1dc>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d111      	bne.n	800564c <HAL_I2C_Init+0x168>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	1e58      	subs	r0, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6859      	ldr	r1, [r3, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	440b      	add	r3, r1
 8005636:	fbb0 f3f3 	udiv	r3, r0, r3
 800563a:	3301      	adds	r3, #1
 800563c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	e012      	b.n	8005672 <HAL_I2C_Init+0x18e>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	1e58      	subs	r0, r3, #1
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6859      	ldr	r1, [r3, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	0099      	lsls	r1, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005662:	3301      	adds	r3, #1
 8005664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005668:	2b00      	cmp	r3, #0
 800566a:	bf0c      	ite	eq
 800566c:	2301      	moveq	r3, #1
 800566e:	2300      	movne	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_I2C_Init+0x196>
 8005676:	2301      	movs	r3, #1
 8005678:	e022      	b.n	80056c0 <HAL_I2C_Init+0x1dc>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10e      	bne.n	80056a0 <HAL_I2C_Init+0x1bc>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	1e58      	subs	r0, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6859      	ldr	r1, [r3, #4]
 800568a:	460b      	mov	r3, r1
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	440b      	add	r3, r1
 8005690:	fbb0 f3f3 	udiv	r3, r0, r3
 8005694:	3301      	adds	r3, #1
 8005696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800569a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800569e:	e00f      	b.n	80056c0 <HAL_I2C_Init+0x1dc>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	1e58      	subs	r0, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6859      	ldr	r1, [r3, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	0099      	lsls	r1, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80056b6:	3301      	adds	r3, #1
 80056b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	6809      	ldr	r1, [r1, #0]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69da      	ldr	r2, [r3, #28]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6911      	ldr	r1, [r2, #16]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	68d2      	ldr	r2, [r2, #12]
 80056fa:	4311      	orrs	r1, r2
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	430b      	orrs	r3, r1
 8005702:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	695a      	ldr	r2, [r3, #20]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2220      	movs	r2, #32
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	000186a0 	.word	0x000186a0
 800575c:	001e847f 	.word	0x001e847f
 8005760:	003d08ff 	.word	0x003d08ff
 8005764:	431bde83 	.word	0x431bde83
 8005768:	10624dd3 	.word	0x10624dd3

0800576c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	607a      	str	r2, [r7, #4]
 8005776:	461a      	mov	r2, r3
 8005778:	460b      	mov	r3, r1
 800577a:	817b      	strh	r3, [r7, #10]
 800577c:	4613      	mov	r3, r2
 800577e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005780:	f7ff f96c 	bl	8004a5c <HAL_GetTick>
 8005784:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b20      	cmp	r3, #32
 8005790:	f040 80e0 	bne.w	8005954 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	2319      	movs	r3, #25
 800579a:	2201      	movs	r2, #1
 800579c:	4970      	ldr	r1, [pc, #448]	; (8005960 <HAL_I2C_Master_Transmit+0x1f4>)
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 fa92 	bl	8005cc8 <I2C_WaitOnFlagUntilTimeout>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80057aa:	2302      	movs	r3, #2
 80057ac:	e0d3      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_I2C_Master_Transmit+0x50>
 80057b8:	2302      	movs	r3, #2
 80057ba:	e0cc      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d007      	beq.n	80057e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0201 	orr.w	r2, r2, #1
 80057e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2221      	movs	r2, #33	; 0x21
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2210      	movs	r2, #16
 80057fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	893a      	ldrh	r2, [r7, #8]
 8005812:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4a50      	ldr	r2, [pc, #320]	; (8005964 <HAL_I2C_Master_Transmit+0x1f8>)
 8005822:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005824:	8979      	ldrh	r1, [r7, #10]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	6a3a      	ldr	r2, [r7, #32]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 f9ca 	bl	8005bc4 <I2C_MasterRequestWrite>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e08d      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800583a:	2300      	movs	r3, #0
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005850:	e066      	b.n	8005920 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	6a39      	ldr	r1, [r7, #32]
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 fb50 	bl	8005efc <I2C_WaitOnTXEFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00d      	beq.n	800587e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	2b04      	cmp	r3, #4
 8005868:	d107      	bne.n	800587a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005878:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e06b      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	781a      	ldrb	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d11b      	bne.n	80058f4 <HAL_I2C_Master_Transmit+0x188>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d017      	beq.n	80058f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	781a      	ldrb	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	6a39      	ldr	r1, [r7, #32]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 fb47 	bl	8005f8c <I2C_WaitOnBTFFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00d      	beq.n	8005920 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	2b04      	cmp	r3, #4
 800590a:	d107      	bne.n	800591c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800591a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e01a      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005924:	2b00      	cmp	r3, #0
 8005926:	d194      	bne.n	8005852 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	e000      	b.n	8005956 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005954:	2302      	movs	r3, #2
  }
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	00100002 	.word	0x00100002
 8005964:	ffff0000 	.word	0xffff0000

08005968 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	; 0x28
 800596c:	af02      	add	r7, sp, #8
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	607a      	str	r2, [r7, #4]
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	460b      	mov	r3, r1
 8005976:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005978:	f7ff f870 	bl	8004a5c <HAL_GetTick>
 800597c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b20      	cmp	r3, #32
 800598c:	f040 8111 	bne.w	8005bb2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	2319      	movs	r3, #25
 8005996:	2201      	movs	r2, #1
 8005998:	4988      	ldr	r1, [pc, #544]	; (8005bbc <HAL_I2C_IsDeviceReady+0x254>)
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 f994 	bl	8005cc8 <I2C_WaitOnFlagUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80059a6:	2302      	movs	r3, #2
 80059a8:	e104      	b.n	8005bb4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_I2C_IsDeviceReady+0x50>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e0fd      	b.n	8005bb4 <HAL_I2C_IsDeviceReady+0x24c>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d007      	beq.n	80059de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f042 0201 	orr.w	r2, r2, #1
 80059dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2224      	movs	r2, #36	; 0x24
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4a70      	ldr	r2, [pc, #448]	; (8005bc0 <HAL_I2C_IsDeviceReady+0x258>)
 8005a00:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a10:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 f952 	bl	8005cc8 <I2C_WaitOnFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00d      	beq.n	8005a46 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a38:	d103      	bne.n	8005a42 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a40:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e0b6      	b.n	8005bb4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a46:	897b      	ldrh	r3, [r7, #10]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a54:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005a56:	f7ff f801 	bl	8004a5c <HAL_GetTick>
 8005a5a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	bf0c      	ite	eq
 8005a6a:	2301      	moveq	r3, #1
 8005a6c:	2300      	movne	r3, #0
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a80:	bf0c      	ite	eq
 8005a82:	2301      	moveq	r3, #1
 8005a84:	2300      	movne	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005a8a:	e025      	b.n	8005ad8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a8c:	f7fe ffe6 	bl	8004a5c <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d302      	bcc.n	8005aa2 <HAL_I2C_IsDeviceReady+0x13a>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d103      	bne.n	8005aaa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	22a0      	movs	r2, #160	; 0xa0
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	bf0c      	ite	eq
 8005ab8:	2301      	moveq	r3, #1
 8005aba:	2300      	movne	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ace:	bf0c      	ite	eq
 8005ad0:	2301      	moveq	r3, #1
 8005ad2:	2300      	movne	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2ba0      	cmp	r3, #160	; 0xa0
 8005ae2:	d005      	beq.n	8005af0 <HAL_I2C_IsDeviceReady+0x188>
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d102      	bne.n	8005af0 <HAL_I2C_IsDeviceReady+0x188>
 8005aea:	7dbb      	ldrb	r3, [r7, #22]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0cd      	beq.n	8005a8c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d129      	bne.n	8005b5a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b14:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b16:	2300      	movs	r3, #0
 8005b18:	613b      	str	r3, [r7, #16]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	2319      	movs	r3, #25
 8005b32:	2201      	movs	r2, #1
 8005b34:	4921      	ldr	r1, [pc, #132]	; (8005bbc <HAL_I2C_IsDeviceReady+0x254>)
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 f8c6 	bl	8005cc8 <I2C_WaitOnFlagUntilTimeout>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e036      	b.n	8005bb4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	e02c      	b.n	8005bb4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b68:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b72:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	2319      	movs	r3, #25
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	490f      	ldr	r1, [pc, #60]	; (8005bbc <HAL_I2C_IsDeviceReady+0x254>)
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 f8a2 	bl	8005cc8 <I2C_WaitOnFlagUntilTimeout>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e012      	b.n	8005bb4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	3301      	adds	r3, #1
 8005b92:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	f4ff af32 	bcc.w	8005a02 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e000      	b.n	8005bb4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005bb2:	2302      	movs	r3, #2
  }
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3720      	adds	r7, #32
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	00100002 	.word	0x00100002
 8005bc0:	ffff0000 	.word	0xffff0000

08005bc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	607a      	str	r2, [r7, #4]
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d006      	beq.n	8005bee <I2C_MasterRequestWrite+0x2a>
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d003      	beq.n	8005bee <I2C_MasterRequestWrite+0x2a>
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bec:	d108      	bne.n	8005c00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e00b      	b.n	8005c18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	2b12      	cmp	r3, #18
 8005c06:	d107      	bne.n	8005c18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 f84f 	bl	8005cc8 <I2C_WaitOnFlagUntilTimeout>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00d      	beq.n	8005c4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c3e:	d103      	bne.n	8005c48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e035      	b.n	8005cb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c54:	d108      	bne.n	8005c68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c56:	897b      	ldrh	r3, [r7, #10]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c64:	611a      	str	r2, [r3, #16]
 8005c66:	e01b      	b.n	8005ca0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c68:	897b      	ldrh	r3, [r7, #10]
 8005c6a:	11db      	asrs	r3, r3, #7
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	f003 0306 	and.w	r3, r3, #6
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	f063 030f 	orn	r3, r3, #15
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	490e      	ldr	r1, [pc, #56]	; (8005cc0 <I2C_MasterRequestWrite+0xfc>)
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 f898 	bl	8005dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e010      	b.n	8005cb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c96:	897b      	ldrh	r3, [r7, #10]
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	4907      	ldr	r1, [pc, #28]	; (8005cc4 <I2C_MasterRequestWrite+0x100>)
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 f888 	bl	8005dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	00010008 	.word	0x00010008
 8005cc4:	00010002 	.word	0x00010002

08005cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cd8:	e048      	b.n	8005d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce0:	d044      	beq.n	8005d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce2:	f7fe febb 	bl	8004a5c <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d302      	bcc.n	8005cf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d139      	bne.n	8005d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	0c1b      	lsrs	r3, r3, #16
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d10d      	bne.n	8005d1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	43da      	mvns	r2, r3
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	bf0c      	ite	eq
 8005d14:	2301      	moveq	r3, #1
 8005d16:	2300      	movne	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	e00c      	b.n	8005d38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	43da      	mvns	r2, r3
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	bf0c      	ite	eq
 8005d30:	2301      	moveq	r3, #1
 8005d32:	2300      	movne	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d116      	bne.n	8005d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	f043 0220 	orr.w	r2, r3, #32
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e023      	b.n	8005db4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	0c1b      	lsrs	r3, r3, #16
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d10d      	bne.n	8005d92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	43da      	mvns	r2, r3
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	4013      	ands	r3, r2
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bf0c      	ite	eq
 8005d88:	2301      	moveq	r3, #1
 8005d8a:	2300      	movne	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	e00c      	b.n	8005dac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	43da      	mvns	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	bf0c      	ite	eq
 8005da4:	2301      	moveq	r3, #1
 8005da6:	2300      	movne	r3, #0
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	461a      	mov	r2, r3
 8005dac:	79fb      	ldrb	r3, [r7, #7]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d093      	beq.n	8005cda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005dca:	e071      	b.n	8005eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dda:	d123      	bne.n	8005e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005df4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	f043 0204 	orr.w	r2, r3, #4
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e067      	b.n	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2a:	d041      	beq.n	8005eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2c:	f7fe fe16 	bl	8004a5c <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d302      	bcc.n	8005e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d136      	bne.n	8005eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	0c1b      	lsrs	r3, r3, #16
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d10c      	bne.n	8005e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	43da      	mvns	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4013      	ands	r3, r2
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	bf14      	ite	ne
 8005e5e:	2301      	movne	r3, #1
 8005e60:	2300      	moveq	r3, #0
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	e00b      	b.n	8005e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	43da      	mvns	r2, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4013      	ands	r3, r2
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	bf14      	ite	ne
 8005e78:	2301      	movne	r3, #1
 8005e7a:	2300      	moveq	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d016      	beq.n	8005eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9c:	f043 0220 	orr.w	r2, r3, #32
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e021      	b.n	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	0c1b      	lsrs	r3, r3, #16
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d10c      	bne.n	8005ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	43da      	mvns	r2, r3
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	bf14      	ite	ne
 8005ecc:	2301      	movne	r3, #1
 8005ece:	2300      	moveq	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	e00b      	b.n	8005eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	43da      	mvns	r2, r3
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	bf14      	ite	ne
 8005ee6:	2301      	movne	r3, #1
 8005ee8:	2300      	moveq	r3, #0
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f47f af6d 	bne.w	8005dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f08:	e034      	b.n	8005f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 f886 	bl	800601c <I2C_IsAcknowledgeFailed>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e034      	b.n	8005f84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f20:	d028      	beq.n	8005f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f22:	f7fe fd9b 	bl	8004a5c <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d302      	bcc.n	8005f38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d11d      	bne.n	8005f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f42:	2b80      	cmp	r3, #128	; 0x80
 8005f44:	d016      	beq.n	8005f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	f043 0220 	orr.w	r2, r3, #32
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e007      	b.n	8005f84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7e:	2b80      	cmp	r3, #128	; 0x80
 8005f80:	d1c3      	bne.n	8005f0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f98:	e034      	b.n	8006004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 f83e 	bl	800601c <I2C_IsAcknowledgeFailed>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e034      	b.n	8006014 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb0:	d028      	beq.n	8006004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb2:	f7fe fd53 	bl	8004a5c <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d302      	bcc.n	8005fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d11d      	bne.n	8006004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	f003 0304 	and.w	r3, r3, #4
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	d016      	beq.n	8006004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	f043 0220 	orr.w	r2, r3, #32
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e007      	b.n	8006014 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b04      	cmp	r3, #4
 8006010:	d1c3      	bne.n	8005f9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800602e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006032:	d11b      	bne.n	800606c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800603c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	f043 0204 	orr.w	r2, r3, #4
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e000      	b.n	800606e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b086      	sub	sp, #24
 800607e:	af02      	add	r7, sp, #8
 8006080:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e101      	b.n	8006290 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f006 f90a 	bl	800c2c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2203      	movs	r2, #3
 80060b0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060ba:	d102      	bne.n	80060c2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f002 fcfb 	bl	8008ac2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6818      	ldr	r0, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	7c1a      	ldrb	r2, [r3, #16]
 80060d4:	f88d 2000 	strb.w	r2, [sp]
 80060d8:	3304      	adds	r3, #4
 80060da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060dc:	f002 fbda 	bl	8008894 <USB_CoreInit>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2202      	movs	r2, #2
 80060ea:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e0ce      	b.n	8006290 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2100      	movs	r1, #0
 80060f8:	4618      	mov	r0, r3
 80060fa:	f002 fcf3 	bl	8008ae4 <USB_SetCurrentMode>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e0bf      	b.n	8006290 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006110:	2300      	movs	r3, #0
 8006112:	73fb      	strb	r3, [r7, #15]
 8006114:	e04a      	b.n	80061ac <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006116:	7bfa      	ldrb	r2, [r7, #15]
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	440b      	add	r3, r1
 8006124:	3315      	adds	r3, #21
 8006126:	2201      	movs	r2, #1
 8006128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800612a:	7bfa      	ldrb	r2, [r7, #15]
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	440b      	add	r3, r1
 8006138:	3314      	adds	r3, #20
 800613a:	7bfa      	ldrb	r2, [r7, #15]
 800613c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800613e:	7bfa      	ldrb	r2, [r7, #15]
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	b298      	uxth	r0, r3
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	4613      	mov	r3, r2
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	440b      	add	r3, r1
 8006150:	332e      	adds	r3, #46	; 0x2e
 8006152:	4602      	mov	r2, r0
 8006154:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006156:	7bfa      	ldrb	r2, [r7, #15]
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	3318      	adds	r3, #24
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800616a:	7bfa      	ldrb	r2, [r7, #15]
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	331c      	adds	r3, #28
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800617e:	7bfa      	ldrb	r2, [r7, #15]
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	4613      	mov	r3, r2
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	440b      	add	r3, r1
 800618c:	3320      	adds	r3, #32
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006192:	7bfa      	ldrb	r2, [r7, #15]
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	4613      	mov	r3, r2
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	3324      	adds	r3, #36	; 0x24
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	3301      	adds	r3, #1
 80061aa:	73fb      	strb	r3, [r7, #15]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	791b      	ldrb	r3, [r3, #4]
 80061b0:	7bfa      	ldrb	r2, [r7, #15]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d3af      	bcc.n	8006116 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061b6:	2300      	movs	r3, #0
 80061b8:	73fb      	strb	r3, [r7, #15]
 80061ba:	e044      	b.n	8006246 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80061bc:	7bfa      	ldrb	r2, [r7, #15]
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	4613      	mov	r3, r2
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	4413      	add	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	440b      	add	r3, r1
 80061ca:	f203 2355 	addw	r3, r3, #597	; 0x255
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80061d2:	7bfa      	ldrb	r2, [r7, #15]
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	4613      	mov	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	440b      	add	r3, r1
 80061e0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80061e4:	7bfa      	ldrb	r2, [r7, #15]
 80061e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80061e8:	7bfa      	ldrb	r2, [r7, #15]
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	440b      	add	r3, r1
 80061f6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80061fa:	2200      	movs	r2, #0
 80061fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80061fe:	7bfa      	ldrb	r2, [r7, #15]
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006214:	7bfa      	ldrb	r2, [r7, #15]
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	4613      	mov	r3, r2
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	4413      	add	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	440b      	add	r3, r1
 8006222:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800622a:	7bfa      	ldrb	r2, [r7, #15]
 800622c:	6879      	ldr	r1, [r7, #4]
 800622e:	4613      	mov	r3, r2
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	4413      	add	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	440b      	add	r3, r1
 8006238:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800623c:	2200      	movs	r2, #0
 800623e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	3301      	adds	r3, #1
 8006244:	73fb      	strb	r3, [r7, #15]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	791b      	ldrb	r3, [r3, #4]
 800624a:	7bfa      	ldrb	r2, [r7, #15]
 800624c:	429a      	cmp	r2, r3
 800624e:	d3b5      	bcc.n	80061bc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6818      	ldr	r0, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	7c1a      	ldrb	r2, [r3, #16]
 8006258:	f88d 2000 	strb.w	r2, [sp]
 800625c:	3304      	adds	r3, #4
 800625e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006260:	f002 fc8c 	bl	8008b7c <USB_DevInit>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2202      	movs	r2, #2
 800626e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e00c      	b.n	8006290 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4618      	mov	r0, r3
 800628a:	f003 fcd0 	bl	8009c2e <USB_DevDisconnect>

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_PCD_Start+0x1c>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e022      	b.n	80062fa <HAL_PCD_Start+0x62>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d009      	beq.n	80062dc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d105      	bne.n	80062dc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f002 fbdd 	bl	8008aa0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f003 fc7e 	bl	8009bec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006302:	b590      	push	{r4, r7, lr}
 8006304:	b08d      	sub	sp, #52	; 0x34
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4618      	mov	r0, r3
 800631a:	f003 fd3c 	bl	8009d96 <USB_GetMode>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	f040 848c 	bne.w	8006c3e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f003 fca0 	bl	8009c70 <USB_ReadInterrupts>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 8482 	beq.w	8006c3c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	0a1b      	lsrs	r3, r3, #8
 8006342:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4618      	mov	r0, r3
 8006352:	f003 fc8d 	bl	8009c70 <USB_ReadInterrupts>
 8006356:	4603      	mov	r3, r0
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b02      	cmp	r3, #2
 800635e:	d107      	bne.n	8006370 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	695a      	ldr	r2, [r3, #20]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f002 0202 	and.w	r2, r2, #2
 800636e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f003 fc7b 	bl	8009c70 <USB_ReadInterrupts>
 800637a:	4603      	mov	r3, r0
 800637c:	f003 0310 	and.w	r3, r3, #16
 8006380:	2b10      	cmp	r3, #16
 8006382:	d161      	bne.n	8006448 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0210 	bic.w	r2, r2, #16
 8006392:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	f003 020f 	and.w	r2, r3, #15
 80063a0:	4613      	mov	r3, r2
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	4413      	add	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	4413      	add	r3, r2
 80063b0:	3304      	adds	r3, #4
 80063b2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	0c5b      	lsrs	r3, r3, #17
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d124      	bne.n	800640a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80063c6:	4013      	ands	r3, r2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d035      	beq.n	8006438 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	091b      	lsrs	r3, r3, #4
 80063d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80063d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063da:	b29b      	uxth	r3, r3
 80063dc:	461a      	mov	r2, r3
 80063de:	6a38      	ldr	r0, [r7, #32]
 80063e0:	f003 fab2 	bl	8009948 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	091b      	lsrs	r3, r3, #4
 80063ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063f0:	441a      	add	r2, r3
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	695a      	ldr	r2, [r3, #20]
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	091b      	lsrs	r3, r3, #4
 80063fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006402:	441a      	add	r2, r3
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	615a      	str	r2, [r3, #20]
 8006408:	e016      	b.n	8006438 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	0c5b      	lsrs	r3, r3, #17
 800640e:	f003 030f 	and.w	r3, r3, #15
 8006412:	2b06      	cmp	r3, #6
 8006414:	d110      	bne.n	8006438 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800641c:	2208      	movs	r2, #8
 800641e:	4619      	mov	r1, r3
 8006420:	6a38      	ldr	r0, [r7, #32]
 8006422:	f003 fa91 	bl	8009948 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	695a      	ldr	r2, [r3, #20]
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	091b      	lsrs	r3, r3, #4
 800642e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006432:	441a      	add	r2, r3
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699a      	ldr	r2, [r3, #24]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0210 	orr.w	r2, r2, #16
 8006446:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4618      	mov	r0, r3
 800644e:	f003 fc0f 	bl	8009c70 <USB_ReadInterrupts>
 8006452:	4603      	mov	r3, r0
 8006454:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006458:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800645c:	f040 80a7 	bne.w	80065ae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4618      	mov	r0, r3
 800646a:	f003 fc14 	bl	8009c96 <USB_ReadDevAllOutEpInterrupt>
 800646e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006470:	e099      	b.n	80065a6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 808e 	beq.w	800659a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	4611      	mov	r1, r2
 8006488:	4618      	mov	r0, r3
 800648a:	f003 fc38 	bl	8009cfe <USB_ReadDevOutEPInterrupt>
 800648e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00c      	beq.n	80064b4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a6:	461a      	mov	r2, r3
 80064a8:	2301      	movs	r3, #1
 80064aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80064ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fea2 	bl	80071f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f003 0308 	and.w	r3, r3, #8
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00c      	beq.n	80064d8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ca:	461a      	mov	r2, r3
 80064cc:	2308      	movs	r3, #8
 80064ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80064d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 ff78 	bl	80073c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f003 0310 	and.w	r3, r3, #16
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d008      	beq.n	80064f4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ee:	461a      	mov	r2, r3
 80064f0:	2310      	movs	r3, #16
 80064f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d030      	beq.n	8006560 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006506:	2b80      	cmp	r3, #128	; 0x80
 8006508:	d109      	bne.n	800651e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006518:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800651c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800651e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006520:	4613      	mov	r3, r2
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	4413      	add	r3, r2
 8006530:	3304      	adds	r3, #4
 8006532:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	78db      	ldrb	r3, [r3, #3]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d108      	bne.n	800654e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2200      	movs	r2, #0
 8006540:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	b2db      	uxtb	r3, r3
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f005 ffbf 	bl	800c4cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800655a:	461a      	mov	r2, r3
 800655c:	2302      	movs	r3, #2
 800655e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b00      	cmp	r3, #0
 8006568:	d008      	beq.n	800657c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006576:	461a      	mov	r2, r3
 8006578:	2320      	movs	r3, #32
 800657a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d009      	beq.n	800659a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006592:	461a      	mov	r2, r3
 8006594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006598:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	3301      	adds	r3, #1
 800659e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	085b      	lsrs	r3, r3, #1
 80065a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f47f af62 	bne.w	8006472 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f003 fb5c 	bl	8009c70 <USB_ReadInterrupts>
 80065b8:	4603      	mov	r3, r0
 80065ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065c2:	f040 80db 	bne.w	800677c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f003 fb7d 	bl	8009cca <USB_ReadDevAllInEpInterrupt>
 80065d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80065d6:	e0cd      	b.n	8006774 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 80c2 	beq.w	8006768 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	4611      	mov	r1, r2
 80065ee:	4618      	mov	r0, r3
 80065f0:	f003 fba3 	bl	8009d3a <USB_ReadDevInEPInterrupt>
 80065f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d057      	beq.n	80066b0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	f003 030f 	and.w	r3, r3, #15
 8006606:	2201      	movs	r2, #1
 8006608:	fa02 f303 	lsl.w	r3, r2, r3
 800660c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	43db      	mvns	r3, r3
 800661a:	69f9      	ldr	r1, [r7, #28]
 800661c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006620:	4013      	ands	r3, r2
 8006622:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006630:	461a      	mov	r2, r3
 8006632:	2301      	movs	r3, #1
 8006634:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	799b      	ldrb	r3, [r3, #6]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d132      	bne.n	80066a4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006642:	4613      	mov	r3, r2
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	440b      	add	r3, r1
 800664c:	3320      	adds	r3, #32
 800664e:	6819      	ldr	r1, [r3, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006654:	4613      	mov	r3, r2
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4403      	add	r3, r0
 800665e:	331c      	adds	r3, #28
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4419      	add	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006668:	4613      	mov	r3, r2
 800666a:	00db      	lsls	r3, r3, #3
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4403      	add	r3, r0
 8006672:	3320      	adds	r3, #32
 8006674:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	2b00      	cmp	r3, #0
 800667a:	d113      	bne.n	80066a4 <HAL_PCD_IRQHandler+0x3a2>
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006680:	4613      	mov	r3, r2
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	3324      	adds	r3, #36	; 0x24
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d108      	bne.n	80066a4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800669c:	461a      	mov	r2, r3
 800669e:	2101      	movs	r1, #1
 80066a0:	f003 fbaa 	bl	8009df8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	4619      	mov	r1, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f005 fe89 	bl	800c3c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f003 0308 	and.w	r3, r3, #8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d008      	beq.n	80066cc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c6:	461a      	mov	r2, r3
 80066c8:	2308      	movs	r3, #8
 80066ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f003 0310 	and.w	r3, r3, #16
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d008      	beq.n	80066e8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e2:	461a      	mov	r2, r3
 80066e4:	2310      	movs	r3, #16
 80066e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d008      	beq.n	8006704 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fe:	461a      	mov	r2, r3
 8006700:	2340      	movs	r3, #64	; 0x40
 8006702:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d023      	beq.n	8006756 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800670e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006710:	6a38      	ldr	r0, [r7, #32]
 8006712:	f002 fb97 	bl	8008e44 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006718:	4613      	mov	r3, r2
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	4413      	add	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	3310      	adds	r3, #16
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	4413      	add	r3, r2
 8006726:	3304      	adds	r3, #4
 8006728:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	78db      	ldrb	r3, [r3, #3]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d108      	bne.n	8006744 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	2200      	movs	r2, #0
 8006736:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	b2db      	uxtb	r3, r3
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f005 fed6 	bl	800c4f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006750:	461a      	mov	r2, r3
 8006752:	2302      	movs	r3, #2
 8006754:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fcbb 	bl	80070de <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	3301      	adds	r3, #1
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	085b      	lsrs	r3, r3, #1
 8006772:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	2b00      	cmp	r3, #0
 8006778:	f47f af2e 	bne.w	80065d8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4618      	mov	r0, r3
 8006782:	f003 fa75 	bl	8009c70 <USB_ReadInterrupts>
 8006786:	4603      	mov	r3, r0
 8006788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800678c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006790:	d122      	bne.n	80067d8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d108      	bne.n	80067c2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80067b8:	2100      	movs	r1, #0
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fea2 	bl	8007504 <HAL_PCDEx_LPM_Callback>
 80067c0:	e002      	b.n	80067c8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f005 fe74 	bl	800c4b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695a      	ldr	r2, [r3, #20]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80067d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f003 fa47 	bl	8009c70 <USB_ReadInterrupts>
 80067e2:	4603      	mov	r3, r0
 80067e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ec:	d112      	bne.n	8006814 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d102      	bne.n	8006804 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f005 fe30 	bl	800c464 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695a      	ldr	r2, [r3, #20]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006812:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4618      	mov	r0, r3
 800681a:	f003 fa29 	bl	8009c70 <USB_ReadInterrupts>
 800681e:	4603      	mov	r3, r0
 8006820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006828:	f040 80b7 	bne.w	800699a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800683a:	f023 0301 	bic.w	r3, r3, #1
 800683e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2110      	movs	r1, #16
 8006846:	4618      	mov	r0, r3
 8006848:	f002 fafc 	bl	8008e44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800684c:	2300      	movs	r3, #0
 800684e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006850:	e046      	b.n	80068e0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685e:	461a      	mov	r2, r3
 8006860:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006864:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006876:	0151      	lsls	r1, r2, #5
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	440a      	add	r2, r1
 800687c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006880:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006884:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006892:	461a      	mov	r2, r3
 8006894:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006898:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068aa:	0151      	lsls	r1, r2, #5
 80068ac:	69fa      	ldr	r2, [r7, #28]
 80068ae:	440a      	add	r2, r1
 80068b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80068ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ca:	0151      	lsls	r1, r2, #5
 80068cc:	69fa      	ldr	r2, [r7, #28]
 80068ce:	440a      	add	r2, r1
 80068d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068dc:	3301      	adds	r3, #1
 80068de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	791b      	ldrb	r3, [r3, #4]
 80068e4:	461a      	mov	r2, r3
 80068e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d3b2      	bcc.n	8006852 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	69fa      	ldr	r2, [r7, #28]
 80068f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068fa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80068fe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	7bdb      	ldrb	r3, [r3, #15]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d016      	beq.n	8006936 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006912:	69fa      	ldr	r2, [r7, #28]
 8006914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006918:	f043 030b 	orr.w	r3, r3, #11
 800691c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006928:	69fa      	ldr	r2, [r7, #28]
 800692a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800692e:	f043 030b 	orr.w	r3, r3, #11
 8006932:	6453      	str	r3, [r2, #68]	; 0x44
 8006934:	e015      	b.n	8006962 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006944:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006948:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800694c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	69fa      	ldr	r2, [r7, #28]
 8006958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800695c:	f043 030b 	orr.w	r3, r3, #11
 8006960:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69fa      	ldr	r2, [r7, #28]
 800696c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006970:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006974:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006984:	461a      	mov	r2, r3
 8006986:	f003 fa37 	bl	8009df8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	695a      	ldr	r2, [r3, #20]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f003 f966 	bl	8009c70 <USB_ReadInterrupts>
 80069a4:	4603      	mov	r3, r0
 80069a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ae:	d123      	bne.n	80069f8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f003 f9fc 	bl	8009db2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f002 fab9 	bl	8008f36 <USB_GetDevSpeed>
 80069c4:	4603      	mov	r3, r0
 80069c6:	461a      	mov	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681c      	ldr	r4, [r3, #0]
 80069d0:	f001 fa08 	bl	8007de4 <HAL_RCC_GetHCLKFreq>
 80069d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80069da:	461a      	mov	r2, r3
 80069dc:	4620      	mov	r0, r4
 80069de:	f001 ffbd 	bl	800895c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f005 fd15 	bl	800c412 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	695a      	ldr	r2, [r3, #20]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80069f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f003 f937 	bl	8009c70 <USB_ReadInterrupts>
 8006a02:	4603      	mov	r3, r0
 8006a04:	f003 0308 	and.w	r3, r3, #8
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d10a      	bne.n	8006a22 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f005 fcf2 	bl	800c3f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695a      	ldr	r2, [r3, #20]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f002 0208 	and.w	r2, r2, #8
 8006a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f003 f922 	bl	8009c70 <USB_ReadInterrupts>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a32:	2b80      	cmp	r3, #128	; 0x80
 8006a34:	d123      	bne.n	8006a7e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a42:	2301      	movs	r3, #1
 8006a44:	627b      	str	r3, [r7, #36]	; 0x24
 8006a46:	e014      	b.n	8006a72 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	440b      	add	r3, r1
 8006a56:	f203 2357 	addw	r3, r3, #599	; 0x257
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d105      	bne.n	8006a6c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fb08 	bl	800707c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	3301      	adds	r3, #1
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	791b      	ldrb	r3, [r3, #4]
 8006a76:	461a      	mov	r2, r3
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d3e4      	bcc.n	8006a48 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f003 f8f4 	bl	8009c70 <USB_ReadInterrupts>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a92:	d13c      	bne.n	8006b0e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006a94:	2301      	movs	r3, #1
 8006a96:	627b      	str	r3, [r7, #36]	; 0x24
 8006a98:	e02b      	b.n	8006af2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aae:	4613      	mov	r3, r2
 8006ab0:	00db      	lsls	r3, r3, #3
 8006ab2:	4413      	add	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	440b      	add	r3, r1
 8006ab8:	3318      	adds	r3, #24
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d115      	bne.n	8006aec <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006ac0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	da12      	bge.n	8006aec <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aca:	4613      	mov	r3, r2
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	4413      	add	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	440b      	add	r3, r1
 8006ad4:	3317      	adds	r3, #23
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fac8 	bl	800707c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	3301      	adds	r3, #1
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	791b      	ldrb	r3, [r3, #4]
 8006af6:	461a      	mov	r2, r3
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d3cd      	bcc.n	8006a9a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	695a      	ldr	r2, [r3, #20]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f003 f8ac 	bl	8009c70 <USB_ReadInterrupts>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b22:	d156      	bne.n	8006bd2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b24:	2301      	movs	r3, #1
 8006b26:	627b      	str	r3, [r7, #36]	; 0x24
 8006b28:	e045      	b.n	8006bb6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b3e:	4613      	mov	r3, r2
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	440b      	add	r3, r1
 8006b48:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d12e      	bne.n	8006bb0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006b52:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	da2b      	bge.n	8006bb0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8006b64:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d121      	bne.n	8006bb0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006b6c:	6879      	ldr	r1, [r7, #4]
 8006b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b70:	4613      	mov	r3, r2
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	440b      	add	r3, r1
 8006b7a:	f203 2357 	addw	r3, r3, #599	; 0x257
 8006b7e:	2201      	movs	r2, #1
 8006b80:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10a      	bne.n	8006bb0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	69fa      	ldr	r2, [r7, #28]
 8006ba4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ba8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bac:	6053      	str	r3, [r2, #4]
            break;
 8006bae:	e008      	b.n	8006bc2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	791b      	ldrb	r3, [r3, #4]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d3b3      	bcc.n	8006b2a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	695a      	ldr	r2, [r3, #20]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006bd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f003 f84a 	bl	8009c70 <USB_ReadInterrupts>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be6:	d10a      	bne.n	8006bfe <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f005 fc93 	bl	800c514 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695a      	ldr	r2, [r3, #20]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f003 f834 	bl	8009c70 <USB_ReadInterrupts>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f003 0304 	and.w	r3, r3, #4
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	d115      	bne.n	8006c3e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f005 fc83 	bl	800c530 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6859      	ldr	r1, [r3, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
 8006c3a:	e000      	b.n	8006c3e <HAL_PCD_IRQHandler+0x93c>
      return;
 8006c3c:	bf00      	nop
    }
  }
}
 8006c3e:	3734      	adds	r7, #52	; 0x34
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd90      	pop	{r4, r7, pc}

08006c44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d101      	bne.n	8006c5e <HAL_PCD_SetAddress+0x1a>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	e012      	b.n	8006c84 <HAL_PCD_SetAddress+0x40>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	78fa      	ldrb	r2, [r7, #3]
 8006c6a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	78fa      	ldrb	r2, [r7, #3]
 8006c72:	4611      	mov	r1, r2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f002 ff93 	bl	8009ba0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	4608      	mov	r0, r1
 8006c96:	4611      	mov	r1, r2
 8006c98:	461a      	mov	r2, r3
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	70fb      	strb	r3, [r7, #3]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	803b      	strh	r3, [r7, #0]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006caa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	da0f      	bge.n	8006cd2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cb2:	78fb      	ldrb	r3, [r7, #3]
 8006cb4:	f003 020f 	and.w	r2, r3, #15
 8006cb8:	4613      	mov	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	3310      	adds	r3, #16
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	705a      	strb	r2, [r3, #1]
 8006cd0:	e00f      	b.n	8006cf2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cd2:	78fb      	ldrb	r3, [r7, #3]
 8006cd4:	f003 020f 	and.w	r2, r3, #15
 8006cd8:	4613      	mov	r3, r2
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	3304      	adds	r3, #4
 8006cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006cf2:	78fb      	ldrb	r3, [r7, #3]
 8006cf4:	f003 030f 	and.w	r3, r3, #15
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006cfe:	883a      	ldrh	r2, [r7, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	78ba      	ldrb	r2, [r7, #2]
 8006d08:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	785b      	ldrb	r3, [r3, #1]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d004      	beq.n	8006d1c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006d1c:	78bb      	ldrb	r3, [r7, #2]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d102      	bne.n	8006d28 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <HAL_PCD_EP_Open+0xaa>
 8006d32:	2302      	movs	r3, #2
 8006d34:	e00e      	b.n	8006d54 <HAL_PCD_EP_Open+0xc8>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68f9      	ldr	r1, [r7, #12]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f002 f91b 	bl	8008f80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8006d52:	7afb      	ldrb	r3, [r7, #11]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	460b      	mov	r3, r1
 8006d66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006d68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	da0f      	bge.n	8006d90 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d70:	78fb      	ldrb	r3, [r7, #3]
 8006d72:	f003 020f 	and.w	r2, r3, #15
 8006d76:	4613      	mov	r3, r2
 8006d78:	00db      	lsls	r3, r3, #3
 8006d7a:	4413      	add	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	3310      	adds	r3, #16
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	4413      	add	r3, r2
 8006d84:	3304      	adds	r3, #4
 8006d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	705a      	strb	r2, [r3, #1]
 8006d8e:	e00f      	b.n	8006db0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	f003 020f 	and.w	r2, r3, #15
 8006d96:	4613      	mov	r3, r2
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	4413      	add	r3, r2
 8006da6:	3304      	adds	r3, #4
 8006da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	f003 030f 	and.w	r3, r3, #15
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d101      	bne.n	8006dca <HAL_PCD_EP_Close+0x6e>
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	e00e      	b.n	8006de8 <HAL_PCD_EP_Close+0x8c>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68f9      	ldr	r1, [r7, #12]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f002 f959 	bl	8009090 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	607a      	str	r2, [r7, #4]
 8006dfa:	603b      	str	r3, [r7, #0]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e00:	7afb      	ldrb	r3, [r7, #11]
 8006e02:	f003 020f 	and.w	r2, r3, #15
 8006e06:	4613      	mov	r3, r2
 8006e08:	00db      	lsls	r3, r3, #3
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	3304      	adds	r3, #4
 8006e18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e32:	7afb      	ldrb	r3, [r7, #11]
 8006e34:	f003 030f 	and.w	r3, r3, #15
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	799b      	ldrb	r3, [r3, #6]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d102      	bne.n	8006e4c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	799b      	ldrb	r3, [r3, #6]
 8006e54:	461a      	mov	r2, r3
 8006e56:	6979      	ldr	r1, [r7, #20]
 8006e58:	f002 f9f6 	bl	8009248 <USB_EPStartXfer>

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006e72:	78fb      	ldrb	r3, [r7, #3]
 8006e74:	f003 020f 	and.w	r2, r3, #15
 8006e78:	6879      	ldr	r1, [r7, #4]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	4413      	add	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	440b      	add	r3, r1
 8006e84:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8006e88:	681b      	ldr	r3, [r3, #0]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b086      	sub	sp, #24
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	60f8      	str	r0, [r7, #12]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	603b      	str	r3, [r7, #0]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ea6:	7afb      	ldrb	r3, [r7, #11]
 8006ea8:	f003 020f 	and.w	r2, r3, #15
 8006eac:	4613      	mov	r3, r2
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	3310      	adds	r3, #16
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4413      	add	r3, r2
 8006eba:	3304      	adds	r3, #4
 8006ebc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ed6:	7afb      	ldrb	r3, [r7, #11]
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	799b      	ldrb	r3, [r3, #6]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d102      	bne.n	8006ef0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6818      	ldr	r0, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	799b      	ldrb	r3, [r3, #6]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	6979      	ldr	r1, [r7, #20]
 8006efc:	f002 f9a4 	bl	8009248 <USB_EPStartXfer>

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3718      	adds	r7, #24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006f16:	78fb      	ldrb	r3, [r7, #3]
 8006f18:	f003 030f 	and.w	r3, r3, #15
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	7912      	ldrb	r2, [r2, #4]
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d901      	bls.n	8006f28 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e04f      	b.n	8006fc8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	da0f      	bge.n	8006f50 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	f003 020f 	and.w	r2, r3, #15
 8006f36:	4613      	mov	r3, r2
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	3310      	adds	r3, #16
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	4413      	add	r3, r2
 8006f44:	3304      	adds	r3, #4
 8006f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	705a      	strb	r2, [r3, #1]
 8006f4e:	e00d      	b.n	8006f6c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006f50:	78fa      	ldrb	r2, [r7, #3]
 8006f52:	4613      	mov	r3, r2
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	4413      	add	r3, r2
 8006f62:	3304      	adds	r3, #4
 8006f64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f72:	78fb      	ldrb	r3, [r7, #3]
 8006f74:	f003 030f 	and.w	r3, r3, #15
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d101      	bne.n	8006f8c <HAL_PCD_EP_SetStall+0x82>
 8006f88:	2302      	movs	r3, #2
 8006f8a:	e01d      	b.n	8006fc8 <HAL_PCD_EP_SetStall+0xbe>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68f9      	ldr	r1, [r7, #12]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f002 fd2c 	bl	80099f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006fa0:	78fb      	ldrb	r3, [r7, #3]
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d109      	bne.n	8006fbe <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6818      	ldr	r0, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	7999      	ldrb	r1, [r3, #6]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006fb8:	461a      	mov	r2, r3
 8006fba:	f002 ff1d 	bl	8009df8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006fdc:	78fb      	ldrb	r3, [r7, #3]
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	7912      	ldrb	r2, [r2, #4]
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d901      	bls.n	8006fee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e042      	b.n	8007074 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006fee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	da0f      	bge.n	8007016 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ff6:	78fb      	ldrb	r3, [r7, #3]
 8006ff8:	f003 020f 	and.w	r2, r3, #15
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	3310      	adds	r3, #16
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	4413      	add	r3, r2
 800700a:	3304      	adds	r3, #4
 800700c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2201      	movs	r2, #1
 8007012:	705a      	strb	r2, [r3, #1]
 8007014:	e00f      	b.n	8007036 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007016:	78fb      	ldrb	r3, [r7, #3]
 8007018:	f003 020f 	and.w	r2, r3, #15
 800701c:	4613      	mov	r3, r2
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	4413      	add	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	4413      	add	r3, r2
 800702c:	3304      	adds	r3, #4
 800702e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800703c:	78fb      	ldrb	r3, [r7, #3]
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	b2da      	uxtb	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800704e:	2b01      	cmp	r3, #1
 8007050:	d101      	bne.n	8007056 <HAL_PCD_EP_ClrStall+0x86>
 8007052:	2302      	movs	r3, #2
 8007054:	e00e      	b.n	8007074 <HAL_PCD_EP_ClrStall+0xa4>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68f9      	ldr	r1, [r7, #12]
 8007064:	4618      	mov	r0, r3
 8007066:	f002 fd35 	bl	8009ad4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800708c:	2b00      	cmp	r3, #0
 800708e:	da0c      	bge.n	80070aa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007090:	78fb      	ldrb	r3, [r7, #3]
 8007092:	f003 020f 	and.w	r2, r3, #15
 8007096:	4613      	mov	r3, r2
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	3310      	adds	r3, #16
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	4413      	add	r3, r2
 80070a4:	3304      	adds	r3, #4
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	e00c      	b.n	80070c4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	f003 020f 	and.w	r2, r3, #15
 80070b0:	4613      	mov	r3, r2
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	4413      	add	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	4413      	add	r3, r2
 80070c0:	3304      	adds	r3, #4
 80070c2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68f9      	ldr	r1, [r7, #12]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f002 fb54 	bl	8009778 <USB_EPStopXfer>
 80070d0:	4603      	mov	r3, r0
 80070d2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80070d4:	7afb      	ldrb	r3, [r7, #11]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b08a      	sub	sp, #40	; 0x28
 80070e2:	af02      	add	r7, sp, #8
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	4613      	mov	r3, r2
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	4413      	add	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	3310      	adds	r3, #16
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	4413      	add	r3, r2
 8007102:	3304      	adds	r3, #4
 8007104:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	695a      	ldr	r2, [r3, #20]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	429a      	cmp	r2, r3
 8007110:	d901      	bls.n	8007116 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e06b      	b.n	80071ee <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	691a      	ldr	r2, [r3, #16]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	69fa      	ldr	r2, [r7, #28]
 8007128:	429a      	cmp	r2, r3
 800712a:	d902      	bls.n	8007132 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	3303      	adds	r3, #3
 8007136:	089b      	lsrs	r3, r3, #2
 8007138:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800713a:	e02a      	b.n	8007192 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	691a      	ldr	r2, [r3, #16]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	69fa      	ldr	r2, [r7, #28]
 800714e:	429a      	cmp	r2, r3
 8007150:	d902      	bls.n	8007158 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	3303      	adds	r3, #3
 800715c:	089b      	lsrs	r3, r3, #2
 800715e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	68d9      	ldr	r1, [r3, #12]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	b2da      	uxtb	r2, r3
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	4603      	mov	r3, r0
 8007174:	6978      	ldr	r0, [r7, #20]
 8007176:	f002 fba9 	bl	80098cc <USB_WritePacket>

    ep->xfer_buff  += len;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	441a      	add	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	695a      	ldr	r2, [r3, #20]
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	441a      	add	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d809      	bhi.n	80071bc <PCD_WriteEmptyTxFifo+0xde>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	695a      	ldr	r2, [r3, #20]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d203      	bcs.n	80071bc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1bf      	bne.n	800713c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	691a      	ldr	r2, [r3, #16]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d811      	bhi.n	80071ec <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	2201      	movs	r2, #1
 80071d0:	fa02 f303 	lsl.w	r3, r2, r3
 80071d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	43db      	mvns	r3, r3
 80071e2:	6939      	ldr	r1, [r7, #16]
 80071e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071e8:	4013      	ands	r3, r2
 80071ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3720      	adds	r7, #32
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	333c      	adds	r3, #60	; 0x3c
 8007210:	3304      	adds	r3, #4
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	799b      	ldrb	r3, [r3, #6]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d17b      	bne.n	8007326 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f003 0308 	and.w	r3, r3, #8
 8007234:	2b00      	cmp	r3, #0
 8007236:	d015      	beq.n	8007264 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	4a61      	ldr	r2, [pc, #388]	; (80073c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800723c:	4293      	cmp	r3, r2
 800723e:	f240 80b9 	bls.w	80073b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 80b3 	beq.w	80073b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	4413      	add	r3, r2
 8007256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725a:	461a      	mov	r2, r3
 800725c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007260:	6093      	str	r3, [r2, #8]
 8007262:	e0a7      	b.n	80073b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f003 0320 	and.w	r3, r3, #32
 800726a:	2b00      	cmp	r3, #0
 800726c:	d009      	beq.n	8007282 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727a:	461a      	mov	r2, r3
 800727c:	2320      	movs	r3, #32
 800727e:	6093      	str	r3, [r2, #8]
 8007280:	e098      	b.n	80073b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007288:	2b00      	cmp	r3, #0
 800728a:	f040 8093 	bne.w	80073b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	4a4b      	ldr	r2, [pc, #300]	; (80073c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d90f      	bls.n	80072b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00a      	beq.n	80072b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ac:	461a      	mov	r2, r3
 80072ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072b2:	6093      	str	r3, [r2, #8]
 80072b4:	e07e      	b.n	80073b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	4613      	mov	r3, r2
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	4413      	add	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	4413      	add	r3, r2
 80072c8:	3304      	adds	r3, #4
 80072ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a1a      	ldr	r2, [r3, #32]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	0159      	lsls	r1, r3, #5
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	440b      	add	r3, r1
 80072d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d114      	bne.n	8007318 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d109      	bne.n	800730a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6818      	ldr	r0, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007300:	461a      	mov	r2, r3
 8007302:	2101      	movs	r1, #1
 8007304:	f002 fd78 	bl	8009df8 <USB_EP0_OutStart>
 8007308:	e006      	b.n	8007318 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	441a      	add	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f005 f834 	bl	800c38c <HAL_PCD_DataOutStageCallback>
 8007324:	e046      	b.n	80073b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	4a26      	ldr	r2, [pc, #152]	; (80073c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d124      	bne.n	8007378 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00a      	beq.n	800734e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007344:	461a      	mov	r2, r3
 8007346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800734a:	6093      	str	r3, [r2, #8]
 800734c:	e032      	b.n	80073b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f003 0320 	and.w	r3, r3, #32
 8007354:	2b00      	cmp	r3, #0
 8007356:	d008      	beq.n	800736a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007364:	461a      	mov	r2, r3
 8007366:	2320      	movs	r3, #32
 8007368:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	b2db      	uxtb	r3, r3
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f005 f80b 	bl	800c38c <HAL_PCD_DataOutStageCallback>
 8007376:	e01d      	b.n	80073b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d114      	bne.n	80073a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	4613      	mov	r3, r2
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	4413      	add	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	440b      	add	r3, r1
 800738c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d108      	bne.n	80073a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6818      	ldr	r0, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80073a0:	461a      	mov	r2, r3
 80073a2:	2100      	movs	r1, #0
 80073a4:	f002 fd28 	bl	8009df8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f004 ffec 	bl	800c38c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3720      	adds	r7, #32
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	4f54300a 	.word	0x4f54300a
 80073c4:	4f54310a 	.word	0x4f54310a

080073c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	333c      	adds	r3, #60	; 0x3c
 80073e0:	3304      	adds	r3, #4
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4a15      	ldr	r2, [pc, #84]	; (8007450 <PCD_EP_OutSetupPacket_int+0x88>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d90e      	bls.n	800741c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007404:	2b00      	cmp	r3, #0
 8007406:	d009      	beq.n	800741c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007414:	461a      	mov	r2, r3
 8007416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800741a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f004 ffa3 	bl	800c368 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	4a0a      	ldr	r2, [pc, #40]	; (8007450 <PCD_EP_OutSetupPacket_int+0x88>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d90c      	bls.n	8007444 <PCD_EP_OutSetupPacket_int+0x7c>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	799b      	ldrb	r3, [r3, #6]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d108      	bne.n	8007444 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6818      	ldr	r0, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800743c:	461a      	mov	r2, r3
 800743e:	2101      	movs	r1, #1
 8007440:	f002 fcda 	bl	8009df8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	4f54300a 	.word	0x4f54300a

08007454 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
 8007460:	4613      	mov	r3, r2
 8007462:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800746c:	78fb      	ldrb	r3, [r7, #3]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d107      	bne.n	8007482 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007472:	883b      	ldrh	r3, [r7, #0]
 8007474:	0419      	lsls	r1, r3, #16
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	430a      	orrs	r2, r1
 800747e:	629a      	str	r2, [r3, #40]	; 0x28
 8007480:	e028      	b.n	80074d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007488:	0c1b      	lsrs	r3, r3, #16
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	4413      	add	r3, r2
 800748e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007490:	2300      	movs	r3, #0
 8007492:	73fb      	strb	r3, [r7, #15]
 8007494:	e00d      	b.n	80074b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	3340      	adds	r3, #64	; 0x40
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	0c1b      	lsrs	r3, r3, #16
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	4413      	add	r3, r2
 80074aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	3301      	adds	r3, #1
 80074b0:	73fb      	strb	r3, [r7, #15]
 80074b2:	7bfa      	ldrb	r2, [r7, #15]
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	3b01      	subs	r3, #1
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d3ec      	bcc.n	8007496 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80074bc:	883b      	ldrh	r3, [r7, #0]
 80074be:	0418      	lsls	r0, r3, #16
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6819      	ldr	r1, [r3, #0]
 80074c4:	78fb      	ldrb	r3, [r7, #3]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	4302      	orrs	r2, r0
 80074cc:	3340      	adds	r3, #64	; 0x40
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	440b      	add	r3, r1
 80074d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b083      	sub	sp, #12
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	460b      	mov	r3, r1
 80074ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	887a      	ldrh	r2, [r7, #2]
 80074f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e267      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b00      	cmp	r3, #0
 8007538:	d075      	beq.n	8007626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800753a:	4b88      	ldr	r3, [pc, #544]	; (800775c <HAL_RCC_OscConfig+0x240>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 030c 	and.w	r3, r3, #12
 8007542:	2b04      	cmp	r3, #4
 8007544:	d00c      	beq.n	8007560 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007546:	4b85      	ldr	r3, [pc, #532]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800754e:	2b08      	cmp	r3, #8
 8007550:	d112      	bne.n	8007578 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007552:	4b82      	ldr	r3, [pc, #520]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800755a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800755e:	d10b      	bne.n	8007578 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007560:	4b7e      	ldr	r3, [pc, #504]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d05b      	beq.n	8007624 <HAL_RCC_OscConfig+0x108>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d157      	bne.n	8007624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e242      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007580:	d106      	bne.n	8007590 <HAL_RCC_OscConfig+0x74>
 8007582:	4b76      	ldr	r3, [pc, #472]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a75      	ldr	r2, [pc, #468]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800758c:	6013      	str	r3, [r2, #0]
 800758e:	e01d      	b.n	80075cc <HAL_RCC_OscConfig+0xb0>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007598:	d10c      	bne.n	80075b4 <HAL_RCC_OscConfig+0x98>
 800759a:	4b70      	ldr	r3, [pc, #448]	; (800775c <HAL_RCC_OscConfig+0x240>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a6f      	ldr	r2, [pc, #444]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80075a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075a4:	6013      	str	r3, [r2, #0]
 80075a6:	4b6d      	ldr	r3, [pc, #436]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a6c      	ldr	r2, [pc, #432]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80075ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	e00b      	b.n	80075cc <HAL_RCC_OscConfig+0xb0>
 80075b4:	4b69      	ldr	r3, [pc, #420]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a68      	ldr	r2, [pc, #416]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80075ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	4b66      	ldr	r3, [pc, #408]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a65      	ldr	r2, [pc, #404]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80075c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d013      	beq.n	80075fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075d4:	f7fd fa42 	bl	8004a5c <HAL_GetTick>
 80075d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075da:	e008      	b.n	80075ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075dc:	f7fd fa3e 	bl	8004a5c <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	2b64      	cmp	r3, #100	; 0x64
 80075e8:	d901      	bls.n	80075ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e207      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075ee:	4b5b      	ldr	r3, [pc, #364]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0f0      	beq.n	80075dc <HAL_RCC_OscConfig+0xc0>
 80075fa:	e014      	b.n	8007626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075fc:	f7fd fa2e 	bl	8004a5c <HAL_GetTick>
 8007600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007602:	e008      	b.n	8007616 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007604:	f7fd fa2a 	bl	8004a5c <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	2b64      	cmp	r3, #100	; 0x64
 8007610:	d901      	bls.n	8007616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e1f3      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007616:	4b51      	ldr	r3, [pc, #324]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1f0      	bne.n	8007604 <HAL_RCC_OscConfig+0xe8>
 8007622:	e000      	b.n	8007626 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d063      	beq.n	80076fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007632:	4b4a      	ldr	r3, [pc, #296]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f003 030c 	and.w	r3, r3, #12
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00b      	beq.n	8007656 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800763e:	4b47      	ldr	r3, [pc, #284]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007646:	2b08      	cmp	r3, #8
 8007648:	d11c      	bne.n	8007684 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800764a:	4b44      	ldr	r3, [pc, #272]	; (800775c <HAL_RCC_OscConfig+0x240>)
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d116      	bne.n	8007684 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007656:	4b41      	ldr	r3, [pc, #260]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d005      	beq.n	800766e <HAL_RCC_OscConfig+0x152>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d001      	beq.n	800766e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e1c7      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800766e:	4b3b      	ldr	r3, [pc, #236]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	4937      	ldr	r1, [pc, #220]	; (800775c <HAL_RCC_OscConfig+0x240>)
 800767e:	4313      	orrs	r3, r2
 8007680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007682:	e03a      	b.n	80076fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d020      	beq.n	80076ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800768c:	4b34      	ldr	r3, [pc, #208]	; (8007760 <HAL_RCC_OscConfig+0x244>)
 800768e:	2201      	movs	r2, #1
 8007690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007692:	f7fd f9e3 	bl	8004a5c <HAL_GetTick>
 8007696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007698:	e008      	b.n	80076ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800769a:	f7fd f9df 	bl	8004a5c <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e1a8      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ac:	4b2b      	ldr	r3, [pc, #172]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0f0      	beq.n	800769a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076b8:	4b28      	ldr	r3, [pc, #160]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	4925      	ldr	r1, [pc, #148]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	600b      	str	r3, [r1, #0]
 80076cc:	e015      	b.n	80076fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076ce:	4b24      	ldr	r3, [pc, #144]	; (8007760 <HAL_RCC_OscConfig+0x244>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d4:	f7fd f9c2 	bl	8004a5c <HAL_GetTick>
 80076d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076da:	e008      	b.n	80076ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076dc:	f7fd f9be 	bl	8004a5c <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d901      	bls.n	80076ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e187      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076ee:	4b1b      	ldr	r3, [pc, #108]	; (800775c <HAL_RCC_OscConfig+0x240>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1f0      	bne.n	80076dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0308 	and.w	r3, r3, #8
 8007702:	2b00      	cmp	r3, #0
 8007704:	d036      	beq.n	8007774 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d016      	beq.n	800773c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800770e:	4b15      	ldr	r3, [pc, #84]	; (8007764 <HAL_RCC_OscConfig+0x248>)
 8007710:	2201      	movs	r2, #1
 8007712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007714:	f7fd f9a2 	bl	8004a5c <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800771a:	e008      	b.n	800772e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800771c:	f7fd f99e 	bl	8004a5c <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e167      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800772e:	4b0b      	ldr	r3, [pc, #44]	; (800775c <HAL_RCC_OscConfig+0x240>)
 8007730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0f0      	beq.n	800771c <HAL_RCC_OscConfig+0x200>
 800773a:	e01b      	b.n	8007774 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800773c:	4b09      	ldr	r3, [pc, #36]	; (8007764 <HAL_RCC_OscConfig+0x248>)
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007742:	f7fd f98b 	bl	8004a5c <HAL_GetTick>
 8007746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007748:	e00e      	b.n	8007768 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800774a:	f7fd f987 	bl	8004a5c <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d907      	bls.n	8007768 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e150      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
 800775c:	40023800 	.word	0x40023800
 8007760:	42470000 	.word	0x42470000
 8007764:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007768:	4b88      	ldr	r3, [pc, #544]	; (800798c <HAL_RCC_OscConfig+0x470>)
 800776a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800776c:	f003 0302 	and.w	r3, r3, #2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1ea      	bne.n	800774a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 8097 	beq.w	80078b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007782:	2300      	movs	r3, #0
 8007784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007786:	4b81      	ldr	r3, [pc, #516]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10f      	bne.n	80077b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007792:	2300      	movs	r3, #0
 8007794:	60bb      	str	r3, [r7, #8]
 8007796:	4b7d      	ldr	r3, [pc, #500]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779a:	4a7c      	ldr	r2, [pc, #496]	; (800798c <HAL_RCC_OscConfig+0x470>)
 800779c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077a0:	6413      	str	r3, [r2, #64]	; 0x40
 80077a2:	4b7a      	ldr	r3, [pc, #488]	; (800798c <HAL_RCC_OscConfig+0x470>)
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077aa:	60bb      	str	r3, [r7, #8]
 80077ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077ae:	2301      	movs	r3, #1
 80077b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077b2:	4b77      	ldr	r3, [pc, #476]	; (8007990 <HAL_RCC_OscConfig+0x474>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d118      	bne.n	80077f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077be:	4b74      	ldr	r3, [pc, #464]	; (8007990 <HAL_RCC_OscConfig+0x474>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a73      	ldr	r2, [pc, #460]	; (8007990 <HAL_RCC_OscConfig+0x474>)
 80077c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077ca:	f7fd f947 	bl	8004a5c <HAL_GetTick>
 80077ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077d0:	e008      	b.n	80077e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077d2:	f7fd f943 	bl	8004a5c <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d901      	bls.n	80077e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e10c      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077e4:	4b6a      	ldr	r3, [pc, #424]	; (8007990 <HAL_RCC_OscConfig+0x474>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0f0      	beq.n	80077d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d106      	bne.n	8007806 <HAL_RCC_OscConfig+0x2ea>
 80077f8:	4b64      	ldr	r3, [pc, #400]	; (800798c <HAL_RCC_OscConfig+0x470>)
 80077fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fc:	4a63      	ldr	r2, [pc, #396]	; (800798c <HAL_RCC_OscConfig+0x470>)
 80077fe:	f043 0301 	orr.w	r3, r3, #1
 8007802:	6713      	str	r3, [r2, #112]	; 0x70
 8007804:	e01c      	b.n	8007840 <HAL_RCC_OscConfig+0x324>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	2b05      	cmp	r3, #5
 800780c:	d10c      	bne.n	8007828 <HAL_RCC_OscConfig+0x30c>
 800780e:	4b5f      	ldr	r3, [pc, #380]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007812:	4a5e      	ldr	r2, [pc, #376]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007814:	f043 0304 	orr.w	r3, r3, #4
 8007818:	6713      	str	r3, [r2, #112]	; 0x70
 800781a:	4b5c      	ldr	r3, [pc, #368]	; (800798c <HAL_RCC_OscConfig+0x470>)
 800781c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781e:	4a5b      	ldr	r2, [pc, #364]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007820:	f043 0301 	orr.w	r3, r3, #1
 8007824:	6713      	str	r3, [r2, #112]	; 0x70
 8007826:	e00b      	b.n	8007840 <HAL_RCC_OscConfig+0x324>
 8007828:	4b58      	ldr	r3, [pc, #352]	; (800798c <HAL_RCC_OscConfig+0x470>)
 800782a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782c:	4a57      	ldr	r2, [pc, #348]	; (800798c <HAL_RCC_OscConfig+0x470>)
 800782e:	f023 0301 	bic.w	r3, r3, #1
 8007832:	6713      	str	r3, [r2, #112]	; 0x70
 8007834:	4b55      	ldr	r3, [pc, #340]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007838:	4a54      	ldr	r2, [pc, #336]	; (800798c <HAL_RCC_OscConfig+0x470>)
 800783a:	f023 0304 	bic.w	r3, r3, #4
 800783e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d015      	beq.n	8007874 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007848:	f7fd f908 	bl	8004a5c <HAL_GetTick>
 800784c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800784e:	e00a      	b.n	8007866 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007850:	f7fd f904 	bl	8004a5c <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	f241 3288 	movw	r2, #5000	; 0x1388
 800785e:	4293      	cmp	r3, r2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e0cb      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007866:	4b49      	ldr	r3, [pc, #292]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0ee      	beq.n	8007850 <HAL_RCC_OscConfig+0x334>
 8007872:	e014      	b.n	800789e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007874:	f7fd f8f2 	bl	8004a5c <HAL_GetTick>
 8007878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800787a:	e00a      	b.n	8007892 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800787c:	f7fd f8ee 	bl	8004a5c <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	f241 3288 	movw	r2, #5000	; 0x1388
 800788a:	4293      	cmp	r3, r2
 800788c:	d901      	bls.n	8007892 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e0b5      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007892:	4b3e      	ldr	r3, [pc, #248]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1ee      	bne.n	800787c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d105      	bne.n	80078b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078a4:	4b39      	ldr	r3, [pc, #228]	; (800798c <HAL_RCC_OscConfig+0x470>)
 80078a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a8:	4a38      	ldr	r2, [pc, #224]	; (800798c <HAL_RCC_OscConfig+0x470>)
 80078aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 80a1 	beq.w	80079fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078ba:	4b34      	ldr	r3, [pc, #208]	; (800798c <HAL_RCC_OscConfig+0x470>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f003 030c 	and.w	r3, r3, #12
 80078c2:	2b08      	cmp	r3, #8
 80078c4:	d05c      	beq.n	8007980 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d141      	bne.n	8007952 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078ce:	4b31      	ldr	r3, [pc, #196]	; (8007994 <HAL_RCC_OscConfig+0x478>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078d4:	f7fd f8c2 	bl	8004a5c <HAL_GetTick>
 80078d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078da:	e008      	b.n	80078ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078dc:	f7fd f8be 	bl	8004a5c <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d901      	bls.n	80078ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e087      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ee:	4b27      	ldr	r3, [pc, #156]	; (800798c <HAL_RCC_OscConfig+0x470>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1f0      	bne.n	80078dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69da      	ldr	r2, [r3, #28]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	431a      	orrs	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	019b      	lsls	r3, r3, #6
 800790a:	431a      	orrs	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007910:	085b      	lsrs	r3, r3, #1
 8007912:	3b01      	subs	r3, #1
 8007914:	041b      	lsls	r3, r3, #16
 8007916:	431a      	orrs	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	061b      	lsls	r3, r3, #24
 800791e:	491b      	ldr	r1, [pc, #108]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007920:	4313      	orrs	r3, r2
 8007922:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007924:	4b1b      	ldr	r3, [pc, #108]	; (8007994 <HAL_RCC_OscConfig+0x478>)
 8007926:	2201      	movs	r2, #1
 8007928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800792a:	f7fd f897 	bl	8004a5c <HAL_GetTick>
 800792e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007930:	e008      	b.n	8007944 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007932:	f7fd f893 	bl	8004a5c <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b02      	cmp	r3, #2
 800793e:	d901      	bls.n	8007944 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e05c      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007944:	4b11      	ldr	r3, [pc, #68]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0f0      	beq.n	8007932 <HAL_RCC_OscConfig+0x416>
 8007950:	e054      	b.n	80079fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007952:	4b10      	ldr	r3, [pc, #64]	; (8007994 <HAL_RCC_OscConfig+0x478>)
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007958:	f7fd f880 	bl	8004a5c <HAL_GetTick>
 800795c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800795e:	e008      	b.n	8007972 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007960:	f7fd f87c 	bl	8004a5c <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	2b02      	cmp	r3, #2
 800796c:	d901      	bls.n	8007972 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e045      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007972:	4b06      	ldr	r3, [pc, #24]	; (800798c <HAL_RCC_OscConfig+0x470>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1f0      	bne.n	8007960 <HAL_RCC_OscConfig+0x444>
 800797e:	e03d      	b.n	80079fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d107      	bne.n	8007998 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e038      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
 800798c:	40023800 	.word	0x40023800
 8007990:	40007000 	.word	0x40007000
 8007994:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007998:	4b1b      	ldr	r3, [pc, #108]	; (8007a08 <HAL_RCC_OscConfig+0x4ec>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d028      	beq.n	80079f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d121      	bne.n	80079f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079be:	429a      	cmp	r2, r3
 80079c0:	d11a      	bne.n	80079f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80079c8:	4013      	ands	r3, r2
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d111      	bne.n	80079f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079de:	085b      	lsrs	r3, r3, #1
 80079e0:	3b01      	subs	r3, #1
 80079e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d107      	bne.n	80079f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d001      	beq.n	80079fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e000      	b.n	80079fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3718      	adds	r7, #24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	40023800 	.word	0x40023800

08007a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e0cc      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a20:	4b68      	ldr	r3, [pc, #416]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0307 	and.w	r3, r3, #7
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d90c      	bls.n	8007a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a2e:	4b65      	ldr	r3, [pc, #404]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a30:	683a      	ldr	r2, [r7, #0]
 8007a32:	b2d2      	uxtb	r2, r2
 8007a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a36:	4b63      	ldr	r3, [pc, #396]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0307 	and.w	r3, r3, #7
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d001      	beq.n	8007a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e0b8      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d020      	beq.n	8007a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d005      	beq.n	8007a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a60:	4b59      	ldr	r3, [pc, #356]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	4a58      	ldr	r2, [pc, #352]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0308 	and.w	r3, r3, #8
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a78:	4b53      	ldr	r3, [pc, #332]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	4a52      	ldr	r2, [pc, #328]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a84:	4b50      	ldr	r3, [pc, #320]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	494d      	ldr	r1, [pc, #308]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d044      	beq.n	8007b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d107      	bne.n	8007aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aaa:	4b47      	ldr	r3, [pc, #284]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d119      	bne.n	8007aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e07f      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d003      	beq.n	8007aca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d107      	bne.n	8007ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aca:	4b3f      	ldr	r3, [pc, #252]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d109      	bne.n	8007aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e06f      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ada:	4b3b      	ldr	r3, [pc, #236]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e067      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007aea:	4b37      	ldr	r3, [pc, #220]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f023 0203 	bic.w	r2, r3, #3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	4934      	ldr	r1, [pc, #208]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007afc:	f7fc ffae 	bl	8004a5c <HAL_GetTick>
 8007b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b02:	e00a      	b.n	8007b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b04:	f7fc ffaa 	bl	8004a5c <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d901      	bls.n	8007b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e04f      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b1a:	4b2b      	ldr	r3, [pc, #172]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 020c 	and.w	r2, r3, #12
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d1eb      	bne.n	8007b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b2c:	4b25      	ldr	r3, [pc, #148]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0307 	and.w	r3, r3, #7
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d20c      	bcs.n	8007b54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b3a:	4b22      	ldr	r3, [pc, #136]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b42:	4b20      	ldr	r3, [pc, #128]	; (8007bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d001      	beq.n	8007b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e032      	b.n	8007bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d008      	beq.n	8007b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b60:	4b19      	ldr	r3, [pc, #100]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	4916      	ldr	r1, [pc, #88]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0308 	and.w	r3, r3, #8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d009      	beq.n	8007b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b7e:	4b12      	ldr	r3, [pc, #72]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	00db      	lsls	r3, r3, #3
 8007b8c:	490e      	ldr	r1, [pc, #56]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b92:	f000 f821 	bl	8007bd8 <HAL_RCC_GetSysClockFreq>
 8007b96:	4602      	mov	r2, r0
 8007b98:	4b0b      	ldr	r3, [pc, #44]	; (8007bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	091b      	lsrs	r3, r3, #4
 8007b9e:	f003 030f 	and.w	r3, r3, #15
 8007ba2:	490a      	ldr	r1, [pc, #40]	; (8007bcc <HAL_RCC_ClockConfig+0x1c0>)
 8007ba4:	5ccb      	ldrb	r3, [r1, r3]
 8007ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8007baa:	4a09      	ldr	r2, [pc, #36]	; (8007bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007bae:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fc ff0e 	bl	80049d4 <HAL_InitTick>

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	40023c00 	.word	0x40023c00
 8007bc8:	40023800 	.word	0x40023800
 8007bcc:	0800f59c 	.word	0x0800f59c
 8007bd0:	20000014 	.word	0x20000014
 8007bd4:	20000018 	.word	0x20000018

08007bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bdc:	b094      	sub	sp, #80	; 0x50
 8007bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	647b      	str	r3, [r7, #68]	; 0x44
 8007be4:	2300      	movs	r3, #0
 8007be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007be8:	2300      	movs	r3, #0
 8007bea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bf0:	4b79      	ldr	r3, [pc, #484]	; (8007dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f003 030c 	and.w	r3, r3, #12
 8007bf8:	2b08      	cmp	r3, #8
 8007bfa:	d00d      	beq.n	8007c18 <HAL_RCC_GetSysClockFreq+0x40>
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	f200 80e1 	bhi.w	8007dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d002      	beq.n	8007c0c <HAL_RCC_GetSysClockFreq+0x34>
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d003      	beq.n	8007c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c0a:	e0db      	b.n	8007dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c0c:	4b73      	ldr	r3, [pc, #460]	; (8007ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8007c0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007c10:	e0db      	b.n	8007dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c12:	4b73      	ldr	r3, [pc, #460]	; (8007de0 <HAL_RCC_GetSysClockFreq+0x208>)
 8007c14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c16:	e0d8      	b.n	8007dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c18:	4b6f      	ldr	r3, [pc, #444]	; (8007dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c22:	4b6d      	ldr	r3, [pc, #436]	; (8007dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d063      	beq.n	8007cf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c2e:	4b6a      	ldr	r3, [pc, #424]	; (8007dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	099b      	lsrs	r3, r3, #6
 8007c34:	2200      	movs	r2, #0
 8007c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c40:	633b      	str	r3, [r7, #48]	; 0x30
 8007c42:	2300      	movs	r3, #0
 8007c44:	637b      	str	r3, [r7, #52]	; 0x34
 8007c46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007c4a:	4622      	mov	r2, r4
 8007c4c:	462b      	mov	r3, r5
 8007c4e:	f04f 0000 	mov.w	r0, #0
 8007c52:	f04f 0100 	mov.w	r1, #0
 8007c56:	0159      	lsls	r1, r3, #5
 8007c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c5c:	0150      	lsls	r0, r2, #5
 8007c5e:	4602      	mov	r2, r0
 8007c60:	460b      	mov	r3, r1
 8007c62:	4621      	mov	r1, r4
 8007c64:	1a51      	subs	r1, r2, r1
 8007c66:	6139      	str	r1, [r7, #16]
 8007c68:	4629      	mov	r1, r5
 8007c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	f04f 0200 	mov.w	r2, #0
 8007c74:	f04f 0300 	mov.w	r3, #0
 8007c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c7c:	4659      	mov	r1, fp
 8007c7e:	018b      	lsls	r3, r1, #6
 8007c80:	4651      	mov	r1, sl
 8007c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c86:	4651      	mov	r1, sl
 8007c88:	018a      	lsls	r2, r1, #6
 8007c8a:	4651      	mov	r1, sl
 8007c8c:	ebb2 0801 	subs.w	r8, r2, r1
 8007c90:	4659      	mov	r1, fp
 8007c92:	eb63 0901 	sbc.w	r9, r3, r1
 8007c96:	f04f 0200 	mov.w	r2, #0
 8007c9a:	f04f 0300 	mov.w	r3, #0
 8007c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007caa:	4690      	mov	r8, r2
 8007cac:	4699      	mov	r9, r3
 8007cae:	4623      	mov	r3, r4
 8007cb0:	eb18 0303 	adds.w	r3, r8, r3
 8007cb4:	60bb      	str	r3, [r7, #8]
 8007cb6:	462b      	mov	r3, r5
 8007cb8:	eb49 0303 	adc.w	r3, r9, r3
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	f04f 0200 	mov.w	r2, #0
 8007cc2:	f04f 0300 	mov.w	r3, #0
 8007cc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007cca:	4629      	mov	r1, r5
 8007ccc:	024b      	lsls	r3, r1, #9
 8007cce:	4621      	mov	r1, r4
 8007cd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	024a      	lsls	r2, r1, #9
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cde:	2200      	movs	r2, #0
 8007ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ce2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ce4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ce8:	f7fa f81a 	bl	8001d20 <__aeabi_uldivmod>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cf4:	e058      	b.n	8007da8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cf6:	4b38      	ldr	r3, [pc, #224]	; (8007dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	099b      	lsrs	r3, r3, #6
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	4618      	mov	r0, r3
 8007d00:	4611      	mov	r1, r2
 8007d02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007d06:	623b      	str	r3, [r7, #32]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007d10:	4642      	mov	r2, r8
 8007d12:	464b      	mov	r3, r9
 8007d14:	f04f 0000 	mov.w	r0, #0
 8007d18:	f04f 0100 	mov.w	r1, #0
 8007d1c:	0159      	lsls	r1, r3, #5
 8007d1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d22:	0150      	lsls	r0, r2, #5
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	4641      	mov	r1, r8
 8007d2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8007d2e:	4649      	mov	r1, r9
 8007d30:	eb63 0b01 	sbc.w	fp, r3, r1
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007d40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007d44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007d48:	ebb2 040a 	subs.w	r4, r2, sl
 8007d4c:	eb63 050b 	sbc.w	r5, r3, fp
 8007d50:	f04f 0200 	mov.w	r2, #0
 8007d54:	f04f 0300 	mov.w	r3, #0
 8007d58:	00eb      	lsls	r3, r5, #3
 8007d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d5e:	00e2      	lsls	r2, r4, #3
 8007d60:	4614      	mov	r4, r2
 8007d62:	461d      	mov	r5, r3
 8007d64:	4643      	mov	r3, r8
 8007d66:	18e3      	adds	r3, r4, r3
 8007d68:	603b      	str	r3, [r7, #0]
 8007d6a:	464b      	mov	r3, r9
 8007d6c:	eb45 0303 	adc.w	r3, r5, r3
 8007d70:	607b      	str	r3, [r7, #4]
 8007d72:	f04f 0200 	mov.w	r2, #0
 8007d76:	f04f 0300 	mov.w	r3, #0
 8007d7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d7e:	4629      	mov	r1, r5
 8007d80:	028b      	lsls	r3, r1, #10
 8007d82:	4621      	mov	r1, r4
 8007d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d88:	4621      	mov	r1, r4
 8007d8a:	028a      	lsls	r2, r1, #10
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d92:	2200      	movs	r2, #0
 8007d94:	61bb      	str	r3, [r7, #24]
 8007d96:	61fa      	str	r2, [r7, #28]
 8007d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d9c:	f7f9 ffc0 	bl	8001d20 <__aeabi_uldivmod>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	4613      	mov	r3, r2
 8007da6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007da8:	4b0b      	ldr	r3, [pc, #44]	; (8007dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	0c1b      	lsrs	r3, r3, #16
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	3301      	adds	r3, #1
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007db8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007dc2:	e002      	b.n	8007dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007dc4:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8007dc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3750      	adds	r7, #80	; 0x50
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dd6:	bf00      	nop
 8007dd8:	40023800 	.word	0x40023800
 8007ddc:	00f42400 	.word	0x00f42400
 8007de0:	007a1200 	.word	0x007a1200

08007de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007de4:	b480      	push	{r7}
 8007de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007de8:	4b03      	ldr	r3, [pc, #12]	; (8007df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dea:	681b      	ldr	r3, [r3, #0]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	20000014 	.word	0x20000014

08007dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e00:	f7ff fff0 	bl	8007de4 <HAL_RCC_GetHCLKFreq>
 8007e04:	4602      	mov	r2, r0
 8007e06:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	0a9b      	lsrs	r3, r3, #10
 8007e0c:	f003 0307 	and.w	r3, r3, #7
 8007e10:	4903      	ldr	r1, [pc, #12]	; (8007e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e12:	5ccb      	ldrb	r3, [r1, r3]
 8007e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	40023800 	.word	0x40023800
 8007e20:	0800f5ac 	.word	0x0800f5ac

08007e24 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e01c      	b.n	8007e70 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	795b      	ldrb	r3, [r3, #5]
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d105      	bne.n	8007e4c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7fc fc48 	bl	80046dc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f042 0204 	orr.w	r2, r2, #4
 8007e60:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <HAL_RNG_GenerateRandomNumber_IT>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber_IT(RNG_HandleTypeDef *hrng)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	791b      	ldrb	r3, [r3, #4]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d101      	bne.n	8007e90 <HAL_RNG_GenerateRandomNumber_IT+0x18>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	e01c      	b.n	8007eca <HAL_RNG_GenerateRandomNumber_IT+0x52>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	795b      	ldrb	r3, [r3, #5]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d10b      	bne.n	8007eb8 <HAL_RNG_GenerateRandomNumber_IT+0x40>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	715a      	strb	r2, [r3, #5]

    /* Enable the RNG Interrupts: Data Ready, Clock error, Seed error */
    __HAL_RNG_ENABLE_IT(hrng);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f042 0208 	orr.w	r2, r2, #8
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	e007      	b.n	8007ec8 <HAL_RNG_GenerateRandomNumber_IT+0x50>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hrng);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	711a      	strb	r2, [r3, #4]

    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2204      	movs	r2, #4
 8007ec2:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f003 0320 	and.w	r3, r3, #32
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d005      	beq.n	8007f00 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2210      	movs	r2, #16
 8007ef8:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8007efa:	2301      	movs	r3, #1
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	e009      	b.n	8007f14 <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d004      	beq.n	8007f14 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2208      	movs	r2, #8
 8007f0e:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8007f10:	2301      	movs	r3, #1
 8007f12:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d10b      	bne.n	8007f32 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2204      	movs	r2, #4
 8007f1e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f838 	bl	8007f96 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8007f2e:	605a      	str	r2, [r3, #4]

    return;
 8007f30:	e022      	b.n	8007f78 <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d01d      	beq.n	8007f78 <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f022 0208 	bic.w	r2, r2, #8
 8007f4a:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689a      	ldr	r2, [r3, #8]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	795b      	ldrb	r3, [r3, #5]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b04      	cmp	r3, #4
 8007f5e:	d00b      	beq.n	8007f78 <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7fb fe62 	bl	8003c3c <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <HAL_RNG_ReadLastRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval random value
  */
uint32_t HAL_RNG_ReadLastRandomNumber(const RNG_HandleTypeDef *hrng)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b083      	sub	sp, #12
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  return (hrng->RandomNumber);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68db      	ldr	r3, [r3, #12]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8007f9e:	bf00      	nop
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d101      	bne.n	8007fbc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e041      	b.n	8008040 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d106      	bne.n	8007fd6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7fc fbab 	bl	800472c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2202      	movs	r2, #2
 8007fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	4610      	mov	r0, r2
 8007fea:	f000 fa7d 	bl	80084e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b01      	cmp	r3, #1
 800805a:	d001      	beq.n	8008060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e04e      	b.n	80080fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0201 	orr.w	r2, r2, #1
 8008076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a23      	ldr	r2, [pc, #140]	; (800810c <HAL_TIM_Base_Start_IT+0xc4>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d022      	beq.n	80080c8 <HAL_TIM_Base_Start_IT+0x80>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800808a:	d01d      	beq.n	80080c8 <HAL_TIM_Base_Start_IT+0x80>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a1f      	ldr	r2, [pc, #124]	; (8008110 <HAL_TIM_Base_Start_IT+0xc8>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d018      	beq.n	80080c8 <HAL_TIM_Base_Start_IT+0x80>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a1e      	ldr	r2, [pc, #120]	; (8008114 <HAL_TIM_Base_Start_IT+0xcc>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d013      	beq.n	80080c8 <HAL_TIM_Base_Start_IT+0x80>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a1c      	ldr	r2, [pc, #112]	; (8008118 <HAL_TIM_Base_Start_IT+0xd0>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d00e      	beq.n	80080c8 <HAL_TIM_Base_Start_IT+0x80>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a1b      	ldr	r2, [pc, #108]	; (800811c <HAL_TIM_Base_Start_IT+0xd4>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d009      	beq.n	80080c8 <HAL_TIM_Base_Start_IT+0x80>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a19      	ldr	r2, [pc, #100]	; (8008120 <HAL_TIM_Base_Start_IT+0xd8>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d004      	beq.n	80080c8 <HAL_TIM_Base_Start_IT+0x80>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a18      	ldr	r2, [pc, #96]	; (8008124 <HAL_TIM_Base_Start_IT+0xdc>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d111      	bne.n	80080ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f003 0307 	and.w	r3, r3, #7
 80080d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2b06      	cmp	r3, #6
 80080d8:	d010      	beq.n	80080fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f042 0201 	orr.w	r2, r2, #1
 80080e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ea:	e007      	b.n	80080fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f042 0201 	orr.w	r2, r2, #1
 80080fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	40010000 	.word	0x40010000
 8008110:	40000400 	.word	0x40000400
 8008114:	40000800 	.word	0x40000800
 8008118:	40000c00 	.word	0x40000c00
 800811c:	40010400 	.word	0x40010400
 8008120:	40014000 	.word	0x40014000
 8008124:	40001800 	.word	0x40001800

08008128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f003 0302 	and.w	r3, r3, #2
 8008146:	2b00      	cmp	r3, #0
 8008148:	d020      	beq.n	800818c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d01b      	beq.n	800818c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f06f 0202 	mvn.w	r2, #2
 800815c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	f003 0303 	and.w	r3, r3, #3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f999 	bl	80084aa <HAL_TIM_IC_CaptureCallback>
 8008178:	e005      	b.n	8008186 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f98b 	bl	8008496 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f99c 	bl	80084be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f003 0304 	and.w	r3, r3, #4
 8008192:	2b00      	cmp	r3, #0
 8008194:	d020      	beq.n	80081d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f003 0304 	and.w	r3, r3, #4
 800819c:	2b00      	cmp	r3, #0
 800819e:	d01b      	beq.n	80081d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f06f 0204 	mvn.w	r2, #4
 80081a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2202      	movs	r2, #2
 80081ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f973 	bl	80084aa <HAL_TIM_IC_CaptureCallback>
 80081c4:	e005      	b.n	80081d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f965 	bl	8008496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f976 	bl	80084be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f003 0308 	and.w	r3, r3, #8
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d020      	beq.n	8008224 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f003 0308 	and.w	r3, r3, #8
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d01b      	beq.n	8008224 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f06f 0208 	mvn.w	r2, #8
 80081f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2204      	movs	r2, #4
 80081fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f003 0303 	and.w	r3, r3, #3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f94d 	bl	80084aa <HAL_TIM_IC_CaptureCallback>
 8008210:	e005      	b.n	800821e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f93f 	bl	8008496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f950 	bl	80084be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	f003 0310 	and.w	r3, r3, #16
 800822a:	2b00      	cmp	r3, #0
 800822c:	d020      	beq.n	8008270 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f003 0310 	and.w	r3, r3, #16
 8008234:	2b00      	cmp	r3, #0
 8008236:	d01b      	beq.n	8008270 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f06f 0210 	mvn.w	r2, #16
 8008240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2208      	movs	r2, #8
 8008246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f927 	bl	80084aa <HAL_TIM_IC_CaptureCallback>
 800825c:	e005      	b.n	800826a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f919 	bl	8008496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f92a 	bl	80084be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00c      	beq.n	8008294 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f003 0301 	and.w	r3, r3, #1
 8008280:	2b00      	cmp	r3, #0
 8008282:	d007      	beq.n	8008294 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f06f 0201 	mvn.w	r2, #1
 800828c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7fb fce4 	bl	8003c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00c      	beq.n	80082b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d007      	beq.n	80082b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fae4 	bl	8008880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00c      	beq.n	80082dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d007      	beq.n	80082dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f8fb 	bl	80084d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00c      	beq.n	8008300 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f003 0320 	and.w	r3, r3, #32
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d007      	beq.n	8008300 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f06f 0220 	mvn.w	r2, #32
 80082f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fab6 	bl	800886c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008300:	bf00      	nop
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800831c:	2b01      	cmp	r3, #1
 800831e:	d101      	bne.n	8008324 <HAL_TIM_ConfigClockSource+0x1c>
 8008320:	2302      	movs	r3, #2
 8008322:	e0b4      	b.n	800848e <HAL_TIM_ConfigClockSource+0x186>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800834a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800835c:	d03e      	beq.n	80083dc <HAL_TIM_ConfigClockSource+0xd4>
 800835e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008362:	f200 8087 	bhi.w	8008474 <HAL_TIM_ConfigClockSource+0x16c>
 8008366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800836a:	f000 8086 	beq.w	800847a <HAL_TIM_ConfigClockSource+0x172>
 800836e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008372:	d87f      	bhi.n	8008474 <HAL_TIM_ConfigClockSource+0x16c>
 8008374:	2b70      	cmp	r3, #112	; 0x70
 8008376:	d01a      	beq.n	80083ae <HAL_TIM_ConfigClockSource+0xa6>
 8008378:	2b70      	cmp	r3, #112	; 0x70
 800837a:	d87b      	bhi.n	8008474 <HAL_TIM_ConfigClockSource+0x16c>
 800837c:	2b60      	cmp	r3, #96	; 0x60
 800837e:	d050      	beq.n	8008422 <HAL_TIM_ConfigClockSource+0x11a>
 8008380:	2b60      	cmp	r3, #96	; 0x60
 8008382:	d877      	bhi.n	8008474 <HAL_TIM_ConfigClockSource+0x16c>
 8008384:	2b50      	cmp	r3, #80	; 0x50
 8008386:	d03c      	beq.n	8008402 <HAL_TIM_ConfigClockSource+0xfa>
 8008388:	2b50      	cmp	r3, #80	; 0x50
 800838a:	d873      	bhi.n	8008474 <HAL_TIM_ConfigClockSource+0x16c>
 800838c:	2b40      	cmp	r3, #64	; 0x40
 800838e:	d058      	beq.n	8008442 <HAL_TIM_ConfigClockSource+0x13a>
 8008390:	2b40      	cmp	r3, #64	; 0x40
 8008392:	d86f      	bhi.n	8008474 <HAL_TIM_ConfigClockSource+0x16c>
 8008394:	2b30      	cmp	r3, #48	; 0x30
 8008396:	d064      	beq.n	8008462 <HAL_TIM_ConfigClockSource+0x15a>
 8008398:	2b30      	cmp	r3, #48	; 0x30
 800839a:	d86b      	bhi.n	8008474 <HAL_TIM_ConfigClockSource+0x16c>
 800839c:	2b20      	cmp	r3, #32
 800839e:	d060      	beq.n	8008462 <HAL_TIM_ConfigClockSource+0x15a>
 80083a0:	2b20      	cmp	r3, #32
 80083a2:	d867      	bhi.n	8008474 <HAL_TIM_ConfigClockSource+0x16c>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d05c      	beq.n	8008462 <HAL_TIM_ConfigClockSource+0x15a>
 80083a8:	2b10      	cmp	r3, #16
 80083aa:	d05a      	beq.n	8008462 <HAL_TIM_ConfigClockSource+0x15a>
 80083ac:	e062      	b.n	8008474 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083be:	f000 f9b9 	bl	8008734 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	609a      	str	r2, [r3, #8]
      break;
 80083da:	e04f      	b.n	800847c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80083ec:	f000 f9a2 	bl	8008734 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689a      	ldr	r2, [r3, #8]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083fe:	609a      	str	r2, [r3, #8]
      break;
 8008400:	e03c      	b.n	800847c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800840e:	461a      	mov	r2, r3
 8008410:	f000 f916 	bl	8008640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2150      	movs	r1, #80	; 0x50
 800841a:	4618      	mov	r0, r3
 800841c:	f000 f96f 	bl	80086fe <TIM_ITRx_SetConfig>
      break;
 8008420:	e02c      	b.n	800847c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800842e:	461a      	mov	r2, r3
 8008430:	f000 f935 	bl	800869e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2160      	movs	r1, #96	; 0x60
 800843a:	4618      	mov	r0, r3
 800843c:	f000 f95f 	bl	80086fe <TIM_ITRx_SetConfig>
      break;
 8008440:	e01c      	b.n	800847c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800844e:	461a      	mov	r2, r3
 8008450:	f000 f8f6 	bl	8008640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2140      	movs	r1, #64	; 0x40
 800845a:	4618      	mov	r0, r3
 800845c:	f000 f94f 	bl	80086fe <TIM_ITRx_SetConfig>
      break;
 8008460:	e00c      	b.n	800847c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4619      	mov	r1, r3
 800846c:	4610      	mov	r0, r2
 800846e:	f000 f946 	bl	80086fe <TIM_ITRx_SetConfig>
      break;
 8008472:	e003      	b.n	800847c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	73fb      	strb	r3, [r7, #15]
      break;
 8008478:	e000      	b.n	800847c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800847a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800848c:	7bfb      	ldrb	r3, [r7, #15]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008496:	b480      	push	{r7}
 8008498:	b083      	sub	sp, #12
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800849e:	bf00      	nop
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084b2:	bf00      	nop
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084be:	b480      	push	{r7}
 80084c0:	b083      	sub	sp, #12
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084c6:	bf00      	nop
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b083      	sub	sp, #12
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084da:	bf00      	nop
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
	...

080084e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a46      	ldr	r2, [pc, #280]	; (8008614 <TIM_Base_SetConfig+0x12c>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d013      	beq.n	8008528 <TIM_Base_SetConfig+0x40>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008506:	d00f      	beq.n	8008528 <TIM_Base_SetConfig+0x40>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a43      	ldr	r2, [pc, #268]	; (8008618 <TIM_Base_SetConfig+0x130>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d00b      	beq.n	8008528 <TIM_Base_SetConfig+0x40>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a42      	ldr	r2, [pc, #264]	; (800861c <TIM_Base_SetConfig+0x134>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d007      	beq.n	8008528 <TIM_Base_SetConfig+0x40>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a41      	ldr	r2, [pc, #260]	; (8008620 <TIM_Base_SetConfig+0x138>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d003      	beq.n	8008528 <TIM_Base_SetConfig+0x40>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a40      	ldr	r2, [pc, #256]	; (8008624 <TIM_Base_SetConfig+0x13c>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d108      	bne.n	800853a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800852e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	4313      	orrs	r3, r2
 8008538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a35      	ldr	r2, [pc, #212]	; (8008614 <TIM_Base_SetConfig+0x12c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d02b      	beq.n	800859a <TIM_Base_SetConfig+0xb2>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008548:	d027      	beq.n	800859a <TIM_Base_SetConfig+0xb2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a32      	ldr	r2, [pc, #200]	; (8008618 <TIM_Base_SetConfig+0x130>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d023      	beq.n	800859a <TIM_Base_SetConfig+0xb2>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a31      	ldr	r2, [pc, #196]	; (800861c <TIM_Base_SetConfig+0x134>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d01f      	beq.n	800859a <TIM_Base_SetConfig+0xb2>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a30      	ldr	r2, [pc, #192]	; (8008620 <TIM_Base_SetConfig+0x138>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d01b      	beq.n	800859a <TIM_Base_SetConfig+0xb2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a2f      	ldr	r2, [pc, #188]	; (8008624 <TIM_Base_SetConfig+0x13c>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d017      	beq.n	800859a <TIM_Base_SetConfig+0xb2>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a2e      	ldr	r2, [pc, #184]	; (8008628 <TIM_Base_SetConfig+0x140>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d013      	beq.n	800859a <TIM_Base_SetConfig+0xb2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a2d      	ldr	r2, [pc, #180]	; (800862c <TIM_Base_SetConfig+0x144>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00f      	beq.n	800859a <TIM_Base_SetConfig+0xb2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a2c      	ldr	r2, [pc, #176]	; (8008630 <TIM_Base_SetConfig+0x148>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d00b      	beq.n	800859a <TIM_Base_SetConfig+0xb2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a2b      	ldr	r2, [pc, #172]	; (8008634 <TIM_Base_SetConfig+0x14c>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d007      	beq.n	800859a <TIM_Base_SetConfig+0xb2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a2a      	ldr	r2, [pc, #168]	; (8008638 <TIM_Base_SetConfig+0x150>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d003      	beq.n	800859a <TIM_Base_SetConfig+0xb2>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a29      	ldr	r2, [pc, #164]	; (800863c <TIM_Base_SetConfig+0x154>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d108      	bne.n	80085ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	689a      	ldr	r2, [r3, #8]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a10      	ldr	r2, [pc, #64]	; (8008614 <TIM_Base_SetConfig+0x12c>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d003      	beq.n	80085e0 <TIM_Base_SetConfig+0xf8>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a12      	ldr	r2, [pc, #72]	; (8008624 <TIM_Base_SetConfig+0x13c>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d103      	bne.n	80085e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	691a      	ldr	r2, [r3, #16]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d105      	bne.n	8008606 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	f023 0201 	bic.w	r2, r3, #1
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	611a      	str	r2, [r3, #16]
  }
}
 8008606:	bf00      	nop
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	40010000 	.word	0x40010000
 8008618:	40000400 	.word	0x40000400
 800861c:	40000800 	.word	0x40000800
 8008620:	40000c00 	.word	0x40000c00
 8008624:	40010400 	.word	0x40010400
 8008628:	40014000 	.word	0x40014000
 800862c:	40014400 	.word	0x40014400
 8008630:	40014800 	.word	0x40014800
 8008634:	40001800 	.word	0x40001800
 8008638:	40001c00 	.word	0x40001c00
 800863c:	40002000 	.word	0x40002000

08008640 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008640:	b480      	push	{r7}
 8008642:	b087      	sub	sp, #28
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	f023 0201 	bic.w	r2, r3, #1
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800866a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	011b      	lsls	r3, r3, #4
 8008670:	693a      	ldr	r2, [r7, #16]
 8008672:	4313      	orrs	r3, r2
 8008674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f023 030a 	bic.w	r3, r3, #10
 800867c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	4313      	orrs	r3, r2
 8008684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	621a      	str	r2, [r3, #32]
}
 8008692:	bf00      	nop
 8008694:	371c      	adds	r7, #28
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800869e:	b480      	push	{r7}
 80086a0:	b087      	sub	sp, #28
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	f023 0210 	bic.w	r2, r3, #16
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	031b      	lsls	r3, r3, #12
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	011b      	lsls	r3, r3, #4
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	693a      	ldr	r2, [r7, #16]
 80086ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	621a      	str	r2, [r3, #32]
}
 80086f2:	bf00      	nop
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086fe:	b480      	push	{r7}
 8008700:	b085      	sub	sp, #20
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008714:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4313      	orrs	r3, r2
 800871c:	f043 0307 	orr.w	r3, r3, #7
 8008720:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	609a      	str	r2, [r3, #8]
}
 8008728:	bf00      	nop
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
 8008740:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800874e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	021a      	lsls	r2, r3, #8
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	431a      	orrs	r2, r3
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	4313      	orrs	r3, r2
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	4313      	orrs	r3, r2
 8008760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	609a      	str	r2, [r3, #8]
}
 8008768:	bf00      	nop
 800876a:	371c      	adds	r7, #28
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008784:	2b01      	cmp	r3, #1
 8008786:	d101      	bne.n	800878c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008788:	2302      	movs	r3, #2
 800878a:	e05a      	b.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a21      	ldr	r2, [pc, #132]	; (8008850 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d022      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d8:	d01d      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a1d      	ldr	r2, [pc, #116]	; (8008854 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d018      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a1b      	ldr	r2, [pc, #108]	; (8008858 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d013      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a1a      	ldr	r2, [pc, #104]	; (800885c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d00e      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a18      	ldr	r2, [pc, #96]	; (8008860 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d009      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a17      	ldr	r2, [pc, #92]	; (8008864 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d004      	beq.n	8008816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a15      	ldr	r2, [pc, #84]	; (8008868 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d10c      	bne.n	8008830 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800881c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	4313      	orrs	r3, r2
 8008826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	40010000 	.word	0x40010000
 8008854:	40000400 	.word	0x40000400
 8008858:	40000800 	.word	0x40000800
 800885c:	40000c00 	.word	0x40000c00
 8008860:	40010400 	.word	0x40010400
 8008864:	40014000 	.word	0x40014000
 8008868:	40001800 	.word	0x40001800

0800886c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008894:	b084      	sub	sp, #16
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	f107 001c 	add.w	r0, r7, #28
 80088a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088a6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d123      	bne.n	80088f6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80088c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80088d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d105      	bne.n	80088ea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f001 fae2 	bl	8009eb4 <USB_CoreReset>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73fb      	strb	r3, [r7, #15]
 80088f4:	e01b      	b.n	800892e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f001 fad6 	bl	8009eb4 <USB_CoreReset>
 8008908:	4603      	mov	r3, r0
 800890a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800890c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008910:	2b00      	cmp	r3, #0
 8008912:	d106      	bne.n	8008922 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008918:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	639a      	str	r2, [r3, #56]	; 0x38
 8008920:	e005      	b.n	800892e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008926:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800892e:	7fbb      	ldrb	r3, [r7, #30]
 8008930:	2b01      	cmp	r3, #1
 8008932:	d10b      	bne.n	800894c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f043 0206 	orr.w	r2, r3, #6
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f043 0220 	orr.w	r2, r3, #32
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800894c:	7bfb      	ldrb	r3, [r7, #15]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008958:	b004      	add	sp, #16
 800895a:	4770      	bx	lr

0800895c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	4613      	mov	r3, r2
 8008968:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800896a:	79fb      	ldrb	r3, [r7, #7]
 800896c:	2b02      	cmp	r3, #2
 800896e:	d165      	bne.n	8008a3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	4a41      	ldr	r2, [pc, #260]	; (8008a78 <USB_SetTurnaroundTime+0x11c>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d906      	bls.n	8008986 <USB_SetTurnaroundTime+0x2a>
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	4a40      	ldr	r2, [pc, #256]	; (8008a7c <USB_SetTurnaroundTime+0x120>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d202      	bcs.n	8008986 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008980:	230f      	movs	r3, #15
 8008982:	617b      	str	r3, [r7, #20]
 8008984:	e062      	b.n	8008a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	4a3c      	ldr	r2, [pc, #240]	; (8008a7c <USB_SetTurnaroundTime+0x120>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d306      	bcc.n	800899c <USB_SetTurnaroundTime+0x40>
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	4a3b      	ldr	r2, [pc, #236]	; (8008a80 <USB_SetTurnaroundTime+0x124>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d202      	bcs.n	800899c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008996:	230e      	movs	r3, #14
 8008998:	617b      	str	r3, [r7, #20]
 800899a:	e057      	b.n	8008a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	4a38      	ldr	r2, [pc, #224]	; (8008a80 <USB_SetTurnaroundTime+0x124>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d306      	bcc.n	80089b2 <USB_SetTurnaroundTime+0x56>
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	4a37      	ldr	r2, [pc, #220]	; (8008a84 <USB_SetTurnaroundTime+0x128>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d202      	bcs.n	80089b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80089ac:	230d      	movs	r3, #13
 80089ae:	617b      	str	r3, [r7, #20]
 80089b0:	e04c      	b.n	8008a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	4a33      	ldr	r2, [pc, #204]	; (8008a84 <USB_SetTurnaroundTime+0x128>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d306      	bcc.n	80089c8 <USB_SetTurnaroundTime+0x6c>
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	4a32      	ldr	r2, [pc, #200]	; (8008a88 <USB_SetTurnaroundTime+0x12c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d802      	bhi.n	80089c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80089c2:	230c      	movs	r3, #12
 80089c4:	617b      	str	r3, [r7, #20]
 80089c6:	e041      	b.n	8008a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	4a2f      	ldr	r2, [pc, #188]	; (8008a88 <USB_SetTurnaroundTime+0x12c>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d906      	bls.n	80089de <USB_SetTurnaroundTime+0x82>
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	4a2e      	ldr	r2, [pc, #184]	; (8008a8c <USB_SetTurnaroundTime+0x130>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d802      	bhi.n	80089de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80089d8:	230b      	movs	r3, #11
 80089da:	617b      	str	r3, [r7, #20]
 80089dc:	e036      	b.n	8008a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	4a2a      	ldr	r2, [pc, #168]	; (8008a8c <USB_SetTurnaroundTime+0x130>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d906      	bls.n	80089f4 <USB_SetTurnaroundTime+0x98>
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	4a29      	ldr	r2, [pc, #164]	; (8008a90 <USB_SetTurnaroundTime+0x134>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d802      	bhi.n	80089f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80089ee:	230a      	movs	r3, #10
 80089f0:	617b      	str	r3, [r7, #20]
 80089f2:	e02b      	b.n	8008a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	4a26      	ldr	r2, [pc, #152]	; (8008a90 <USB_SetTurnaroundTime+0x134>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d906      	bls.n	8008a0a <USB_SetTurnaroundTime+0xae>
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	4a25      	ldr	r2, [pc, #148]	; (8008a94 <USB_SetTurnaroundTime+0x138>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d202      	bcs.n	8008a0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008a04:	2309      	movs	r3, #9
 8008a06:	617b      	str	r3, [r7, #20]
 8008a08:	e020      	b.n	8008a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	4a21      	ldr	r2, [pc, #132]	; (8008a94 <USB_SetTurnaroundTime+0x138>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d306      	bcc.n	8008a20 <USB_SetTurnaroundTime+0xc4>
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	4a20      	ldr	r2, [pc, #128]	; (8008a98 <USB_SetTurnaroundTime+0x13c>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d802      	bhi.n	8008a20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008a1a:	2308      	movs	r3, #8
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	e015      	b.n	8008a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	4a1d      	ldr	r2, [pc, #116]	; (8008a98 <USB_SetTurnaroundTime+0x13c>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d906      	bls.n	8008a36 <USB_SetTurnaroundTime+0xda>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	4a1c      	ldr	r2, [pc, #112]	; (8008a9c <USB_SetTurnaroundTime+0x140>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d202      	bcs.n	8008a36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008a30:	2307      	movs	r3, #7
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	e00a      	b.n	8008a4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008a36:	2306      	movs	r3, #6
 8008a38:	617b      	str	r3, [r7, #20]
 8008a3a:	e007      	b.n	8008a4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008a3c:	79fb      	ldrb	r3, [r7, #7]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d102      	bne.n	8008a48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008a42:	2309      	movs	r3, #9
 8008a44:	617b      	str	r3, [r7, #20]
 8008a46:	e001      	b.n	8008a4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008a48:	2309      	movs	r3, #9
 8008a4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	68da      	ldr	r2, [r3, #12]
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	029b      	lsls	r3, r3, #10
 8008a60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008a64:	431a      	orrs	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	371c      	adds	r7, #28
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	00d8acbf 	.word	0x00d8acbf
 8008a7c:	00e4e1c0 	.word	0x00e4e1c0
 8008a80:	00f42400 	.word	0x00f42400
 8008a84:	01067380 	.word	0x01067380
 8008a88:	011a499f 	.word	0x011a499f
 8008a8c:	01312cff 	.word	0x01312cff
 8008a90:	014ca43f 	.word	0x014ca43f
 8008a94:	016e3600 	.word	0x016e3600
 8008a98:	01a6ab1f 	.word	0x01a6ab1f
 8008a9c:	01e84800 	.word	0x01e84800

08008aa0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f043 0201 	orr.w	r2, r3, #1
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b083      	sub	sp, #12
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f023 0201 	bic.w	r2, r3, #1
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d115      	bne.n	8008b32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008b12:	200a      	movs	r0, #10
 8008b14:	f7fb ffae 	bl	8004a74 <HAL_Delay>
      ms += 10U;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	330a      	adds	r3, #10
 8008b1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f001 f939 	bl	8009d96 <USB_GetMode>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d01e      	beq.n	8008b68 <USB_SetCurrentMode+0x84>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2bc7      	cmp	r3, #199	; 0xc7
 8008b2e:	d9f0      	bls.n	8008b12 <USB_SetCurrentMode+0x2e>
 8008b30:	e01a      	b.n	8008b68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b32:	78fb      	ldrb	r3, [r7, #3]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d115      	bne.n	8008b64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008b44:	200a      	movs	r0, #10
 8008b46:	f7fb ff95 	bl	8004a74 <HAL_Delay>
      ms += 10U;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	330a      	adds	r3, #10
 8008b4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f001 f920 	bl	8009d96 <USB_GetMode>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d005      	beq.n	8008b68 <USB_SetCurrentMode+0x84>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2bc7      	cmp	r3, #199	; 0xc7
 8008b60:	d9f0      	bls.n	8008b44 <USB_SetCurrentMode+0x60>
 8008b62:	e001      	b.n	8008b68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e005      	b.n	8008b74 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2bc8      	cmp	r3, #200	; 0xc8
 8008b6c:	d101      	bne.n	8008b72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e000      	b.n	8008b74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b086      	sub	sp, #24
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b96:	2300      	movs	r3, #0
 8008b98:	613b      	str	r3, [r7, #16]
 8008b9a:	e009      	b.n	8008bb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	3340      	adds	r3, #64	; 0x40
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	3301      	adds	r3, #1
 8008bae:	613b      	str	r3, [r7, #16]
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	2b0e      	cmp	r3, #14
 8008bb4:	d9f2      	bls.n	8008b9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008bb6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d11c      	bne.n	8008bf8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bcc:	f043 0302 	orr.w	r3, r3, #2
 8008bd0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	639a      	str	r2, [r3, #56]	; 0x38
 8008bf6:	e00b      	b.n	8008c10 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c08:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c16:	461a      	mov	r2, r3
 8008c18:	2300      	movs	r3, #0
 8008c1a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c1c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d10d      	bne.n	8008c40 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d104      	bne.n	8008c36 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f968 	bl	8008f04 <USB_SetDevSpeed>
 8008c34:	e008      	b.n	8008c48 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c36:	2101      	movs	r1, #1
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f963 	bl	8008f04 <USB_SetDevSpeed>
 8008c3e:	e003      	b.n	8008c48 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c40:	2103      	movs	r1, #3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f95e 	bl	8008f04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c48:	2110      	movs	r1, #16
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f8fa 	bl	8008e44 <USB_FlushTxFifo>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f924 	bl	8008ea8 <USB_FlushRxFifo>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c70:	461a      	mov	r2, r3
 8008c72:	2300      	movs	r3, #0
 8008c74:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	2300      	movs	r3, #0
 8008c80:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c88:	461a      	mov	r2, r3
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c8e:	2300      	movs	r3, #0
 8008c90:	613b      	str	r3, [r7, #16]
 8008c92:	e043      	b.n	8008d1c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008caa:	d118      	bne.n	8008cde <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cc4:	6013      	str	r3, [r2, #0]
 8008cc6:	e013      	b.n	8008cf0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cda:	6013      	str	r3, [r2, #0]
 8008cdc:	e008      	b.n	8008cf0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cea:	461a      	mov	r2, r3
 8008cec:	2300      	movs	r3, #0
 8008cee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	2300      	movs	r3, #0
 8008d00:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	015a      	lsls	r2, r3, #5
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	4413      	add	r3, r2
 8008d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d0e:	461a      	mov	r2, r3
 8008d10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	613b      	str	r3, [r7, #16]
 8008d1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d20:	461a      	mov	r2, r3
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d3b5      	bcc.n	8008c94 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	613b      	str	r3, [r7, #16]
 8008d2c:	e043      	b.n	8008db6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d44:	d118      	bne.n	8008d78 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10a      	bne.n	8008d62 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	015a      	lsls	r2, r3, #5
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d58:	461a      	mov	r2, r3
 8008d5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d5e:	6013      	str	r3, [r2, #0]
 8008d60:	e013      	b.n	8008d8a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	015a      	lsls	r2, r3, #5
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	4413      	add	r3, r2
 8008d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d6e:	461a      	mov	r2, r3
 8008d70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d74:	6013      	str	r3, [r2, #0]
 8008d76:	e008      	b.n	8008d8a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	015a      	lsls	r2, r3, #5
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	4413      	add	r3, r2
 8008d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d84:	461a      	mov	r2, r3
 8008d86:	2300      	movs	r3, #0
 8008d88:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	015a      	lsls	r2, r3, #5
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d96:	461a      	mov	r2, r3
 8008d98:	2300      	movs	r3, #0
 8008d9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da8:	461a      	mov	r2, r3
 8008daa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008dae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	3301      	adds	r3, #1
 8008db4:	613b      	str	r3, [r7, #16]
 8008db6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008dba:	461a      	mov	r2, r3
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d3b5      	bcc.n	8008d2e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dd4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008de2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008de4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d105      	bne.n	8008df8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	f043 0210 	orr.w	r2, r3, #16
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	699a      	ldr	r2, [r3, #24]
 8008dfc:	4b10      	ldr	r3, [pc, #64]	; (8008e40 <USB_DevInit+0x2c4>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e04:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d005      	beq.n	8008e18 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	f043 0208 	orr.w	r2, r3, #8
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e18:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d107      	bne.n	8008e30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e28:	f043 0304 	orr.w	r3, r3, #4
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3718      	adds	r7, #24
 8008e36:	46bd      	mov	sp, r7
 8008e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e3c:	b004      	add	sp, #16
 8008e3e:	4770      	bx	lr
 8008e40:	803c3800 	.word	0x803c3800

08008e44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3301      	adds	r3, #1
 8008e56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008e5e:	d901      	bls.n	8008e64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e01b      	b.n	8008e9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	daf2      	bge.n	8008e52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	019b      	lsls	r3, r3, #6
 8008e74:	f043 0220 	orr.w	r2, r3, #32
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008e88:	d901      	bls.n	8008e8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e006      	b.n	8008e9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b20      	cmp	r3, #32
 8008e98:	d0f0      	beq.n	8008e7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3714      	adds	r7, #20
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008ec0:	d901      	bls.n	8008ec6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e018      	b.n	8008ef8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	daf2      	bge.n	8008eb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2210      	movs	r2, #16
 8008ed6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	3301      	adds	r3, #1
 8008edc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008ee4:	d901      	bls.n	8008eea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e006      	b.n	8008ef8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	f003 0310 	and.w	r3, r3, #16
 8008ef2:	2b10      	cmp	r3, #16
 8008ef4:	d0f0      	beq.n	8008ed8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3714      	adds	r7, #20
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	78fb      	ldrb	r3, [r7, #3]
 8008f1e:	68f9      	ldr	r1, [r7, #12]
 8008f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f24:	4313      	orrs	r3, r2
 8008f26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b087      	sub	sp, #28
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	f003 0306 	and.w	r3, r3, #6
 8008f4e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d102      	bne.n	8008f5c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008f56:	2300      	movs	r3, #0
 8008f58:	75fb      	strb	r3, [r7, #23]
 8008f5a:	e00a      	b.n	8008f72 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d002      	beq.n	8008f68 <USB_GetDevSpeed+0x32>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2b06      	cmp	r3, #6
 8008f66:	d102      	bne.n	8008f6e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	75fb      	strb	r3, [r7, #23]
 8008f6c:	e001      	b.n	8008f72 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008f6e:	230f      	movs	r3, #15
 8008f70:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	371c      	adds	r7, #28
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	785b      	ldrb	r3, [r3, #1]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d13a      	bne.n	8009012 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa2:	69da      	ldr	r2, [r3, #28]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	f003 030f 	and.w	r3, r3, #15
 8008fac:	2101      	movs	r1, #1
 8008fae:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	68f9      	ldr	r1, [r7, #12]
 8008fb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	015a      	lsls	r2, r3, #5
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d155      	bne.n	8009080 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	015a      	lsls	r2, r3, #5
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	4413      	add	r3, r2
 8008fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	791b      	ldrb	r3, [r3, #4]
 8008fee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ff0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	059b      	lsls	r3, r3, #22
 8008ff6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	0151      	lsls	r1, r2, #5
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	440a      	add	r2, r1
 8009002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800900a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800900e:	6013      	str	r3, [r2, #0]
 8009010:	e036      	b.n	8009080 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009018:	69da      	ldr	r2, [r3, #28]
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	f003 030f 	and.w	r3, r3, #15
 8009022:	2101      	movs	r1, #1
 8009024:	fa01 f303 	lsl.w	r3, r1, r3
 8009028:	041b      	lsls	r3, r3, #16
 800902a:	68f9      	ldr	r1, [r7, #12]
 800902c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009030:	4313      	orrs	r3, r2
 8009032:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4413      	add	r3, r2
 800903c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d11a      	bne.n	8009080 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	791b      	ldrb	r3, [r3, #4]
 8009064:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009066:	430b      	orrs	r3, r1
 8009068:	4313      	orrs	r3, r2
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	0151      	lsls	r1, r2, #5
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	440a      	add	r2, r1
 8009072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800907a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800907e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
	...

08009090 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	785b      	ldrb	r3, [r3, #1]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d161      	bne.n	8009170 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	015a      	lsls	r2, r3, #5
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	4413      	add	r3, r2
 80090b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090c2:	d11f      	bne.n	8009104 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	015a      	lsls	r2, r3, #5
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	4413      	add	r3, r2
 80090cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	0151      	lsls	r1, r2, #5
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	440a      	add	r2, r1
 80090da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	0151      	lsls	r1, r2, #5
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	440a      	add	r2, r1
 80090fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009102:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	f003 030f 	and.w	r3, r3, #15
 8009114:	2101      	movs	r1, #1
 8009116:	fa01 f303 	lsl.w	r3, r1, r3
 800911a:	b29b      	uxth	r3, r3
 800911c:	43db      	mvns	r3, r3
 800911e:	68f9      	ldr	r1, [r7, #12]
 8009120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009124:	4013      	ands	r3, r2
 8009126:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912e:	69da      	ldr	r2, [r3, #28]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	f003 030f 	and.w	r3, r3, #15
 8009138:	2101      	movs	r1, #1
 800913a:	fa01 f303 	lsl.w	r3, r1, r3
 800913e:	b29b      	uxth	r3, r3
 8009140:	43db      	mvns	r3, r3
 8009142:	68f9      	ldr	r1, [r7, #12]
 8009144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009148:	4013      	ands	r3, r2
 800914a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	015a      	lsls	r2, r3, #5
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	0159      	lsls	r1, r3, #5
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	440b      	add	r3, r1
 8009162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009166:	4619      	mov	r1, r3
 8009168:	4b35      	ldr	r3, [pc, #212]	; (8009240 <USB_DeactivateEndpoint+0x1b0>)
 800916a:	4013      	ands	r3, r2
 800916c:	600b      	str	r3, [r1, #0]
 800916e:	e060      	b.n	8009232 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	015a      	lsls	r2, r3, #5
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	4413      	add	r3, r2
 8009178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009186:	d11f      	bne.n	80091c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	015a      	lsls	r2, r3, #5
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4413      	add	r3, r2
 8009190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	0151      	lsls	r1, r2, #5
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	440a      	add	r2, r1
 800919e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	0151      	lsls	r1, r2, #5
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	440a      	add	r2, r1
 80091be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	f003 030f 	and.w	r3, r3, #15
 80091d8:	2101      	movs	r1, #1
 80091da:	fa01 f303 	lsl.w	r3, r1, r3
 80091de:	041b      	lsls	r3, r3, #16
 80091e0:	43db      	mvns	r3, r3
 80091e2:	68f9      	ldr	r1, [r7, #12]
 80091e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091e8:	4013      	ands	r3, r2
 80091ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f2:	69da      	ldr	r2, [r3, #28]
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	f003 030f 	and.w	r3, r3, #15
 80091fc:	2101      	movs	r1, #1
 80091fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009202:	041b      	lsls	r3, r3, #16
 8009204:	43db      	mvns	r3, r3
 8009206:	68f9      	ldr	r1, [r7, #12]
 8009208:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800920c:	4013      	ands	r3, r2
 800920e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4413      	add	r3, r2
 8009218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	0159      	lsls	r1, r3, #5
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	440b      	add	r3, r1
 8009226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800922a:	4619      	mov	r1, r3
 800922c:	4b05      	ldr	r3, [pc, #20]	; (8009244 <USB_DeactivateEndpoint+0x1b4>)
 800922e:	4013      	ands	r3, r2
 8009230:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	ec337800 	.word	0xec337800
 8009244:	eff37800 	.word	0xeff37800

08009248 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08a      	sub	sp, #40	; 0x28
 800924c:	af02      	add	r7, sp, #8
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	4613      	mov	r3, r2
 8009254:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	785b      	ldrb	r3, [r3, #1]
 8009264:	2b01      	cmp	r3, #1
 8009266:	f040 817a 	bne.w	800955e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d132      	bne.n	80092d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	015a      	lsls	r2, r3, #5
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	4413      	add	r3, r2
 800927a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	69ba      	ldr	r2, [r7, #24]
 8009282:	0151      	lsls	r1, r2, #5
 8009284:	69fa      	ldr	r2, [r7, #28]
 8009286:	440a      	add	r2, r1
 8009288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800928c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009290:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009294:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	0151      	lsls	r1, r2, #5
 80092a8:	69fa      	ldr	r2, [r7, #28]
 80092aa:	440a      	add	r2, r1
 80092ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	69ba      	ldr	r2, [r7, #24]
 80092c6:	0151      	lsls	r1, r2, #5
 80092c8:	69fa      	ldr	r2, [r7, #28]
 80092ca:	440a      	add	r2, r1
 80092cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092d0:	0cdb      	lsrs	r3, r3, #19
 80092d2:	04db      	lsls	r3, r3, #19
 80092d4:	6113      	str	r3, [r2, #16]
 80092d6:	e092      	b.n	80093fe <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	0151      	lsls	r1, r2, #5
 80092ea:	69fa      	ldr	r2, [r7, #28]
 80092ec:	440a      	add	r2, r1
 80092ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092f2:	0cdb      	lsrs	r3, r3, #19
 80092f4:	04db      	lsls	r3, r3, #19
 80092f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	015a      	lsls	r2, r3, #5
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	4413      	add	r3, r2
 8009300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	0151      	lsls	r1, r2, #5
 800930a:	69fa      	ldr	r2, [r7, #28]
 800930c:	440a      	add	r2, r1
 800930e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009312:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009316:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800931a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d11a      	bne.n	8009358 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	691a      	ldr	r2, [r3, #16]
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	429a      	cmp	r2, r3
 800932c:	d903      	bls.n	8009336 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	689a      	ldr	r2, [r3, #8]
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	015a      	lsls	r2, r3, #5
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	4413      	add	r3, r2
 800933e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	69ba      	ldr	r2, [r7, #24]
 8009346:	0151      	lsls	r1, r2, #5
 8009348:	69fa      	ldr	r2, [r7, #28]
 800934a:	440a      	add	r2, r1
 800934c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009350:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009354:	6113      	str	r3, [r2, #16]
 8009356:	e01b      	b.n	8009390 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	015a      	lsls	r2, r3, #5
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	4413      	add	r3, r2
 8009360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009364:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	6919      	ldr	r1, [r3, #16]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	440b      	add	r3, r1
 8009370:	1e59      	subs	r1, r3, #1
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	fbb1 f3f3 	udiv	r3, r1, r3
 800937a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800937c:	4ba2      	ldr	r3, [pc, #648]	; (8009608 <USB_EPStartXfer+0x3c0>)
 800937e:	400b      	ands	r3, r1
 8009380:	69b9      	ldr	r1, [r7, #24]
 8009382:	0148      	lsls	r0, r1, #5
 8009384:	69f9      	ldr	r1, [r7, #28]
 8009386:	4401      	add	r1, r0
 8009388:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800938c:	4313      	orrs	r3, r2
 800938e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	015a      	lsls	r2, r3, #5
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	4413      	add	r3, r2
 8009398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939c:	691a      	ldr	r2, [r3, #16]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093a6:	69b9      	ldr	r1, [r7, #24]
 80093a8:	0148      	lsls	r0, r1, #5
 80093aa:	69f9      	ldr	r1, [r7, #28]
 80093ac:	4401      	add	r1, r0
 80093ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093b2:	4313      	orrs	r3, r2
 80093b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	791b      	ldrb	r3, [r3, #4]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d11f      	bne.n	80093fe <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	0151      	lsls	r1, r2, #5
 80093d0:	69fa      	ldr	r2, [r7, #28]
 80093d2:	440a      	add	r2, r1
 80093d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80093dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	015a      	lsls	r2, r3, #5
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	4413      	add	r3, r2
 80093e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	0151      	lsls	r1, r2, #5
 80093f0:	69fa      	ldr	r2, [r7, #28]
 80093f2:	440a      	add	r2, r1
 80093f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80093fe:	79fb      	ldrb	r3, [r7, #7]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d14b      	bne.n	800949c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	69db      	ldr	r3, [r3, #28]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d009      	beq.n	8009420 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	4413      	add	r3, r2
 8009414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009418:	461a      	mov	r2, r3
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	791b      	ldrb	r3, [r3, #4]
 8009424:	2b01      	cmp	r3, #1
 8009426:	d128      	bne.n	800947a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009434:	2b00      	cmp	r3, #0
 8009436:	d110      	bne.n	800945a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	015a      	lsls	r2, r3, #5
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	4413      	add	r3, r2
 8009440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	69ba      	ldr	r2, [r7, #24]
 8009448:	0151      	lsls	r1, r2, #5
 800944a:	69fa      	ldr	r2, [r7, #28]
 800944c:	440a      	add	r2, r1
 800944e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009452:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009456:	6013      	str	r3, [r2, #0]
 8009458:	e00f      	b.n	800947a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	4413      	add	r3, r2
 8009462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	69ba      	ldr	r2, [r7, #24]
 800946a:	0151      	lsls	r1, r2, #5
 800946c:	69fa      	ldr	r2, [r7, #28]
 800946e:	440a      	add	r2, r1
 8009470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009478:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	4413      	add	r3, r2
 8009482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	0151      	lsls	r1, r2, #5
 800948c:	69fa      	ldr	r2, [r7, #28]
 800948e:	440a      	add	r2, r1
 8009490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009494:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009498:	6013      	str	r3, [r2, #0]
 800949a:	e165      	b.n	8009768 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	015a      	lsls	r2, r3, #5
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	69ba      	ldr	r2, [r7, #24]
 80094ac:	0151      	lsls	r1, r2, #5
 80094ae:	69fa      	ldr	r2, [r7, #28]
 80094b0:	440a      	add	r2, r1
 80094b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	791b      	ldrb	r3, [r3, #4]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d015      	beq.n	80094f0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 814d 	beq.w	8009768 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	f003 030f 	and.w	r3, r3, #15
 80094de:	2101      	movs	r1, #1
 80094e0:	fa01 f303 	lsl.w	r3, r1, r3
 80094e4:	69f9      	ldr	r1, [r7, #28]
 80094e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094ea:	4313      	orrs	r3, r2
 80094ec:	634b      	str	r3, [r1, #52]	; 0x34
 80094ee:	e13b      	b.n	8009768 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d110      	bne.n	8009522 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	015a      	lsls	r2, r3, #5
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	4413      	add	r3, r2
 8009508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	69ba      	ldr	r2, [r7, #24]
 8009510:	0151      	lsls	r1, r2, #5
 8009512:	69fa      	ldr	r2, [r7, #28]
 8009514:	440a      	add	r2, r1
 8009516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800951a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800951e:	6013      	str	r3, [r2, #0]
 8009520:	e00f      	b.n	8009542 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	015a      	lsls	r2, r3, #5
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	4413      	add	r3, r2
 800952a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	69ba      	ldr	r2, [r7, #24]
 8009532:	0151      	lsls	r1, r2, #5
 8009534:	69fa      	ldr	r2, [r7, #28]
 8009536:	440a      	add	r2, r1
 8009538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800953c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009540:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	68d9      	ldr	r1, [r3, #12]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	781a      	ldrb	r2, [r3, #0]
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	b298      	uxth	r0, r3
 8009550:	79fb      	ldrb	r3, [r7, #7]
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	4603      	mov	r3, r0
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f000 f9b8 	bl	80098cc <USB_WritePacket>
 800955c:	e104      	b.n	8009768 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	015a      	lsls	r2, r3, #5
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	4413      	add	r3, r2
 8009566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	69ba      	ldr	r2, [r7, #24]
 800956e:	0151      	lsls	r1, r2, #5
 8009570:	69fa      	ldr	r2, [r7, #28]
 8009572:	440a      	add	r2, r1
 8009574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009578:	0cdb      	lsrs	r3, r3, #19
 800957a:	04db      	lsls	r3, r3, #19
 800957c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	015a      	lsls	r2, r3, #5
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	4413      	add	r3, r2
 8009586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	69ba      	ldr	r2, [r7, #24]
 800958e:	0151      	lsls	r1, r2, #5
 8009590:	69fa      	ldr	r2, [r7, #28]
 8009592:	440a      	add	r2, r1
 8009594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009598:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800959c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095a0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d131      	bne.n	800960c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	689a      	ldr	r2, [r3, #8]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	015a      	lsls	r2, r3, #5
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095cc:	691a      	ldr	r2, [r3, #16]
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	6a1b      	ldr	r3, [r3, #32]
 80095d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095d6:	69b9      	ldr	r1, [r7, #24]
 80095d8:	0148      	lsls	r0, r1, #5
 80095da:	69f9      	ldr	r1, [r7, #28]
 80095dc:	4401      	add	r1, r0
 80095de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80095e2:	4313      	orrs	r3, r2
 80095e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	015a      	lsls	r2, r3, #5
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	69ba      	ldr	r2, [r7, #24]
 80095f6:	0151      	lsls	r1, r2, #5
 80095f8:	69fa      	ldr	r2, [r7, #28]
 80095fa:	440a      	add	r2, r1
 80095fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009600:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009604:	6113      	str	r3, [r2, #16]
 8009606:	e061      	b.n	80096cc <USB_EPStartXfer+0x484>
 8009608:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d123      	bne.n	800965c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	015a      	lsls	r2, r3, #5
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	4413      	add	r3, r2
 800961c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009620:	691a      	ldr	r2, [r3, #16]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800962a:	69b9      	ldr	r1, [r7, #24]
 800962c:	0148      	lsls	r0, r1, #5
 800962e:	69f9      	ldr	r1, [r7, #28]
 8009630:	4401      	add	r1, r0
 8009632:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009636:	4313      	orrs	r3, r2
 8009638:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	0151      	lsls	r1, r2, #5
 800964c:	69fa      	ldr	r2, [r7, #28]
 800964e:	440a      	add	r2, r1
 8009650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009658:	6113      	str	r3, [r2, #16]
 800965a:	e037      	b.n	80096cc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	691a      	ldr	r2, [r3, #16]
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	4413      	add	r3, r2
 8009666:	1e5a      	subs	r2, r3, #1
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009670:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	8afa      	ldrh	r2, [r7, #22]
 8009678:	fb03 f202 	mul.w	r2, r3, r2
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	015a      	lsls	r2, r3, #5
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	4413      	add	r3, r2
 8009688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800968c:	691a      	ldr	r2, [r3, #16]
 800968e:	8afb      	ldrh	r3, [r7, #22]
 8009690:	04d9      	lsls	r1, r3, #19
 8009692:	4b38      	ldr	r3, [pc, #224]	; (8009774 <USB_EPStartXfer+0x52c>)
 8009694:	400b      	ands	r3, r1
 8009696:	69b9      	ldr	r1, [r7, #24]
 8009698:	0148      	lsls	r0, r1, #5
 800969a:	69f9      	ldr	r1, [r7, #28]
 800969c:	4401      	add	r1, r0
 800969e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096a2:	4313      	orrs	r3, r2
 80096a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b2:	691a      	ldr	r2, [r3, #16]
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	6a1b      	ldr	r3, [r3, #32]
 80096b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096bc:	69b9      	ldr	r1, [r7, #24]
 80096be:	0148      	lsls	r0, r1, #5
 80096c0:	69f9      	ldr	r1, [r7, #28]
 80096c2:	4401      	add	r1, r0
 80096c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096c8:	4313      	orrs	r3, r2
 80096ca:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80096cc:	79fb      	ldrb	r3, [r7, #7]
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d10d      	bne.n	80096ee <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d009      	beq.n	80096ee <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	68d9      	ldr	r1, [r3, #12]
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	015a      	lsls	r2, r3, #5
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	4413      	add	r3, r2
 80096e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ea:	460a      	mov	r2, r1
 80096ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	791b      	ldrb	r3, [r3, #4]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d128      	bne.n	8009748 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009702:	2b00      	cmp	r3, #0
 8009704:	d110      	bne.n	8009728 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	015a      	lsls	r2, r3, #5
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	4413      	add	r3, r2
 800970e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	69ba      	ldr	r2, [r7, #24]
 8009716:	0151      	lsls	r1, r2, #5
 8009718:	69fa      	ldr	r2, [r7, #28]
 800971a:	440a      	add	r2, r1
 800971c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009720:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009724:	6013      	str	r3, [r2, #0]
 8009726:	e00f      	b.n	8009748 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	015a      	lsls	r2, r3, #5
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	4413      	add	r3, r2
 8009730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	69ba      	ldr	r2, [r7, #24]
 8009738:	0151      	lsls	r1, r2, #5
 800973a:	69fa      	ldr	r2, [r7, #28]
 800973c:	440a      	add	r2, r1
 800973e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009746:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	4413      	add	r3, r2
 8009750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	0151      	lsls	r1, r2, #5
 800975a:	69fa      	ldr	r2, [r7, #28]
 800975c:	440a      	add	r2, r1
 800975e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009762:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009766:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3720      	adds	r7, #32
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	1ff80000 	.word	0x1ff80000

08009778 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009778:	b480      	push	{r7}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009782:	2300      	movs	r3, #0
 8009784:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	785b      	ldrb	r3, [r3, #1]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d14a      	bne.n	800982c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097ae:	f040 8086 	bne.w	80098be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	7812      	ldrb	r2, [r2, #0]
 80097c6:	0151      	lsls	r1, r2, #5
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	440a      	add	r2, r1
 80097cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	015a      	lsls	r2, r3, #5
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	4413      	add	r3, r2
 80097e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	7812      	ldrb	r2, [r2, #0]
 80097ea:	0151      	lsls	r1, r2, #5
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	440a      	add	r2, r1
 80097f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3301      	adds	r3, #1
 80097fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f242 7210 	movw	r2, #10000	; 0x2710
 8009806:	4293      	cmp	r3, r2
 8009808:	d902      	bls.n	8009810 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	75fb      	strb	r3, [r7, #23]
          break;
 800980e:	e056      	b.n	80098be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	015a      	lsls	r2, r3, #5
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	4413      	add	r3, r2
 800981a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009824:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009828:	d0e7      	beq.n	80097fa <USB_EPStopXfer+0x82>
 800982a:	e048      	b.n	80098be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	015a      	lsls	r2, r3, #5
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	4413      	add	r3, r2
 8009836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009844:	d13b      	bne.n	80098be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	015a      	lsls	r2, r3, #5
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	4413      	add	r3, r2
 8009850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	7812      	ldrb	r2, [r2, #0]
 800985a:	0151      	lsls	r1, r2, #5
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	440a      	add	r2, r1
 8009860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009864:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009868:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	683a      	ldr	r2, [r7, #0]
 800987c:	7812      	ldrb	r2, [r2, #0]
 800987e:	0151      	lsls	r1, r2, #5
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	440a      	add	r2, r1
 8009884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009888:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800988c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	3301      	adds	r3, #1
 8009892:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f242 7210 	movw	r2, #10000	; 0x2710
 800989a:	4293      	cmp	r3, r2
 800989c:	d902      	bls.n	80098a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	75fb      	strb	r3, [r7, #23]
          break;
 80098a2:	e00c      	b.n	80098be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098bc:	d0e7      	beq.n	800988e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80098be:	7dfb      	ldrb	r3, [r7, #23]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	371c      	adds	r7, #28
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b089      	sub	sp, #36	; 0x24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	4611      	mov	r1, r2
 80098d8:	461a      	mov	r2, r3
 80098da:	460b      	mov	r3, r1
 80098dc:	71fb      	strb	r3, [r7, #7]
 80098de:	4613      	mov	r3, r2
 80098e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80098ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d123      	bne.n	800993a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80098f2:	88bb      	ldrh	r3, [r7, #4]
 80098f4:	3303      	adds	r3, #3
 80098f6:	089b      	lsrs	r3, r3, #2
 80098f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80098fa:	2300      	movs	r3, #0
 80098fc:	61bb      	str	r3, [r7, #24]
 80098fe:	e018      	b.n	8009932 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009900:	79fb      	ldrb	r3, [r7, #7]
 8009902:	031a      	lsls	r2, r3, #12
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	4413      	add	r3, r2
 8009908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800990c:	461a      	mov	r2, r3
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	3301      	adds	r3, #1
 8009918:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	3301      	adds	r3, #1
 800991e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	3301      	adds	r3, #1
 8009924:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	3301      	adds	r3, #1
 800992a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	3301      	adds	r3, #1
 8009930:	61bb      	str	r3, [r7, #24]
 8009932:	69ba      	ldr	r2, [r7, #24]
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	429a      	cmp	r2, r3
 8009938:	d3e2      	bcc.n	8009900 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3724      	adds	r7, #36	; 0x24
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009948:	b480      	push	{r7}
 800994a:	b08b      	sub	sp, #44	; 0x2c
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	4613      	mov	r3, r2
 8009954:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800995e:	88fb      	ldrh	r3, [r7, #6]
 8009960:	089b      	lsrs	r3, r3, #2
 8009962:	b29b      	uxth	r3, r3
 8009964:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009966:	88fb      	ldrh	r3, [r7, #6]
 8009968:	f003 0303 	and.w	r3, r3, #3
 800996c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800996e:	2300      	movs	r3, #0
 8009970:	623b      	str	r3, [r7, #32]
 8009972:	e014      	b.n	800999e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009982:	3301      	adds	r3, #1
 8009984:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009988:	3301      	adds	r3, #1
 800998a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800998c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998e:	3301      	adds	r3, #1
 8009990:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009994:	3301      	adds	r3, #1
 8009996:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009998:	6a3b      	ldr	r3, [r7, #32]
 800999a:	3301      	adds	r3, #1
 800999c:	623b      	str	r3, [r7, #32]
 800999e:	6a3a      	ldr	r2, [r7, #32]
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d3e6      	bcc.n	8009974 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80099a6:	8bfb      	ldrh	r3, [r7, #30]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d01e      	beq.n	80099ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80099ac:	2300      	movs	r3, #0
 80099ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099b6:	461a      	mov	r2, r3
 80099b8:	f107 0310 	add.w	r3, r7, #16
 80099bc:	6812      	ldr	r2, [r2, #0]
 80099be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80099c0:	693a      	ldr	r2, [r7, #16]
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	00db      	lsls	r3, r3, #3
 80099c8:	fa22 f303 	lsr.w	r3, r2, r3
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	701a      	strb	r2, [r3, #0]
      i++;
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	3301      	adds	r3, #1
 80099d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	3301      	adds	r3, #1
 80099dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80099de:	8bfb      	ldrh	r3, [r7, #30]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80099e4:	8bfb      	ldrh	r3, [r7, #30]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1ea      	bne.n	80099c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	372c      	adds	r7, #44	; 0x2c
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	785b      	ldrb	r3, [r3, #1]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d12c      	bne.n	8009a6e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	015a      	lsls	r2, r3, #5
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	db12      	blt.n	8009a4c <USB_EPSetStall+0x54>
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00f      	beq.n	8009a4c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	015a      	lsls	r2, r3, #5
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	4413      	add	r3, r2
 8009a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	0151      	lsls	r1, r2, #5
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	440a      	add	r2, r1
 8009a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a4a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	0151      	lsls	r1, r2, #5
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	440a      	add	r2, r1
 8009a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a6a:	6013      	str	r3, [r2, #0]
 8009a6c:	e02b      	b.n	8009ac6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	015a      	lsls	r2, r3, #5
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	4413      	add	r3, r2
 8009a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	db12      	blt.n	8009aa6 <USB_EPSetStall+0xae>
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00f      	beq.n	8009aa6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	015a      	lsls	r2, r3, #5
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	0151      	lsls	r1, r2, #5
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	440a      	add	r2, r1
 8009a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aa0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009aa4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	015a      	lsls	r2, r3, #5
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	4413      	add	r3, r2
 8009aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	0151      	lsls	r1, r2, #5
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	440a      	add	r2, r1
 8009abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ac0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ac4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3714      	adds	r7, #20
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	785b      	ldrb	r3, [r3, #1]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d128      	bne.n	8009b42 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	015a      	lsls	r2, r3, #5
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	0151      	lsls	r1, r2, #5
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	440a      	add	r2, r1
 8009b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	791b      	ldrb	r3, [r3, #4]
 8009b14:	2b03      	cmp	r3, #3
 8009b16:	d003      	beq.n	8009b20 <USB_EPClearStall+0x4c>
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	791b      	ldrb	r3, [r3, #4]
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d138      	bne.n	8009b92 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	015a      	lsls	r2, r3, #5
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	0151      	lsls	r1, r2, #5
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	440a      	add	r2, r1
 8009b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	e027      	b.n	8009b92 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	015a      	lsls	r2, r3, #5
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	4413      	add	r3, r2
 8009b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	0151      	lsls	r1, r2, #5
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	440a      	add	r2, r1
 8009b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	791b      	ldrb	r3, [r3, #4]
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	d003      	beq.n	8009b72 <USB_EPClearStall+0x9e>
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	791b      	ldrb	r3, [r3, #4]
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d10f      	bne.n	8009b92 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	015a      	lsls	r2, r3, #5
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	0151      	lsls	r1, r2, #5
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	440a      	add	r2, r1
 8009b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b90:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3714      	adds	r7, #20
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bbe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009bc2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	78fb      	ldrb	r3, [r7, #3]
 8009bce:	011b      	lsls	r3, r3, #4
 8009bd0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009bd4:	68f9      	ldr	r1, [r7, #12]
 8009bd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3714      	adds	r7, #20
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c06:	f023 0303 	bic.w	r3, r3, #3
 8009c0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c1a:	f023 0302 	bic.w	r3, r3, #2
 8009c1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3714      	adds	r7, #20
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr

08009c2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c2e:	b480      	push	{r7}
 8009c30:	b085      	sub	sp, #20
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c48:	f023 0303 	bic.w	r3, r3, #3
 8009c4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c5c:	f043 0302 	orr.w	r3, r3, #2
 8009c60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	695b      	ldr	r3, [r3, #20]
 8009c7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	4013      	ands	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009c88:	68fb      	ldr	r3, [r7, #12]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b085      	sub	sp, #20
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cb2:	69db      	ldr	r3, [r3, #28]
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	4013      	ands	r3, r2
 8009cb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	0c1b      	lsrs	r3, r3, #16
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3714      	adds	r7, #20
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b085      	sub	sp, #20
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ce6:	69db      	ldr	r3, [r3, #28]
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	4013      	ands	r3, r2
 8009cec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	b29b      	uxth	r3, r3
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr

08009cfe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009cfe:	b480      	push	{r7}
 8009d00:	b085      	sub	sp, #20
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	460b      	mov	r3, r1
 8009d08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009d0e:	78fb      	ldrb	r3, [r7, #3]
 8009d10:	015a      	lsls	r2, r3, #5
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	4413      	add	r3, r2
 8009d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	4013      	ands	r3, r2
 8009d2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009d2c:	68bb      	ldr	r3, [r7, #8]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b087      	sub	sp, #28
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	460b      	mov	r3, r1
 8009d44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d5c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009d5e:	78fb      	ldrb	r3, [r7, #3]
 8009d60:	f003 030f 	and.w	r3, r3, #15
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	fa22 f303 	lsr.w	r3, r2, r3
 8009d6a:	01db      	lsls	r3, r3, #7
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	693a      	ldr	r2, [r7, #16]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009d74:	78fb      	ldrb	r3, [r7, #3]
 8009d76:	015a      	lsls	r2, r3, #5
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	4013      	ands	r3, r2
 8009d86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009d88:	68bb      	ldr	r3, [r7, #8]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	371c      	adds	r7, #28
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	f003 0301 	and.w	r3, r3, #1
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009db2:	b480      	push	{r7}
 8009db4:	b085      	sub	sp, #20
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dcc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009dd0:	f023 0307 	bic.w	r3, r3, #7
 8009dd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009de8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3714      	adds	r7, #20
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b087      	sub	sp, #28
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	460b      	mov	r3, r1
 8009e02:	607a      	str	r2, [r7, #4]
 8009e04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	333c      	adds	r3, #60	; 0x3c
 8009e0e:	3304      	adds	r3, #4
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	4a26      	ldr	r2, [pc, #152]	; (8009eb0 <USB_EP0_OutStart+0xb8>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d90a      	bls.n	8009e32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e2c:	d101      	bne.n	8009e32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	e037      	b.n	8009ea2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e38:	461a      	mov	r2, r3
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e60:	f043 0318 	orr.w	r3, r3, #24
 8009e64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e74:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009e78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009e7a:	7afb      	ldrb	r3, [r7, #11]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d10f      	bne.n	8009ea0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e86:	461a      	mov	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	697a      	ldr	r2, [r7, #20]
 8009e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e9a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009e9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	371c      	adds	r7, #28
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	4f54300a 	.word	0x4f54300a

08009eb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009ecc:	d901      	bls.n	8009ed2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e01b      	b.n	8009f0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	daf2      	bge.n	8009ec0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009eda:	2300      	movs	r3, #0
 8009edc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	f043 0201 	orr.w	r2, r3, #1
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	3301      	adds	r3, #1
 8009eee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009ef6:	d901      	bls.n	8009efc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e006      	b.n	8009f0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d0f0      	beq.n	8009eea <USB_CoreReset+0x36>

  return HAL_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3714      	adds	r7, #20
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
	...

08009f18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	460b      	mov	r3, r1
 8009f22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009f24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009f28:	f002 fc9a 	bl	800c860 <USBD_static_malloc>
 8009f2c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d109      	bne.n	8009f48 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	32b0      	adds	r2, #176	; 0xb0
 8009f3e:	2100      	movs	r1, #0
 8009f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009f44:	2302      	movs	r3, #2
 8009f46:	e0d4      	b.n	800a0f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009f48:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f002 ff46 	bl	800cde0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	32b0      	adds	r2, #176	; 0xb0
 8009f5e:	68f9      	ldr	r1, [r7, #12]
 8009f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	32b0      	adds	r2, #176	; 0xb0
 8009f6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	7c1b      	ldrb	r3, [r3, #16]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d138      	bne.n	8009ff2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009f80:	4b5e      	ldr	r3, [pc, #376]	; (800a0fc <USBD_CDC_Init+0x1e4>)
 8009f82:	7819      	ldrb	r1, [r3, #0]
 8009f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f88:	2202      	movs	r2, #2
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f002 fb45 	bl	800c61a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009f90:	4b5a      	ldr	r3, [pc, #360]	; (800a0fc <USBD_CDC_Init+0x1e4>)
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	f003 020f 	and.w	r2, r3, #15
 8009f98:	6879      	ldr	r1, [r7, #4]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	440b      	add	r3, r1
 8009fa4:	3324      	adds	r3, #36	; 0x24
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009faa:	4b55      	ldr	r3, [pc, #340]	; (800a100 <USBD_CDC_Init+0x1e8>)
 8009fac:	7819      	ldrb	r1, [r3, #0]
 8009fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fb2:	2202      	movs	r2, #2
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f002 fb30 	bl	800c61a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009fba:	4b51      	ldr	r3, [pc, #324]	; (800a100 <USBD_CDC_Init+0x1e8>)
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	f003 020f 	and.w	r2, r3, #15
 8009fc2:	6879      	ldr	r1, [r7, #4]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	440b      	add	r3, r1
 8009fce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009fd6:	4b4b      	ldr	r3, [pc, #300]	; (800a104 <USBD_CDC_Init+0x1ec>)
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	f003 020f 	and.w	r2, r3, #15
 8009fde:	6879      	ldr	r1, [r7, #4]
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4413      	add	r3, r2
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	440b      	add	r3, r1
 8009fea:	3326      	adds	r3, #38	; 0x26
 8009fec:	2210      	movs	r2, #16
 8009fee:	801a      	strh	r2, [r3, #0]
 8009ff0:	e035      	b.n	800a05e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009ff2:	4b42      	ldr	r3, [pc, #264]	; (800a0fc <USBD_CDC_Init+0x1e4>)
 8009ff4:	7819      	ldrb	r1, [r3, #0]
 8009ff6:	2340      	movs	r3, #64	; 0x40
 8009ff8:	2202      	movs	r2, #2
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f002 fb0d 	bl	800c61a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a000:	4b3e      	ldr	r3, [pc, #248]	; (800a0fc <USBD_CDC_Init+0x1e4>)
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	f003 020f 	and.w	r2, r3, #15
 800a008:	6879      	ldr	r1, [r7, #4]
 800a00a:	4613      	mov	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4413      	add	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	440b      	add	r3, r1
 800a014:	3324      	adds	r3, #36	; 0x24
 800a016:	2201      	movs	r2, #1
 800a018:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a01a:	4b39      	ldr	r3, [pc, #228]	; (800a100 <USBD_CDC_Init+0x1e8>)
 800a01c:	7819      	ldrb	r1, [r3, #0]
 800a01e:	2340      	movs	r3, #64	; 0x40
 800a020:	2202      	movs	r2, #2
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f002 faf9 	bl	800c61a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a028:	4b35      	ldr	r3, [pc, #212]	; (800a100 <USBD_CDC_Init+0x1e8>)
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	f003 020f 	and.w	r2, r3, #15
 800a030:	6879      	ldr	r1, [r7, #4]
 800a032:	4613      	mov	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	440b      	add	r3, r1
 800a03c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a040:	2201      	movs	r2, #1
 800a042:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a044:	4b2f      	ldr	r3, [pc, #188]	; (800a104 <USBD_CDC_Init+0x1ec>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	f003 020f 	and.w	r2, r3, #15
 800a04c:	6879      	ldr	r1, [r7, #4]
 800a04e:	4613      	mov	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	440b      	add	r3, r1
 800a058:	3326      	adds	r3, #38	; 0x26
 800a05a:	2210      	movs	r2, #16
 800a05c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a05e:	4b29      	ldr	r3, [pc, #164]	; (800a104 <USBD_CDC_Init+0x1ec>)
 800a060:	7819      	ldrb	r1, [r3, #0]
 800a062:	2308      	movs	r3, #8
 800a064:	2203      	movs	r2, #3
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f002 fad7 	bl	800c61a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a06c:	4b25      	ldr	r3, [pc, #148]	; (800a104 <USBD_CDC_Init+0x1ec>)
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	f003 020f 	and.w	r2, r3, #15
 800a074:	6879      	ldr	r1, [r7, #4]
 800a076:	4613      	mov	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	440b      	add	r3, r1
 800a080:	3324      	adds	r3, #36	; 0x24
 800a082:	2201      	movs	r2, #1
 800a084:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	33b0      	adds	r3, #176	; 0xb0
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4413      	add	r3, r2
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a0bc:	2302      	movs	r3, #2
 800a0be:	e018      	b.n	800a0f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	7c1b      	ldrb	r3, [r3, #16]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d10a      	bne.n	800a0de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a0c8:	4b0d      	ldr	r3, [pc, #52]	; (800a100 <USBD_CDC_Init+0x1e8>)
 800a0ca:	7819      	ldrb	r1, [r3, #0]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f002 fb8e 	bl	800c7f8 <USBD_LL_PrepareReceive>
 800a0dc:	e008      	b.n	800a0f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a0de:	4b08      	ldr	r3, [pc, #32]	; (800a100 <USBD_CDC_Init+0x1e8>)
 800a0e0:	7819      	ldrb	r1, [r3, #0]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0e8:	2340      	movs	r3, #64	; 0x40
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f002 fb84 	bl	800c7f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	200000a7 	.word	0x200000a7
 800a100:	200000a8 	.word	0x200000a8
 800a104:	200000a9 	.word	0x200000a9

0800a108 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a114:	4b3a      	ldr	r3, [pc, #232]	; (800a200 <USBD_CDC_DeInit+0xf8>)
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	4619      	mov	r1, r3
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f002 faa3 	bl	800c666 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a120:	4b37      	ldr	r3, [pc, #220]	; (800a200 <USBD_CDC_DeInit+0xf8>)
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	f003 020f 	and.w	r2, r3, #15
 800a128:	6879      	ldr	r1, [r7, #4]
 800a12a:	4613      	mov	r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	4413      	add	r3, r2
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	440b      	add	r3, r1
 800a134:	3324      	adds	r3, #36	; 0x24
 800a136:	2200      	movs	r2, #0
 800a138:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a13a:	4b32      	ldr	r3, [pc, #200]	; (800a204 <USBD_CDC_DeInit+0xfc>)
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	4619      	mov	r1, r3
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f002 fa90 	bl	800c666 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a146:	4b2f      	ldr	r3, [pc, #188]	; (800a204 <USBD_CDC_DeInit+0xfc>)
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	f003 020f 	and.w	r2, r3, #15
 800a14e:	6879      	ldr	r1, [r7, #4]
 800a150:	4613      	mov	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	440b      	add	r3, r1
 800a15a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a15e:	2200      	movs	r2, #0
 800a160:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a162:	4b29      	ldr	r3, [pc, #164]	; (800a208 <USBD_CDC_DeInit+0x100>)
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	4619      	mov	r1, r3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f002 fa7c 	bl	800c666 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a16e:	4b26      	ldr	r3, [pc, #152]	; (800a208 <USBD_CDC_DeInit+0x100>)
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	f003 020f 	and.w	r2, r3, #15
 800a176:	6879      	ldr	r1, [r7, #4]
 800a178:	4613      	mov	r3, r2
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	4413      	add	r3, r2
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	440b      	add	r3, r1
 800a182:	3324      	adds	r3, #36	; 0x24
 800a184:	2200      	movs	r2, #0
 800a186:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a188:	4b1f      	ldr	r3, [pc, #124]	; (800a208 <USBD_CDC_DeInit+0x100>)
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	f003 020f 	and.w	r2, r3, #15
 800a190:	6879      	ldr	r1, [r7, #4]
 800a192:	4613      	mov	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	440b      	add	r3, r1
 800a19c:	3326      	adds	r3, #38	; 0x26
 800a19e:	2200      	movs	r2, #0
 800a1a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	32b0      	adds	r2, #176	; 0xb0
 800a1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d01f      	beq.n	800a1f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	33b0      	adds	r3, #176	; 0xb0
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	32b0      	adds	r2, #176	; 0xb0
 800a1d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f002 fb50 	bl	800c87c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	32b0      	adds	r2, #176	; 0xb0
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	200000a7 	.word	0x200000a7
 800a204:	200000a8 	.word	0x200000a8
 800a208:	200000a9 	.word	0x200000a9

0800a20c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	32b0      	adds	r2, #176	; 0xb0
 800a220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a224:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a226:	2300      	movs	r3, #0
 800a228:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a22a:	2300      	movs	r3, #0
 800a22c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a22e:	2300      	movs	r3, #0
 800a230:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d101      	bne.n	800a23c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a238:	2303      	movs	r3, #3
 800a23a:	e0bf      	b.n	800a3bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a244:	2b00      	cmp	r3, #0
 800a246:	d050      	beq.n	800a2ea <USBD_CDC_Setup+0xde>
 800a248:	2b20      	cmp	r3, #32
 800a24a:	f040 80af 	bne.w	800a3ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	88db      	ldrh	r3, [r3, #6]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d03a      	beq.n	800a2cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	b25b      	sxtb	r3, r3
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	da1b      	bge.n	800a298 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	33b0      	adds	r3, #176	; 0xb0
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	4413      	add	r3, r2
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a276:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	88d2      	ldrh	r2, [r2, #6]
 800a27c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	88db      	ldrh	r3, [r3, #6]
 800a282:	2b07      	cmp	r3, #7
 800a284:	bf28      	it	cs
 800a286:	2307      	movcs	r3, #7
 800a288:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	89fa      	ldrh	r2, [r7, #14]
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f001 fd89 	bl	800bda8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a296:	e090      	b.n	800a3ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	785a      	ldrb	r2, [r3, #1]
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	88db      	ldrh	r3, [r3, #6]
 800a2a6:	2b3f      	cmp	r3, #63	; 0x3f
 800a2a8:	d803      	bhi.n	800a2b2 <USBD_CDC_Setup+0xa6>
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	88db      	ldrh	r3, [r3, #6]
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	e000      	b.n	800a2b4 <USBD_CDC_Setup+0xa8>
 800a2b2:	2240      	movs	r2, #64	; 0x40
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a2ba:	6939      	ldr	r1, [r7, #16]
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f001 fd9b 	bl	800be00 <USBD_CtlPrepareRx>
      break;
 800a2ca:	e076      	b.n	800a3ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	33b0      	adds	r3, #176	; 0xb0
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	4413      	add	r3, r2
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	7850      	ldrb	r0, [r2, #1]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	6839      	ldr	r1, [r7, #0]
 800a2e6:	4798      	blx	r3
      break;
 800a2e8:	e067      	b.n	800a3ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	785b      	ldrb	r3, [r3, #1]
 800a2ee:	2b0b      	cmp	r3, #11
 800a2f0:	d851      	bhi.n	800a396 <USBD_CDC_Setup+0x18a>
 800a2f2:	a201      	add	r2, pc, #4	; (adr r2, 800a2f8 <USBD_CDC_Setup+0xec>)
 800a2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f8:	0800a329 	.word	0x0800a329
 800a2fc:	0800a3a5 	.word	0x0800a3a5
 800a300:	0800a397 	.word	0x0800a397
 800a304:	0800a397 	.word	0x0800a397
 800a308:	0800a397 	.word	0x0800a397
 800a30c:	0800a397 	.word	0x0800a397
 800a310:	0800a397 	.word	0x0800a397
 800a314:	0800a397 	.word	0x0800a397
 800a318:	0800a397 	.word	0x0800a397
 800a31c:	0800a397 	.word	0x0800a397
 800a320:	0800a353 	.word	0x0800a353
 800a324:	0800a37d 	.word	0x0800a37d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	2b03      	cmp	r3, #3
 800a332:	d107      	bne.n	800a344 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a334:	f107 030a 	add.w	r3, r7, #10
 800a338:	2202      	movs	r2, #2
 800a33a:	4619      	mov	r1, r3
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f001 fd33 	bl	800bda8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a342:	e032      	b.n	800a3aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a344:	6839      	ldr	r1, [r7, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f001 fcbd 	bl	800bcc6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a34c:	2303      	movs	r3, #3
 800a34e:	75fb      	strb	r3, [r7, #23]
          break;
 800a350:	e02b      	b.n	800a3aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b03      	cmp	r3, #3
 800a35c:	d107      	bne.n	800a36e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a35e:	f107 030d 	add.w	r3, r7, #13
 800a362:	2201      	movs	r2, #1
 800a364:	4619      	mov	r1, r3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f001 fd1e 	bl	800bda8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a36c:	e01d      	b.n	800a3aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a36e:	6839      	ldr	r1, [r7, #0]
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f001 fca8 	bl	800bcc6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a376:	2303      	movs	r3, #3
 800a378:	75fb      	strb	r3, [r7, #23]
          break;
 800a37a:	e016      	b.n	800a3aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a382:	b2db      	uxtb	r3, r3
 800a384:	2b03      	cmp	r3, #3
 800a386:	d00f      	beq.n	800a3a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f001 fc9b 	bl	800bcc6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a390:	2303      	movs	r3, #3
 800a392:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a394:	e008      	b.n	800a3a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a396:	6839      	ldr	r1, [r7, #0]
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f001 fc94 	bl	800bcc6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	75fb      	strb	r3, [r7, #23]
          break;
 800a3a2:	e002      	b.n	800a3aa <USBD_CDC_Setup+0x19e>
          break;
 800a3a4:	bf00      	nop
 800a3a6:	e008      	b.n	800a3ba <USBD_CDC_Setup+0x1ae>
          break;
 800a3a8:	bf00      	nop
      }
      break;
 800a3aa:	e006      	b.n	800a3ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a3ac:	6839      	ldr	r1, [r7, #0]
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f001 fc89 	bl	800bcc6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a3b8:	bf00      	nop
  }

  return (uint8_t)ret;
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3718      	adds	r7, #24
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	32b0      	adds	r2, #176	; 0xb0
 800a3e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d101      	bne.n	800a3ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	e065      	b.n	800a4ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	32b0      	adds	r2, #176	; 0xb0
 800a3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a3fe:	78fb      	ldrb	r3, [r7, #3]
 800a400:	f003 020f 	and.w	r2, r3, #15
 800a404:	6879      	ldr	r1, [r7, #4]
 800a406:	4613      	mov	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	4413      	add	r3, r2
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	440b      	add	r3, r1
 800a410:	3318      	adds	r3, #24
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d02f      	beq.n	800a478 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a418:	78fb      	ldrb	r3, [r7, #3]
 800a41a:	f003 020f 	and.w	r2, r3, #15
 800a41e:	6879      	ldr	r1, [r7, #4]
 800a420:	4613      	mov	r3, r2
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4413      	add	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	440b      	add	r3, r1
 800a42a:	3318      	adds	r3, #24
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	78fb      	ldrb	r3, [r7, #3]
 800a430:	f003 010f 	and.w	r1, r3, #15
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	460b      	mov	r3, r1
 800a438:	00db      	lsls	r3, r3, #3
 800a43a:	440b      	add	r3, r1
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	4403      	add	r3, r0
 800a440:	331c      	adds	r3, #28
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	fbb2 f1f3 	udiv	r1, r2, r3
 800a448:	fb01 f303 	mul.w	r3, r1, r3
 800a44c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d112      	bne.n	800a478 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a452:	78fb      	ldrb	r3, [r7, #3]
 800a454:	f003 020f 	and.w	r2, r3, #15
 800a458:	6879      	ldr	r1, [r7, #4]
 800a45a:	4613      	mov	r3, r2
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	4413      	add	r3, r2
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	440b      	add	r3, r1
 800a464:	3318      	adds	r3, #24
 800a466:	2200      	movs	r2, #0
 800a468:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a46a:	78f9      	ldrb	r1, [r7, #3]
 800a46c:	2300      	movs	r3, #0
 800a46e:	2200      	movs	r2, #0
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f002 f9a0 	bl	800c7b6 <USBD_LL_Transmit>
 800a476:	e01f      	b.n	800a4b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	33b0      	adds	r3, #176	; 0xb0
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	4413      	add	r3, r2
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d010      	beq.n	800a4b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	33b0      	adds	r3, #176	; 0xb0
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	4413      	add	r3, r2
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a4ae:	68ba      	ldr	r2, [r7, #8]
 800a4b0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a4b4:	78fa      	ldrb	r2, [r7, #3]
 800a4b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b084      	sub	sp, #16
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	32b0      	adds	r2, #176	; 0xb0
 800a4d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	32b0      	adds	r2, #176	; 0xb0
 800a4e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d101      	bne.n	800a4f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	e01a      	b.n	800a52a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a4f4:	78fb      	ldrb	r3, [r7, #3]
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f002 f99e 	bl	800c83a <USBD_LL_GetRxDataSize>
 800a4fe:	4602      	mov	r2, r0
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	33b0      	adds	r3, #176	; 0xb0
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4413      	add	r3, r2
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a524:	4611      	mov	r1, r2
 800a526:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b084      	sub	sp, #16
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	32b0      	adds	r2, #176	; 0xb0
 800a544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a548:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d101      	bne.n	800a554 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a550:	2303      	movs	r3, #3
 800a552:	e025      	b.n	800a5a0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	33b0      	adds	r3, #176	; 0xb0
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4413      	add	r3, r2
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d01a      	beq.n	800a59e <USBD_CDC_EP0_RxReady+0x6c>
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a56e:	2bff      	cmp	r3, #255	; 0xff
 800a570:	d015      	beq.n	800a59e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	33b0      	adds	r3, #176	; 0xb0
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4413      	add	r3, r2
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a58a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a592:	b292      	uxth	r2, r2
 800a594:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	22ff      	movs	r2, #255	; 0xff
 800a59a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a5b0:	2182      	movs	r1, #130	; 0x82
 800a5b2:	4818      	ldr	r0, [pc, #96]	; (800a614 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a5b4:	f000 fd4f 	bl	800b056 <USBD_GetEpDesc>
 800a5b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a5ba:	2101      	movs	r1, #1
 800a5bc:	4815      	ldr	r0, [pc, #84]	; (800a614 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a5be:	f000 fd4a 	bl	800b056 <USBD_GetEpDesc>
 800a5c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a5c4:	2181      	movs	r1, #129	; 0x81
 800a5c6:	4813      	ldr	r0, [pc, #76]	; (800a614 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a5c8:	f000 fd45 	bl	800b056 <USBD_GetEpDesc>
 800a5cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d002      	beq.n	800a5da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	2210      	movs	r2, #16
 800a5d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d006      	beq.n	800a5ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5e8:	711a      	strb	r2, [r3, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d006      	beq.n	800a602 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5fc:	711a      	strb	r2, [r3, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2243      	movs	r2, #67	; 0x43
 800a606:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a608:	4b02      	ldr	r3, [pc, #8]	; (800a614 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	20000064 	.word	0x20000064

0800a618 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a620:	2182      	movs	r1, #130	; 0x82
 800a622:	4818      	ldr	r0, [pc, #96]	; (800a684 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a624:	f000 fd17 	bl	800b056 <USBD_GetEpDesc>
 800a628:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a62a:	2101      	movs	r1, #1
 800a62c:	4815      	ldr	r0, [pc, #84]	; (800a684 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a62e:	f000 fd12 	bl	800b056 <USBD_GetEpDesc>
 800a632:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a634:	2181      	movs	r1, #129	; 0x81
 800a636:	4813      	ldr	r0, [pc, #76]	; (800a684 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a638:	f000 fd0d 	bl	800b056 <USBD_GetEpDesc>
 800a63c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d002      	beq.n	800a64a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	2210      	movs	r2, #16
 800a648:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d006      	beq.n	800a65e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	2200      	movs	r2, #0
 800a654:	711a      	strb	r2, [r3, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	f042 0202 	orr.w	r2, r2, #2
 800a65c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d006      	beq.n	800a672 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	711a      	strb	r2, [r3, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f042 0202 	orr.w	r2, r2, #2
 800a670:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2243      	movs	r2, #67	; 0x43
 800a676:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a678:	4b02      	ldr	r3, [pc, #8]	; (800a684 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3718      	adds	r7, #24
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	20000064 	.word	0x20000064

0800a688 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a690:	2182      	movs	r1, #130	; 0x82
 800a692:	4818      	ldr	r0, [pc, #96]	; (800a6f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a694:	f000 fcdf 	bl	800b056 <USBD_GetEpDesc>
 800a698:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a69a:	2101      	movs	r1, #1
 800a69c:	4815      	ldr	r0, [pc, #84]	; (800a6f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a69e:	f000 fcda 	bl	800b056 <USBD_GetEpDesc>
 800a6a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a6a4:	2181      	movs	r1, #129	; 0x81
 800a6a6:	4813      	ldr	r0, [pc, #76]	; (800a6f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a6a8:	f000 fcd5 	bl	800b056 <USBD_GetEpDesc>
 800a6ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d002      	beq.n	800a6ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	2210      	movs	r2, #16
 800a6b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d006      	beq.n	800a6ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6c8:	711a      	strb	r2, [r3, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d006      	beq.n	800a6e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6dc:	711a      	strb	r2, [r3, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2243      	movs	r2, #67	; 0x43
 800a6e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a6e8:	4b02      	ldr	r3, [pc, #8]	; (800a6f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3718      	adds	r7, #24
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	20000064 	.word	0x20000064

0800a6f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	220a      	movs	r2, #10
 800a704:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a706:	4b03      	ldr	r3, [pc, #12]	; (800a714 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a708:	4618      	mov	r0, r3
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr
 800a714:	20000020 	.word	0x20000020

0800a718 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d101      	bne.n	800a72c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a728:	2303      	movs	r3, #3
 800a72a:	e009      	b.n	800a740 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	33b0      	adds	r3, #176	; 0xb0
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4413      	add	r3, r2
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b087      	sub	sp, #28
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	32b0      	adds	r2, #176	; 0xb0
 800a762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a766:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d101      	bne.n	800a772 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a76e:	2303      	movs	r3, #3
 800a770:	e008      	b.n	800a784 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	68ba      	ldr	r2, [r7, #8]
 800a776:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	371c      	adds	r7, #28
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	32b0      	adds	r2, #176	; 0xb0
 800a7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d101      	bne.n	800a7b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e004      	b.n	800a7be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3714      	adds	r7, #20
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
	...

0800a7cc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	32b0      	adds	r2, #176	; 0xb0
 800a7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d101      	bne.n	800a7f2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e025      	b.n	800a83e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d11f      	bne.n	800a83c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a804:	4b10      	ldr	r3, [pc, #64]	; (800a848 <USBD_CDC_TransmitPacket+0x7c>)
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	f003 020f 	and.w	r2, r3, #15
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	4613      	mov	r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	4413      	add	r3, r2
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	4403      	add	r3, r0
 800a81e:	3318      	adds	r3, #24
 800a820:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a822:	4b09      	ldr	r3, [pc, #36]	; (800a848 <USBD_CDC_TransmitPacket+0x7c>)
 800a824:	7819      	ldrb	r1, [r3, #0]
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f001 ffbf 	bl	800c7b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	200000a7 	.word	0x200000a7

0800a84c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	32b0      	adds	r2, #176	; 0xb0
 800a85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a862:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	32b0      	adds	r2, #176	; 0xb0
 800a86e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d101      	bne.n	800a87a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a876:	2303      	movs	r3, #3
 800a878:	e018      	b.n	800a8ac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	7c1b      	ldrb	r3, [r3, #16]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10a      	bne.n	800a898 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a882:	4b0c      	ldr	r3, [pc, #48]	; (800a8b4 <USBD_CDC_ReceivePacket+0x68>)
 800a884:	7819      	ldrb	r1, [r3, #0]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a88c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f001 ffb1 	bl	800c7f8 <USBD_LL_PrepareReceive>
 800a896:	e008      	b.n	800a8aa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a898:	4b06      	ldr	r3, [pc, #24]	; (800a8b4 <USBD_CDC_ReceivePacket+0x68>)
 800a89a:	7819      	ldrb	r1, [r3, #0]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8a2:	2340      	movs	r3, #64	; 0x40
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f001 ffa7 	bl	800c7f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3710      	adds	r7, #16
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	200000a8 	.word	0x200000a8

0800a8b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b086      	sub	sp, #24
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d101      	bne.n	800a8d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	e01f      	b.n	800a910 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d003      	beq.n	800a8f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	68ba      	ldr	r2, [r7, #8]
 800a8f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	79fa      	ldrb	r2, [r7, #7]
 800a902:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f001 fe21 	bl	800c54c <USBD_LL_Init>
 800a90a:	4603      	mov	r3, r0
 800a90c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a90e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3718      	adds	r7, #24
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a922:	2300      	movs	r3, #0
 800a924:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d101      	bne.n	800a930 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a92c:	2303      	movs	r3, #3
 800a92e:	e025      	b.n	800a97c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	683a      	ldr	r2, [r7, #0]
 800a934:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	32ae      	adds	r2, #174	; 0xae
 800a942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00f      	beq.n	800a96c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	32ae      	adds	r2, #174	; 0xae
 800a956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95c:	f107 020e 	add.w	r2, r7, #14
 800a960:	4610      	mov	r0, r2
 800a962:	4798      	blx	r3
 800a964:	4602      	mov	r2, r0
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a972:	1c5a      	adds	r2, r3, #1
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f001 fe29 	bl	800c5e4 <USBD_LL_Start>
 800a992:	4603      	mov	r3, r0
}
 800a994:	4618      	mov	r0, r3
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	370c      	adds	r7, #12
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b084      	sub	sp, #16
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d009      	beq.n	800a9e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	78fa      	ldrb	r2, [r7, #3]
 800a9d6:	4611      	mov	r1, r2
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	4798      	blx	r3
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b084      	sub	sp, #16
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	78fa      	ldrb	r2, [r7, #3]
 800aa04:	4611      	mov	r1, r2
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	4798      	blx	r3
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d001      	beq.n	800aa14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aa10:	2303      	movs	r3, #3
 800aa12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aa14:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b084      	sub	sp, #16
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f001 f90e 	bl	800bc52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800aa44:	461a      	mov	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa52:	f003 031f 	and.w	r3, r3, #31
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d01a      	beq.n	800aa90 <USBD_LL_SetupStage+0x72>
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d822      	bhi.n	800aaa4 <USBD_LL_SetupStage+0x86>
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d002      	beq.n	800aa68 <USBD_LL_SetupStage+0x4a>
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d00a      	beq.n	800aa7c <USBD_LL_SetupStage+0x5e>
 800aa66:	e01d      	b.n	800aaa4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa6e:	4619      	mov	r1, r3
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 fb65 	bl	800b140 <USBD_StdDevReq>
 800aa76:	4603      	mov	r3, r0
 800aa78:	73fb      	strb	r3, [r7, #15]
      break;
 800aa7a:	e020      	b.n	800aabe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa82:	4619      	mov	r1, r3
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fbcd 	bl	800b224 <USBD_StdItfReq>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa8e:	e016      	b.n	800aabe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aa96:	4619      	mov	r1, r3
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fc2f 	bl	800b2fc <USBD_StdEPReq>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	73fb      	strb	r3, [r7, #15]
      break;
 800aaa2:	e00c      	b.n	800aabe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aaaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	4619      	mov	r1, r3
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f001 fdf6 	bl	800c6a4 <USBD_LL_StallEP>
 800aab8:	4603      	mov	r3, r0
 800aaba:	73fb      	strb	r3, [r7, #15]
      break;
 800aabc:	bf00      	nop
  }

  return ret;
 800aabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	460b      	mov	r3, r1
 800aad2:	607a      	str	r2, [r7, #4]
 800aad4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800aada:	7afb      	ldrb	r3, [r7, #11]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d16e      	bne.n	800abbe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aae6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aaee:	2b03      	cmp	r3, #3
 800aaf0:	f040 8098 	bne.w	800ac24 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	689a      	ldr	r2, [r3, #8]
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d913      	bls.n	800ab28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	689a      	ldr	r2, [r3, #8]
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	1ad2      	subs	r2, r2, r3
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	68da      	ldr	r2, [r3, #12]
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	4293      	cmp	r3, r2
 800ab18:	bf28      	it	cs
 800ab1a:	4613      	movcs	r3, r2
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	6879      	ldr	r1, [r7, #4]
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f001 f98a 	bl	800be3a <USBD_CtlContinueRx>
 800ab26:	e07d      	b.n	800ac24 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab2e:	f003 031f 	and.w	r3, r3, #31
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d014      	beq.n	800ab60 <USBD_LL_DataOutStage+0x98>
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d81d      	bhi.n	800ab76 <USBD_LL_DataOutStage+0xae>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d002      	beq.n	800ab44 <USBD_LL_DataOutStage+0x7c>
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d003      	beq.n	800ab4a <USBD_LL_DataOutStage+0x82>
 800ab42:	e018      	b.n	800ab76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ab44:	2300      	movs	r3, #0
 800ab46:	75bb      	strb	r3, [r7, #22]
            break;
 800ab48:	e018      	b.n	800ab7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	4619      	mov	r1, r3
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f000 fa64 	bl	800b022 <USBD_CoreFindIF>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	75bb      	strb	r3, [r7, #22]
            break;
 800ab5e:	e00d      	b.n	800ab7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	4619      	mov	r1, r3
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f000 fa66 	bl	800b03c <USBD_CoreFindEP>
 800ab70:	4603      	mov	r3, r0
 800ab72:	75bb      	strb	r3, [r7, #22]
            break;
 800ab74:	e002      	b.n	800ab7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ab76:	2300      	movs	r3, #0
 800ab78:	75bb      	strb	r3, [r7, #22]
            break;
 800ab7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ab7c:	7dbb      	ldrb	r3, [r7, #22]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d119      	bne.n	800abb6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	d113      	bne.n	800abb6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ab8e:	7dba      	ldrb	r2, [r7, #22]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	32ae      	adds	r2, #174	; 0xae
 800ab94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00b      	beq.n	800abb6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ab9e:	7dba      	ldrb	r2, [r7, #22]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800aba6:	7dba      	ldrb	r2, [r7, #22]
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	32ae      	adds	r2, #174	; 0xae
 800abac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f001 f950 	bl	800be5c <USBD_CtlSendStatus>
 800abbc:	e032      	b.n	800ac24 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800abbe:	7afb      	ldrb	r3, [r7, #11]
 800abc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	4619      	mov	r1, r3
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	f000 fa37 	bl	800b03c <USBD_CoreFindEP>
 800abce:	4603      	mov	r3, r0
 800abd0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abd2:	7dbb      	ldrb	r3, [r7, #22]
 800abd4:	2bff      	cmp	r3, #255	; 0xff
 800abd6:	d025      	beq.n	800ac24 <USBD_LL_DataOutStage+0x15c>
 800abd8:	7dbb      	ldrb	r3, [r7, #22]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d122      	bne.n	800ac24 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	2b03      	cmp	r3, #3
 800abe8:	d117      	bne.n	800ac1a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800abea:	7dba      	ldrb	r2, [r7, #22]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	32ae      	adds	r2, #174	; 0xae
 800abf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf4:	699b      	ldr	r3, [r3, #24]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00f      	beq.n	800ac1a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800abfa:	7dba      	ldrb	r2, [r7, #22]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ac02:	7dba      	ldrb	r2, [r7, #22]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	32ae      	adds	r2, #174	; 0xae
 800ac08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	7afa      	ldrb	r2, [r7, #11]
 800ac10:	4611      	mov	r1, r2
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	4798      	blx	r3
 800ac16:	4603      	mov	r3, r0
 800ac18:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ac1a:	7dfb      	ldrb	r3, [r7, #23]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d001      	beq.n	800ac24 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ac20:	7dfb      	ldrb	r3, [r7, #23]
 800ac22:	e000      	b.n	800ac26 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3718      	adds	r7, #24
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b086      	sub	sp, #24
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	60f8      	str	r0, [r7, #12]
 800ac36:	460b      	mov	r3, r1
 800ac38:	607a      	str	r2, [r7, #4]
 800ac3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ac3c:	7afb      	ldrb	r3, [r7, #11]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d16f      	bne.n	800ad22 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	3314      	adds	r3, #20
 800ac46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d15a      	bne.n	800ad08 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	689a      	ldr	r2, [r3, #8]
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d914      	bls.n	800ac88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	689a      	ldr	r2, [r3, #8]
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	1ad2      	subs	r2, r2, r3
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	461a      	mov	r2, r3
 800ac72:	6879      	ldr	r1, [r7, #4]
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f001 f8b2 	bl	800bdde <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	2100      	movs	r1, #0
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f001 fdb9 	bl	800c7f8 <USBD_LL_PrepareReceive>
 800ac86:	e03f      	b.n	800ad08 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	68da      	ldr	r2, [r3, #12]
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d11c      	bne.n	800acce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	685a      	ldr	r2, [r3, #4]
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d316      	bcc.n	800acce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	685a      	ldr	r2, [r3, #4]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800acaa:	429a      	cmp	r2, r3
 800acac:	d20f      	bcs.n	800acce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800acae:	2200      	movs	r2, #0
 800acb0:	2100      	movs	r1, #0
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f001 f893 	bl	800bdde <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2200      	movs	r2, #0
 800acbc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acc0:	2300      	movs	r3, #0
 800acc2:	2200      	movs	r2, #0
 800acc4:	2100      	movs	r1, #0
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f001 fd96 	bl	800c7f8 <USBD_LL_PrepareReceive>
 800accc:	e01c      	b.n	800ad08 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	2b03      	cmp	r3, #3
 800acd8:	d10f      	bne.n	800acfa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d009      	beq.n	800acfa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800acfa:	2180      	movs	r1, #128	; 0x80
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f001 fcd1 	bl	800c6a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	f001 f8bd 	bl	800be82 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d03a      	beq.n	800ad88 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f7ff fe42 	bl	800a99c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ad20:	e032      	b.n	800ad88 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ad22:	7afb      	ldrb	r3, [r7, #11]
 800ad24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f000 f985 	bl	800b03c <USBD_CoreFindEP>
 800ad32:	4603      	mov	r3, r0
 800ad34:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad36:	7dfb      	ldrb	r3, [r7, #23]
 800ad38:	2bff      	cmp	r3, #255	; 0xff
 800ad3a:	d025      	beq.n	800ad88 <USBD_LL_DataInStage+0x15a>
 800ad3c:	7dfb      	ldrb	r3, [r7, #23]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d122      	bne.n	800ad88 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	2b03      	cmp	r3, #3
 800ad4c:	d11c      	bne.n	800ad88 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ad4e:	7dfa      	ldrb	r2, [r7, #23]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	32ae      	adds	r2, #174	; 0xae
 800ad54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d014      	beq.n	800ad88 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ad5e:	7dfa      	ldrb	r2, [r7, #23]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ad66:	7dfa      	ldrb	r2, [r7, #23]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	32ae      	adds	r2, #174	; 0xae
 800ad6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad70:	695b      	ldr	r3, [r3, #20]
 800ad72:	7afa      	ldrb	r2, [r7, #11]
 800ad74:	4611      	mov	r1, r2
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	4798      	blx	r3
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ad7e:	7dbb      	ldrb	r3, [r7, #22]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d001      	beq.n	800ad88 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ad84:	7dbb      	ldrb	r3, [r7, #22]
 800ad86:	e000      	b.n	800ad8a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3718      	adds	r7, #24
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b084      	sub	sp, #16
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2201      	movs	r2, #1
 800ada2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d014      	beq.n	800adf8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00e      	beq.n	800adf8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	6852      	ldr	r2, [r2, #4]
 800ade6:	b2d2      	uxtb	r2, r2
 800ade8:	4611      	mov	r1, r2
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	4798      	blx	r3
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d001      	beq.n	800adf8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800adf4:	2303      	movs	r3, #3
 800adf6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adf8:	2340      	movs	r3, #64	; 0x40
 800adfa:	2200      	movs	r2, #0
 800adfc:	2100      	movs	r1, #0
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f001 fc0b 	bl	800c61a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2240      	movs	r2, #64	; 0x40
 800ae10:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae14:	2340      	movs	r3, #64	; 0x40
 800ae16:	2200      	movs	r2, #0
 800ae18:	2180      	movs	r1, #128	; 0x80
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f001 fbfd 	bl	800c61a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2240      	movs	r2, #64	; 0x40
 800ae2a:	621a      	str	r2, [r3, #32]

  return ret;
 800ae2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ae36:	b480      	push	{r7}
 800ae38:	b083      	sub	sp, #12
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	460b      	mov	r3, r1
 800ae40:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	78fa      	ldrb	r2, [r7, #3]
 800ae46:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	370c      	adds	r7, #12
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr

0800ae56 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ae56:	b480      	push	{r7}
 800ae58:	b083      	sub	sp, #12
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	2b04      	cmp	r3, #4
 800ae68:	d006      	beq.n	800ae78 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae70:	b2da      	uxtb	r2, r3
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2204      	movs	r2, #4
 800ae7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr

0800ae8e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ae8e:	b480      	push	{r7}
 800ae90:	b083      	sub	sp, #12
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	2b04      	cmp	r3, #4
 800aea0:	d106      	bne.n	800aeb0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aea8:	b2da      	uxtb	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	370c      	adds	r7, #12
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b082      	sub	sp, #8
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	2b03      	cmp	r3, #3
 800aed0:	d110      	bne.n	800aef4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00b      	beq.n	800aef4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aee2:	69db      	ldr	r3, [r3, #28]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d005      	beq.n	800aef4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeee:	69db      	ldr	r3, [r3, #28]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b082      	sub	sp, #8
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	460b      	mov	r3, r1
 800af08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	32ae      	adds	r2, #174	; 0xae
 800af14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d101      	bne.n	800af20 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800af1c:	2303      	movs	r3, #3
 800af1e:	e01c      	b.n	800af5a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af26:	b2db      	uxtb	r3, r3
 800af28:	2b03      	cmp	r3, #3
 800af2a:	d115      	bne.n	800af58 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	32ae      	adds	r2, #174	; 0xae
 800af36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af3a:	6a1b      	ldr	r3, [r3, #32]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d00b      	beq.n	800af58 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	32ae      	adds	r2, #174	; 0xae
 800af4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af4e:	6a1b      	ldr	r3, [r3, #32]
 800af50:	78fa      	ldrb	r2, [r7, #3]
 800af52:	4611      	mov	r1, r2
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b082      	sub	sp, #8
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	460b      	mov	r3, r1
 800af6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	32ae      	adds	r2, #174	; 0xae
 800af78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d101      	bne.n	800af84 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800af80:	2303      	movs	r3, #3
 800af82:	e01c      	b.n	800afbe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	2b03      	cmp	r3, #3
 800af8e:	d115      	bne.n	800afbc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	32ae      	adds	r2, #174	; 0xae
 800af9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d00b      	beq.n	800afbc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	32ae      	adds	r2, #174	; 0xae
 800afae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb4:	78fa      	ldrb	r2, [r7, #3]
 800afb6:	4611      	mov	r1, r2
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3708      	adds	r7, #8
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800afc6:	b480      	push	{r7}
 800afc8:	b083      	sub	sp, #12
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00e      	beq.n	800b018 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	6852      	ldr	r2, [r2, #4]
 800b006:	b2d2      	uxtb	r2, r2
 800b008:	4611      	mov	r1, r2
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	4798      	blx	r3
 800b00e:	4603      	mov	r3, r0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d001      	beq.n	800b018 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b014:	2303      	movs	r3, #3
 800b016:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b018:	7bfb      	ldrb	r3, [r7, #15]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b022:	b480      	push	{r7}
 800b024:	b083      	sub	sp, #12
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	460b      	mov	r3, r1
 800b02c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b02e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b030:	4618      	mov	r0, r3
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	460b      	mov	r3, r1
 800b046:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b048:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	370c      	adds	r7, #12
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b086      	sub	sp, #24
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	460b      	mov	r3, r1
 800b060:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b06a:	2300      	movs	r3, #0
 800b06c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	885b      	ldrh	r3, [r3, #2]
 800b072:	b29a      	uxth	r2, r3
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	b29b      	uxth	r3, r3
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d920      	bls.n	800b0c0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	b29b      	uxth	r3, r3
 800b084:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b086:	e013      	b.n	800b0b0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b088:	f107 030a 	add.w	r3, r7, #10
 800b08c:	4619      	mov	r1, r3
 800b08e:	6978      	ldr	r0, [r7, #20]
 800b090:	f000 f81b 	bl	800b0ca <USBD_GetNextDesc>
 800b094:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	785b      	ldrb	r3, [r3, #1]
 800b09a:	2b05      	cmp	r3, #5
 800b09c:	d108      	bne.n	800b0b0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	789b      	ldrb	r3, [r3, #2]
 800b0a6:	78fa      	ldrb	r2, [r7, #3]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d008      	beq.n	800b0be <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	885b      	ldrh	r3, [r3, #2]
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	897b      	ldrh	r3, [r7, #10]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d8e5      	bhi.n	800b088 <USBD_GetEpDesc+0x32>
 800b0bc:	e000      	b.n	800b0c0 <USBD_GetEpDesc+0x6a>
          break;
 800b0be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b0c0:	693b      	ldr	r3, [r7, #16]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3718      	adds	r7, #24
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b0ca:	b480      	push	{r7}
 800b0cc:	b085      	sub	sp, #20
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	881a      	ldrh	r2, [r3, #0]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	4413      	add	r3, r2
 800b0e4:	b29a      	uxth	r2, r3
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3714      	adds	r7, #20
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr

0800b104 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b104:	b480      	push	{r7}
 800b106:	b087      	sub	sp, #28
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	3301      	adds	r3, #1
 800b11a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b122:	8a3b      	ldrh	r3, [r7, #16]
 800b124:	021b      	lsls	r3, r3, #8
 800b126:	b21a      	sxth	r2, r3
 800b128:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b12c:	4313      	orrs	r3, r2
 800b12e:	b21b      	sxth	r3, r3
 800b130:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b132:	89fb      	ldrh	r3, [r7, #14]
}
 800b134:	4618      	mov	r0, r3
 800b136:	371c      	adds	r7, #28
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b14a:	2300      	movs	r3, #0
 800b14c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b156:	2b40      	cmp	r3, #64	; 0x40
 800b158:	d005      	beq.n	800b166 <USBD_StdDevReq+0x26>
 800b15a:	2b40      	cmp	r3, #64	; 0x40
 800b15c:	d857      	bhi.n	800b20e <USBD_StdDevReq+0xce>
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00f      	beq.n	800b182 <USBD_StdDevReq+0x42>
 800b162:	2b20      	cmp	r3, #32
 800b164:	d153      	bne.n	800b20e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	32ae      	adds	r2, #174	; 0xae
 800b170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	6839      	ldr	r1, [r7, #0]
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	4798      	blx	r3
 800b17c:	4603      	mov	r3, r0
 800b17e:	73fb      	strb	r3, [r7, #15]
      break;
 800b180:	e04a      	b.n	800b218 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	785b      	ldrb	r3, [r3, #1]
 800b186:	2b09      	cmp	r3, #9
 800b188:	d83b      	bhi.n	800b202 <USBD_StdDevReq+0xc2>
 800b18a:	a201      	add	r2, pc, #4	; (adr r2, 800b190 <USBD_StdDevReq+0x50>)
 800b18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b190:	0800b1e5 	.word	0x0800b1e5
 800b194:	0800b1f9 	.word	0x0800b1f9
 800b198:	0800b203 	.word	0x0800b203
 800b19c:	0800b1ef 	.word	0x0800b1ef
 800b1a0:	0800b203 	.word	0x0800b203
 800b1a4:	0800b1c3 	.word	0x0800b1c3
 800b1a8:	0800b1b9 	.word	0x0800b1b9
 800b1ac:	0800b203 	.word	0x0800b203
 800b1b0:	0800b1db 	.word	0x0800b1db
 800b1b4:	0800b1cd 	.word	0x0800b1cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 fa3c 	bl	800b638 <USBD_GetDescriptor>
          break;
 800b1c0:	e024      	b.n	800b20c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b1c2:	6839      	ldr	r1, [r7, #0]
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 fba1 	bl	800b90c <USBD_SetAddress>
          break;
 800b1ca:	e01f      	b.n	800b20c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b1cc:	6839      	ldr	r1, [r7, #0]
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fbe0 	bl	800b994 <USBD_SetConfig>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	73fb      	strb	r3, [r7, #15]
          break;
 800b1d8:	e018      	b.n	800b20c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b1da:	6839      	ldr	r1, [r7, #0]
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fc83 	bl	800bae8 <USBD_GetConfig>
          break;
 800b1e2:	e013      	b.n	800b20c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b1e4:	6839      	ldr	r1, [r7, #0]
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 fcb4 	bl	800bb54 <USBD_GetStatus>
          break;
 800b1ec:	e00e      	b.n	800b20c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b1ee:	6839      	ldr	r1, [r7, #0]
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fce3 	bl	800bbbc <USBD_SetFeature>
          break;
 800b1f6:	e009      	b.n	800b20c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fd07 	bl	800bc0e <USBD_ClrFeature>
          break;
 800b200:	e004      	b.n	800b20c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b202:	6839      	ldr	r1, [r7, #0]
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 fd5e 	bl	800bcc6 <USBD_CtlError>
          break;
 800b20a:	bf00      	nop
      }
      break;
 800b20c:	e004      	b.n	800b218 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 fd58 	bl	800bcc6 <USBD_CtlError>
      break;
 800b216:	bf00      	nop
  }

  return ret;
 800b218:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop

0800b224 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b22e:	2300      	movs	r3, #0
 800b230:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b23a:	2b40      	cmp	r3, #64	; 0x40
 800b23c:	d005      	beq.n	800b24a <USBD_StdItfReq+0x26>
 800b23e:	2b40      	cmp	r3, #64	; 0x40
 800b240:	d852      	bhi.n	800b2e8 <USBD_StdItfReq+0xc4>
 800b242:	2b00      	cmp	r3, #0
 800b244:	d001      	beq.n	800b24a <USBD_StdItfReq+0x26>
 800b246:	2b20      	cmp	r3, #32
 800b248:	d14e      	bne.n	800b2e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b250:	b2db      	uxtb	r3, r3
 800b252:	3b01      	subs	r3, #1
 800b254:	2b02      	cmp	r3, #2
 800b256:	d840      	bhi.n	800b2da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	889b      	ldrh	r3, [r3, #4]
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d836      	bhi.n	800b2d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	889b      	ldrh	r3, [r3, #4]
 800b266:	b2db      	uxtb	r3, r3
 800b268:	4619      	mov	r1, r3
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f7ff fed9 	bl	800b022 <USBD_CoreFindIF>
 800b270:	4603      	mov	r3, r0
 800b272:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b274:	7bbb      	ldrb	r3, [r7, #14]
 800b276:	2bff      	cmp	r3, #255	; 0xff
 800b278:	d01d      	beq.n	800b2b6 <USBD_StdItfReq+0x92>
 800b27a:	7bbb      	ldrb	r3, [r7, #14]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d11a      	bne.n	800b2b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b280:	7bba      	ldrb	r2, [r7, #14]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	32ae      	adds	r2, #174	; 0xae
 800b286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00f      	beq.n	800b2b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b290:	7bba      	ldrb	r2, [r7, #14]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b298:	7bba      	ldrb	r2, [r7, #14]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	32ae      	adds	r2, #174	; 0xae
 800b29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	6839      	ldr	r1, [r7, #0]
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	4798      	blx	r3
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b2ae:	e004      	b.n	800b2ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b2b0:	2303      	movs	r3, #3
 800b2b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b2b4:	e001      	b.n	800b2ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	88db      	ldrh	r3, [r3, #6]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d110      	bne.n	800b2e4 <USBD_StdItfReq+0xc0>
 800b2c2:	7bfb      	ldrb	r3, [r7, #15]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d10d      	bne.n	800b2e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fdc7 	bl	800be5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b2ce:	e009      	b.n	800b2e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b2d0:	6839      	ldr	r1, [r7, #0]
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 fcf7 	bl	800bcc6 <USBD_CtlError>
          break;
 800b2d8:	e004      	b.n	800b2e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b2da:	6839      	ldr	r1, [r7, #0]
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 fcf2 	bl	800bcc6 <USBD_CtlError>
          break;
 800b2e2:	e000      	b.n	800b2e6 <USBD_StdItfReq+0xc2>
          break;
 800b2e4:	bf00      	nop
      }
      break;
 800b2e6:	e004      	b.n	800b2f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b2e8:	6839      	ldr	r1, [r7, #0]
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fceb 	bl	800bcc6 <USBD_CtlError>
      break;
 800b2f0:	bf00      	nop
  }

  return ret;
 800b2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3710      	adds	r7, #16
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b306:	2300      	movs	r3, #0
 800b308:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	889b      	ldrh	r3, [r3, #4]
 800b30e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b318:	2b40      	cmp	r3, #64	; 0x40
 800b31a:	d007      	beq.n	800b32c <USBD_StdEPReq+0x30>
 800b31c:	2b40      	cmp	r3, #64	; 0x40
 800b31e:	f200 817f 	bhi.w	800b620 <USBD_StdEPReq+0x324>
 800b322:	2b00      	cmp	r3, #0
 800b324:	d02a      	beq.n	800b37c <USBD_StdEPReq+0x80>
 800b326:	2b20      	cmp	r3, #32
 800b328:	f040 817a 	bne.w	800b620 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b32c:	7bbb      	ldrb	r3, [r7, #14]
 800b32e:	4619      	mov	r1, r3
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f7ff fe83 	bl	800b03c <USBD_CoreFindEP>
 800b336:	4603      	mov	r3, r0
 800b338:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b33a:	7b7b      	ldrb	r3, [r7, #13]
 800b33c:	2bff      	cmp	r3, #255	; 0xff
 800b33e:	f000 8174 	beq.w	800b62a <USBD_StdEPReq+0x32e>
 800b342:	7b7b      	ldrb	r3, [r7, #13]
 800b344:	2b00      	cmp	r3, #0
 800b346:	f040 8170 	bne.w	800b62a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b34a:	7b7a      	ldrb	r2, [r7, #13]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b352:	7b7a      	ldrb	r2, [r7, #13]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	32ae      	adds	r2, #174	; 0xae
 800b358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	f000 8163 	beq.w	800b62a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b364:	7b7a      	ldrb	r2, [r7, #13]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	32ae      	adds	r2, #174	; 0xae
 800b36a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	6839      	ldr	r1, [r7, #0]
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	4798      	blx	r3
 800b376:	4603      	mov	r3, r0
 800b378:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b37a:	e156      	b.n	800b62a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	785b      	ldrb	r3, [r3, #1]
 800b380:	2b03      	cmp	r3, #3
 800b382:	d008      	beq.n	800b396 <USBD_StdEPReq+0x9a>
 800b384:	2b03      	cmp	r3, #3
 800b386:	f300 8145 	bgt.w	800b614 <USBD_StdEPReq+0x318>
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f000 809b 	beq.w	800b4c6 <USBD_StdEPReq+0x1ca>
 800b390:	2b01      	cmp	r3, #1
 800b392:	d03c      	beq.n	800b40e <USBD_StdEPReq+0x112>
 800b394:	e13e      	b.n	800b614 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	2b02      	cmp	r3, #2
 800b3a0:	d002      	beq.n	800b3a8 <USBD_StdEPReq+0xac>
 800b3a2:	2b03      	cmp	r3, #3
 800b3a4:	d016      	beq.n	800b3d4 <USBD_StdEPReq+0xd8>
 800b3a6:	e02c      	b.n	800b402 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b3a8:	7bbb      	ldrb	r3, [r7, #14]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00d      	beq.n	800b3ca <USBD_StdEPReq+0xce>
 800b3ae:	7bbb      	ldrb	r3, [r7, #14]
 800b3b0:	2b80      	cmp	r3, #128	; 0x80
 800b3b2:	d00a      	beq.n	800b3ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b3b4:	7bbb      	ldrb	r3, [r7, #14]
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f001 f973 	bl	800c6a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3be:	2180      	movs	r1, #128	; 0x80
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f001 f96f 	bl	800c6a4 <USBD_LL_StallEP>
 800b3c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b3c8:	e020      	b.n	800b40c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b3ca:	6839      	ldr	r1, [r7, #0]
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 fc7a 	bl	800bcc6 <USBD_CtlError>
              break;
 800b3d2:	e01b      	b.n	800b40c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	885b      	ldrh	r3, [r3, #2]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d10e      	bne.n	800b3fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b3dc:	7bbb      	ldrb	r3, [r7, #14]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00b      	beq.n	800b3fa <USBD_StdEPReq+0xfe>
 800b3e2:	7bbb      	ldrb	r3, [r7, #14]
 800b3e4:	2b80      	cmp	r3, #128	; 0x80
 800b3e6:	d008      	beq.n	800b3fa <USBD_StdEPReq+0xfe>
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	88db      	ldrh	r3, [r3, #6]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d104      	bne.n	800b3fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b3f0:	7bbb      	ldrb	r3, [r7, #14]
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f001 f955 	bl	800c6a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 fd2e 	bl	800be5c <USBD_CtlSendStatus>

              break;
 800b400:	e004      	b.n	800b40c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 fc5e 	bl	800bcc6 <USBD_CtlError>
              break;
 800b40a:	bf00      	nop
          }
          break;
 800b40c:	e107      	b.n	800b61e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b02      	cmp	r3, #2
 800b418:	d002      	beq.n	800b420 <USBD_StdEPReq+0x124>
 800b41a:	2b03      	cmp	r3, #3
 800b41c:	d016      	beq.n	800b44c <USBD_StdEPReq+0x150>
 800b41e:	e04b      	b.n	800b4b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b420:	7bbb      	ldrb	r3, [r7, #14]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00d      	beq.n	800b442 <USBD_StdEPReq+0x146>
 800b426:	7bbb      	ldrb	r3, [r7, #14]
 800b428:	2b80      	cmp	r3, #128	; 0x80
 800b42a:	d00a      	beq.n	800b442 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b42c:	7bbb      	ldrb	r3, [r7, #14]
 800b42e:	4619      	mov	r1, r3
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f001 f937 	bl	800c6a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b436:	2180      	movs	r1, #128	; 0x80
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f001 f933 	bl	800c6a4 <USBD_LL_StallEP>
 800b43e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b440:	e040      	b.n	800b4c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b442:	6839      	ldr	r1, [r7, #0]
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 fc3e 	bl	800bcc6 <USBD_CtlError>
              break;
 800b44a:	e03b      	b.n	800b4c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	885b      	ldrh	r3, [r3, #2]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d136      	bne.n	800b4c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b454:	7bbb      	ldrb	r3, [r7, #14]
 800b456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d004      	beq.n	800b468 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b45e:	7bbb      	ldrb	r3, [r7, #14]
 800b460:	4619      	mov	r1, r3
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f001 f93d 	bl	800c6e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 fcf7 	bl	800be5c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b46e:	7bbb      	ldrb	r3, [r7, #14]
 800b470:	4619      	mov	r1, r3
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff fde2 	bl	800b03c <USBD_CoreFindEP>
 800b478:	4603      	mov	r3, r0
 800b47a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b47c:	7b7b      	ldrb	r3, [r7, #13]
 800b47e:	2bff      	cmp	r3, #255	; 0xff
 800b480:	d01f      	beq.n	800b4c2 <USBD_StdEPReq+0x1c6>
 800b482:	7b7b      	ldrb	r3, [r7, #13]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d11c      	bne.n	800b4c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b488:	7b7a      	ldrb	r2, [r7, #13]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b490:	7b7a      	ldrb	r2, [r7, #13]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	32ae      	adds	r2, #174	; 0xae
 800b496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d010      	beq.n	800b4c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b4a0:	7b7a      	ldrb	r2, [r7, #13]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	32ae      	adds	r2, #174	; 0xae
 800b4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	4798      	blx	r3
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b4b6:	e004      	b.n	800b4c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b4b8:	6839      	ldr	r1, [r7, #0]
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fc03 	bl	800bcc6 <USBD_CtlError>
              break;
 800b4c0:	e000      	b.n	800b4c4 <USBD_StdEPReq+0x1c8>
              break;
 800b4c2:	bf00      	nop
          }
          break;
 800b4c4:	e0ab      	b.n	800b61e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	2b02      	cmp	r3, #2
 800b4d0:	d002      	beq.n	800b4d8 <USBD_StdEPReq+0x1dc>
 800b4d2:	2b03      	cmp	r3, #3
 800b4d4:	d032      	beq.n	800b53c <USBD_StdEPReq+0x240>
 800b4d6:	e097      	b.n	800b608 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4d8:	7bbb      	ldrb	r3, [r7, #14]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d007      	beq.n	800b4ee <USBD_StdEPReq+0x1f2>
 800b4de:	7bbb      	ldrb	r3, [r7, #14]
 800b4e0:	2b80      	cmp	r3, #128	; 0x80
 800b4e2:	d004      	beq.n	800b4ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b4e4:	6839      	ldr	r1, [r7, #0]
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 fbed 	bl	800bcc6 <USBD_CtlError>
                break;
 800b4ec:	e091      	b.n	800b612 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	da0b      	bge.n	800b50e <USBD_StdEPReq+0x212>
 800b4f6:	7bbb      	ldrb	r3, [r7, #14]
 800b4f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	4413      	add	r3, r2
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	3310      	adds	r3, #16
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	4413      	add	r3, r2
 800b50a:	3304      	adds	r3, #4
 800b50c:	e00b      	b.n	800b526 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b50e:	7bbb      	ldrb	r3, [r7, #14]
 800b510:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b514:	4613      	mov	r3, r2
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	4413      	add	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	4413      	add	r3, r2
 800b524:	3304      	adds	r3, #4
 800b526:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	2200      	movs	r2, #0
 800b52c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	2202      	movs	r2, #2
 800b532:	4619      	mov	r1, r3
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 fc37 	bl	800bda8 <USBD_CtlSendData>
              break;
 800b53a:	e06a      	b.n	800b612 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b53c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b540:	2b00      	cmp	r3, #0
 800b542:	da11      	bge.n	800b568 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b544:	7bbb      	ldrb	r3, [r7, #14]
 800b546:	f003 020f 	and.w	r2, r3, #15
 800b54a:	6879      	ldr	r1, [r7, #4]
 800b54c:	4613      	mov	r3, r2
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	4413      	add	r3, r2
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	440b      	add	r3, r1
 800b556:	3324      	adds	r3, #36	; 0x24
 800b558:	881b      	ldrh	r3, [r3, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d117      	bne.n	800b58e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b55e:	6839      	ldr	r1, [r7, #0]
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 fbb0 	bl	800bcc6 <USBD_CtlError>
                  break;
 800b566:	e054      	b.n	800b612 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b568:	7bbb      	ldrb	r3, [r7, #14]
 800b56a:	f003 020f 	and.w	r2, r3, #15
 800b56e:	6879      	ldr	r1, [r7, #4]
 800b570:	4613      	mov	r3, r2
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	4413      	add	r3, r2
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	440b      	add	r3, r1
 800b57a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b57e:	881b      	ldrh	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d104      	bne.n	800b58e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b584:	6839      	ldr	r1, [r7, #0]
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 fb9d 	bl	800bcc6 <USBD_CtlError>
                  break;
 800b58c:	e041      	b.n	800b612 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b58e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b592:	2b00      	cmp	r3, #0
 800b594:	da0b      	bge.n	800b5ae <USBD_StdEPReq+0x2b2>
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b59c:	4613      	mov	r3, r2
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4413      	add	r3, r2
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	3310      	adds	r3, #16
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	3304      	adds	r3, #4
 800b5ac:	e00b      	b.n	800b5c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b5ae:	7bbb      	ldrb	r3, [r7, #14]
 800b5b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	4413      	add	r3, r2
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b5c8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d002      	beq.n	800b5d4 <USBD_StdEPReq+0x2d8>
 800b5ce:	7bbb      	ldrb	r3, [r7, #14]
 800b5d0:	2b80      	cmp	r3, #128	; 0x80
 800b5d2:	d103      	bne.n	800b5dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	601a      	str	r2, [r3, #0]
 800b5da:	e00e      	b.n	800b5fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b5dc:	7bbb      	ldrb	r3, [r7, #14]
 800b5de:	4619      	mov	r1, r3
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f001 f89d 	bl	800c720 <USBD_LL_IsStallEP>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d003      	beq.n	800b5f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	601a      	str	r2, [r3, #0]
 800b5f2:	e002      	b.n	800b5fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	2202      	movs	r2, #2
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fbd1 	bl	800bda8 <USBD_CtlSendData>
              break;
 800b606:	e004      	b.n	800b612 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b608:	6839      	ldr	r1, [r7, #0]
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 fb5b 	bl	800bcc6 <USBD_CtlError>
              break;
 800b610:	bf00      	nop
          }
          break;
 800b612:	e004      	b.n	800b61e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fb55 	bl	800bcc6 <USBD_CtlError>
          break;
 800b61c:	bf00      	nop
      }
      break;
 800b61e:	e005      	b.n	800b62c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b620:	6839      	ldr	r1, [r7, #0]
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 fb4f 	bl	800bcc6 <USBD_CtlError>
      break;
 800b628:	e000      	b.n	800b62c <USBD_StdEPReq+0x330>
      break;
 800b62a:	bf00      	nop
  }

  return ret;
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
	...

0800b638 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b642:	2300      	movs	r3, #0
 800b644:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b646:	2300      	movs	r3, #0
 800b648:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b64a:	2300      	movs	r3, #0
 800b64c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	885b      	ldrh	r3, [r3, #2]
 800b652:	0a1b      	lsrs	r3, r3, #8
 800b654:	b29b      	uxth	r3, r3
 800b656:	3b01      	subs	r3, #1
 800b658:	2b06      	cmp	r3, #6
 800b65a:	f200 8128 	bhi.w	800b8ae <USBD_GetDescriptor+0x276>
 800b65e:	a201      	add	r2, pc, #4	; (adr r2, 800b664 <USBD_GetDescriptor+0x2c>)
 800b660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b664:	0800b681 	.word	0x0800b681
 800b668:	0800b699 	.word	0x0800b699
 800b66c:	0800b6d9 	.word	0x0800b6d9
 800b670:	0800b8af 	.word	0x0800b8af
 800b674:	0800b8af 	.word	0x0800b8af
 800b678:	0800b84f 	.word	0x0800b84f
 800b67c:	0800b87b 	.word	0x0800b87b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	7c12      	ldrb	r2, [r2, #16]
 800b68c:	f107 0108 	add.w	r1, r7, #8
 800b690:	4610      	mov	r0, r2
 800b692:	4798      	blx	r3
 800b694:	60f8      	str	r0, [r7, #12]
      break;
 800b696:	e112      	b.n	800b8be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	7c1b      	ldrb	r3, [r3, #16]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10d      	bne.n	800b6bc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6a8:	f107 0208 	add.w	r2, r7, #8
 800b6ac:	4610      	mov	r0, r2
 800b6ae:	4798      	blx	r3
 800b6b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	2202      	movs	r2, #2
 800b6b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b6ba:	e100      	b.n	800b8be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c4:	f107 0208 	add.w	r2, r7, #8
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	4798      	blx	r3
 800b6cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	2202      	movs	r2, #2
 800b6d4:	701a      	strb	r2, [r3, #0]
      break;
 800b6d6:	e0f2      	b.n	800b8be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	885b      	ldrh	r3, [r3, #2]
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	2b05      	cmp	r3, #5
 800b6e0:	f200 80ac 	bhi.w	800b83c <USBD_GetDescriptor+0x204>
 800b6e4:	a201      	add	r2, pc, #4	; (adr r2, 800b6ec <USBD_GetDescriptor+0xb4>)
 800b6e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ea:	bf00      	nop
 800b6ec:	0800b705 	.word	0x0800b705
 800b6f0:	0800b739 	.word	0x0800b739
 800b6f4:	0800b76d 	.word	0x0800b76d
 800b6f8:	0800b7a1 	.word	0x0800b7a1
 800b6fc:	0800b7d5 	.word	0x0800b7d5
 800b700:	0800b809 	.word	0x0800b809
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d00b      	beq.n	800b728 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	7c12      	ldrb	r2, [r2, #16]
 800b71c:	f107 0108 	add.w	r1, r7, #8
 800b720:	4610      	mov	r0, r2
 800b722:	4798      	blx	r3
 800b724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b726:	e091      	b.n	800b84c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b728:	6839      	ldr	r1, [r7, #0]
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 facb 	bl	800bcc6 <USBD_CtlError>
            err++;
 800b730:	7afb      	ldrb	r3, [r7, #11]
 800b732:	3301      	adds	r3, #1
 800b734:	72fb      	strb	r3, [r7, #11]
          break;
 800b736:	e089      	b.n	800b84c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d00b      	beq.n	800b75c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	7c12      	ldrb	r2, [r2, #16]
 800b750:	f107 0108 	add.w	r1, r7, #8
 800b754:	4610      	mov	r0, r2
 800b756:	4798      	blx	r3
 800b758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b75a:	e077      	b.n	800b84c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b75c:	6839      	ldr	r1, [r7, #0]
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 fab1 	bl	800bcc6 <USBD_CtlError>
            err++;
 800b764:	7afb      	ldrb	r3, [r7, #11]
 800b766:	3301      	adds	r3, #1
 800b768:	72fb      	strb	r3, [r7, #11]
          break;
 800b76a:	e06f      	b.n	800b84c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b772:	68db      	ldr	r3, [r3, #12]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00b      	beq.n	800b790 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	7c12      	ldrb	r2, [r2, #16]
 800b784:	f107 0108 	add.w	r1, r7, #8
 800b788:	4610      	mov	r0, r2
 800b78a:	4798      	blx	r3
 800b78c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b78e:	e05d      	b.n	800b84c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b790:	6839      	ldr	r1, [r7, #0]
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 fa97 	bl	800bcc6 <USBD_CtlError>
            err++;
 800b798:	7afb      	ldrb	r3, [r7, #11]
 800b79a:	3301      	adds	r3, #1
 800b79c:	72fb      	strb	r3, [r7, #11]
          break;
 800b79e:	e055      	b.n	800b84c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00b      	beq.n	800b7c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7b2:	691b      	ldr	r3, [r3, #16]
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	7c12      	ldrb	r2, [r2, #16]
 800b7b8:	f107 0108 	add.w	r1, r7, #8
 800b7bc:	4610      	mov	r0, r2
 800b7be:	4798      	blx	r3
 800b7c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7c2:	e043      	b.n	800b84c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7c4:	6839      	ldr	r1, [r7, #0]
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 fa7d 	bl	800bcc6 <USBD_CtlError>
            err++;
 800b7cc:	7afb      	ldrb	r3, [r7, #11]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b7d2:	e03b      	b.n	800b84c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7da:	695b      	ldr	r3, [r3, #20]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00b      	beq.n	800b7f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7e6:	695b      	ldr	r3, [r3, #20]
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	7c12      	ldrb	r2, [r2, #16]
 800b7ec:	f107 0108 	add.w	r1, r7, #8
 800b7f0:	4610      	mov	r0, r2
 800b7f2:	4798      	blx	r3
 800b7f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7f6:	e029      	b.n	800b84c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7f8:	6839      	ldr	r1, [r7, #0]
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 fa63 	bl	800bcc6 <USBD_CtlError>
            err++;
 800b800:	7afb      	ldrb	r3, [r7, #11]
 800b802:	3301      	adds	r3, #1
 800b804:	72fb      	strb	r3, [r7, #11]
          break;
 800b806:	e021      	b.n	800b84c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b80e:	699b      	ldr	r3, [r3, #24]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00b      	beq.n	800b82c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b81a:	699b      	ldr	r3, [r3, #24]
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	7c12      	ldrb	r2, [r2, #16]
 800b820:	f107 0108 	add.w	r1, r7, #8
 800b824:	4610      	mov	r0, r2
 800b826:	4798      	blx	r3
 800b828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b82a:	e00f      	b.n	800b84c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fa49 	bl	800bcc6 <USBD_CtlError>
            err++;
 800b834:	7afb      	ldrb	r3, [r7, #11]
 800b836:	3301      	adds	r3, #1
 800b838:	72fb      	strb	r3, [r7, #11]
          break;
 800b83a:	e007      	b.n	800b84c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b83c:	6839      	ldr	r1, [r7, #0]
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 fa41 	bl	800bcc6 <USBD_CtlError>
          err++;
 800b844:	7afb      	ldrb	r3, [r7, #11]
 800b846:	3301      	adds	r3, #1
 800b848:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b84a:	bf00      	nop
      }
      break;
 800b84c:	e037      	b.n	800b8be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	7c1b      	ldrb	r3, [r3, #16]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d109      	bne.n	800b86a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b85e:	f107 0208 	add.w	r2, r7, #8
 800b862:	4610      	mov	r0, r2
 800b864:	4798      	blx	r3
 800b866:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b868:	e029      	b.n	800b8be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b86a:	6839      	ldr	r1, [r7, #0]
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 fa2a 	bl	800bcc6 <USBD_CtlError>
        err++;
 800b872:	7afb      	ldrb	r3, [r7, #11]
 800b874:	3301      	adds	r3, #1
 800b876:	72fb      	strb	r3, [r7, #11]
      break;
 800b878:	e021      	b.n	800b8be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	7c1b      	ldrb	r3, [r3, #16]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10d      	bne.n	800b89e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b88a:	f107 0208 	add.w	r2, r7, #8
 800b88e:	4610      	mov	r0, r2
 800b890:	4798      	blx	r3
 800b892:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	3301      	adds	r3, #1
 800b898:	2207      	movs	r2, #7
 800b89a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b89c:	e00f      	b.n	800b8be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b89e:	6839      	ldr	r1, [r7, #0]
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 fa10 	bl	800bcc6 <USBD_CtlError>
        err++;
 800b8a6:	7afb      	ldrb	r3, [r7, #11]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	72fb      	strb	r3, [r7, #11]
      break;
 800b8ac:	e007      	b.n	800b8be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b8ae:	6839      	ldr	r1, [r7, #0]
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 fa08 	bl	800bcc6 <USBD_CtlError>
      err++;
 800b8b6:	7afb      	ldrb	r3, [r7, #11]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	72fb      	strb	r3, [r7, #11]
      break;
 800b8bc:	bf00      	nop
  }

  if (err != 0U)
 800b8be:	7afb      	ldrb	r3, [r7, #11]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d11e      	bne.n	800b902 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	88db      	ldrh	r3, [r3, #6]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d016      	beq.n	800b8fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b8cc:	893b      	ldrh	r3, [r7, #8]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d00e      	beq.n	800b8f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	88da      	ldrh	r2, [r3, #6]
 800b8d6:	893b      	ldrh	r3, [r7, #8]
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	bf28      	it	cs
 800b8dc:	4613      	movcs	r3, r2
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b8e2:	893b      	ldrh	r3, [r7, #8]
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	68f9      	ldr	r1, [r7, #12]
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 fa5d 	bl	800bda8 <USBD_CtlSendData>
 800b8ee:	e009      	b.n	800b904 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b8f0:	6839      	ldr	r1, [r7, #0]
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 f9e7 	bl	800bcc6 <USBD_CtlError>
 800b8f8:	e004      	b.n	800b904 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 faae 	bl	800be5c <USBD_CtlSendStatus>
 800b900:	e000      	b.n	800b904 <USBD_GetDescriptor+0x2cc>
    return;
 800b902:	bf00      	nop
  }
}
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop

0800b90c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	889b      	ldrh	r3, [r3, #4]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d131      	bne.n	800b982 <USBD_SetAddress+0x76>
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	88db      	ldrh	r3, [r3, #6]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d12d      	bne.n	800b982 <USBD_SetAddress+0x76>
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	885b      	ldrh	r3, [r3, #2]
 800b92a:	2b7f      	cmp	r3, #127	; 0x7f
 800b92c:	d829      	bhi.n	800b982 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	885b      	ldrh	r3, [r3, #2]
 800b932:	b2db      	uxtb	r3, r3
 800b934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b938:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b940:	b2db      	uxtb	r3, r3
 800b942:	2b03      	cmp	r3, #3
 800b944:	d104      	bne.n	800b950 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b946:	6839      	ldr	r1, [r7, #0]
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 f9bc 	bl	800bcc6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b94e:	e01d      	b.n	800b98c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	7bfa      	ldrb	r2, [r7, #15]
 800b954:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b958:	7bfb      	ldrb	r3, [r7, #15]
 800b95a:	4619      	mov	r1, r3
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 ff0b 	bl	800c778 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fa7a 	bl	800be5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b968:	7bfb      	ldrb	r3, [r7, #15]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d004      	beq.n	800b978 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2202      	movs	r2, #2
 800b972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b976:	e009      	b.n	800b98c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b980:	e004      	b.n	800b98c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b982:	6839      	ldr	r1, [r7, #0]
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 f99e 	bl	800bcc6 <USBD_CtlError>
  }
}
 800b98a:	bf00      	nop
 800b98c:	bf00      	nop
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	885b      	ldrh	r3, [r3, #2]
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	4b4e      	ldr	r3, [pc, #312]	; (800bae4 <USBD_SetConfig+0x150>)
 800b9aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b9ac:	4b4d      	ldr	r3, [pc, #308]	; (800bae4 <USBD_SetConfig+0x150>)
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d905      	bls.n	800b9c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 f985 	bl	800bcc6 <USBD_CtlError>
    return USBD_FAIL;
 800b9bc:	2303      	movs	r3, #3
 800b9be:	e08c      	b.n	800bada <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	2b02      	cmp	r3, #2
 800b9ca:	d002      	beq.n	800b9d2 <USBD_SetConfig+0x3e>
 800b9cc:	2b03      	cmp	r3, #3
 800b9ce:	d029      	beq.n	800ba24 <USBD_SetConfig+0x90>
 800b9d0:	e075      	b.n	800babe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b9d2:	4b44      	ldr	r3, [pc, #272]	; (800bae4 <USBD_SetConfig+0x150>)
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d020      	beq.n	800ba1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b9da:	4b42      	ldr	r3, [pc, #264]	; (800bae4 <USBD_SetConfig+0x150>)
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	461a      	mov	r2, r3
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b9e4:	4b3f      	ldr	r3, [pc, #252]	; (800bae4 <USBD_SetConfig+0x150>)
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f7fe ffe1 	bl	800a9b2 <USBD_SetClassConfig>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b9f4:	7bfb      	ldrb	r3, [r7, #15]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d008      	beq.n	800ba0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b9fa:	6839      	ldr	r1, [r7, #0]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 f962 	bl	800bcc6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2202      	movs	r2, #2
 800ba06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ba0a:	e065      	b.n	800bad8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 fa25 	bl	800be5c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2203      	movs	r2, #3
 800ba16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ba1a:	e05d      	b.n	800bad8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 fa1d 	bl	800be5c <USBD_CtlSendStatus>
      break;
 800ba22:	e059      	b.n	800bad8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ba24:	4b2f      	ldr	r3, [pc, #188]	; (800bae4 <USBD_SetConfig+0x150>)
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d112      	bne.n	800ba52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2202      	movs	r2, #2
 800ba30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ba34:	4b2b      	ldr	r3, [pc, #172]	; (800bae4 <USBD_SetConfig+0x150>)
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	461a      	mov	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ba3e:	4b29      	ldr	r3, [pc, #164]	; (800bae4 <USBD_SetConfig+0x150>)
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	4619      	mov	r1, r3
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f7fe ffd0 	bl	800a9ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 fa06 	bl	800be5c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ba50:	e042      	b.n	800bad8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ba52:	4b24      	ldr	r3, [pc, #144]	; (800bae4 <USBD_SetConfig+0x150>)
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	461a      	mov	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d02a      	beq.n	800bab6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	4619      	mov	r1, r3
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f7fe ffbe 	bl	800a9ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ba6e:	4b1d      	ldr	r3, [pc, #116]	; (800bae4 <USBD_SetConfig+0x150>)
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	461a      	mov	r2, r3
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ba78:	4b1a      	ldr	r3, [pc, #104]	; (800bae4 <USBD_SetConfig+0x150>)
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f7fe ff97 	bl	800a9b2 <USBD_SetClassConfig>
 800ba84:	4603      	mov	r3, r0
 800ba86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ba88:	7bfb      	ldrb	r3, [r7, #15]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00f      	beq.n	800baae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ba8e:	6839      	ldr	r1, [r7, #0]
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 f918 	bl	800bcc6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7fe ffa3 	bl	800a9ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2202      	movs	r2, #2
 800baa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800baac:	e014      	b.n	800bad8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 f9d4 	bl	800be5c <USBD_CtlSendStatus>
      break;
 800bab4:	e010      	b.n	800bad8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 f9d0 	bl	800be5c <USBD_CtlSendStatus>
      break;
 800babc:	e00c      	b.n	800bad8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800babe:	6839      	ldr	r1, [r7, #0]
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 f900 	bl	800bcc6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bac6:	4b07      	ldr	r3, [pc, #28]	; (800bae4 <USBD_SetConfig+0x150>)
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	4619      	mov	r1, r3
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f7fe ff8c 	bl	800a9ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bad2:	2303      	movs	r3, #3
 800bad4:	73fb      	strb	r3, [r7, #15]
      break;
 800bad6:	bf00      	nop
  }

  return ret;
 800bad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bada:	4618      	mov	r0, r3
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	200006fc 	.word	0x200006fc

0800bae8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	88db      	ldrh	r3, [r3, #6]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d004      	beq.n	800bb04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 f8e2 	bl	800bcc6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb02:	e023      	b.n	800bb4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	dc02      	bgt.n	800bb16 <USBD_GetConfig+0x2e>
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	dc03      	bgt.n	800bb1c <USBD_GetConfig+0x34>
 800bb14:	e015      	b.n	800bb42 <USBD_GetConfig+0x5a>
 800bb16:	2b03      	cmp	r3, #3
 800bb18:	d00b      	beq.n	800bb32 <USBD_GetConfig+0x4a>
 800bb1a:	e012      	b.n	800bb42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	3308      	adds	r3, #8
 800bb26:	2201      	movs	r2, #1
 800bb28:	4619      	mov	r1, r3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 f93c 	bl	800bda8 <USBD_CtlSendData>
        break;
 800bb30:	e00c      	b.n	800bb4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	3304      	adds	r3, #4
 800bb36:	2201      	movs	r2, #1
 800bb38:	4619      	mov	r1, r3
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 f934 	bl	800bda8 <USBD_CtlSendData>
        break;
 800bb40:	e004      	b.n	800bb4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bb42:	6839      	ldr	r1, [r7, #0]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f8be 	bl	800bcc6 <USBD_CtlError>
        break;
 800bb4a:	bf00      	nop
}
 800bb4c:	bf00      	nop
 800bb4e:	3708      	adds	r7, #8
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	3b01      	subs	r3, #1
 800bb68:	2b02      	cmp	r3, #2
 800bb6a:	d81e      	bhi.n	800bbaa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	88db      	ldrh	r3, [r3, #6]
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	d004      	beq.n	800bb7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bb74:	6839      	ldr	r1, [r7, #0]
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 f8a5 	bl	800bcc6 <USBD_CtlError>
        break;
 800bb7c:	e01a      	b.n	800bbb4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2201      	movs	r2, #1
 800bb82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d005      	beq.n	800bb9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	f043 0202 	orr.w	r2, r3, #2
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	330c      	adds	r3, #12
 800bb9e:	2202      	movs	r2, #2
 800bba0:	4619      	mov	r1, r3
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 f900 	bl	800bda8 <USBD_CtlSendData>
      break;
 800bba8:	e004      	b.n	800bbb4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bbaa:	6839      	ldr	r1, [r7, #0]
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 f88a 	bl	800bcc6 <USBD_CtlError>
      break;
 800bbb2:	bf00      	nop
  }
}
 800bbb4:	bf00      	nop
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	885b      	ldrh	r3, [r3, #2]
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d107      	bne.n	800bbde <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f940 	bl	800be5c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bbdc:	e013      	b.n	800bc06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	885b      	ldrh	r3, [r3, #2]
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d10b      	bne.n	800bbfe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	889b      	ldrh	r3, [r3, #4]
 800bbea:	0a1b      	lsrs	r3, r3, #8
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	b2da      	uxtb	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 f930 	bl	800be5c <USBD_CtlSendStatus>
}
 800bbfc:	e003      	b.n	800bc06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bbfe:	6839      	ldr	r1, [r7, #0]
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 f860 	bl	800bcc6 <USBD_CtlError>
}
 800bc06:	bf00      	nop
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b082      	sub	sp, #8
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	3b01      	subs	r3, #1
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	d80b      	bhi.n	800bc3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	885b      	ldrh	r3, [r3, #2]
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d10c      	bne.n	800bc48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 f910 	bl	800be5c <USBD_CtlSendStatus>
      }
      break;
 800bc3c:	e004      	b.n	800bc48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bc3e:	6839      	ldr	r1, [r7, #0]
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 f840 	bl	800bcc6 <USBD_CtlError>
      break;
 800bc46:	e000      	b.n	800bc4a <USBD_ClrFeature+0x3c>
      break;
 800bc48:	bf00      	nop
  }
}
 800bc4a:	bf00      	nop
 800bc4c:	3708      	adds	r7, #8
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b084      	sub	sp, #16
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	781a      	ldrb	r2, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	781a      	ldrb	r2, [r3, #0]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f7ff fa41 	bl	800b104 <SWAPBYTE>
 800bc82:	4603      	mov	r3, r0
 800bc84:	461a      	mov	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	3301      	adds	r3, #1
 800bc94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	f7ff fa34 	bl	800b104 <SWAPBYTE>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	461a      	mov	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	3301      	adds	r3, #1
 800bca8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	3301      	adds	r3, #1
 800bcae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f7ff fa27 	bl	800b104 <SWAPBYTE>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	461a      	mov	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	80da      	strh	r2, [r3, #6]
}
 800bcbe:	bf00      	nop
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}

0800bcc6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b082      	sub	sp, #8
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
 800bcce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bcd0:	2180      	movs	r1, #128	; 0x80
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fce6 	bl	800c6a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bcd8:	2100      	movs	r1, #0
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fce2 	bl	800c6a4 <USBD_LL_StallEP>
}
 800bce0:	bf00      	nop
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b086      	sub	sp, #24
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d036      	beq.n	800bd6c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bd02:	6938      	ldr	r0, [r7, #16]
 800bd04:	f000 f836 	bl	800bd74 <USBD_GetLen>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	005b      	lsls	r3, r3, #1
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bd16:	7dfb      	ldrb	r3, [r7, #23]
 800bd18:	68ba      	ldr	r2, [r7, #8]
 800bd1a:	4413      	add	r3, r2
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	7812      	ldrb	r2, [r2, #0]
 800bd20:	701a      	strb	r2, [r3, #0]
  idx++;
 800bd22:	7dfb      	ldrb	r3, [r7, #23]
 800bd24:	3301      	adds	r3, #1
 800bd26:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bd28:	7dfb      	ldrb	r3, [r7, #23]
 800bd2a:	68ba      	ldr	r2, [r7, #8]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	2203      	movs	r2, #3
 800bd30:	701a      	strb	r2, [r3, #0]
  idx++;
 800bd32:	7dfb      	ldrb	r3, [r7, #23]
 800bd34:	3301      	adds	r3, #1
 800bd36:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bd38:	e013      	b.n	800bd62 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bd3a:	7dfb      	ldrb	r3, [r7, #23]
 800bd3c:	68ba      	ldr	r2, [r7, #8]
 800bd3e:	4413      	add	r3, r2
 800bd40:	693a      	ldr	r2, [r7, #16]
 800bd42:	7812      	ldrb	r2, [r2, #0]
 800bd44:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	613b      	str	r3, [r7, #16]
    idx++;
 800bd4c:	7dfb      	ldrb	r3, [r7, #23]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bd52:	7dfb      	ldrb	r3, [r7, #23]
 800bd54:	68ba      	ldr	r2, [r7, #8]
 800bd56:	4413      	add	r3, r2
 800bd58:	2200      	movs	r2, #0
 800bd5a:	701a      	strb	r2, [r3, #0]
    idx++;
 800bd5c:	7dfb      	ldrb	r3, [r7, #23]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d1e7      	bne.n	800bd3a <USBD_GetString+0x52>
 800bd6a:	e000      	b.n	800bd6e <USBD_GetString+0x86>
    return;
 800bd6c:	bf00      	nop
  }
}
 800bd6e:	3718      	adds	r7, #24
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bd84:	e005      	b.n	800bd92 <USBD_GetLen+0x1e>
  {
    len++;
 800bd86:	7bfb      	ldrb	r3, [r7, #15]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	3301      	adds	r3, #1
 800bd90:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1f5      	bne.n	800bd86 <USBD_GetLen+0x12>
  }

  return len;
 800bd9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3714      	adds	r7, #20
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2202      	movs	r2, #2
 800bdb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	68ba      	ldr	r2, [r7, #8]
 800bdcc:	2100      	movs	r1, #0
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f000 fcf1 	bl	800c7b6 <USBD_LL_Transmit>

  return USBD_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3710      	adds	r7, #16
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b084      	sub	sp, #16
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	60f8      	str	r0, [r7, #12]
 800bde6:	60b9      	str	r1, [r7, #8]
 800bde8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	68ba      	ldr	r2, [r7, #8]
 800bdee:	2100      	movs	r1, #0
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f000 fce0 	bl	800c7b6 <USBD_LL_Transmit>

  return USBD_OK;
 800bdf6:	2300      	movs	r3, #0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3710      	adds	r7, #16
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2203      	movs	r2, #3
 800be10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	68ba      	ldr	r2, [r7, #8]
 800be28:	2100      	movs	r1, #0
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f000 fce4 	bl	800c7f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b084      	sub	sp, #16
 800be3e:	af00      	add	r7, sp, #0
 800be40:	60f8      	str	r0, [r7, #12]
 800be42:	60b9      	str	r1, [r7, #8]
 800be44:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	2100      	movs	r1, #0
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f000 fcd3 	bl	800c7f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be52:	2300      	movs	r3, #0
}
 800be54:	4618      	mov	r0, r3
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2204      	movs	r2, #4
 800be68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800be6c:	2300      	movs	r3, #0
 800be6e:	2200      	movs	r2, #0
 800be70:	2100      	movs	r1, #0
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fc9f 	bl	800c7b6 <USBD_LL_Transmit>

  return USBD_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b082      	sub	sp, #8
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2205      	movs	r2, #5
 800be8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be92:	2300      	movs	r3, #0
 800be94:	2200      	movs	r2, #0
 800be96:	2100      	movs	r1, #0
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 fcad 	bl	800c7f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800beac:	2200      	movs	r2, #0
 800beae:	4912      	ldr	r1, [pc, #72]	; (800bef8 <MX_USB_DEVICE_Init+0x50>)
 800beb0:	4812      	ldr	r0, [pc, #72]	; (800befc <MX_USB_DEVICE_Init+0x54>)
 800beb2:	f7fe fd01 	bl	800a8b8 <USBD_Init>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d001      	beq.n	800bec0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bebc:	f7f7 fefe 	bl	8003cbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bec0:	490f      	ldr	r1, [pc, #60]	; (800bf00 <MX_USB_DEVICE_Init+0x58>)
 800bec2:	480e      	ldr	r0, [pc, #56]	; (800befc <MX_USB_DEVICE_Init+0x54>)
 800bec4:	f7fe fd28 	bl	800a918 <USBD_RegisterClass>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d001      	beq.n	800bed2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bece:	f7f7 fef5 	bl	8003cbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bed2:	490c      	ldr	r1, [pc, #48]	; (800bf04 <MX_USB_DEVICE_Init+0x5c>)
 800bed4:	4809      	ldr	r0, [pc, #36]	; (800befc <MX_USB_DEVICE_Init+0x54>)
 800bed6:	f7fe fc1f 	bl	800a718 <USBD_CDC_RegisterInterface>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d001      	beq.n	800bee4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bee0:	f7f7 feec 	bl	8003cbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bee4:	4805      	ldr	r0, [pc, #20]	; (800befc <MX_USB_DEVICE_Init+0x54>)
 800bee6:	f7fe fd4d 	bl	800a984 <USBD_Start>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d001      	beq.n	800bef4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bef0:	f7f7 fee4 	bl	8003cbc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bef4:	bf00      	nop
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	200000c0 	.word	0x200000c0
 800befc:	20000700 	.word	0x20000700
 800bf00:	2000002c 	.word	0x2000002c
 800bf04:	200000ac 	.word	0x200000ac

0800bf08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	4905      	ldr	r1, [pc, #20]	; (800bf24 <CDC_Init_FS+0x1c>)
 800bf10:	4805      	ldr	r0, [pc, #20]	; (800bf28 <CDC_Init_FS+0x20>)
 800bf12:	f7fe fc1b 	bl	800a74c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bf16:	4905      	ldr	r1, [pc, #20]	; (800bf2c <CDC_Init_FS+0x24>)
 800bf18:	4803      	ldr	r0, [pc, #12]	; (800bf28 <CDC_Init_FS+0x20>)
 800bf1a:	f7fe fc39 	bl	800a790 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bf1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	200011dc 	.word	0x200011dc
 800bf28:	20000700 	.word	0x20000700
 800bf2c:	200009dc 	.word	0x200009dc

0800bf30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bf30:	b480      	push	{r7}
 800bf32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bf34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	4603      	mov	r3, r0
 800bf48:	6039      	str	r1, [r7, #0]
 800bf4a:	71fb      	strb	r3, [r7, #7]
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bf50:	79fb      	ldrb	r3, [r7, #7]
 800bf52:	2b23      	cmp	r3, #35	; 0x23
 800bf54:	d84a      	bhi.n	800bfec <CDC_Control_FS+0xac>
 800bf56:	a201      	add	r2, pc, #4	; (adr r2, 800bf5c <CDC_Control_FS+0x1c>)
 800bf58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf5c:	0800bfed 	.word	0x0800bfed
 800bf60:	0800bfed 	.word	0x0800bfed
 800bf64:	0800bfed 	.word	0x0800bfed
 800bf68:	0800bfed 	.word	0x0800bfed
 800bf6c:	0800bfed 	.word	0x0800bfed
 800bf70:	0800bfed 	.word	0x0800bfed
 800bf74:	0800bfed 	.word	0x0800bfed
 800bf78:	0800bfed 	.word	0x0800bfed
 800bf7c:	0800bfed 	.word	0x0800bfed
 800bf80:	0800bfed 	.word	0x0800bfed
 800bf84:	0800bfed 	.word	0x0800bfed
 800bf88:	0800bfed 	.word	0x0800bfed
 800bf8c:	0800bfed 	.word	0x0800bfed
 800bf90:	0800bfed 	.word	0x0800bfed
 800bf94:	0800bfed 	.word	0x0800bfed
 800bf98:	0800bfed 	.word	0x0800bfed
 800bf9c:	0800bfed 	.word	0x0800bfed
 800bfa0:	0800bfed 	.word	0x0800bfed
 800bfa4:	0800bfed 	.word	0x0800bfed
 800bfa8:	0800bfed 	.word	0x0800bfed
 800bfac:	0800bfed 	.word	0x0800bfed
 800bfb0:	0800bfed 	.word	0x0800bfed
 800bfb4:	0800bfed 	.word	0x0800bfed
 800bfb8:	0800bfed 	.word	0x0800bfed
 800bfbc:	0800bfed 	.word	0x0800bfed
 800bfc0:	0800bfed 	.word	0x0800bfed
 800bfc4:	0800bfed 	.word	0x0800bfed
 800bfc8:	0800bfed 	.word	0x0800bfed
 800bfcc:	0800bfed 	.word	0x0800bfed
 800bfd0:	0800bfed 	.word	0x0800bfed
 800bfd4:	0800bfed 	.word	0x0800bfed
 800bfd8:	0800bfed 	.word	0x0800bfed
 800bfdc:	0800bfed 	.word	0x0800bfed
 800bfe0:	0800bfed 	.word	0x0800bfed
 800bfe4:	0800bfed 	.word	0x0800bfed
 800bfe8:	0800bfed 	.word	0x0800bfed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bfec:	bf00      	nop
  }

  return (USBD_OK);
 800bfee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c006:	6879      	ldr	r1, [r7, #4]
 800c008:	4808      	ldr	r0, [pc, #32]	; (800c02c <CDC_Receive_FS+0x30>)
 800c00a:	f7fe fbc1 	bl	800a790 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c00e:	4807      	ldr	r0, [pc, #28]	; (800c02c <CDC_Receive_FS+0x30>)
 800c010:	f7fe fc1c 	bl	800a84c <USBD_CDC_ReceivePacket>
  CDC_recieveCALLBACK(Buf, Len[0]);
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4619      	mov	r1, r3
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f7f7 fba6 	bl	800376c <CDC_recieveCALLBACK>
  return (USBD_OK);
 800c020:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c022:	4618      	mov	r0, r3
 800c024:	3708      	adds	r7, #8
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	20000700 	.word	0x20000700

0800c030 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	460b      	mov	r3, r1
 800c03a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c03c:	2300      	movs	r3, #0
 800c03e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c040:	4b0d      	ldr	r3, [pc, #52]	; (800c078 <CDC_Transmit_FS+0x48>)
 800c042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c046:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d001      	beq.n	800c056 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c052:	2301      	movs	r3, #1
 800c054:	e00b      	b.n	800c06e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c056:	887b      	ldrh	r3, [r7, #2]
 800c058:	461a      	mov	r2, r3
 800c05a:	6879      	ldr	r1, [r7, #4]
 800c05c:	4806      	ldr	r0, [pc, #24]	; (800c078 <CDC_Transmit_FS+0x48>)
 800c05e:	f7fe fb75 	bl	800a74c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c062:	4805      	ldr	r0, [pc, #20]	; (800c078 <CDC_Transmit_FS+0x48>)
 800c064:	f7fe fbb2 	bl	800a7cc <USBD_CDC_TransmitPacket>
 800c068:	4603      	mov	r3, r0
 800c06a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	20000700 	.word	0x20000700

0800c07c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b087      	sub	sp, #28
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	4613      	mov	r3, r2
 800c088:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c08a:	2300      	movs	r3, #0
 800c08c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c08e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c092:	4618      	mov	r0, r3
 800c094:	371c      	adds	r7, #28
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
	...

0800c0a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	6039      	str	r1, [r7, #0]
 800c0aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	2212      	movs	r2, #18
 800c0b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c0b2:	4b03      	ldr	r3, [pc, #12]	; (800c0c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr
 800c0c0:	200000dc 	.word	0x200000dc

0800c0c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	6039      	str	r1, [r7, #0]
 800c0ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	2204      	movs	r2, #4
 800c0d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c0d6:	4b03      	ldr	r3, [pc, #12]	; (800c0e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr
 800c0e4:	200000f0 	.word	0x200000f0

0800c0e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	6039      	str	r1, [r7, #0]
 800c0f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c0f4:	79fb      	ldrb	r3, [r7, #7]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d105      	bne.n	800c106 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	4907      	ldr	r1, [pc, #28]	; (800c11c <USBD_FS_ProductStrDescriptor+0x34>)
 800c0fe:	4808      	ldr	r0, [pc, #32]	; (800c120 <USBD_FS_ProductStrDescriptor+0x38>)
 800c100:	f7ff fdf2 	bl	800bce8 <USBD_GetString>
 800c104:	e004      	b.n	800c110 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c106:	683a      	ldr	r2, [r7, #0]
 800c108:	4904      	ldr	r1, [pc, #16]	; (800c11c <USBD_FS_ProductStrDescriptor+0x34>)
 800c10a:	4805      	ldr	r0, [pc, #20]	; (800c120 <USBD_FS_ProductStrDescriptor+0x38>)
 800c10c:	f7ff fdec 	bl	800bce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c110:	4b02      	ldr	r3, [pc, #8]	; (800c11c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c112:	4618      	mov	r0, r3
 800c114:	3708      	adds	r7, #8
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	200019dc 	.word	0x200019dc
 800c120:	0800dabc 	.word	0x0800dabc

0800c124 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	4603      	mov	r3, r0
 800c12c:	6039      	str	r1, [r7, #0]
 800c12e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c130:	683a      	ldr	r2, [r7, #0]
 800c132:	4904      	ldr	r1, [pc, #16]	; (800c144 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c134:	4804      	ldr	r0, [pc, #16]	; (800c148 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c136:	f7ff fdd7 	bl	800bce8 <USBD_GetString>
  return USBD_StrDesc;
 800c13a:	4b02      	ldr	r3, [pc, #8]	; (800c144 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	200019dc 	.word	0x200019dc
 800c148:	0800dad4 	.word	0x0800dad4

0800c14c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	4603      	mov	r3, r0
 800c154:	6039      	str	r1, [r7, #0]
 800c156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	221a      	movs	r2, #26
 800c15c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c15e:	f000 f843 	bl	800c1e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c162:	4b02      	ldr	r3, [pc, #8]	; (800c16c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c164:	4618      	mov	r0, r3
 800c166:	3708      	adds	r7, #8
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	200000f4 	.word	0x200000f4

0800c170 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	4603      	mov	r3, r0
 800c178:	6039      	str	r1, [r7, #0]
 800c17a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c17c:	79fb      	ldrb	r3, [r7, #7]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d105      	bne.n	800c18e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c182:	683a      	ldr	r2, [r7, #0]
 800c184:	4907      	ldr	r1, [pc, #28]	; (800c1a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c186:	4808      	ldr	r0, [pc, #32]	; (800c1a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c188:	f7ff fdae 	bl	800bce8 <USBD_GetString>
 800c18c:	e004      	b.n	800c198 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	4904      	ldr	r1, [pc, #16]	; (800c1a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c192:	4805      	ldr	r0, [pc, #20]	; (800c1a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c194:	f7ff fda8 	bl	800bce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c198:	4b02      	ldr	r3, [pc, #8]	; (800c1a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3708      	adds	r7, #8
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	200019dc 	.word	0x200019dc
 800c1a8:	0800dae8 	.word	0x0800dae8

0800c1ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	6039      	str	r1, [r7, #0]
 800c1b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c1b8:	79fb      	ldrb	r3, [r7, #7]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d105      	bne.n	800c1ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1be:	683a      	ldr	r2, [r7, #0]
 800c1c0:	4907      	ldr	r1, [pc, #28]	; (800c1e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1c2:	4808      	ldr	r0, [pc, #32]	; (800c1e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1c4:	f7ff fd90 	bl	800bce8 <USBD_GetString>
 800c1c8:	e004      	b.n	800c1d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	4904      	ldr	r1, [pc, #16]	; (800c1e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1ce:	4805      	ldr	r0, [pc, #20]	; (800c1e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1d0:	f7ff fd8a 	bl	800bce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1d4:	4b02      	ldr	r3, [pc, #8]	; (800c1e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3708      	adds	r7, #8
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	200019dc 	.word	0x200019dc
 800c1e4:	0800daf4 	.word	0x0800daf4

0800c1e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c1ee:	4b0f      	ldr	r3, [pc, #60]	; (800c22c <Get_SerialNum+0x44>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c1f4:	4b0e      	ldr	r3, [pc, #56]	; (800c230 <Get_SerialNum+0x48>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c1fa:	4b0e      	ldr	r3, [pc, #56]	; (800c234 <Get_SerialNum+0x4c>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c200:	68fa      	ldr	r2, [r7, #12]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	4413      	add	r3, r2
 800c206:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d009      	beq.n	800c222 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c20e:	2208      	movs	r2, #8
 800c210:	4909      	ldr	r1, [pc, #36]	; (800c238 <Get_SerialNum+0x50>)
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f000 f814 	bl	800c240 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c218:	2204      	movs	r2, #4
 800c21a:	4908      	ldr	r1, [pc, #32]	; (800c23c <Get_SerialNum+0x54>)
 800c21c:	68b8      	ldr	r0, [r7, #8]
 800c21e:	f000 f80f 	bl	800c240 <IntToUnicode>
  }
}
 800c222:	bf00      	nop
 800c224:	3710      	adds	r7, #16
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	1fff7a10 	.word	0x1fff7a10
 800c230:	1fff7a14 	.word	0x1fff7a14
 800c234:	1fff7a18 	.word	0x1fff7a18
 800c238:	200000f6 	.word	0x200000f6
 800c23c:	20000106 	.word	0x20000106

0800c240 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c240:	b480      	push	{r7}
 800c242:	b087      	sub	sp, #28
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	4613      	mov	r3, r2
 800c24c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c24e:	2300      	movs	r3, #0
 800c250:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c252:	2300      	movs	r3, #0
 800c254:	75fb      	strb	r3, [r7, #23]
 800c256:	e027      	b.n	800c2a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	0f1b      	lsrs	r3, r3, #28
 800c25c:	2b09      	cmp	r3, #9
 800c25e:	d80b      	bhi.n	800c278 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	0f1b      	lsrs	r3, r3, #28
 800c264:	b2da      	uxtb	r2, r3
 800c266:	7dfb      	ldrb	r3, [r7, #23]
 800c268:	005b      	lsls	r3, r3, #1
 800c26a:	4619      	mov	r1, r3
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	440b      	add	r3, r1
 800c270:	3230      	adds	r2, #48	; 0x30
 800c272:	b2d2      	uxtb	r2, r2
 800c274:	701a      	strb	r2, [r3, #0]
 800c276:	e00a      	b.n	800c28e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	0f1b      	lsrs	r3, r3, #28
 800c27c:	b2da      	uxtb	r2, r3
 800c27e:	7dfb      	ldrb	r3, [r7, #23]
 800c280:	005b      	lsls	r3, r3, #1
 800c282:	4619      	mov	r1, r3
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	440b      	add	r3, r1
 800c288:	3237      	adds	r2, #55	; 0x37
 800c28a:	b2d2      	uxtb	r2, r2
 800c28c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	011b      	lsls	r3, r3, #4
 800c292:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c294:	7dfb      	ldrb	r3, [r7, #23]
 800c296:	005b      	lsls	r3, r3, #1
 800c298:	3301      	adds	r3, #1
 800c29a:	68ba      	ldr	r2, [r7, #8]
 800c29c:	4413      	add	r3, r2
 800c29e:	2200      	movs	r2, #0
 800c2a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c2a2:	7dfb      	ldrb	r3, [r7, #23]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	75fb      	strb	r3, [r7, #23]
 800c2a8:	7dfa      	ldrb	r2, [r7, #23]
 800c2aa:	79fb      	ldrb	r3, [r7, #7]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d3d3      	bcc.n	800c258 <IntToUnicode+0x18>
  }
}
 800c2b0:	bf00      	nop
 800c2b2:	bf00      	nop
 800c2b4:	371c      	adds	r7, #28
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr
	...

0800c2c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b08a      	sub	sp, #40	; 0x28
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2c8:	f107 0314 	add.w	r3, r7, #20
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	601a      	str	r2, [r3, #0]
 800c2d0:	605a      	str	r2, [r3, #4]
 800c2d2:	609a      	str	r2, [r3, #8]
 800c2d4:	60da      	str	r2, [r3, #12]
 800c2d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2e0:	d13a      	bne.n	800c358 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	613b      	str	r3, [r7, #16]
 800c2e6:	4b1e      	ldr	r3, [pc, #120]	; (800c360 <HAL_PCD_MspInit+0xa0>)
 800c2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ea:	4a1d      	ldr	r2, [pc, #116]	; (800c360 <HAL_PCD_MspInit+0xa0>)
 800c2ec:	f043 0301 	orr.w	r3, r3, #1
 800c2f0:	6313      	str	r3, [r2, #48]	; 0x30
 800c2f2:	4b1b      	ldr	r3, [pc, #108]	; (800c360 <HAL_PCD_MspInit+0xa0>)
 800c2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2f6:	f003 0301 	and.w	r3, r3, #1
 800c2fa:	613b      	str	r3, [r7, #16]
 800c2fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c2fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c304:	2302      	movs	r3, #2
 800c306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c308:	2300      	movs	r3, #0
 800c30a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c30c:	2303      	movs	r3, #3
 800c30e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c310:	230a      	movs	r3, #10
 800c312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c314:	f107 0314 	add.w	r3, r7, #20
 800c318:	4619      	mov	r1, r3
 800c31a:	4812      	ldr	r0, [pc, #72]	; (800c364 <HAL_PCD_MspInit+0xa4>)
 800c31c:	f7f8 fefa 	bl	8005114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c320:	4b0f      	ldr	r3, [pc, #60]	; (800c360 <HAL_PCD_MspInit+0xa0>)
 800c322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c324:	4a0e      	ldr	r2, [pc, #56]	; (800c360 <HAL_PCD_MspInit+0xa0>)
 800c326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c32a:	6353      	str	r3, [r2, #52]	; 0x34
 800c32c:	2300      	movs	r3, #0
 800c32e:	60fb      	str	r3, [r7, #12]
 800c330:	4b0b      	ldr	r3, [pc, #44]	; (800c360 <HAL_PCD_MspInit+0xa0>)
 800c332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c334:	4a0a      	ldr	r2, [pc, #40]	; (800c360 <HAL_PCD_MspInit+0xa0>)
 800c336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c33a:	6453      	str	r3, [r2, #68]	; 0x44
 800c33c:	4b08      	ldr	r3, [pc, #32]	; (800c360 <HAL_PCD_MspInit+0xa0>)
 800c33e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c344:	60fb      	str	r3, [r7, #12]
 800c346:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c348:	2200      	movs	r2, #0
 800c34a:	2100      	movs	r1, #0
 800c34c:	2043      	movs	r0, #67	; 0x43
 800c34e:	f7f8 fc90 	bl	8004c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c352:	2043      	movs	r0, #67	; 0x43
 800c354:	f7f8 fca9 	bl	8004caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c358:	bf00      	nop
 800c35a:	3728      	adds	r7, #40	; 0x28
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	40023800 	.word	0x40023800
 800c364:	40020000 	.word	0x40020000

0800c368 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800c37c:	4619      	mov	r1, r3
 800c37e:	4610      	mov	r0, r2
 800c380:	f7fe fb4d 	bl	800aa1e <USBD_LL_SetupStage>
}
 800c384:	bf00      	nop
 800c386:	3708      	adds	r7, #8
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b082      	sub	sp, #8
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	460b      	mov	r3, r1
 800c396:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800c39e:	78fa      	ldrb	r2, [r7, #3]
 800c3a0:	6879      	ldr	r1, [r7, #4]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	00db      	lsls	r3, r3, #3
 800c3a6:	4413      	add	r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	440b      	add	r3, r1
 800c3ac:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	78fb      	ldrb	r3, [r7, #3]
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	f7fe fb87 	bl	800aac8 <USBD_LL_DataOutStage>
}
 800c3ba:	bf00      	nop
 800c3bc:	3708      	adds	r7, #8
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b082      	sub	sp, #8
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800c3d4:	78fa      	ldrb	r2, [r7, #3]
 800c3d6:	6879      	ldr	r1, [r7, #4]
 800c3d8:	4613      	mov	r3, r2
 800c3da:	00db      	lsls	r3, r3, #3
 800c3dc:	4413      	add	r3, r2
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	440b      	add	r3, r1
 800c3e2:	3320      	adds	r3, #32
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	78fb      	ldrb	r3, [r7, #3]
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	f7fe fc20 	bl	800ac2e <USBD_LL_DataInStage>
}
 800c3ee:	bf00      	nop
 800c3f0:	3708      	adds	r7, #8
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b082      	sub	sp, #8
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c404:	4618      	mov	r0, r3
 800c406:	f7fe fd5a 	bl	800aebe <USBD_LL_SOF>
}
 800c40a:	bf00      	nop
 800c40c:	3708      	adds	r7, #8
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b084      	sub	sp, #16
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c41a:	2301      	movs	r3, #1
 800c41c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	79db      	ldrb	r3, [r3, #7]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d102      	bne.n	800c42c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c426:	2300      	movs	r3, #0
 800c428:	73fb      	strb	r3, [r7, #15]
 800c42a:	e008      	b.n	800c43e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	79db      	ldrb	r3, [r3, #7]
 800c430:	2b02      	cmp	r3, #2
 800c432:	d102      	bne.n	800c43a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c434:	2301      	movs	r3, #1
 800c436:	73fb      	strb	r3, [r7, #15]
 800c438:	e001      	b.n	800c43e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c43a:	f7f7 fc3f 	bl	8003cbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c444:	7bfa      	ldrb	r2, [r7, #15]
 800c446:	4611      	mov	r1, r2
 800c448:	4618      	mov	r0, r3
 800c44a:	f7fe fcf4 	bl	800ae36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c454:	4618      	mov	r0, r3
 800c456:	f7fe fc9c 	bl	800ad92 <USBD_LL_Reset>
}
 800c45a:	bf00      	nop
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
	...

0800c464 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c472:	4618      	mov	r0, r3
 800c474:	f7fe fcef 	bl	800ae56 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	6812      	ldr	r2, [r2, #0]
 800c486:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c48a:	f043 0301 	orr.w	r3, r3, #1
 800c48e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	7adb      	ldrb	r3, [r3, #11]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d005      	beq.n	800c4a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c498:	4b04      	ldr	r3, [pc, #16]	; (800c4ac <HAL_PCD_SuspendCallback+0x48>)
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	4a03      	ldr	r2, [pc, #12]	; (800c4ac <HAL_PCD_SuspendCallback+0x48>)
 800c49e:	f043 0306 	orr.w	r3, r3, #6
 800c4a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c4a4:	bf00      	nop
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	e000ed00 	.word	0xe000ed00

0800c4b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fe fce5 	bl	800ae8e <USBD_LL_Resume>
}
 800c4c4:	bf00      	nop
 800c4c6:	3708      	adds	r7, #8
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c4de:	78fa      	ldrb	r2, [r7, #3]
 800c4e0:	4611      	mov	r1, r2
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7fe fd3d 	bl	800af62 <USBD_LL_IsoOUTIncomplete>
}
 800c4e8:	bf00      	nop
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c502:	78fa      	ldrb	r2, [r7, #3]
 800c504:	4611      	mov	r1, r2
 800c506:	4618      	mov	r0, r3
 800c508:	f7fe fcf9 	bl	800aefe <USBD_LL_IsoINIncomplete>
}
 800c50c:	bf00      	nop
 800c50e:	3708      	adds	r7, #8
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c522:	4618      	mov	r0, r3
 800c524:	f7fe fd4f 	bl	800afc6 <USBD_LL_DevConnected>
}
 800c528:	bf00      	nop
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c53e:	4618      	mov	r0, r3
 800c540:	f7fe fd4c 	bl	800afdc <USBD_LL_DevDisconnected>
}
 800c544:	bf00      	nop
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d13c      	bne.n	800c5d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c55c:	4a20      	ldr	r2, [pc, #128]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	4a1e      	ldr	r2, [pc, #120]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c568:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c56c:	4b1c      	ldr	r3, [pc, #112]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c56e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c572:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c574:	4b1a      	ldr	r3, [pc, #104]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c576:	2204      	movs	r2, #4
 800c578:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c57a:	4b19      	ldr	r3, [pc, #100]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c57c:	2202      	movs	r2, #2
 800c57e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c580:	4b17      	ldr	r3, [pc, #92]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c582:	2200      	movs	r2, #0
 800c584:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c586:	4b16      	ldr	r3, [pc, #88]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c588:	2202      	movs	r2, #2
 800c58a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c58c:	4b14      	ldr	r3, [pc, #80]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c58e:	2200      	movs	r2, #0
 800c590:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c592:	4b13      	ldr	r3, [pc, #76]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c594:	2200      	movs	r2, #0
 800c596:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c598:	4b11      	ldr	r3, [pc, #68]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c59a:	2200      	movs	r2, #0
 800c59c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c59e:	4b10      	ldr	r3, [pc, #64]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c5a4:	4b0e      	ldr	r3, [pc, #56]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c5aa:	480d      	ldr	r0, [pc, #52]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c5ac:	f7f9 fd65 	bl	800607a <HAL_PCD_Init>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d001      	beq.n	800c5ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c5b6:	f7f7 fb81 	bl	8003cbc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c5ba:	2180      	movs	r1, #128	; 0x80
 800c5bc:	4808      	ldr	r0, [pc, #32]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c5be:	f7fa ff90 	bl	80074e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c5c2:	2240      	movs	r2, #64	; 0x40
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	4806      	ldr	r0, [pc, #24]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c5c8:	f7fa ff44 	bl	8007454 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c5cc:	2280      	movs	r2, #128	; 0x80
 800c5ce:	2101      	movs	r1, #1
 800c5d0:	4803      	ldr	r0, [pc, #12]	; (800c5e0 <USBD_LL_Init+0x94>)
 800c5d2:	f7fa ff3f 	bl	8007454 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	20001bdc 	.word	0x20001bdc

0800c5e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7f9 fe4c 	bl	8006298 <HAL_PCD_Start>
 800c600:	4603      	mov	r3, r0
 800c602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c604:	7bfb      	ldrb	r3, [r7, #15]
 800c606:	4618      	mov	r0, r3
 800c608:	f000 f942 	bl	800c890 <USBD_Get_USB_Status>
 800c60c:	4603      	mov	r3, r0
 800c60e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c610:	7bbb      	ldrb	r3, [r7, #14]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b084      	sub	sp, #16
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
 800c622:	4608      	mov	r0, r1
 800c624:	4611      	mov	r1, r2
 800c626:	461a      	mov	r2, r3
 800c628:	4603      	mov	r3, r0
 800c62a:	70fb      	strb	r3, [r7, #3]
 800c62c:	460b      	mov	r3, r1
 800c62e:	70bb      	strb	r3, [r7, #2]
 800c630:	4613      	mov	r3, r2
 800c632:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c634:	2300      	movs	r3, #0
 800c636:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c638:	2300      	movs	r3, #0
 800c63a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c642:	78bb      	ldrb	r3, [r7, #2]
 800c644:	883a      	ldrh	r2, [r7, #0]
 800c646:	78f9      	ldrb	r1, [r7, #3]
 800c648:	f7fa fb20 	bl	8006c8c <HAL_PCD_EP_Open>
 800c64c:	4603      	mov	r3, r0
 800c64e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c650:	7bfb      	ldrb	r3, [r7, #15]
 800c652:	4618      	mov	r0, r3
 800c654:	f000 f91c 	bl	800c890 <USBD_Get_USB_Status>
 800c658:	4603      	mov	r3, r0
 800c65a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c65c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b084      	sub	sp, #16
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
 800c66e:	460b      	mov	r3, r1
 800c670:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c672:	2300      	movs	r3, #0
 800c674:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c676:	2300      	movs	r3, #0
 800c678:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c680:	78fa      	ldrb	r2, [r7, #3]
 800c682:	4611      	mov	r1, r2
 800c684:	4618      	mov	r0, r3
 800c686:	f7fa fb69 	bl	8006d5c <HAL_PCD_EP_Close>
 800c68a:	4603      	mov	r3, r0
 800c68c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c68e:	7bfb      	ldrb	r3, [r7, #15]
 800c690:	4618      	mov	r0, r3
 800c692:	f000 f8fd 	bl	800c890 <USBD_Get_USB_Status>
 800c696:	4603      	mov	r3, r0
 800c698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c69a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3710      	adds	r7, #16
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c6be:	78fa      	ldrb	r2, [r7, #3]
 800c6c0:	4611      	mov	r1, r2
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7fa fc21 	bl	8006f0a <HAL_PCD_EP_SetStall>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6cc:	7bfb      	ldrb	r3, [r7, #15]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 f8de 	bl	800c890 <USBD_Get_USB_Status>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}

0800c6e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6e2:	b580      	push	{r7, lr}
 800c6e4:	b084      	sub	sp, #16
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c6fc:	78fa      	ldrb	r2, [r7, #3]
 800c6fe:	4611      	mov	r1, r2
 800c700:	4618      	mov	r0, r3
 800c702:	f7fa fc65 	bl	8006fd0 <HAL_PCD_EP_ClrStall>
 800c706:	4603      	mov	r3, r0
 800c708:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c70a:	7bfb      	ldrb	r3, [r7, #15]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 f8bf 	bl	800c890 <USBD_Get_USB_Status>
 800c712:	4603      	mov	r3, r0
 800c714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c716:	7bbb      	ldrb	r3, [r7, #14]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3710      	adds	r7, #16
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c720:	b480      	push	{r7}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	460b      	mov	r3, r1
 800c72a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c732:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c734:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	da0b      	bge.n	800c754 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c73c:	78fb      	ldrb	r3, [r7, #3]
 800c73e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c742:	68f9      	ldr	r1, [r7, #12]
 800c744:	4613      	mov	r3, r2
 800c746:	00db      	lsls	r3, r3, #3
 800c748:	4413      	add	r3, r2
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	440b      	add	r3, r1
 800c74e:	3316      	adds	r3, #22
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	e00b      	b.n	800c76c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c754:	78fb      	ldrb	r3, [r7, #3]
 800c756:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c75a:	68f9      	ldr	r1, [r7, #12]
 800c75c:	4613      	mov	r3, r2
 800c75e:	00db      	lsls	r3, r3, #3
 800c760:	4413      	add	r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	440b      	add	r3, r1
 800c766:	f203 2356 	addw	r3, r3, #598	; 0x256
 800c76a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3714      	adds	r7, #20
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	460b      	mov	r3, r1
 800c782:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c784:	2300      	movs	r3, #0
 800c786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c788:	2300      	movs	r3, #0
 800c78a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c792:	78fa      	ldrb	r2, [r7, #3]
 800c794:	4611      	mov	r1, r2
 800c796:	4618      	mov	r0, r3
 800c798:	f7fa fa54 	bl	8006c44 <HAL_PCD_SetAddress>
 800c79c:	4603      	mov	r3, r0
 800c79e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7a0:	7bfb      	ldrb	r3, [r7, #15]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f000 f874 	bl	800c890 <USBD_Get_USB_Status>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b086      	sub	sp, #24
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	60f8      	str	r0, [r7, #12]
 800c7be:	607a      	str	r2, [r7, #4]
 800c7c0:	603b      	str	r3, [r7, #0]
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c7d4:	7af9      	ldrb	r1, [r7, #11]
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	f7fa fb5c 	bl	8006e96 <HAL_PCD_EP_Transmit>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7e2:	7dfb      	ldrb	r3, [r7, #23]
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f000 f853 	bl	800c890 <USBD_Get_USB_Status>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c7ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3718      	adds	r7, #24
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b086      	sub	sp, #24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	607a      	str	r2, [r7, #4]
 800c802:	603b      	str	r3, [r7, #0]
 800c804:	460b      	mov	r3, r1
 800c806:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c808:	2300      	movs	r3, #0
 800c80a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c80c:	2300      	movs	r3, #0
 800c80e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c816:	7af9      	ldrb	r1, [r7, #11]
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	f7fa fae8 	bl	8006df0 <HAL_PCD_EP_Receive>
 800c820:	4603      	mov	r3, r0
 800c822:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c824:	7dfb      	ldrb	r3, [r7, #23]
 800c826:	4618      	mov	r0, r3
 800c828:	f000 f832 	bl	800c890 <USBD_Get_USB_Status>
 800c82c:	4603      	mov	r3, r0
 800c82e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c830:	7dbb      	ldrb	r3, [r7, #22]
}
 800c832:	4618      	mov	r0, r3
 800c834:	3718      	adds	r7, #24
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b082      	sub	sp, #8
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
 800c842:	460b      	mov	r3, r1
 800c844:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c84c:	78fa      	ldrb	r2, [r7, #3]
 800c84e:	4611      	mov	r1, r2
 800c850:	4618      	mov	r0, r3
 800c852:	f7fa fb08 	bl	8006e66 <HAL_PCD_EP_GetRxCount>
 800c856:	4603      	mov	r3, r0
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3708      	adds	r7, #8
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c868:	4b03      	ldr	r3, [pc, #12]	; (800c878 <USBD_static_malloc+0x18>)
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	370c      	adds	r7, #12
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr
 800c876:	bf00      	nop
 800c878:	200020c0 	.word	0x200020c0

0800c87c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b083      	sub	sp, #12
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]

}
 800c884:	bf00      	nop
 800c886:	370c      	adds	r7, #12
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	4603      	mov	r3, r0
 800c898:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c89a:	2300      	movs	r3, #0
 800c89c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c89e:	79fb      	ldrb	r3, [r7, #7]
 800c8a0:	2b03      	cmp	r3, #3
 800c8a2:	d817      	bhi.n	800c8d4 <USBD_Get_USB_Status+0x44>
 800c8a4:	a201      	add	r2, pc, #4	; (adr r2, 800c8ac <USBD_Get_USB_Status+0x1c>)
 800c8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8aa:	bf00      	nop
 800c8ac:	0800c8bd 	.word	0x0800c8bd
 800c8b0:	0800c8c3 	.word	0x0800c8c3
 800c8b4:	0800c8c9 	.word	0x0800c8c9
 800c8b8:	0800c8cf 	.word	0x0800c8cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	73fb      	strb	r3, [r7, #15]
    break;
 800c8c0:	e00b      	b.n	800c8da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c8c2:	2303      	movs	r3, #3
 800c8c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c8c6:	e008      	b.n	800c8da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c8cc:	e005      	b.n	800c8da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c8ce:	2303      	movs	r3, #3
 800c8d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c8d2:	e002      	b.n	800c8da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c8d8:	bf00      	nop
  }
  return usb_status;
 800c8da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3714      	adds	r7, #20
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <__itoa>:
 800c8e8:	1e93      	subs	r3, r2, #2
 800c8ea:	2b22      	cmp	r3, #34	; 0x22
 800c8ec:	b510      	push	{r4, lr}
 800c8ee:	460c      	mov	r4, r1
 800c8f0:	d904      	bls.n	800c8fc <__itoa+0x14>
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	700b      	strb	r3, [r1, #0]
 800c8f6:	461c      	mov	r4, r3
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	bd10      	pop	{r4, pc}
 800c8fc:	2a0a      	cmp	r2, #10
 800c8fe:	d109      	bne.n	800c914 <__itoa+0x2c>
 800c900:	2800      	cmp	r0, #0
 800c902:	da07      	bge.n	800c914 <__itoa+0x2c>
 800c904:	232d      	movs	r3, #45	; 0x2d
 800c906:	700b      	strb	r3, [r1, #0]
 800c908:	4240      	negs	r0, r0
 800c90a:	2101      	movs	r1, #1
 800c90c:	4421      	add	r1, r4
 800c90e:	f000 f805 	bl	800c91c <__utoa>
 800c912:	e7f1      	b.n	800c8f8 <__itoa+0x10>
 800c914:	2100      	movs	r1, #0
 800c916:	e7f9      	b.n	800c90c <__itoa+0x24>

0800c918 <itoa>:
 800c918:	f7ff bfe6 	b.w	800c8e8 <__itoa>

0800c91c <__utoa>:
 800c91c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c91e:	4c1f      	ldr	r4, [pc, #124]	; (800c99c <__utoa+0x80>)
 800c920:	b08b      	sub	sp, #44	; 0x2c
 800c922:	4605      	mov	r5, r0
 800c924:	460b      	mov	r3, r1
 800c926:	466e      	mov	r6, sp
 800c928:	f104 0c20 	add.w	ip, r4, #32
 800c92c:	6820      	ldr	r0, [r4, #0]
 800c92e:	6861      	ldr	r1, [r4, #4]
 800c930:	4637      	mov	r7, r6
 800c932:	c703      	stmia	r7!, {r0, r1}
 800c934:	3408      	adds	r4, #8
 800c936:	4564      	cmp	r4, ip
 800c938:	463e      	mov	r6, r7
 800c93a:	d1f7      	bne.n	800c92c <__utoa+0x10>
 800c93c:	7921      	ldrb	r1, [r4, #4]
 800c93e:	7139      	strb	r1, [r7, #4]
 800c940:	1e91      	subs	r1, r2, #2
 800c942:	6820      	ldr	r0, [r4, #0]
 800c944:	6038      	str	r0, [r7, #0]
 800c946:	2922      	cmp	r1, #34	; 0x22
 800c948:	f04f 0100 	mov.w	r1, #0
 800c94c:	d904      	bls.n	800c958 <__utoa+0x3c>
 800c94e:	7019      	strb	r1, [r3, #0]
 800c950:	460b      	mov	r3, r1
 800c952:	4618      	mov	r0, r3
 800c954:	b00b      	add	sp, #44	; 0x2c
 800c956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c958:	1e58      	subs	r0, r3, #1
 800c95a:	4684      	mov	ip, r0
 800c95c:	fbb5 f7f2 	udiv	r7, r5, r2
 800c960:	fb02 5617 	mls	r6, r2, r7, r5
 800c964:	3628      	adds	r6, #40	; 0x28
 800c966:	446e      	add	r6, sp
 800c968:	460c      	mov	r4, r1
 800c96a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c96e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c972:	462e      	mov	r6, r5
 800c974:	42b2      	cmp	r2, r6
 800c976:	f101 0101 	add.w	r1, r1, #1
 800c97a:	463d      	mov	r5, r7
 800c97c:	d9ee      	bls.n	800c95c <__utoa+0x40>
 800c97e:	2200      	movs	r2, #0
 800c980:	545a      	strb	r2, [r3, r1]
 800c982:	1919      	adds	r1, r3, r4
 800c984:	1aa5      	subs	r5, r4, r2
 800c986:	42aa      	cmp	r2, r5
 800c988:	dae3      	bge.n	800c952 <__utoa+0x36>
 800c98a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c98e:	780e      	ldrb	r6, [r1, #0]
 800c990:	7006      	strb	r6, [r0, #0]
 800c992:	3201      	adds	r2, #1
 800c994:	f801 5901 	strb.w	r5, [r1], #-1
 800c998:	e7f4      	b.n	800c984 <__utoa+0x68>
 800c99a:	bf00      	nop
 800c99c:	0800f5b4 	.word	0x0800f5b4

0800c9a0 <std>:
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	b510      	push	{r4, lr}
 800c9a4:	4604      	mov	r4, r0
 800c9a6:	e9c0 3300 	strd	r3, r3, [r0]
 800c9aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9ae:	6083      	str	r3, [r0, #8]
 800c9b0:	8181      	strh	r1, [r0, #12]
 800c9b2:	6643      	str	r3, [r0, #100]	; 0x64
 800c9b4:	81c2      	strh	r2, [r0, #14]
 800c9b6:	6183      	str	r3, [r0, #24]
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	2208      	movs	r2, #8
 800c9bc:	305c      	adds	r0, #92	; 0x5c
 800c9be:	f000 fa0f 	bl	800cde0 <memset>
 800c9c2:	4b0d      	ldr	r3, [pc, #52]	; (800c9f8 <std+0x58>)
 800c9c4:	6263      	str	r3, [r4, #36]	; 0x24
 800c9c6:	4b0d      	ldr	r3, [pc, #52]	; (800c9fc <std+0x5c>)
 800c9c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c9ca:	4b0d      	ldr	r3, [pc, #52]	; (800ca00 <std+0x60>)
 800c9cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9ce:	4b0d      	ldr	r3, [pc, #52]	; (800ca04 <std+0x64>)
 800c9d0:	6323      	str	r3, [r4, #48]	; 0x30
 800c9d2:	4b0d      	ldr	r3, [pc, #52]	; (800ca08 <std+0x68>)
 800c9d4:	6224      	str	r4, [r4, #32]
 800c9d6:	429c      	cmp	r4, r3
 800c9d8:	d006      	beq.n	800c9e8 <std+0x48>
 800c9da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c9de:	4294      	cmp	r4, r2
 800c9e0:	d002      	beq.n	800c9e8 <std+0x48>
 800c9e2:	33d0      	adds	r3, #208	; 0xd0
 800c9e4:	429c      	cmp	r4, r3
 800c9e6:	d105      	bne.n	800c9f4 <std+0x54>
 800c9e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9f0:	f000 ba6e 	b.w	800ced0 <__retarget_lock_init_recursive>
 800c9f4:	bd10      	pop	{r4, pc}
 800c9f6:	bf00      	nop
 800c9f8:	0800cc11 	.word	0x0800cc11
 800c9fc:	0800cc33 	.word	0x0800cc33
 800ca00:	0800cc6b 	.word	0x0800cc6b
 800ca04:	0800cc8f 	.word	0x0800cc8f
 800ca08:	200022e0 	.word	0x200022e0

0800ca0c <stdio_exit_handler>:
 800ca0c:	4a02      	ldr	r2, [pc, #8]	; (800ca18 <stdio_exit_handler+0xc>)
 800ca0e:	4903      	ldr	r1, [pc, #12]	; (800ca1c <stdio_exit_handler+0x10>)
 800ca10:	4803      	ldr	r0, [pc, #12]	; (800ca20 <stdio_exit_handler+0x14>)
 800ca12:	f000 b869 	b.w	800cae8 <_fwalk_sglue>
 800ca16:	bf00      	nop
 800ca18:	20000110 	.word	0x20000110
 800ca1c:	0800d7a1 	.word	0x0800d7a1
 800ca20:	2000011c 	.word	0x2000011c

0800ca24 <cleanup_stdio>:
 800ca24:	6841      	ldr	r1, [r0, #4]
 800ca26:	4b0c      	ldr	r3, [pc, #48]	; (800ca58 <cleanup_stdio+0x34>)
 800ca28:	4299      	cmp	r1, r3
 800ca2a:	b510      	push	{r4, lr}
 800ca2c:	4604      	mov	r4, r0
 800ca2e:	d001      	beq.n	800ca34 <cleanup_stdio+0x10>
 800ca30:	f000 feb6 	bl	800d7a0 <_fflush_r>
 800ca34:	68a1      	ldr	r1, [r4, #8]
 800ca36:	4b09      	ldr	r3, [pc, #36]	; (800ca5c <cleanup_stdio+0x38>)
 800ca38:	4299      	cmp	r1, r3
 800ca3a:	d002      	beq.n	800ca42 <cleanup_stdio+0x1e>
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	f000 feaf 	bl	800d7a0 <_fflush_r>
 800ca42:	68e1      	ldr	r1, [r4, #12]
 800ca44:	4b06      	ldr	r3, [pc, #24]	; (800ca60 <cleanup_stdio+0x3c>)
 800ca46:	4299      	cmp	r1, r3
 800ca48:	d004      	beq.n	800ca54 <cleanup_stdio+0x30>
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca50:	f000 bea6 	b.w	800d7a0 <_fflush_r>
 800ca54:	bd10      	pop	{r4, pc}
 800ca56:	bf00      	nop
 800ca58:	200022e0 	.word	0x200022e0
 800ca5c:	20002348 	.word	0x20002348
 800ca60:	200023b0 	.word	0x200023b0

0800ca64 <global_stdio_init.part.0>:
 800ca64:	b510      	push	{r4, lr}
 800ca66:	4b0b      	ldr	r3, [pc, #44]	; (800ca94 <global_stdio_init.part.0+0x30>)
 800ca68:	4c0b      	ldr	r4, [pc, #44]	; (800ca98 <global_stdio_init.part.0+0x34>)
 800ca6a:	4a0c      	ldr	r2, [pc, #48]	; (800ca9c <global_stdio_init.part.0+0x38>)
 800ca6c:	601a      	str	r2, [r3, #0]
 800ca6e:	4620      	mov	r0, r4
 800ca70:	2200      	movs	r2, #0
 800ca72:	2104      	movs	r1, #4
 800ca74:	f7ff ff94 	bl	800c9a0 <std>
 800ca78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	2109      	movs	r1, #9
 800ca80:	f7ff ff8e 	bl	800c9a0 <std>
 800ca84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ca88:	2202      	movs	r2, #2
 800ca8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca8e:	2112      	movs	r1, #18
 800ca90:	f7ff bf86 	b.w	800c9a0 <std>
 800ca94:	20002418 	.word	0x20002418
 800ca98:	200022e0 	.word	0x200022e0
 800ca9c:	0800ca0d 	.word	0x0800ca0d

0800caa0 <__sfp_lock_acquire>:
 800caa0:	4801      	ldr	r0, [pc, #4]	; (800caa8 <__sfp_lock_acquire+0x8>)
 800caa2:	f000 ba16 	b.w	800ced2 <__retarget_lock_acquire_recursive>
 800caa6:	bf00      	nop
 800caa8:	20002421 	.word	0x20002421

0800caac <__sfp_lock_release>:
 800caac:	4801      	ldr	r0, [pc, #4]	; (800cab4 <__sfp_lock_release+0x8>)
 800caae:	f000 ba11 	b.w	800ced4 <__retarget_lock_release_recursive>
 800cab2:	bf00      	nop
 800cab4:	20002421 	.word	0x20002421

0800cab8 <__sinit>:
 800cab8:	b510      	push	{r4, lr}
 800caba:	4604      	mov	r4, r0
 800cabc:	f7ff fff0 	bl	800caa0 <__sfp_lock_acquire>
 800cac0:	6a23      	ldr	r3, [r4, #32]
 800cac2:	b11b      	cbz	r3, 800cacc <__sinit+0x14>
 800cac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cac8:	f7ff bff0 	b.w	800caac <__sfp_lock_release>
 800cacc:	4b04      	ldr	r3, [pc, #16]	; (800cae0 <__sinit+0x28>)
 800cace:	6223      	str	r3, [r4, #32]
 800cad0:	4b04      	ldr	r3, [pc, #16]	; (800cae4 <__sinit+0x2c>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d1f5      	bne.n	800cac4 <__sinit+0xc>
 800cad8:	f7ff ffc4 	bl	800ca64 <global_stdio_init.part.0>
 800cadc:	e7f2      	b.n	800cac4 <__sinit+0xc>
 800cade:	bf00      	nop
 800cae0:	0800ca25 	.word	0x0800ca25
 800cae4:	20002418 	.word	0x20002418

0800cae8 <_fwalk_sglue>:
 800cae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caec:	4607      	mov	r7, r0
 800caee:	4688      	mov	r8, r1
 800caf0:	4614      	mov	r4, r2
 800caf2:	2600      	movs	r6, #0
 800caf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800caf8:	f1b9 0901 	subs.w	r9, r9, #1
 800cafc:	d505      	bpl.n	800cb0a <_fwalk_sglue+0x22>
 800cafe:	6824      	ldr	r4, [r4, #0]
 800cb00:	2c00      	cmp	r4, #0
 800cb02:	d1f7      	bne.n	800caf4 <_fwalk_sglue+0xc>
 800cb04:	4630      	mov	r0, r6
 800cb06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb0a:	89ab      	ldrh	r3, [r5, #12]
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d907      	bls.n	800cb20 <_fwalk_sglue+0x38>
 800cb10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb14:	3301      	adds	r3, #1
 800cb16:	d003      	beq.n	800cb20 <_fwalk_sglue+0x38>
 800cb18:	4629      	mov	r1, r5
 800cb1a:	4638      	mov	r0, r7
 800cb1c:	47c0      	blx	r8
 800cb1e:	4306      	orrs	r6, r0
 800cb20:	3568      	adds	r5, #104	; 0x68
 800cb22:	e7e9      	b.n	800caf8 <_fwalk_sglue+0x10>

0800cb24 <iprintf>:
 800cb24:	b40f      	push	{r0, r1, r2, r3}
 800cb26:	b507      	push	{r0, r1, r2, lr}
 800cb28:	4906      	ldr	r1, [pc, #24]	; (800cb44 <iprintf+0x20>)
 800cb2a:	ab04      	add	r3, sp, #16
 800cb2c:	6808      	ldr	r0, [r1, #0]
 800cb2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb32:	6881      	ldr	r1, [r0, #8]
 800cb34:	9301      	str	r3, [sp, #4]
 800cb36:	f000 fb03 	bl	800d140 <_vfiprintf_r>
 800cb3a:	b003      	add	sp, #12
 800cb3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb40:	b004      	add	sp, #16
 800cb42:	4770      	bx	lr
 800cb44:	20000168 	.word	0x20000168

0800cb48 <putchar>:
 800cb48:	4b02      	ldr	r3, [pc, #8]	; (800cb54 <putchar+0xc>)
 800cb4a:	4601      	mov	r1, r0
 800cb4c:	6818      	ldr	r0, [r3, #0]
 800cb4e:	6882      	ldr	r2, [r0, #8]
 800cb50:	f000 beb0 	b.w	800d8b4 <_putc_r>
 800cb54:	20000168 	.word	0x20000168

0800cb58 <_puts_r>:
 800cb58:	6a03      	ldr	r3, [r0, #32]
 800cb5a:	b570      	push	{r4, r5, r6, lr}
 800cb5c:	6884      	ldr	r4, [r0, #8]
 800cb5e:	4605      	mov	r5, r0
 800cb60:	460e      	mov	r6, r1
 800cb62:	b90b      	cbnz	r3, 800cb68 <_puts_r+0x10>
 800cb64:	f7ff ffa8 	bl	800cab8 <__sinit>
 800cb68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb6a:	07db      	lsls	r3, r3, #31
 800cb6c:	d405      	bmi.n	800cb7a <_puts_r+0x22>
 800cb6e:	89a3      	ldrh	r3, [r4, #12]
 800cb70:	0598      	lsls	r0, r3, #22
 800cb72:	d402      	bmi.n	800cb7a <_puts_r+0x22>
 800cb74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb76:	f000 f9ac 	bl	800ced2 <__retarget_lock_acquire_recursive>
 800cb7a:	89a3      	ldrh	r3, [r4, #12]
 800cb7c:	0719      	lsls	r1, r3, #28
 800cb7e:	d513      	bpl.n	800cba8 <_puts_r+0x50>
 800cb80:	6923      	ldr	r3, [r4, #16]
 800cb82:	b18b      	cbz	r3, 800cba8 <_puts_r+0x50>
 800cb84:	3e01      	subs	r6, #1
 800cb86:	68a3      	ldr	r3, [r4, #8]
 800cb88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cb8c:	3b01      	subs	r3, #1
 800cb8e:	60a3      	str	r3, [r4, #8]
 800cb90:	b9e9      	cbnz	r1, 800cbce <_puts_r+0x76>
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	da2e      	bge.n	800cbf4 <_puts_r+0x9c>
 800cb96:	4622      	mov	r2, r4
 800cb98:	210a      	movs	r1, #10
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	f000 f87b 	bl	800cc96 <__swbuf_r>
 800cba0:	3001      	adds	r0, #1
 800cba2:	d007      	beq.n	800cbb4 <_puts_r+0x5c>
 800cba4:	250a      	movs	r5, #10
 800cba6:	e007      	b.n	800cbb8 <_puts_r+0x60>
 800cba8:	4621      	mov	r1, r4
 800cbaa:	4628      	mov	r0, r5
 800cbac:	f000 f8b0 	bl	800cd10 <__swsetup_r>
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	d0e7      	beq.n	800cb84 <_puts_r+0x2c>
 800cbb4:	f04f 35ff 	mov.w	r5, #4294967295
 800cbb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbba:	07da      	lsls	r2, r3, #31
 800cbbc:	d405      	bmi.n	800cbca <_puts_r+0x72>
 800cbbe:	89a3      	ldrh	r3, [r4, #12]
 800cbc0:	059b      	lsls	r3, r3, #22
 800cbc2:	d402      	bmi.n	800cbca <_puts_r+0x72>
 800cbc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbc6:	f000 f985 	bl	800ced4 <__retarget_lock_release_recursive>
 800cbca:	4628      	mov	r0, r5
 800cbcc:	bd70      	pop	{r4, r5, r6, pc}
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	da04      	bge.n	800cbdc <_puts_r+0x84>
 800cbd2:	69a2      	ldr	r2, [r4, #24]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	dc06      	bgt.n	800cbe6 <_puts_r+0x8e>
 800cbd8:	290a      	cmp	r1, #10
 800cbda:	d004      	beq.n	800cbe6 <_puts_r+0x8e>
 800cbdc:	6823      	ldr	r3, [r4, #0]
 800cbde:	1c5a      	adds	r2, r3, #1
 800cbe0:	6022      	str	r2, [r4, #0]
 800cbe2:	7019      	strb	r1, [r3, #0]
 800cbe4:	e7cf      	b.n	800cb86 <_puts_r+0x2e>
 800cbe6:	4622      	mov	r2, r4
 800cbe8:	4628      	mov	r0, r5
 800cbea:	f000 f854 	bl	800cc96 <__swbuf_r>
 800cbee:	3001      	adds	r0, #1
 800cbf0:	d1c9      	bne.n	800cb86 <_puts_r+0x2e>
 800cbf2:	e7df      	b.n	800cbb4 <_puts_r+0x5c>
 800cbf4:	6823      	ldr	r3, [r4, #0]
 800cbf6:	250a      	movs	r5, #10
 800cbf8:	1c5a      	adds	r2, r3, #1
 800cbfa:	6022      	str	r2, [r4, #0]
 800cbfc:	701d      	strb	r5, [r3, #0]
 800cbfe:	e7db      	b.n	800cbb8 <_puts_r+0x60>

0800cc00 <puts>:
 800cc00:	4b02      	ldr	r3, [pc, #8]	; (800cc0c <puts+0xc>)
 800cc02:	4601      	mov	r1, r0
 800cc04:	6818      	ldr	r0, [r3, #0]
 800cc06:	f7ff bfa7 	b.w	800cb58 <_puts_r>
 800cc0a:	bf00      	nop
 800cc0c:	20000168 	.word	0x20000168

0800cc10 <__sread>:
 800cc10:	b510      	push	{r4, lr}
 800cc12:	460c      	mov	r4, r1
 800cc14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc18:	f000 f90c 	bl	800ce34 <_read_r>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	bfab      	itete	ge
 800cc20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc22:	89a3      	ldrhlt	r3, [r4, #12]
 800cc24:	181b      	addge	r3, r3, r0
 800cc26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc2a:	bfac      	ite	ge
 800cc2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc2e:	81a3      	strhlt	r3, [r4, #12]
 800cc30:	bd10      	pop	{r4, pc}

0800cc32 <__swrite>:
 800cc32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc36:	461f      	mov	r7, r3
 800cc38:	898b      	ldrh	r3, [r1, #12]
 800cc3a:	05db      	lsls	r3, r3, #23
 800cc3c:	4605      	mov	r5, r0
 800cc3e:	460c      	mov	r4, r1
 800cc40:	4616      	mov	r6, r2
 800cc42:	d505      	bpl.n	800cc50 <__swrite+0x1e>
 800cc44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc48:	2302      	movs	r3, #2
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f000 f8e0 	bl	800ce10 <_lseek_r>
 800cc50:	89a3      	ldrh	r3, [r4, #12]
 800cc52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc5a:	81a3      	strh	r3, [r4, #12]
 800cc5c:	4632      	mov	r2, r6
 800cc5e:	463b      	mov	r3, r7
 800cc60:	4628      	mov	r0, r5
 800cc62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc66:	f000 b8f7 	b.w	800ce58 <_write_r>

0800cc6a <__sseek>:
 800cc6a:	b510      	push	{r4, lr}
 800cc6c:	460c      	mov	r4, r1
 800cc6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc72:	f000 f8cd 	bl	800ce10 <_lseek_r>
 800cc76:	1c43      	adds	r3, r0, #1
 800cc78:	89a3      	ldrh	r3, [r4, #12]
 800cc7a:	bf15      	itete	ne
 800cc7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc86:	81a3      	strheq	r3, [r4, #12]
 800cc88:	bf18      	it	ne
 800cc8a:	81a3      	strhne	r3, [r4, #12]
 800cc8c:	bd10      	pop	{r4, pc}

0800cc8e <__sclose>:
 800cc8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc92:	f000 b8ad 	b.w	800cdf0 <_close_r>

0800cc96 <__swbuf_r>:
 800cc96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc98:	460e      	mov	r6, r1
 800cc9a:	4614      	mov	r4, r2
 800cc9c:	4605      	mov	r5, r0
 800cc9e:	b118      	cbz	r0, 800cca8 <__swbuf_r+0x12>
 800cca0:	6a03      	ldr	r3, [r0, #32]
 800cca2:	b90b      	cbnz	r3, 800cca8 <__swbuf_r+0x12>
 800cca4:	f7ff ff08 	bl	800cab8 <__sinit>
 800cca8:	69a3      	ldr	r3, [r4, #24]
 800ccaa:	60a3      	str	r3, [r4, #8]
 800ccac:	89a3      	ldrh	r3, [r4, #12]
 800ccae:	071a      	lsls	r2, r3, #28
 800ccb0:	d525      	bpl.n	800ccfe <__swbuf_r+0x68>
 800ccb2:	6923      	ldr	r3, [r4, #16]
 800ccb4:	b31b      	cbz	r3, 800ccfe <__swbuf_r+0x68>
 800ccb6:	6823      	ldr	r3, [r4, #0]
 800ccb8:	6922      	ldr	r2, [r4, #16]
 800ccba:	1a98      	subs	r0, r3, r2
 800ccbc:	6963      	ldr	r3, [r4, #20]
 800ccbe:	b2f6      	uxtb	r6, r6
 800ccc0:	4283      	cmp	r3, r0
 800ccc2:	4637      	mov	r7, r6
 800ccc4:	dc04      	bgt.n	800ccd0 <__swbuf_r+0x3a>
 800ccc6:	4621      	mov	r1, r4
 800ccc8:	4628      	mov	r0, r5
 800ccca:	f000 fd69 	bl	800d7a0 <_fflush_r>
 800ccce:	b9e0      	cbnz	r0, 800cd0a <__swbuf_r+0x74>
 800ccd0:	68a3      	ldr	r3, [r4, #8]
 800ccd2:	3b01      	subs	r3, #1
 800ccd4:	60a3      	str	r3, [r4, #8]
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	1c5a      	adds	r2, r3, #1
 800ccda:	6022      	str	r2, [r4, #0]
 800ccdc:	701e      	strb	r6, [r3, #0]
 800ccde:	6962      	ldr	r2, [r4, #20]
 800cce0:	1c43      	adds	r3, r0, #1
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d004      	beq.n	800ccf0 <__swbuf_r+0x5a>
 800cce6:	89a3      	ldrh	r3, [r4, #12]
 800cce8:	07db      	lsls	r3, r3, #31
 800ccea:	d506      	bpl.n	800ccfa <__swbuf_r+0x64>
 800ccec:	2e0a      	cmp	r6, #10
 800ccee:	d104      	bne.n	800ccfa <__swbuf_r+0x64>
 800ccf0:	4621      	mov	r1, r4
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	f000 fd54 	bl	800d7a0 <_fflush_r>
 800ccf8:	b938      	cbnz	r0, 800cd0a <__swbuf_r+0x74>
 800ccfa:	4638      	mov	r0, r7
 800ccfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccfe:	4621      	mov	r1, r4
 800cd00:	4628      	mov	r0, r5
 800cd02:	f000 f805 	bl	800cd10 <__swsetup_r>
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d0d5      	beq.n	800ccb6 <__swbuf_r+0x20>
 800cd0a:	f04f 37ff 	mov.w	r7, #4294967295
 800cd0e:	e7f4      	b.n	800ccfa <__swbuf_r+0x64>

0800cd10 <__swsetup_r>:
 800cd10:	b538      	push	{r3, r4, r5, lr}
 800cd12:	4b2a      	ldr	r3, [pc, #168]	; (800cdbc <__swsetup_r+0xac>)
 800cd14:	4605      	mov	r5, r0
 800cd16:	6818      	ldr	r0, [r3, #0]
 800cd18:	460c      	mov	r4, r1
 800cd1a:	b118      	cbz	r0, 800cd24 <__swsetup_r+0x14>
 800cd1c:	6a03      	ldr	r3, [r0, #32]
 800cd1e:	b90b      	cbnz	r3, 800cd24 <__swsetup_r+0x14>
 800cd20:	f7ff feca 	bl	800cab8 <__sinit>
 800cd24:	89a3      	ldrh	r3, [r4, #12]
 800cd26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd2a:	0718      	lsls	r0, r3, #28
 800cd2c:	d422      	bmi.n	800cd74 <__swsetup_r+0x64>
 800cd2e:	06d9      	lsls	r1, r3, #27
 800cd30:	d407      	bmi.n	800cd42 <__swsetup_r+0x32>
 800cd32:	2309      	movs	r3, #9
 800cd34:	602b      	str	r3, [r5, #0]
 800cd36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd3a:	81a3      	strh	r3, [r4, #12]
 800cd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd40:	e034      	b.n	800cdac <__swsetup_r+0x9c>
 800cd42:	0758      	lsls	r0, r3, #29
 800cd44:	d512      	bpl.n	800cd6c <__swsetup_r+0x5c>
 800cd46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd48:	b141      	cbz	r1, 800cd5c <__swsetup_r+0x4c>
 800cd4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd4e:	4299      	cmp	r1, r3
 800cd50:	d002      	beq.n	800cd58 <__swsetup_r+0x48>
 800cd52:	4628      	mov	r0, r5
 800cd54:	f000 f8d2 	bl	800cefc <_free_r>
 800cd58:	2300      	movs	r3, #0
 800cd5a:	6363      	str	r3, [r4, #52]	; 0x34
 800cd5c:	89a3      	ldrh	r3, [r4, #12]
 800cd5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd62:	81a3      	strh	r3, [r4, #12]
 800cd64:	2300      	movs	r3, #0
 800cd66:	6063      	str	r3, [r4, #4]
 800cd68:	6923      	ldr	r3, [r4, #16]
 800cd6a:	6023      	str	r3, [r4, #0]
 800cd6c:	89a3      	ldrh	r3, [r4, #12]
 800cd6e:	f043 0308 	orr.w	r3, r3, #8
 800cd72:	81a3      	strh	r3, [r4, #12]
 800cd74:	6923      	ldr	r3, [r4, #16]
 800cd76:	b94b      	cbnz	r3, 800cd8c <__swsetup_r+0x7c>
 800cd78:	89a3      	ldrh	r3, [r4, #12]
 800cd7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd82:	d003      	beq.n	800cd8c <__swsetup_r+0x7c>
 800cd84:	4621      	mov	r1, r4
 800cd86:	4628      	mov	r0, r5
 800cd88:	f000 fd58 	bl	800d83c <__smakebuf_r>
 800cd8c:	89a0      	ldrh	r0, [r4, #12]
 800cd8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd92:	f010 0301 	ands.w	r3, r0, #1
 800cd96:	d00a      	beq.n	800cdae <__swsetup_r+0x9e>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	60a3      	str	r3, [r4, #8]
 800cd9c:	6963      	ldr	r3, [r4, #20]
 800cd9e:	425b      	negs	r3, r3
 800cda0:	61a3      	str	r3, [r4, #24]
 800cda2:	6923      	ldr	r3, [r4, #16]
 800cda4:	b943      	cbnz	r3, 800cdb8 <__swsetup_r+0xa8>
 800cda6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cdaa:	d1c4      	bne.n	800cd36 <__swsetup_r+0x26>
 800cdac:	bd38      	pop	{r3, r4, r5, pc}
 800cdae:	0781      	lsls	r1, r0, #30
 800cdb0:	bf58      	it	pl
 800cdb2:	6963      	ldrpl	r3, [r4, #20]
 800cdb4:	60a3      	str	r3, [r4, #8]
 800cdb6:	e7f4      	b.n	800cda2 <__swsetup_r+0x92>
 800cdb8:	2000      	movs	r0, #0
 800cdba:	e7f7      	b.n	800cdac <__swsetup_r+0x9c>
 800cdbc:	20000168 	.word	0x20000168

0800cdc0 <memcmp>:
 800cdc0:	b510      	push	{r4, lr}
 800cdc2:	3901      	subs	r1, #1
 800cdc4:	4402      	add	r2, r0
 800cdc6:	4290      	cmp	r0, r2
 800cdc8:	d101      	bne.n	800cdce <memcmp+0xe>
 800cdca:	2000      	movs	r0, #0
 800cdcc:	e005      	b.n	800cdda <memcmp+0x1a>
 800cdce:	7803      	ldrb	r3, [r0, #0]
 800cdd0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cdd4:	42a3      	cmp	r3, r4
 800cdd6:	d001      	beq.n	800cddc <memcmp+0x1c>
 800cdd8:	1b18      	subs	r0, r3, r4
 800cdda:	bd10      	pop	{r4, pc}
 800cddc:	3001      	adds	r0, #1
 800cdde:	e7f2      	b.n	800cdc6 <memcmp+0x6>

0800cde0 <memset>:
 800cde0:	4402      	add	r2, r0
 800cde2:	4603      	mov	r3, r0
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d100      	bne.n	800cdea <memset+0xa>
 800cde8:	4770      	bx	lr
 800cdea:	f803 1b01 	strb.w	r1, [r3], #1
 800cdee:	e7f9      	b.n	800cde4 <memset+0x4>

0800cdf0 <_close_r>:
 800cdf0:	b538      	push	{r3, r4, r5, lr}
 800cdf2:	4d06      	ldr	r5, [pc, #24]	; (800ce0c <_close_r+0x1c>)
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	4608      	mov	r0, r1
 800cdfa:	602b      	str	r3, [r5, #0]
 800cdfc:	f7f7 fd21 	bl	8004842 <_close>
 800ce00:	1c43      	adds	r3, r0, #1
 800ce02:	d102      	bne.n	800ce0a <_close_r+0x1a>
 800ce04:	682b      	ldr	r3, [r5, #0]
 800ce06:	b103      	cbz	r3, 800ce0a <_close_r+0x1a>
 800ce08:	6023      	str	r3, [r4, #0]
 800ce0a:	bd38      	pop	{r3, r4, r5, pc}
 800ce0c:	2000241c 	.word	0x2000241c

0800ce10 <_lseek_r>:
 800ce10:	b538      	push	{r3, r4, r5, lr}
 800ce12:	4d07      	ldr	r5, [pc, #28]	; (800ce30 <_lseek_r+0x20>)
 800ce14:	4604      	mov	r4, r0
 800ce16:	4608      	mov	r0, r1
 800ce18:	4611      	mov	r1, r2
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	602a      	str	r2, [r5, #0]
 800ce1e:	461a      	mov	r2, r3
 800ce20:	f7f7 fd36 	bl	8004890 <_lseek>
 800ce24:	1c43      	adds	r3, r0, #1
 800ce26:	d102      	bne.n	800ce2e <_lseek_r+0x1e>
 800ce28:	682b      	ldr	r3, [r5, #0]
 800ce2a:	b103      	cbz	r3, 800ce2e <_lseek_r+0x1e>
 800ce2c:	6023      	str	r3, [r4, #0]
 800ce2e:	bd38      	pop	{r3, r4, r5, pc}
 800ce30:	2000241c 	.word	0x2000241c

0800ce34 <_read_r>:
 800ce34:	b538      	push	{r3, r4, r5, lr}
 800ce36:	4d07      	ldr	r5, [pc, #28]	; (800ce54 <_read_r+0x20>)
 800ce38:	4604      	mov	r4, r0
 800ce3a:	4608      	mov	r0, r1
 800ce3c:	4611      	mov	r1, r2
 800ce3e:	2200      	movs	r2, #0
 800ce40:	602a      	str	r2, [r5, #0]
 800ce42:	461a      	mov	r2, r3
 800ce44:	f7f7 fce0 	bl	8004808 <_read>
 800ce48:	1c43      	adds	r3, r0, #1
 800ce4a:	d102      	bne.n	800ce52 <_read_r+0x1e>
 800ce4c:	682b      	ldr	r3, [r5, #0]
 800ce4e:	b103      	cbz	r3, 800ce52 <_read_r+0x1e>
 800ce50:	6023      	str	r3, [r4, #0]
 800ce52:	bd38      	pop	{r3, r4, r5, pc}
 800ce54:	2000241c 	.word	0x2000241c

0800ce58 <_write_r>:
 800ce58:	b538      	push	{r3, r4, r5, lr}
 800ce5a:	4d07      	ldr	r5, [pc, #28]	; (800ce78 <_write_r+0x20>)
 800ce5c:	4604      	mov	r4, r0
 800ce5e:	4608      	mov	r0, r1
 800ce60:	4611      	mov	r1, r2
 800ce62:	2200      	movs	r2, #0
 800ce64:	602a      	str	r2, [r5, #0]
 800ce66:	461a      	mov	r2, r3
 800ce68:	f7f6 fe8a 	bl	8003b80 <_write>
 800ce6c:	1c43      	adds	r3, r0, #1
 800ce6e:	d102      	bne.n	800ce76 <_write_r+0x1e>
 800ce70:	682b      	ldr	r3, [r5, #0]
 800ce72:	b103      	cbz	r3, 800ce76 <_write_r+0x1e>
 800ce74:	6023      	str	r3, [r4, #0]
 800ce76:	bd38      	pop	{r3, r4, r5, pc}
 800ce78:	2000241c 	.word	0x2000241c

0800ce7c <__errno>:
 800ce7c:	4b01      	ldr	r3, [pc, #4]	; (800ce84 <__errno+0x8>)
 800ce7e:	6818      	ldr	r0, [r3, #0]
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	20000168 	.word	0x20000168

0800ce88 <__libc_init_array>:
 800ce88:	b570      	push	{r4, r5, r6, lr}
 800ce8a:	4d0d      	ldr	r5, [pc, #52]	; (800cec0 <__libc_init_array+0x38>)
 800ce8c:	4c0d      	ldr	r4, [pc, #52]	; (800cec4 <__libc_init_array+0x3c>)
 800ce8e:	1b64      	subs	r4, r4, r5
 800ce90:	10a4      	asrs	r4, r4, #2
 800ce92:	2600      	movs	r6, #0
 800ce94:	42a6      	cmp	r6, r4
 800ce96:	d109      	bne.n	800ceac <__libc_init_array+0x24>
 800ce98:	4d0b      	ldr	r5, [pc, #44]	; (800cec8 <__libc_init_array+0x40>)
 800ce9a:	4c0c      	ldr	r4, [pc, #48]	; (800cecc <__libc_init_array+0x44>)
 800ce9c:	f000 fd70 	bl	800d980 <_init>
 800cea0:	1b64      	subs	r4, r4, r5
 800cea2:	10a4      	asrs	r4, r4, #2
 800cea4:	2600      	movs	r6, #0
 800cea6:	42a6      	cmp	r6, r4
 800cea8:	d105      	bne.n	800ceb6 <__libc_init_array+0x2e>
 800ceaa:	bd70      	pop	{r4, r5, r6, pc}
 800ceac:	f855 3b04 	ldr.w	r3, [r5], #4
 800ceb0:	4798      	blx	r3
 800ceb2:	3601      	adds	r6, #1
 800ceb4:	e7ee      	b.n	800ce94 <__libc_init_array+0xc>
 800ceb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ceba:	4798      	blx	r3
 800cebc:	3601      	adds	r6, #1
 800cebe:	e7f2      	b.n	800cea6 <__libc_init_array+0x1e>
 800cec0:	08010014 	.word	0x08010014
 800cec4:	08010014 	.word	0x08010014
 800cec8:	08010014 	.word	0x08010014
 800cecc:	08010018 	.word	0x08010018

0800ced0 <__retarget_lock_init_recursive>:
 800ced0:	4770      	bx	lr

0800ced2 <__retarget_lock_acquire_recursive>:
 800ced2:	4770      	bx	lr

0800ced4 <__retarget_lock_release_recursive>:
 800ced4:	4770      	bx	lr

0800ced6 <__aeabi_memcpy>:
 800ced6:	f000 b803 	b.w	800cee0 <memcpy>

0800ceda <__aeabi_memclr>:
 800ceda:	2200      	movs	r2, #0
 800cedc:	f7f4 be82 	b.w	8001be4 <__aeabi_memset>

0800cee0 <memcpy>:
 800cee0:	440a      	add	r2, r1
 800cee2:	4291      	cmp	r1, r2
 800cee4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cee8:	d100      	bne.n	800ceec <memcpy+0xc>
 800ceea:	4770      	bx	lr
 800ceec:	b510      	push	{r4, lr}
 800ceee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cef6:	4291      	cmp	r1, r2
 800cef8:	d1f9      	bne.n	800ceee <memcpy+0xe>
 800cefa:	bd10      	pop	{r4, pc}

0800cefc <_free_r>:
 800cefc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cefe:	2900      	cmp	r1, #0
 800cf00:	d044      	beq.n	800cf8c <_free_r+0x90>
 800cf02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf06:	9001      	str	r0, [sp, #4]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f1a1 0404 	sub.w	r4, r1, #4
 800cf0e:	bfb8      	it	lt
 800cf10:	18e4      	addlt	r4, r4, r3
 800cf12:	f000 f8df 	bl	800d0d4 <__malloc_lock>
 800cf16:	4a1e      	ldr	r2, [pc, #120]	; (800cf90 <_free_r+0x94>)
 800cf18:	9801      	ldr	r0, [sp, #4]
 800cf1a:	6813      	ldr	r3, [r2, #0]
 800cf1c:	b933      	cbnz	r3, 800cf2c <_free_r+0x30>
 800cf1e:	6063      	str	r3, [r4, #4]
 800cf20:	6014      	str	r4, [r2, #0]
 800cf22:	b003      	add	sp, #12
 800cf24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf28:	f000 b8da 	b.w	800d0e0 <__malloc_unlock>
 800cf2c:	42a3      	cmp	r3, r4
 800cf2e:	d908      	bls.n	800cf42 <_free_r+0x46>
 800cf30:	6825      	ldr	r5, [r4, #0]
 800cf32:	1961      	adds	r1, r4, r5
 800cf34:	428b      	cmp	r3, r1
 800cf36:	bf01      	itttt	eq
 800cf38:	6819      	ldreq	r1, [r3, #0]
 800cf3a:	685b      	ldreq	r3, [r3, #4]
 800cf3c:	1949      	addeq	r1, r1, r5
 800cf3e:	6021      	streq	r1, [r4, #0]
 800cf40:	e7ed      	b.n	800cf1e <_free_r+0x22>
 800cf42:	461a      	mov	r2, r3
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	b10b      	cbz	r3, 800cf4c <_free_r+0x50>
 800cf48:	42a3      	cmp	r3, r4
 800cf4a:	d9fa      	bls.n	800cf42 <_free_r+0x46>
 800cf4c:	6811      	ldr	r1, [r2, #0]
 800cf4e:	1855      	adds	r5, r2, r1
 800cf50:	42a5      	cmp	r5, r4
 800cf52:	d10b      	bne.n	800cf6c <_free_r+0x70>
 800cf54:	6824      	ldr	r4, [r4, #0]
 800cf56:	4421      	add	r1, r4
 800cf58:	1854      	adds	r4, r2, r1
 800cf5a:	42a3      	cmp	r3, r4
 800cf5c:	6011      	str	r1, [r2, #0]
 800cf5e:	d1e0      	bne.n	800cf22 <_free_r+0x26>
 800cf60:	681c      	ldr	r4, [r3, #0]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	6053      	str	r3, [r2, #4]
 800cf66:	440c      	add	r4, r1
 800cf68:	6014      	str	r4, [r2, #0]
 800cf6a:	e7da      	b.n	800cf22 <_free_r+0x26>
 800cf6c:	d902      	bls.n	800cf74 <_free_r+0x78>
 800cf6e:	230c      	movs	r3, #12
 800cf70:	6003      	str	r3, [r0, #0]
 800cf72:	e7d6      	b.n	800cf22 <_free_r+0x26>
 800cf74:	6825      	ldr	r5, [r4, #0]
 800cf76:	1961      	adds	r1, r4, r5
 800cf78:	428b      	cmp	r3, r1
 800cf7a:	bf04      	itt	eq
 800cf7c:	6819      	ldreq	r1, [r3, #0]
 800cf7e:	685b      	ldreq	r3, [r3, #4]
 800cf80:	6063      	str	r3, [r4, #4]
 800cf82:	bf04      	itt	eq
 800cf84:	1949      	addeq	r1, r1, r5
 800cf86:	6021      	streq	r1, [r4, #0]
 800cf88:	6054      	str	r4, [r2, #4]
 800cf8a:	e7ca      	b.n	800cf22 <_free_r+0x26>
 800cf8c:	b003      	add	sp, #12
 800cf8e:	bd30      	pop	{r4, r5, pc}
 800cf90:	20002424 	.word	0x20002424

0800cf94 <sbrk_aligned>:
 800cf94:	b570      	push	{r4, r5, r6, lr}
 800cf96:	4e0e      	ldr	r6, [pc, #56]	; (800cfd0 <sbrk_aligned+0x3c>)
 800cf98:	460c      	mov	r4, r1
 800cf9a:	6831      	ldr	r1, [r6, #0]
 800cf9c:	4605      	mov	r5, r0
 800cf9e:	b911      	cbnz	r1, 800cfa6 <sbrk_aligned+0x12>
 800cfa0:	f000 fcde 	bl	800d960 <_sbrk_r>
 800cfa4:	6030      	str	r0, [r6, #0]
 800cfa6:	4621      	mov	r1, r4
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	f000 fcd9 	bl	800d960 <_sbrk_r>
 800cfae:	1c43      	adds	r3, r0, #1
 800cfb0:	d00a      	beq.n	800cfc8 <sbrk_aligned+0x34>
 800cfb2:	1cc4      	adds	r4, r0, #3
 800cfb4:	f024 0403 	bic.w	r4, r4, #3
 800cfb8:	42a0      	cmp	r0, r4
 800cfba:	d007      	beq.n	800cfcc <sbrk_aligned+0x38>
 800cfbc:	1a21      	subs	r1, r4, r0
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f000 fcce 	bl	800d960 <_sbrk_r>
 800cfc4:	3001      	adds	r0, #1
 800cfc6:	d101      	bne.n	800cfcc <sbrk_aligned+0x38>
 800cfc8:	f04f 34ff 	mov.w	r4, #4294967295
 800cfcc:	4620      	mov	r0, r4
 800cfce:	bd70      	pop	{r4, r5, r6, pc}
 800cfd0:	20002428 	.word	0x20002428

0800cfd4 <_malloc_r>:
 800cfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfd8:	1ccd      	adds	r5, r1, #3
 800cfda:	f025 0503 	bic.w	r5, r5, #3
 800cfde:	3508      	adds	r5, #8
 800cfe0:	2d0c      	cmp	r5, #12
 800cfe2:	bf38      	it	cc
 800cfe4:	250c      	movcc	r5, #12
 800cfe6:	2d00      	cmp	r5, #0
 800cfe8:	4607      	mov	r7, r0
 800cfea:	db01      	blt.n	800cff0 <_malloc_r+0x1c>
 800cfec:	42a9      	cmp	r1, r5
 800cfee:	d905      	bls.n	800cffc <_malloc_r+0x28>
 800cff0:	230c      	movs	r3, #12
 800cff2:	603b      	str	r3, [r7, #0]
 800cff4:	2600      	movs	r6, #0
 800cff6:	4630      	mov	r0, r6
 800cff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cffc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d0d0 <_malloc_r+0xfc>
 800d000:	f000 f868 	bl	800d0d4 <__malloc_lock>
 800d004:	f8d8 3000 	ldr.w	r3, [r8]
 800d008:	461c      	mov	r4, r3
 800d00a:	bb5c      	cbnz	r4, 800d064 <_malloc_r+0x90>
 800d00c:	4629      	mov	r1, r5
 800d00e:	4638      	mov	r0, r7
 800d010:	f7ff ffc0 	bl	800cf94 <sbrk_aligned>
 800d014:	1c43      	adds	r3, r0, #1
 800d016:	4604      	mov	r4, r0
 800d018:	d155      	bne.n	800d0c6 <_malloc_r+0xf2>
 800d01a:	f8d8 4000 	ldr.w	r4, [r8]
 800d01e:	4626      	mov	r6, r4
 800d020:	2e00      	cmp	r6, #0
 800d022:	d145      	bne.n	800d0b0 <_malloc_r+0xdc>
 800d024:	2c00      	cmp	r4, #0
 800d026:	d048      	beq.n	800d0ba <_malloc_r+0xe6>
 800d028:	6823      	ldr	r3, [r4, #0]
 800d02a:	4631      	mov	r1, r6
 800d02c:	4638      	mov	r0, r7
 800d02e:	eb04 0903 	add.w	r9, r4, r3
 800d032:	f000 fc95 	bl	800d960 <_sbrk_r>
 800d036:	4581      	cmp	r9, r0
 800d038:	d13f      	bne.n	800d0ba <_malloc_r+0xe6>
 800d03a:	6821      	ldr	r1, [r4, #0]
 800d03c:	1a6d      	subs	r5, r5, r1
 800d03e:	4629      	mov	r1, r5
 800d040:	4638      	mov	r0, r7
 800d042:	f7ff ffa7 	bl	800cf94 <sbrk_aligned>
 800d046:	3001      	adds	r0, #1
 800d048:	d037      	beq.n	800d0ba <_malloc_r+0xe6>
 800d04a:	6823      	ldr	r3, [r4, #0]
 800d04c:	442b      	add	r3, r5
 800d04e:	6023      	str	r3, [r4, #0]
 800d050:	f8d8 3000 	ldr.w	r3, [r8]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d038      	beq.n	800d0ca <_malloc_r+0xf6>
 800d058:	685a      	ldr	r2, [r3, #4]
 800d05a:	42a2      	cmp	r2, r4
 800d05c:	d12b      	bne.n	800d0b6 <_malloc_r+0xe2>
 800d05e:	2200      	movs	r2, #0
 800d060:	605a      	str	r2, [r3, #4]
 800d062:	e00f      	b.n	800d084 <_malloc_r+0xb0>
 800d064:	6822      	ldr	r2, [r4, #0]
 800d066:	1b52      	subs	r2, r2, r5
 800d068:	d41f      	bmi.n	800d0aa <_malloc_r+0xd6>
 800d06a:	2a0b      	cmp	r2, #11
 800d06c:	d917      	bls.n	800d09e <_malloc_r+0xca>
 800d06e:	1961      	adds	r1, r4, r5
 800d070:	42a3      	cmp	r3, r4
 800d072:	6025      	str	r5, [r4, #0]
 800d074:	bf18      	it	ne
 800d076:	6059      	strne	r1, [r3, #4]
 800d078:	6863      	ldr	r3, [r4, #4]
 800d07a:	bf08      	it	eq
 800d07c:	f8c8 1000 	streq.w	r1, [r8]
 800d080:	5162      	str	r2, [r4, r5]
 800d082:	604b      	str	r3, [r1, #4]
 800d084:	4638      	mov	r0, r7
 800d086:	f104 060b 	add.w	r6, r4, #11
 800d08a:	f000 f829 	bl	800d0e0 <__malloc_unlock>
 800d08e:	f026 0607 	bic.w	r6, r6, #7
 800d092:	1d23      	adds	r3, r4, #4
 800d094:	1af2      	subs	r2, r6, r3
 800d096:	d0ae      	beq.n	800cff6 <_malloc_r+0x22>
 800d098:	1b9b      	subs	r3, r3, r6
 800d09a:	50a3      	str	r3, [r4, r2]
 800d09c:	e7ab      	b.n	800cff6 <_malloc_r+0x22>
 800d09e:	42a3      	cmp	r3, r4
 800d0a0:	6862      	ldr	r2, [r4, #4]
 800d0a2:	d1dd      	bne.n	800d060 <_malloc_r+0x8c>
 800d0a4:	f8c8 2000 	str.w	r2, [r8]
 800d0a8:	e7ec      	b.n	800d084 <_malloc_r+0xb0>
 800d0aa:	4623      	mov	r3, r4
 800d0ac:	6864      	ldr	r4, [r4, #4]
 800d0ae:	e7ac      	b.n	800d00a <_malloc_r+0x36>
 800d0b0:	4634      	mov	r4, r6
 800d0b2:	6876      	ldr	r6, [r6, #4]
 800d0b4:	e7b4      	b.n	800d020 <_malloc_r+0x4c>
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	e7cc      	b.n	800d054 <_malloc_r+0x80>
 800d0ba:	230c      	movs	r3, #12
 800d0bc:	603b      	str	r3, [r7, #0]
 800d0be:	4638      	mov	r0, r7
 800d0c0:	f000 f80e 	bl	800d0e0 <__malloc_unlock>
 800d0c4:	e797      	b.n	800cff6 <_malloc_r+0x22>
 800d0c6:	6025      	str	r5, [r4, #0]
 800d0c8:	e7dc      	b.n	800d084 <_malloc_r+0xb0>
 800d0ca:	605b      	str	r3, [r3, #4]
 800d0cc:	deff      	udf	#255	; 0xff
 800d0ce:	bf00      	nop
 800d0d0:	20002424 	.word	0x20002424

0800d0d4 <__malloc_lock>:
 800d0d4:	4801      	ldr	r0, [pc, #4]	; (800d0dc <__malloc_lock+0x8>)
 800d0d6:	f7ff befc 	b.w	800ced2 <__retarget_lock_acquire_recursive>
 800d0da:	bf00      	nop
 800d0dc:	20002420 	.word	0x20002420

0800d0e0 <__malloc_unlock>:
 800d0e0:	4801      	ldr	r0, [pc, #4]	; (800d0e8 <__malloc_unlock+0x8>)
 800d0e2:	f7ff bef7 	b.w	800ced4 <__retarget_lock_release_recursive>
 800d0e6:	bf00      	nop
 800d0e8:	20002420 	.word	0x20002420

0800d0ec <__sfputc_r>:
 800d0ec:	6893      	ldr	r3, [r2, #8]
 800d0ee:	3b01      	subs	r3, #1
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	b410      	push	{r4}
 800d0f4:	6093      	str	r3, [r2, #8]
 800d0f6:	da08      	bge.n	800d10a <__sfputc_r+0x1e>
 800d0f8:	6994      	ldr	r4, [r2, #24]
 800d0fa:	42a3      	cmp	r3, r4
 800d0fc:	db01      	blt.n	800d102 <__sfputc_r+0x16>
 800d0fe:	290a      	cmp	r1, #10
 800d100:	d103      	bne.n	800d10a <__sfputc_r+0x1e>
 800d102:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d106:	f7ff bdc6 	b.w	800cc96 <__swbuf_r>
 800d10a:	6813      	ldr	r3, [r2, #0]
 800d10c:	1c58      	adds	r0, r3, #1
 800d10e:	6010      	str	r0, [r2, #0]
 800d110:	7019      	strb	r1, [r3, #0]
 800d112:	4608      	mov	r0, r1
 800d114:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d118:	4770      	bx	lr

0800d11a <__sfputs_r>:
 800d11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d11c:	4606      	mov	r6, r0
 800d11e:	460f      	mov	r7, r1
 800d120:	4614      	mov	r4, r2
 800d122:	18d5      	adds	r5, r2, r3
 800d124:	42ac      	cmp	r4, r5
 800d126:	d101      	bne.n	800d12c <__sfputs_r+0x12>
 800d128:	2000      	movs	r0, #0
 800d12a:	e007      	b.n	800d13c <__sfputs_r+0x22>
 800d12c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d130:	463a      	mov	r2, r7
 800d132:	4630      	mov	r0, r6
 800d134:	f7ff ffda 	bl	800d0ec <__sfputc_r>
 800d138:	1c43      	adds	r3, r0, #1
 800d13a:	d1f3      	bne.n	800d124 <__sfputs_r+0xa>
 800d13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d140 <_vfiprintf_r>:
 800d140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d144:	460d      	mov	r5, r1
 800d146:	b09d      	sub	sp, #116	; 0x74
 800d148:	4614      	mov	r4, r2
 800d14a:	4698      	mov	r8, r3
 800d14c:	4606      	mov	r6, r0
 800d14e:	b118      	cbz	r0, 800d158 <_vfiprintf_r+0x18>
 800d150:	6a03      	ldr	r3, [r0, #32]
 800d152:	b90b      	cbnz	r3, 800d158 <_vfiprintf_r+0x18>
 800d154:	f7ff fcb0 	bl	800cab8 <__sinit>
 800d158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d15a:	07d9      	lsls	r1, r3, #31
 800d15c:	d405      	bmi.n	800d16a <_vfiprintf_r+0x2a>
 800d15e:	89ab      	ldrh	r3, [r5, #12]
 800d160:	059a      	lsls	r2, r3, #22
 800d162:	d402      	bmi.n	800d16a <_vfiprintf_r+0x2a>
 800d164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d166:	f7ff feb4 	bl	800ced2 <__retarget_lock_acquire_recursive>
 800d16a:	89ab      	ldrh	r3, [r5, #12]
 800d16c:	071b      	lsls	r3, r3, #28
 800d16e:	d501      	bpl.n	800d174 <_vfiprintf_r+0x34>
 800d170:	692b      	ldr	r3, [r5, #16]
 800d172:	b99b      	cbnz	r3, 800d19c <_vfiprintf_r+0x5c>
 800d174:	4629      	mov	r1, r5
 800d176:	4630      	mov	r0, r6
 800d178:	f7ff fdca 	bl	800cd10 <__swsetup_r>
 800d17c:	b170      	cbz	r0, 800d19c <_vfiprintf_r+0x5c>
 800d17e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d180:	07dc      	lsls	r4, r3, #31
 800d182:	d504      	bpl.n	800d18e <_vfiprintf_r+0x4e>
 800d184:	f04f 30ff 	mov.w	r0, #4294967295
 800d188:	b01d      	add	sp, #116	; 0x74
 800d18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d18e:	89ab      	ldrh	r3, [r5, #12]
 800d190:	0598      	lsls	r0, r3, #22
 800d192:	d4f7      	bmi.n	800d184 <_vfiprintf_r+0x44>
 800d194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d196:	f7ff fe9d 	bl	800ced4 <__retarget_lock_release_recursive>
 800d19a:	e7f3      	b.n	800d184 <_vfiprintf_r+0x44>
 800d19c:	2300      	movs	r3, #0
 800d19e:	9309      	str	r3, [sp, #36]	; 0x24
 800d1a0:	2320      	movs	r3, #32
 800d1a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1aa:	2330      	movs	r3, #48	; 0x30
 800d1ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d360 <_vfiprintf_r+0x220>
 800d1b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1b4:	f04f 0901 	mov.w	r9, #1
 800d1b8:	4623      	mov	r3, r4
 800d1ba:	469a      	mov	sl, r3
 800d1bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1c0:	b10a      	cbz	r2, 800d1c6 <_vfiprintf_r+0x86>
 800d1c2:	2a25      	cmp	r2, #37	; 0x25
 800d1c4:	d1f9      	bne.n	800d1ba <_vfiprintf_r+0x7a>
 800d1c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d1ca:	d00b      	beq.n	800d1e4 <_vfiprintf_r+0xa4>
 800d1cc:	465b      	mov	r3, fp
 800d1ce:	4622      	mov	r2, r4
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	4630      	mov	r0, r6
 800d1d4:	f7ff ffa1 	bl	800d11a <__sfputs_r>
 800d1d8:	3001      	adds	r0, #1
 800d1da:	f000 80a9 	beq.w	800d330 <_vfiprintf_r+0x1f0>
 800d1de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1e0:	445a      	add	r2, fp
 800d1e2:	9209      	str	r2, [sp, #36]	; 0x24
 800d1e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f000 80a1 	beq.w	800d330 <_vfiprintf_r+0x1f0>
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1f8:	f10a 0a01 	add.w	sl, sl, #1
 800d1fc:	9304      	str	r3, [sp, #16]
 800d1fe:	9307      	str	r3, [sp, #28]
 800d200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d204:	931a      	str	r3, [sp, #104]	; 0x68
 800d206:	4654      	mov	r4, sl
 800d208:	2205      	movs	r2, #5
 800d20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d20e:	4854      	ldr	r0, [pc, #336]	; (800d360 <_vfiprintf_r+0x220>)
 800d210:	f7f4 fd36 	bl	8001c80 <memchr>
 800d214:	9a04      	ldr	r2, [sp, #16]
 800d216:	b9d8      	cbnz	r0, 800d250 <_vfiprintf_r+0x110>
 800d218:	06d1      	lsls	r1, r2, #27
 800d21a:	bf44      	itt	mi
 800d21c:	2320      	movmi	r3, #32
 800d21e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d222:	0713      	lsls	r3, r2, #28
 800d224:	bf44      	itt	mi
 800d226:	232b      	movmi	r3, #43	; 0x2b
 800d228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d22c:	f89a 3000 	ldrb.w	r3, [sl]
 800d230:	2b2a      	cmp	r3, #42	; 0x2a
 800d232:	d015      	beq.n	800d260 <_vfiprintf_r+0x120>
 800d234:	9a07      	ldr	r2, [sp, #28]
 800d236:	4654      	mov	r4, sl
 800d238:	2000      	movs	r0, #0
 800d23a:	f04f 0c0a 	mov.w	ip, #10
 800d23e:	4621      	mov	r1, r4
 800d240:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d244:	3b30      	subs	r3, #48	; 0x30
 800d246:	2b09      	cmp	r3, #9
 800d248:	d94d      	bls.n	800d2e6 <_vfiprintf_r+0x1a6>
 800d24a:	b1b0      	cbz	r0, 800d27a <_vfiprintf_r+0x13a>
 800d24c:	9207      	str	r2, [sp, #28]
 800d24e:	e014      	b.n	800d27a <_vfiprintf_r+0x13a>
 800d250:	eba0 0308 	sub.w	r3, r0, r8
 800d254:	fa09 f303 	lsl.w	r3, r9, r3
 800d258:	4313      	orrs	r3, r2
 800d25a:	9304      	str	r3, [sp, #16]
 800d25c:	46a2      	mov	sl, r4
 800d25e:	e7d2      	b.n	800d206 <_vfiprintf_r+0xc6>
 800d260:	9b03      	ldr	r3, [sp, #12]
 800d262:	1d19      	adds	r1, r3, #4
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	9103      	str	r1, [sp, #12]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	bfbb      	ittet	lt
 800d26c:	425b      	neglt	r3, r3
 800d26e:	f042 0202 	orrlt.w	r2, r2, #2
 800d272:	9307      	strge	r3, [sp, #28]
 800d274:	9307      	strlt	r3, [sp, #28]
 800d276:	bfb8      	it	lt
 800d278:	9204      	strlt	r2, [sp, #16]
 800d27a:	7823      	ldrb	r3, [r4, #0]
 800d27c:	2b2e      	cmp	r3, #46	; 0x2e
 800d27e:	d10c      	bne.n	800d29a <_vfiprintf_r+0x15a>
 800d280:	7863      	ldrb	r3, [r4, #1]
 800d282:	2b2a      	cmp	r3, #42	; 0x2a
 800d284:	d134      	bne.n	800d2f0 <_vfiprintf_r+0x1b0>
 800d286:	9b03      	ldr	r3, [sp, #12]
 800d288:	1d1a      	adds	r2, r3, #4
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	9203      	str	r2, [sp, #12]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	bfb8      	it	lt
 800d292:	f04f 33ff 	movlt.w	r3, #4294967295
 800d296:	3402      	adds	r4, #2
 800d298:	9305      	str	r3, [sp, #20]
 800d29a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d370 <_vfiprintf_r+0x230>
 800d29e:	7821      	ldrb	r1, [r4, #0]
 800d2a0:	2203      	movs	r2, #3
 800d2a2:	4650      	mov	r0, sl
 800d2a4:	f7f4 fcec 	bl	8001c80 <memchr>
 800d2a8:	b138      	cbz	r0, 800d2ba <_vfiprintf_r+0x17a>
 800d2aa:	9b04      	ldr	r3, [sp, #16]
 800d2ac:	eba0 000a 	sub.w	r0, r0, sl
 800d2b0:	2240      	movs	r2, #64	; 0x40
 800d2b2:	4082      	lsls	r2, r0
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	3401      	adds	r4, #1
 800d2b8:	9304      	str	r3, [sp, #16]
 800d2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2be:	4829      	ldr	r0, [pc, #164]	; (800d364 <_vfiprintf_r+0x224>)
 800d2c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2c4:	2206      	movs	r2, #6
 800d2c6:	f7f4 fcdb 	bl	8001c80 <memchr>
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	d03f      	beq.n	800d34e <_vfiprintf_r+0x20e>
 800d2ce:	4b26      	ldr	r3, [pc, #152]	; (800d368 <_vfiprintf_r+0x228>)
 800d2d0:	bb1b      	cbnz	r3, 800d31a <_vfiprintf_r+0x1da>
 800d2d2:	9b03      	ldr	r3, [sp, #12]
 800d2d4:	3307      	adds	r3, #7
 800d2d6:	f023 0307 	bic.w	r3, r3, #7
 800d2da:	3308      	adds	r3, #8
 800d2dc:	9303      	str	r3, [sp, #12]
 800d2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e0:	443b      	add	r3, r7
 800d2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2e4:	e768      	b.n	800d1b8 <_vfiprintf_r+0x78>
 800d2e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2ea:	460c      	mov	r4, r1
 800d2ec:	2001      	movs	r0, #1
 800d2ee:	e7a6      	b.n	800d23e <_vfiprintf_r+0xfe>
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	3401      	adds	r4, #1
 800d2f4:	9305      	str	r3, [sp, #20]
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	f04f 0c0a 	mov.w	ip, #10
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d302:	3a30      	subs	r2, #48	; 0x30
 800d304:	2a09      	cmp	r2, #9
 800d306:	d903      	bls.n	800d310 <_vfiprintf_r+0x1d0>
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d0c6      	beq.n	800d29a <_vfiprintf_r+0x15a>
 800d30c:	9105      	str	r1, [sp, #20]
 800d30e:	e7c4      	b.n	800d29a <_vfiprintf_r+0x15a>
 800d310:	fb0c 2101 	mla	r1, ip, r1, r2
 800d314:	4604      	mov	r4, r0
 800d316:	2301      	movs	r3, #1
 800d318:	e7f0      	b.n	800d2fc <_vfiprintf_r+0x1bc>
 800d31a:	ab03      	add	r3, sp, #12
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	462a      	mov	r2, r5
 800d320:	4b12      	ldr	r3, [pc, #72]	; (800d36c <_vfiprintf_r+0x22c>)
 800d322:	a904      	add	r1, sp, #16
 800d324:	4630      	mov	r0, r6
 800d326:	f3af 8000 	nop.w
 800d32a:	4607      	mov	r7, r0
 800d32c:	1c78      	adds	r0, r7, #1
 800d32e:	d1d6      	bne.n	800d2de <_vfiprintf_r+0x19e>
 800d330:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d332:	07d9      	lsls	r1, r3, #31
 800d334:	d405      	bmi.n	800d342 <_vfiprintf_r+0x202>
 800d336:	89ab      	ldrh	r3, [r5, #12]
 800d338:	059a      	lsls	r2, r3, #22
 800d33a:	d402      	bmi.n	800d342 <_vfiprintf_r+0x202>
 800d33c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d33e:	f7ff fdc9 	bl	800ced4 <__retarget_lock_release_recursive>
 800d342:	89ab      	ldrh	r3, [r5, #12]
 800d344:	065b      	lsls	r3, r3, #25
 800d346:	f53f af1d 	bmi.w	800d184 <_vfiprintf_r+0x44>
 800d34a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d34c:	e71c      	b.n	800d188 <_vfiprintf_r+0x48>
 800d34e:	ab03      	add	r3, sp, #12
 800d350:	9300      	str	r3, [sp, #0]
 800d352:	462a      	mov	r2, r5
 800d354:	4b05      	ldr	r3, [pc, #20]	; (800d36c <_vfiprintf_r+0x22c>)
 800d356:	a904      	add	r1, sp, #16
 800d358:	4630      	mov	r0, r6
 800d35a:	f000 f879 	bl	800d450 <_printf_i>
 800d35e:	e7e4      	b.n	800d32a <_vfiprintf_r+0x1ea>
 800d360:	0800f5d9 	.word	0x0800f5d9
 800d364:	0800f5e3 	.word	0x0800f5e3
 800d368:	00000000 	.word	0x00000000
 800d36c:	0800d11b 	.word	0x0800d11b
 800d370:	0800f5df 	.word	0x0800f5df

0800d374 <_printf_common>:
 800d374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d378:	4616      	mov	r6, r2
 800d37a:	4699      	mov	r9, r3
 800d37c:	688a      	ldr	r2, [r1, #8]
 800d37e:	690b      	ldr	r3, [r1, #16]
 800d380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d384:	4293      	cmp	r3, r2
 800d386:	bfb8      	it	lt
 800d388:	4613      	movlt	r3, r2
 800d38a:	6033      	str	r3, [r6, #0]
 800d38c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d390:	4607      	mov	r7, r0
 800d392:	460c      	mov	r4, r1
 800d394:	b10a      	cbz	r2, 800d39a <_printf_common+0x26>
 800d396:	3301      	adds	r3, #1
 800d398:	6033      	str	r3, [r6, #0]
 800d39a:	6823      	ldr	r3, [r4, #0]
 800d39c:	0699      	lsls	r1, r3, #26
 800d39e:	bf42      	ittt	mi
 800d3a0:	6833      	ldrmi	r3, [r6, #0]
 800d3a2:	3302      	addmi	r3, #2
 800d3a4:	6033      	strmi	r3, [r6, #0]
 800d3a6:	6825      	ldr	r5, [r4, #0]
 800d3a8:	f015 0506 	ands.w	r5, r5, #6
 800d3ac:	d106      	bne.n	800d3bc <_printf_common+0x48>
 800d3ae:	f104 0a19 	add.w	sl, r4, #25
 800d3b2:	68e3      	ldr	r3, [r4, #12]
 800d3b4:	6832      	ldr	r2, [r6, #0]
 800d3b6:	1a9b      	subs	r3, r3, r2
 800d3b8:	42ab      	cmp	r3, r5
 800d3ba:	dc26      	bgt.n	800d40a <_printf_common+0x96>
 800d3bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d3c0:	1e13      	subs	r3, r2, #0
 800d3c2:	6822      	ldr	r2, [r4, #0]
 800d3c4:	bf18      	it	ne
 800d3c6:	2301      	movne	r3, #1
 800d3c8:	0692      	lsls	r2, r2, #26
 800d3ca:	d42b      	bmi.n	800d424 <_printf_common+0xb0>
 800d3cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d3d0:	4649      	mov	r1, r9
 800d3d2:	4638      	mov	r0, r7
 800d3d4:	47c0      	blx	r8
 800d3d6:	3001      	adds	r0, #1
 800d3d8:	d01e      	beq.n	800d418 <_printf_common+0xa4>
 800d3da:	6823      	ldr	r3, [r4, #0]
 800d3dc:	6922      	ldr	r2, [r4, #16]
 800d3de:	f003 0306 	and.w	r3, r3, #6
 800d3e2:	2b04      	cmp	r3, #4
 800d3e4:	bf02      	ittt	eq
 800d3e6:	68e5      	ldreq	r5, [r4, #12]
 800d3e8:	6833      	ldreq	r3, [r6, #0]
 800d3ea:	1aed      	subeq	r5, r5, r3
 800d3ec:	68a3      	ldr	r3, [r4, #8]
 800d3ee:	bf0c      	ite	eq
 800d3f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3f4:	2500      	movne	r5, #0
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	bfc4      	itt	gt
 800d3fa:	1a9b      	subgt	r3, r3, r2
 800d3fc:	18ed      	addgt	r5, r5, r3
 800d3fe:	2600      	movs	r6, #0
 800d400:	341a      	adds	r4, #26
 800d402:	42b5      	cmp	r5, r6
 800d404:	d11a      	bne.n	800d43c <_printf_common+0xc8>
 800d406:	2000      	movs	r0, #0
 800d408:	e008      	b.n	800d41c <_printf_common+0xa8>
 800d40a:	2301      	movs	r3, #1
 800d40c:	4652      	mov	r2, sl
 800d40e:	4649      	mov	r1, r9
 800d410:	4638      	mov	r0, r7
 800d412:	47c0      	blx	r8
 800d414:	3001      	adds	r0, #1
 800d416:	d103      	bne.n	800d420 <_printf_common+0xac>
 800d418:	f04f 30ff 	mov.w	r0, #4294967295
 800d41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d420:	3501      	adds	r5, #1
 800d422:	e7c6      	b.n	800d3b2 <_printf_common+0x3e>
 800d424:	18e1      	adds	r1, r4, r3
 800d426:	1c5a      	adds	r2, r3, #1
 800d428:	2030      	movs	r0, #48	; 0x30
 800d42a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d42e:	4422      	add	r2, r4
 800d430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d438:	3302      	adds	r3, #2
 800d43a:	e7c7      	b.n	800d3cc <_printf_common+0x58>
 800d43c:	2301      	movs	r3, #1
 800d43e:	4622      	mov	r2, r4
 800d440:	4649      	mov	r1, r9
 800d442:	4638      	mov	r0, r7
 800d444:	47c0      	blx	r8
 800d446:	3001      	adds	r0, #1
 800d448:	d0e6      	beq.n	800d418 <_printf_common+0xa4>
 800d44a:	3601      	adds	r6, #1
 800d44c:	e7d9      	b.n	800d402 <_printf_common+0x8e>
	...

0800d450 <_printf_i>:
 800d450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d454:	7e0f      	ldrb	r7, [r1, #24]
 800d456:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d458:	2f78      	cmp	r7, #120	; 0x78
 800d45a:	4691      	mov	r9, r2
 800d45c:	4680      	mov	r8, r0
 800d45e:	460c      	mov	r4, r1
 800d460:	469a      	mov	sl, r3
 800d462:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d466:	d807      	bhi.n	800d478 <_printf_i+0x28>
 800d468:	2f62      	cmp	r7, #98	; 0x62
 800d46a:	d80a      	bhi.n	800d482 <_printf_i+0x32>
 800d46c:	2f00      	cmp	r7, #0
 800d46e:	f000 80d4 	beq.w	800d61a <_printf_i+0x1ca>
 800d472:	2f58      	cmp	r7, #88	; 0x58
 800d474:	f000 80c0 	beq.w	800d5f8 <_printf_i+0x1a8>
 800d478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d47c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d480:	e03a      	b.n	800d4f8 <_printf_i+0xa8>
 800d482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d486:	2b15      	cmp	r3, #21
 800d488:	d8f6      	bhi.n	800d478 <_printf_i+0x28>
 800d48a:	a101      	add	r1, pc, #4	; (adr r1, 800d490 <_printf_i+0x40>)
 800d48c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d490:	0800d4e9 	.word	0x0800d4e9
 800d494:	0800d4fd 	.word	0x0800d4fd
 800d498:	0800d479 	.word	0x0800d479
 800d49c:	0800d479 	.word	0x0800d479
 800d4a0:	0800d479 	.word	0x0800d479
 800d4a4:	0800d479 	.word	0x0800d479
 800d4a8:	0800d4fd 	.word	0x0800d4fd
 800d4ac:	0800d479 	.word	0x0800d479
 800d4b0:	0800d479 	.word	0x0800d479
 800d4b4:	0800d479 	.word	0x0800d479
 800d4b8:	0800d479 	.word	0x0800d479
 800d4bc:	0800d601 	.word	0x0800d601
 800d4c0:	0800d529 	.word	0x0800d529
 800d4c4:	0800d5bb 	.word	0x0800d5bb
 800d4c8:	0800d479 	.word	0x0800d479
 800d4cc:	0800d479 	.word	0x0800d479
 800d4d0:	0800d623 	.word	0x0800d623
 800d4d4:	0800d479 	.word	0x0800d479
 800d4d8:	0800d529 	.word	0x0800d529
 800d4dc:	0800d479 	.word	0x0800d479
 800d4e0:	0800d479 	.word	0x0800d479
 800d4e4:	0800d5c3 	.word	0x0800d5c3
 800d4e8:	682b      	ldr	r3, [r5, #0]
 800d4ea:	1d1a      	adds	r2, r3, #4
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	602a      	str	r2, [r5, #0]
 800d4f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e09f      	b.n	800d63c <_printf_i+0x1ec>
 800d4fc:	6820      	ldr	r0, [r4, #0]
 800d4fe:	682b      	ldr	r3, [r5, #0]
 800d500:	0607      	lsls	r7, r0, #24
 800d502:	f103 0104 	add.w	r1, r3, #4
 800d506:	6029      	str	r1, [r5, #0]
 800d508:	d501      	bpl.n	800d50e <_printf_i+0xbe>
 800d50a:	681e      	ldr	r6, [r3, #0]
 800d50c:	e003      	b.n	800d516 <_printf_i+0xc6>
 800d50e:	0646      	lsls	r6, r0, #25
 800d510:	d5fb      	bpl.n	800d50a <_printf_i+0xba>
 800d512:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d516:	2e00      	cmp	r6, #0
 800d518:	da03      	bge.n	800d522 <_printf_i+0xd2>
 800d51a:	232d      	movs	r3, #45	; 0x2d
 800d51c:	4276      	negs	r6, r6
 800d51e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d522:	485a      	ldr	r0, [pc, #360]	; (800d68c <_printf_i+0x23c>)
 800d524:	230a      	movs	r3, #10
 800d526:	e012      	b.n	800d54e <_printf_i+0xfe>
 800d528:	682b      	ldr	r3, [r5, #0]
 800d52a:	6820      	ldr	r0, [r4, #0]
 800d52c:	1d19      	adds	r1, r3, #4
 800d52e:	6029      	str	r1, [r5, #0]
 800d530:	0605      	lsls	r5, r0, #24
 800d532:	d501      	bpl.n	800d538 <_printf_i+0xe8>
 800d534:	681e      	ldr	r6, [r3, #0]
 800d536:	e002      	b.n	800d53e <_printf_i+0xee>
 800d538:	0641      	lsls	r1, r0, #25
 800d53a:	d5fb      	bpl.n	800d534 <_printf_i+0xe4>
 800d53c:	881e      	ldrh	r6, [r3, #0]
 800d53e:	4853      	ldr	r0, [pc, #332]	; (800d68c <_printf_i+0x23c>)
 800d540:	2f6f      	cmp	r7, #111	; 0x6f
 800d542:	bf0c      	ite	eq
 800d544:	2308      	moveq	r3, #8
 800d546:	230a      	movne	r3, #10
 800d548:	2100      	movs	r1, #0
 800d54a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d54e:	6865      	ldr	r5, [r4, #4]
 800d550:	60a5      	str	r5, [r4, #8]
 800d552:	2d00      	cmp	r5, #0
 800d554:	bfa2      	ittt	ge
 800d556:	6821      	ldrge	r1, [r4, #0]
 800d558:	f021 0104 	bicge.w	r1, r1, #4
 800d55c:	6021      	strge	r1, [r4, #0]
 800d55e:	b90e      	cbnz	r6, 800d564 <_printf_i+0x114>
 800d560:	2d00      	cmp	r5, #0
 800d562:	d04b      	beq.n	800d5fc <_printf_i+0x1ac>
 800d564:	4615      	mov	r5, r2
 800d566:	fbb6 f1f3 	udiv	r1, r6, r3
 800d56a:	fb03 6711 	mls	r7, r3, r1, r6
 800d56e:	5dc7      	ldrb	r7, [r0, r7]
 800d570:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d574:	4637      	mov	r7, r6
 800d576:	42bb      	cmp	r3, r7
 800d578:	460e      	mov	r6, r1
 800d57a:	d9f4      	bls.n	800d566 <_printf_i+0x116>
 800d57c:	2b08      	cmp	r3, #8
 800d57e:	d10b      	bne.n	800d598 <_printf_i+0x148>
 800d580:	6823      	ldr	r3, [r4, #0]
 800d582:	07de      	lsls	r6, r3, #31
 800d584:	d508      	bpl.n	800d598 <_printf_i+0x148>
 800d586:	6923      	ldr	r3, [r4, #16]
 800d588:	6861      	ldr	r1, [r4, #4]
 800d58a:	4299      	cmp	r1, r3
 800d58c:	bfde      	ittt	le
 800d58e:	2330      	movle	r3, #48	; 0x30
 800d590:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d594:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d598:	1b52      	subs	r2, r2, r5
 800d59a:	6122      	str	r2, [r4, #16]
 800d59c:	f8cd a000 	str.w	sl, [sp]
 800d5a0:	464b      	mov	r3, r9
 800d5a2:	aa03      	add	r2, sp, #12
 800d5a4:	4621      	mov	r1, r4
 800d5a6:	4640      	mov	r0, r8
 800d5a8:	f7ff fee4 	bl	800d374 <_printf_common>
 800d5ac:	3001      	adds	r0, #1
 800d5ae:	d14a      	bne.n	800d646 <_printf_i+0x1f6>
 800d5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b4:	b004      	add	sp, #16
 800d5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ba:	6823      	ldr	r3, [r4, #0]
 800d5bc:	f043 0320 	orr.w	r3, r3, #32
 800d5c0:	6023      	str	r3, [r4, #0]
 800d5c2:	4833      	ldr	r0, [pc, #204]	; (800d690 <_printf_i+0x240>)
 800d5c4:	2778      	movs	r7, #120	; 0x78
 800d5c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d5ca:	6823      	ldr	r3, [r4, #0]
 800d5cc:	6829      	ldr	r1, [r5, #0]
 800d5ce:	061f      	lsls	r7, r3, #24
 800d5d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d5d4:	d402      	bmi.n	800d5dc <_printf_i+0x18c>
 800d5d6:	065f      	lsls	r7, r3, #25
 800d5d8:	bf48      	it	mi
 800d5da:	b2b6      	uxthmi	r6, r6
 800d5dc:	07df      	lsls	r7, r3, #31
 800d5de:	bf48      	it	mi
 800d5e0:	f043 0320 	orrmi.w	r3, r3, #32
 800d5e4:	6029      	str	r1, [r5, #0]
 800d5e6:	bf48      	it	mi
 800d5e8:	6023      	strmi	r3, [r4, #0]
 800d5ea:	b91e      	cbnz	r6, 800d5f4 <_printf_i+0x1a4>
 800d5ec:	6823      	ldr	r3, [r4, #0]
 800d5ee:	f023 0320 	bic.w	r3, r3, #32
 800d5f2:	6023      	str	r3, [r4, #0]
 800d5f4:	2310      	movs	r3, #16
 800d5f6:	e7a7      	b.n	800d548 <_printf_i+0xf8>
 800d5f8:	4824      	ldr	r0, [pc, #144]	; (800d68c <_printf_i+0x23c>)
 800d5fa:	e7e4      	b.n	800d5c6 <_printf_i+0x176>
 800d5fc:	4615      	mov	r5, r2
 800d5fe:	e7bd      	b.n	800d57c <_printf_i+0x12c>
 800d600:	682b      	ldr	r3, [r5, #0]
 800d602:	6826      	ldr	r6, [r4, #0]
 800d604:	6961      	ldr	r1, [r4, #20]
 800d606:	1d18      	adds	r0, r3, #4
 800d608:	6028      	str	r0, [r5, #0]
 800d60a:	0635      	lsls	r5, r6, #24
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	d501      	bpl.n	800d614 <_printf_i+0x1c4>
 800d610:	6019      	str	r1, [r3, #0]
 800d612:	e002      	b.n	800d61a <_printf_i+0x1ca>
 800d614:	0670      	lsls	r0, r6, #25
 800d616:	d5fb      	bpl.n	800d610 <_printf_i+0x1c0>
 800d618:	8019      	strh	r1, [r3, #0]
 800d61a:	2300      	movs	r3, #0
 800d61c:	6123      	str	r3, [r4, #16]
 800d61e:	4615      	mov	r5, r2
 800d620:	e7bc      	b.n	800d59c <_printf_i+0x14c>
 800d622:	682b      	ldr	r3, [r5, #0]
 800d624:	1d1a      	adds	r2, r3, #4
 800d626:	602a      	str	r2, [r5, #0]
 800d628:	681d      	ldr	r5, [r3, #0]
 800d62a:	6862      	ldr	r2, [r4, #4]
 800d62c:	2100      	movs	r1, #0
 800d62e:	4628      	mov	r0, r5
 800d630:	f7f4 fb26 	bl	8001c80 <memchr>
 800d634:	b108      	cbz	r0, 800d63a <_printf_i+0x1ea>
 800d636:	1b40      	subs	r0, r0, r5
 800d638:	6060      	str	r0, [r4, #4]
 800d63a:	6863      	ldr	r3, [r4, #4]
 800d63c:	6123      	str	r3, [r4, #16]
 800d63e:	2300      	movs	r3, #0
 800d640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d644:	e7aa      	b.n	800d59c <_printf_i+0x14c>
 800d646:	6923      	ldr	r3, [r4, #16]
 800d648:	462a      	mov	r2, r5
 800d64a:	4649      	mov	r1, r9
 800d64c:	4640      	mov	r0, r8
 800d64e:	47d0      	blx	sl
 800d650:	3001      	adds	r0, #1
 800d652:	d0ad      	beq.n	800d5b0 <_printf_i+0x160>
 800d654:	6823      	ldr	r3, [r4, #0]
 800d656:	079b      	lsls	r3, r3, #30
 800d658:	d413      	bmi.n	800d682 <_printf_i+0x232>
 800d65a:	68e0      	ldr	r0, [r4, #12]
 800d65c:	9b03      	ldr	r3, [sp, #12]
 800d65e:	4298      	cmp	r0, r3
 800d660:	bfb8      	it	lt
 800d662:	4618      	movlt	r0, r3
 800d664:	e7a6      	b.n	800d5b4 <_printf_i+0x164>
 800d666:	2301      	movs	r3, #1
 800d668:	4632      	mov	r2, r6
 800d66a:	4649      	mov	r1, r9
 800d66c:	4640      	mov	r0, r8
 800d66e:	47d0      	blx	sl
 800d670:	3001      	adds	r0, #1
 800d672:	d09d      	beq.n	800d5b0 <_printf_i+0x160>
 800d674:	3501      	adds	r5, #1
 800d676:	68e3      	ldr	r3, [r4, #12]
 800d678:	9903      	ldr	r1, [sp, #12]
 800d67a:	1a5b      	subs	r3, r3, r1
 800d67c:	42ab      	cmp	r3, r5
 800d67e:	dcf2      	bgt.n	800d666 <_printf_i+0x216>
 800d680:	e7eb      	b.n	800d65a <_printf_i+0x20a>
 800d682:	2500      	movs	r5, #0
 800d684:	f104 0619 	add.w	r6, r4, #25
 800d688:	e7f5      	b.n	800d676 <_printf_i+0x226>
 800d68a:	bf00      	nop
 800d68c:	0800f5ea 	.word	0x0800f5ea
 800d690:	0800f5fb 	.word	0x0800f5fb

0800d694 <__sflush_r>:
 800d694:	898a      	ldrh	r2, [r1, #12]
 800d696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d69a:	4605      	mov	r5, r0
 800d69c:	0710      	lsls	r0, r2, #28
 800d69e:	460c      	mov	r4, r1
 800d6a0:	d458      	bmi.n	800d754 <__sflush_r+0xc0>
 800d6a2:	684b      	ldr	r3, [r1, #4]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	dc05      	bgt.n	800d6b4 <__sflush_r+0x20>
 800d6a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	dc02      	bgt.n	800d6b4 <__sflush_r+0x20>
 800d6ae:	2000      	movs	r0, #0
 800d6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6b6:	2e00      	cmp	r6, #0
 800d6b8:	d0f9      	beq.n	800d6ae <__sflush_r+0x1a>
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d6c0:	682f      	ldr	r7, [r5, #0]
 800d6c2:	6a21      	ldr	r1, [r4, #32]
 800d6c4:	602b      	str	r3, [r5, #0]
 800d6c6:	d032      	beq.n	800d72e <__sflush_r+0x9a>
 800d6c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d6ca:	89a3      	ldrh	r3, [r4, #12]
 800d6cc:	075a      	lsls	r2, r3, #29
 800d6ce:	d505      	bpl.n	800d6dc <__sflush_r+0x48>
 800d6d0:	6863      	ldr	r3, [r4, #4]
 800d6d2:	1ac0      	subs	r0, r0, r3
 800d6d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6d6:	b10b      	cbz	r3, 800d6dc <__sflush_r+0x48>
 800d6d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6da:	1ac0      	subs	r0, r0, r3
 800d6dc:	2300      	movs	r3, #0
 800d6de:	4602      	mov	r2, r0
 800d6e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6e2:	6a21      	ldr	r1, [r4, #32]
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	47b0      	blx	r6
 800d6e8:	1c43      	adds	r3, r0, #1
 800d6ea:	89a3      	ldrh	r3, [r4, #12]
 800d6ec:	d106      	bne.n	800d6fc <__sflush_r+0x68>
 800d6ee:	6829      	ldr	r1, [r5, #0]
 800d6f0:	291d      	cmp	r1, #29
 800d6f2:	d82b      	bhi.n	800d74c <__sflush_r+0xb8>
 800d6f4:	4a29      	ldr	r2, [pc, #164]	; (800d79c <__sflush_r+0x108>)
 800d6f6:	410a      	asrs	r2, r1
 800d6f8:	07d6      	lsls	r6, r2, #31
 800d6fa:	d427      	bmi.n	800d74c <__sflush_r+0xb8>
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	6062      	str	r2, [r4, #4]
 800d700:	04d9      	lsls	r1, r3, #19
 800d702:	6922      	ldr	r2, [r4, #16]
 800d704:	6022      	str	r2, [r4, #0]
 800d706:	d504      	bpl.n	800d712 <__sflush_r+0x7e>
 800d708:	1c42      	adds	r2, r0, #1
 800d70a:	d101      	bne.n	800d710 <__sflush_r+0x7c>
 800d70c:	682b      	ldr	r3, [r5, #0]
 800d70e:	b903      	cbnz	r3, 800d712 <__sflush_r+0x7e>
 800d710:	6560      	str	r0, [r4, #84]	; 0x54
 800d712:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d714:	602f      	str	r7, [r5, #0]
 800d716:	2900      	cmp	r1, #0
 800d718:	d0c9      	beq.n	800d6ae <__sflush_r+0x1a>
 800d71a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d71e:	4299      	cmp	r1, r3
 800d720:	d002      	beq.n	800d728 <__sflush_r+0x94>
 800d722:	4628      	mov	r0, r5
 800d724:	f7ff fbea 	bl	800cefc <_free_r>
 800d728:	2000      	movs	r0, #0
 800d72a:	6360      	str	r0, [r4, #52]	; 0x34
 800d72c:	e7c0      	b.n	800d6b0 <__sflush_r+0x1c>
 800d72e:	2301      	movs	r3, #1
 800d730:	4628      	mov	r0, r5
 800d732:	47b0      	blx	r6
 800d734:	1c41      	adds	r1, r0, #1
 800d736:	d1c8      	bne.n	800d6ca <__sflush_r+0x36>
 800d738:	682b      	ldr	r3, [r5, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d0c5      	beq.n	800d6ca <__sflush_r+0x36>
 800d73e:	2b1d      	cmp	r3, #29
 800d740:	d001      	beq.n	800d746 <__sflush_r+0xb2>
 800d742:	2b16      	cmp	r3, #22
 800d744:	d101      	bne.n	800d74a <__sflush_r+0xb6>
 800d746:	602f      	str	r7, [r5, #0]
 800d748:	e7b1      	b.n	800d6ae <__sflush_r+0x1a>
 800d74a:	89a3      	ldrh	r3, [r4, #12]
 800d74c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d750:	81a3      	strh	r3, [r4, #12]
 800d752:	e7ad      	b.n	800d6b0 <__sflush_r+0x1c>
 800d754:	690f      	ldr	r7, [r1, #16]
 800d756:	2f00      	cmp	r7, #0
 800d758:	d0a9      	beq.n	800d6ae <__sflush_r+0x1a>
 800d75a:	0793      	lsls	r3, r2, #30
 800d75c:	680e      	ldr	r6, [r1, #0]
 800d75e:	bf08      	it	eq
 800d760:	694b      	ldreq	r3, [r1, #20]
 800d762:	600f      	str	r7, [r1, #0]
 800d764:	bf18      	it	ne
 800d766:	2300      	movne	r3, #0
 800d768:	eba6 0807 	sub.w	r8, r6, r7
 800d76c:	608b      	str	r3, [r1, #8]
 800d76e:	f1b8 0f00 	cmp.w	r8, #0
 800d772:	dd9c      	ble.n	800d6ae <__sflush_r+0x1a>
 800d774:	6a21      	ldr	r1, [r4, #32]
 800d776:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d778:	4643      	mov	r3, r8
 800d77a:	463a      	mov	r2, r7
 800d77c:	4628      	mov	r0, r5
 800d77e:	47b0      	blx	r6
 800d780:	2800      	cmp	r0, #0
 800d782:	dc06      	bgt.n	800d792 <__sflush_r+0xfe>
 800d784:	89a3      	ldrh	r3, [r4, #12]
 800d786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d78a:	81a3      	strh	r3, [r4, #12]
 800d78c:	f04f 30ff 	mov.w	r0, #4294967295
 800d790:	e78e      	b.n	800d6b0 <__sflush_r+0x1c>
 800d792:	4407      	add	r7, r0
 800d794:	eba8 0800 	sub.w	r8, r8, r0
 800d798:	e7e9      	b.n	800d76e <__sflush_r+0xda>
 800d79a:	bf00      	nop
 800d79c:	dfbffffe 	.word	0xdfbffffe

0800d7a0 <_fflush_r>:
 800d7a0:	b538      	push	{r3, r4, r5, lr}
 800d7a2:	690b      	ldr	r3, [r1, #16]
 800d7a4:	4605      	mov	r5, r0
 800d7a6:	460c      	mov	r4, r1
 800d7a8:	b913      	cbnz	r3, 800d7b0 <_fflush_r+0x10>
 800d7aa:	2500      	movs	r5, #0
 800d7ac:	4628      	mov	r0, r5
 800d7ae:	bd38      	pop	{r3, r4, r5, pc}
 800d7b0:	b118      	cbz	r0, 800d7ba <_fflush_r+0x1a>
 800d7b2:	6a03      	ldr	r3, [r0, #32]
 800d7b4:	b90b      	cbnz	r3, 800d7ba <_fflush_r+0x1a>
 800d7b6:	f7ff f97f 	bl	800cab8 <__sinit>
 800d7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d0f3      	beq.n	800d7aa <_fflush_r+0xa>
 800d7c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d7c4:	07d0      	lsls	r0, r2, #31
 800d7c6:	d404      	bmi.n	800d7d2 <_fflush_r+0x32>
 800d7c8:	0599      	lsls	r1, r3, #22
 800d7ca:	d402      	bmi.n	800d7d2 <_fflush_r+0x32>
 800d7cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7ce:	f7ff fb80 	bl	800ced2 <__retarget_lock_acquire_recursive>
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	4621      	mov	r1, r4
 800d7d6:	f7ff ff5d 	bl	800d694 <__sflush_r>
 800d7da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7dc:	07da      	lsls	r2, r3, #31
 800d7de:	4605      	mov	r5, r0
 800d7e0:	d4e4      	bmi.n	800d7ac <_fflush_r+0xc>
 800d7e2:	89a3      	ldrh	r3, [r4, #12]
 800d7e4:	059b      	lsls	r3, r3, #22
 800d7e6:	d4e1      	bmi.n	800d7ac <_fflush_r+0xc>
 800d7e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7ea:	f7ff fb73 	bl	800ced4 <__retarget_lock_release_recursive>
 800d7ee:	e7dd      	b.n	800d7ac <_fflush_r+0xc>

0800d7f0 <__swhatbuf_r>:
 800d7f0:	b570      	push	{r4, r5, r6, lr}
 800d7f2:	460c      	mov	r4, r1
 800d7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7f8:	2900      	cmp	r1, #0
 800d7fa:	b096      	sub	sp, #88	; 0x58
 800d7fc:	4615      	mov	r5, r2
 800d7fe:	461e      	mov	r6, r3
 800d800:	da0d      	bge.n	800d81e <__swhatbuf_r+0x2e>
 800d802:	89a3      	ldrh	r3, [r4, #12]
 800d804:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d808:	f04f 0100 	mov.w	r1, #0
 800d80c:	bf0c      	ite	eq
 800d80e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d812:	2340      	movne	r3, #64	; 0x40
 800d814:	2000      	movs	r0, #0
 800d816:	6031      	str	r1, [r6, #0]
 800d818:	602b      	str	r3, [r5, #0]
 800d81a:	b016      	add	sp, #88	; 0x58
 800d81c:	bd70      	pop	{r4, r5, r6, pc}
 800d81e:	466a      	mov	r2, sp
 800d820:	f000 f87c 	bl	800d91c <_fstat_r>
 800d824:	2800      	cmp	r0, #0
 800d826:	dbec      	blt.n	800d802 <__swhatbuf_r+0x12>
 800d828:	9901      	ldr	r1, [sp, #4]
 800d82a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d82e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d832:	4259      	negs	r1, r3
 800d834:	4159      	adcs	r1, r3
 800d836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d83a:	e7eb      	b.n	800d814 <__swhatbuf_r+0x24>

0800d83c <__smakebuf_r>:
 800d83c:	898b      	ldrh	r3, [r1, #12]
 800d83e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d840:	079d      	lsls	r5, r3, #30
 800d842:	4606      	mov	r6, r0
 800d844:	460c      	mov	r4, r1
 800d846:	d507      	bpl.n	800d858 <__smakebuf_r+0x1c>
 800d848:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d84c:	6023      	str	r3, [r4, #0]
 800d84e:	6123      	str	r3, [r4, #16]
 800d850:	2301      	movs	r3, #1
 800d852:	6163      	str	r3, [r4, #20]
 800d854:	b002      	add	sp, #8
 800d856:	bd70      	pop	{r4, r5, r6, pc}
 800d858:	ab01      	add	r3, sp, #4
 800d85a:	466a      	mov	r2, sp
 800d85c:	f7ff ffc8 	bl	800d7f0 <__swhatbuf_r>
 800d860:	9900      	ldr	r1, [sp, #0]
 800d862:	4605      	mov	r5, r0
 800d864:	4630      	mov	r0, r6
 800d866:	f7ff fbb5 	bl	800cfd4 <_malloc_r>
 800d86a:	b948      	cbnz	r0, 800d880 <__smakebuf_r+0x44>
 800d86c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d870:	059a      	lsls	r2, r3, #22
 800d872:	d4ef      	bmi.n	800d854 <__smakebuf_r+0x18>
 800d874:	f023 0303 	bic.w	r3, r3, #3
 800d878:	f043 0302 	orr.w	r3, r3, #2
 800d87c:	81a3      	strh	r3, [r4, #12]
 800d87e:	e7e3      	b.n	800d848 <__smakebuf_r+0xc>
 800d880:	89a3      	ldrh	r3, [r4, #12]
 800d882:	6020      	str	r0, [r4, #0]
 800d884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d888:	81a3      	strh	r3, [r4, #12]
 800d88a:	9b00      	ldr	r3, [sp, #0]
 800d88c:	6163      	str	r3, [r4, #20]
 800d88e:	9b01      	ldr	r3, [sp, #4]
 800d890:	6120      	str	r0, [r4, #16]
 800d892:	b15b      	cbz	r3, 800d8ac <__smakebuf_r+0x70>
 800d894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d898:	4630      	mov	r0, r6
 800d89a:	f000 f851 	bl	800d940 <_isatty_r>
 800d89e:	b128      	cbz	r0, 800d8ac <__smakebuf_r+0x70>
 800d8a0:	89a3      	ldrh	r3, [r4, #12]
 800d8a2:	f023 0303 	bic.w	r3, r3, #3
 800d8a6:	f043 0301 	orr.w	r3, r3, #1
 800d8aa:	81a3      	strh	r3, [r4, #12]
 800d8ac:	89a3      	ldrh	r3, [r4, #12]
 800d8ae:	431d      	orrs	r5, r3
 800d8b0:	81a5      	strh	r5, [r4, #12]
 800d8b2:	e7cf      	b.n	800d854 <__smakebuf_r+0x18>

0800d8b4 <_putc_r>:
 800d8b4:	b570      	push	{r4, r5, r6, lr}
 800d8b6:	460d      	mov	r5, r1
 800d8b8:	4614      	mov	r4, r2
 800d8ba:	4606      	mov	r6, r0
 800d8bc:	b118      	cbz	r0, 800d8c6 <_putc_r+0x12>
 800d8be:	6a03      	ldr	r3, [r0, #32]
 800d8c0:	b90b      	cbnz	r3, 800d8c6 <_putc_r+0x12>
 800d8c2:	f7ff f8f9 	bl	800cab8 <__sinit>
 800d8c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8c8:	07d8      	lsls	r0, r3, #31
 800d8ca:	d405      	bmi.n	800d8d8 <_putc_r+0x24>
 800d8cc:	89a3      	ldrh	r3, [r4, #12]
 800d8ce:	0599      	lsls	r1, r3, #22
 800d8d0:	d402      	bmi.n	800d8d8 <_putc_r+0x24>
 800d8d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8d4:	f7ff fafd 	bl	800ced2 <__retarget_lock_acquire_recursive>
 800d8d8:	68a3      	ldr	r3, [r4, #8]
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	60a3      	str	r3, [r4, #8]
 800d8e0:	da05      	bge.n	800d8ee <_putc_r+0x3a>
 800d8e2:	69a2      	ldr	r2, [r4, #24]
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	db12      	blt.n	800d90e <_putc_r+0x5a>
 800d8e8:	b2eb      	uxtb	r3, r5
 800d8ea:	2b0a      	cmp	r3, #10
 800d8ec:	d00f      	beq.n	800d90e <_putc_r+0x5a>
 800d8ee:	6823      	ldr	r3, [r4, #0]
 800d8f0:	1c5a      	adds	r2, r3, #1
 800d8f2:	6022      	str	r2, [r4, #0]
 800d8f4:	701d      	strb	r5, [r3, #0]
 800d8f6:	b2ed      	uxtb	r5, r5
 800d8f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8fa:	07da      	lsls	r2, r3, #31
 800d8fc:	d405      	bmi.n	800d90a <_putc_r+0x56>
 800d8fe:	89a3      	ldrh	r3, [r4, #12]
 800d900:	059b      	lsls	r3, r3, #22
 800d902:	d402      	bmi.n	800d90a <_putc_r+0x56>
 800d904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d906:	f7ff fae5 	bl	800ced4 <__retarget_lock_release_recursive>
 800d90a:	4628      	mov	r0, r5
 800d90c:	bd70      	pop	{r4, r5, r6, pc}
 800d90e:	4629      	mov	r1, r5
 800d910:	4622      	mov	r2, r4
 800d912:	4630      	mov	r0, r6
 800d914:	f7ff f9bf 	bl	800cc96 <__swbuf_r>
 800d918:	4605      	mov	r5, r0
 800d91a:	e7ed      	b.n	800d8f8 <_putc_r+0x44>

0800d91c <_fstat_r>:
 800d91c:	b538      	push	{r3, r4, r5, lr}
 800d91e:	4d07      	ldr	r5, [pc, #28]	; (800d93c <_fstat_r+0x20>)
 800d920:	2300      	movs	r3, #0
 800d922:	4604      	mov	r4, r0
 800d924:	4608      	mov	r0, r1
 800d926:	4611      	mov	r1, r2
 800d928:	602b      	str	r3, [r5, #0]
 800d92a:	f7f6 ff96 	bl	800485a <_fstat>
 800d92e:	1c43      	adds	r3, r0, #1
 800d930:	d102      	bne.n	800d938 <_fstat_r+0x1c>
 800d932:	682b      	ldr	r3, [r5, #0]
 800d934:	b103      	cbz	r3, 800d938 <_fstat_r+0x1c>
 800d936:	6023      	str	r3, [r4, #0]
 800d938:	bd38      	pop	{r3, r4, r5, pc}
 800d93a:	bf00      	nop
 800d93c:	2000241c 	.word	0x2000241c

0800d940 <_isatty_r>:
 800d940:	b538      	push	{r3, r4, r5, lr}
 800d942:	4d06      	ldr	r5, [pc, #24]	; (800d95c <_isatty_r+0x1c>)
 800d944:	2300      	movs	r3, #0
 800d946:	4604      	mov	r4, r0
 800d948:	4608      	mov	r0, r1
 800d94a:	602b      	str	r3, [r5, #0]
 800d94c:	f7f6 ff95 	bl	800487a <_isatty>
 800d950:	1c43      	adds	r3, r0, #1
 800d952:	d102      	bne.n	800d95a <_isatty_r+0x1a>
 800d954:	682b      	ldr	r3, [r5, #0]
 800d956:	b103      	cbz	r3, 800d95a <_isatty_r+0x1a>
 800d958:	6023      	str	r3, [r4, #0]
 800d95a:	bd38      	pop	{r3, r4, r5, pc}
 800d95c:	2000241c 	.word	0x2000241c

0800d960 <_sbrk_r>:
 800d960:	b538      	push	{r3, r4, r5, lr}
 800d962:	4d06      	ldr	r5, [pc, #24]	; (800d97c <_sbrk_r+0x1c>)
 800d964:	2300      	movs	r3, #0
 800d966:	4604      	mov	r4, r0
 800d968:	4608      	mov	r0, r1
 800d96a:	602b      	str	r3, [r5, #0]
 800d96c:	f7f6 ff9e 	bl	80048ac <_sbrk>
 800d970:	1c43      	adds	r3, r0, #1
 800d972:	d102      	bne.n	800d97a <_sbrk_r+0x1a>
 800d974:	682b      	ldr	r3, [r5, #0]
 800d976:	b103      	cbz	r3, 800d97a <_sbrk_r+0x1a>
 800d978:	6023      	str	r3, [r4, #0]
 800d97a:	bd38      	pop	{r3, r4, r5, pc}
 800d97c:	2000241c 	.word	0x2000241c

0800d980 <_init>:
 800d980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d982:	bf00      	nop
 800d984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d986:	bc08      	pop	{r3}
 800d988:	469e      	mov	lr, r3
 800d98a:	4770      	bx	lr

0800d98c <_fini>:
 800d98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d98e:	bf00      	nop
 800d990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d992:	bc08      	pop	{r3}
 800d994:	469e      	mov	lr, r3
 800d996:	4770      	bx	lr
