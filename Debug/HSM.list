
HSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b64  0800c288  0800c288  0001c288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddec  0800ddec  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ddec  0800ddec  0001ddec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddf4  0800ddf4  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddf4  0800ddf4  0001ddf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ddf8  0800ddf8  0001ddf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800ddfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002016c  2**0
                  CONTENTS
 10 .bss          000022a0  2000016c  2000016c  0002016c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000240c  2000240c  0002016c  2**0
                  ALLOC
 12 .ARM.attributes 00000034  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 14 .iar_vfe_header 00000014  00000000  00000000  000201e4  2**2
                  CONTENTS, READONLY
 15 .debug_info   00019c76  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004662  00000000  00000000  00039e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001890  00000000  00000000  0003e4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000012ce  00000000  00000000  0003fd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000273cf  00000000  00000000  0004102e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00020663  00000000  00000000  000683fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d6af1  00000000  00000000  00088a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006f70  00000000  00000000  0015f554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000053  00000000  00000000  001664c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000016c 	.word	0x2000016c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c270 	.word	0x0800c270

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000170 	.word	0x20000170
 80001cc:	0800c270 	.word	0x0800c270

080001d0 <cmox_hash_compute>:
 80001d0:	b538      	push	{r3, r4, r5, lr}
 80001d2:	460c      	mov	r4, r1
 80001d4:	4611      	mov	r1, r2
 80001d6:	2800      	cmp	r0, #0
 80001d8:	461a      	mov	r2, r3
 80001da:	bf1c      	itt	ne
 80001dc:	6805      	ldrne	r5, [r0, #0]
 80001de:	2d00      	cmpne	r5, #0
 80001e0:	4b07      	ldr	r3, [pc, #28]	; (8000200 <cmox_hash_compute+0x30>)
 80001e2:	d00a      	beq.n	80001fa <cmox_hash_compute+0x2a>
 80001e4:	b14a      	cbz	r2, 80001fa <cmox_hash_compute+0x2a>
 80001e6:	b904      	cbnz	r4, 80001ea <cmox_hash_compute+0x1a>
 80001e8:	b939      	cbnz	r1, 80001fa <cmox_hash_compute+0x2a>
 80001ea:	9804      	ldr	r0, [sp, #16]
 80001ec:	b128      	cbz	r0, 80001fa <cmox_hash_compute+0x2a>
 80001ee:	9b05      	ldr	r3, [sp, #20]
 80001f0:	9300      	str	r3, [sp, #0]
 80001f2:	4603      	mov	r3, r0
 80001f4:	4620      	mov	r0, r4
 80001f6:	47a8      	blx	r5
 80001f8:	4603      	mov	r3, r0
 80001fa:	4618      	mov	r0, r3
 80001fc:	bd32      	pop	{r1, r4, r5, pc}
 80001fe:	bf00      	nop
 8000200:	00020003 	.word	0x00020003

08000204 <cmox_hash_common_compute>:
 8000204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000208:	4604      	mov	r4, r0
 800020a:	460e      	mov	r6, r1
 800020c:	6821      	ldr	r1, [r4, #0]
 800020e:	4617      	mov	r7, r2
 8000210:	684a      	ldr	r2, [r1, #4]
 8000212:	461d      	mov	r5, r3
 8000214:	4790      	blx	r2
 8000216:	4680      	mov	r8, r0
 8000218:	f5b8 3f00 	cmp.w	r8, #131072	; 0x20000
 800021c:	d119      	bne.n	8000252 <cmox_hash_common_compute+0x4e>
 800021e:	6822      	ldr	r2, [r4, #0]
 8000220:	9906      	ldr	r1, [sp, #24]
 8000222:	6893      	ldr	r3, [r2, #8]
 8000224:	4620      	mov	r0, r4
 8000226:	4798      	blx	r3
 8000228:	4680      	mov	r8, r0
 800022a:	f5b8 3f00 	cmp.w	r8, #131072	; 0x20000
 800022e:	d110      	bne.n	8000252 <cmox_hash_common_compute+0x4e>
 8000230:	6823      	ldr	r3, [r4, #0]
 8000232:	4631      	mov	r1, r6
 8000234:	68de      	ldr	r6, [r3, #12]
 8000236:	463a      	mov	r2, r7
 8000238:	4620      	mov	r0, r4
 800023a:	47b0      	blx	r6
 800023c:	4680      	mov	r8, r0
 800023e:	f5b8 3f00 	cmp.w	r8, #131072	; 0x20000
 8000242:	d106      	bne.n	8000252 <cmox_hash_common_compute+0x4e>
 8000244:	6823      	ldr	r3, [r4, #0]
 8000246:	9a07      	ldr	r2, [sp, #28]
 8000248:	4629      	mov	r1, r5
 800024a:	691d      	ldr	r5, [r3, #16]
 800024c:	4620      	mov	r0, r4
 800024e:	47a8      	blx	r5
 8000250:	4680      	mov	r8, r0
 8000252:	6821      	ldr	r1, [r4, #0]
 8000254:	680a      	ldr	r2, [r1, #0]
 8000256:	4620      	mov	r0, r4
 8000258:	4790      	blx	r2
 800025a:	4640      	mov	r0, r8
 800025c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000260 <cmox_initialize>:
 8000260:	b538      	push	{r3, r4, r5, lr}
 8000262:	2800      	cmp	r0, #0
 8000264:	bf1c      	itt	ne
 8000266:	6801      	ldrne	r1, [r0, #0]
 8000268:	2900      	cmpne	r1, #0
 800026a:	4a18      	ldr	r2, [pc, #96]	; (80002cc <cmox_initialize+0x6c>)
 800026c:	d123      	bne.n	80002b6 <cmox_initialize+0x56>
 800026e:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <cmox_initialize+0x70>)
 8000270:	681c      	ldr	r4, [r3, #0]
 8000272:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8000276:	400c      	ands	r4, r1
 8000278:	f24c 2540 	movw	r5, #49728	; 0xc240
 800027c:	42ac      	cmp	r4, r5
 800027e:	bf1f      	itttt	ne
 8000280:	681b      	ldrne	r3, [r3, #0]
 8000282:	4019      	andne	r1, r3
 8000284:	f24c 2470 	movwne	r4, #49776	; 0xc270
 8000288:	42a1      	cmpne	r1, r4
 800028a:	d112      	bne.n	80002b2 <cmox_initialize+0x52>
 800028c:	4d11      	ldr	r5, [pc, #68]	; (80002d4 <cmox_initialize+0x74>)
 800028e:	6829      	ldr	r1, [r5, #0]
 8000290:	b979      	cbnz	r1, 80002b2 <cmox_initialize+0x52>
 8000292:	4911      	ldr	r1, [pc, #68]	; (80002d8 <cmox_initialize+0x78>)
 8000294:	680b      	ldr	r3, [r1, #0]
 8000296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800029a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800029e:	bf1f      	itttt	ne
 80002a0:	6809      	ldrne	r1, [r1, #0]
 80002a2:	f3c1 010b 	ubfxne	r1, r1, #0, #12
 80002a6:	f240 4383 	movwne	r3, #1155	; 0x483
 80002aa:	4299      	cmpne	r1, r3
 80002ac:	bf04      	itt	eq
 80002ae:	2101      	moveq	r1, #1
 80002b0:	7011      	strbeq	r1, [r2, #0]
 80002b2:	b928      	cbnz	r0, 80002c0 <cmox_initialize+0x60>
 80002b4:	e005      	b.n	80002c2 <cmox_initialize+0x62>
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <cmox_initialize+0x7c>)
 80002b8:	4299      	cmp	r1, r3
 80002ba:	bf04      	itt	eq
 80002bc:	2101      	moveq	r1, #1
 80002be:	7011      	strbeq	r1, [r2, #0]
 80002c0:	6840      	ldr	r0, [r0, #4]
 80002c2:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 80002c6:	f000 be8d 	b.w	8000fe4 <cmox_ll_init>
 80002ca:	bf00      	nop
 80002cc:	20000188 	.word	0x20000188
 80002d0:	e000ed00 	.word	0xe000ed00
 80002d4:	e0042000 	.word	0xe0042000
 80002d8:	5c001000 	.word	0x5c001000
 80002dc:	48370000 	.word	0x48370000

080002e0 <cmox_sha256_cleanup>:
 80002e0:	b500      	push	{lr}
 80002e2:	b081      	sub	sp, #4
 80002e4:	6801      	ldr	r1, [r0, #0]
 80002e6:	4a07      	ldr	r2, [pc, #28]	; (8000304 <cmox_sha256_cleanup+0x24>)
 80002e8:	4291      	cmp	r1, r2
 80002ea:	d100      	bne.n	80002ee <cmox_sha256_cleanup+0xe>
 80002ec:	b910      	cbnz	r0, 80002f4 <cmox_sha256_cleanup+0x14>
 80002ee:	4806      	ldr	r0, [pc, #24]	; (8000308 <cmox_sha256_cleanup+0x28>)
 80002f0:	b001      	add	sp, #4
 80002f2:	bd00      	pop	{pc}
 80002f4:	217c      	movs	r1, #124	; 0x7c
 80002f6:	f00b fa68 	bl	800b7ca <__aeabi_memclr>
 80002fa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80002fe:	b001      	add	sp, #4
 8000300:	bd00      	pop	{pc}
 8000302:	bf00      	nop
 8000304:	080003ec 	.word	0x080003ec
 8000308:	00020003 	.word	0x00020003

0800030c <cmox_sha256_init>:
 800030c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000310:	4a0b      	ldr	r2, [pc, #44]	; (8000340 <cmox_sha256_init+0x34>)
 8000312:	e892 51f8 	ldmia.w	r2, {r3, r4, r5, r6, r7, r8, ip, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	4669      	mov	r1, sp
 800031a:	e881 51f8 	stmia.w	r1, {r3, r4, r5, r6, r7, r8, ip, lr}
 800031e:	6802      	ldr	r2, [r0, #0]
 8000320:	4b08      	ldr	r3, [pc, #32]	; (8000344 <cmox_sha256_init+0x38>)
 8000322:	429a      	cmp	r2, r3
 8000324:	d100      	bne.n	8000328 <cmox_sha256_init+0x1c>
 8000326:	b918      	cbnz	r0, 8000330 <cmox_sha256_init+0x24>
 8000328:	4807      	ldr	r0, [pc, #28]	; (8000348 <cmox_sha256_init+0x3c>)
 800032a:	b008      	add	sp, #32
 800032c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000330:	2220      	movs	r2, #32
 8000332:	3008      	adds	r0, #8
 8000334:	f000 f9af 	bl	8000696 <cmox_md_init>
 8000338:	b008      	add	sp, #32
 800033a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800033e:	bf00      	nop
 8000340:	080003cc 	.word	0x080003cc
 8000344:	080003ec 	.word	0x080003ec
 8000348:	00020003 	.word	0x00020003

0800034c <cmox_sha256_setTagLen>:
 800034c:	2921      	cmp	r1, #33	; 0x21
 800034e:	d204      	bcs.n	800035a <cmox_sha256_setTagLen+0xe>
 8000350:	6802      	ldr	r2, [r0, #0]
 8000352:	4b04      	ldr	r3, [pc, #16]	; (8000364 <cmox_sha256_setTagLen+0x18>)
 8000354:	429a      	cmp	r2, r3
 8000356:	d100      	bne.n	800035a <cmox_sha256_setTagLen+0xe>
 8000358:	b908      	cbnz	r0, 800035e <cmox_sha256_setTagLen+0x12>
 800035a:	4803      	ldr	r0, [pc, #12]	; (8000368 <cmox_sha256_setTagLen+0x1c>)
 800035c:	4770      	bx	lr
 800035e:	3008      	adds	r0, #8
 8000360:	f000 b9a8 	b.w	80006b4 <cmox_md_setTagSize>
 8000364:	080003ec 	.word	0x080003ec
 8000368:	00020003 	.word	0x00020003

0800036c <cmox_sha256_append>:
 800036c:	b410      	push	{r4}
 800036e:	b081      	sub	sp, #4
 8000370:	4613      	mov	r3, r2
 8000372:	6802      	ldr	r2, [r0, #0]
 8000374:	4c07      	ldr	r4, [pc, #28]	; (8000394 <cmox_sha256_append+0x28>)
 8000376:	42a2      	cmp	r2, r4
 8000378:	d100      	bne.n	800037c <cmox_sha256_append+0x10>
 800037a:	b918      	cbnz	r0, 8000384 <cmox_sha256_append+0x18>
 800037c:	b001      	add	sp, #4
 800037e:	bc10      	pop	{r4}
 8000380:	4805      	ldr	r0, [pc, #20]	; (8000398 <cmox_sha256_append+0x2c>)
 8000382:	4770      	bx	lr
 8000384:	b001      	add	sp, #4
 8000386:	f100 0224 	add.w	r2, r0, #36	; 0x24
 800038a:	bc10      	pop	{r4}
 800038c:	3008      	adds	r0, #8
 800038e:	f000 b995 	b.w	80006bc <cmox_md_append>
 8000392:	bf00      	nop
 8000394:	080003ec 	.word	0x080003ec
 8000398:	00020003 	.word	0x00020003

0800039c <cmox_sha256_generateTag>:
 800039c:	b410      	push	{r4}
 800039e:	b081      	sub	sp, #4
 80003a0:	4613      	mov	r3, r2
 80003a2:	6802      	ldr	r2, [r0, #0]
 80003a4:	4c07      	ldr	r4, [pc, #28]	; (80003c4 <cmox_sha256_generateTag+0x28>)
 80003a6:	42a2      	cmp	r2, r4
 80003a8:	d100      	bne.n	80003ac <cmox_sha256_generateTag+0x10>
 80003aa:	b918      	cbnz	r0, 80003b4 <cmox_sha256_generateTag+0x18>
 80003ac:	b001      	add	sp, #4
 80003ae:	bc10      	pop	{r4}
 80003b0:	4805      	ldr	r0, [pc, #20]	; (80003c8 <cmox_sha256_generateTag+0x2c>)
 80003b2:	4770      	bx	lr
 80003b4:	460a      	mov	r2, r1
 80003b6:	b001      	add	sp, #4
 80003b8:	f100 0124 	add.w	r1, r0, #36	; 0x24
 80003bc:	bc10      	pop	{r4}
 80003be:	3008      	adds	r0, #8
 80003c0:	f000 b9d0 	b.w	8000764 <cmox_md_generateTag>
 80003c4:	080003ec 	.word	0x080003ec
 80003c8:	00020003 	.word	0x00020003
 80003cc:	6a09e667 	.word	0x6a09e667
 80003d0:	bb67ae85 	.word	0xbb67ae85
 80003d4:	3c6ef372 	.word	0x3c6ef372
 80003d8:	a54ff53a 	.word	0xa54ff53a
 80003dc:	510e527f 	.word	0x510e527f
 80003e0:	9b05688c 	.word	0x9b05688c
 80003e4:	1f83d9ab 	.word	0x1f83d9ab
 80003e8:	5be0cd19 	.word	0x5be0cd19

080003ec <CMOX_SHA256_VTABLE>:
 80003ec:	080002e1 0800030d 0800034d 0800036d     ........M...m...
 80003fc:	0800039d                                ....

08000400 <cmox_sha256_compute>:
 8000400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000402:	b0a3      	sub	sp, #140	; 0x8c
 8000404:	4604      	mov	r4, r0
 8000406:	480b      	ldr	r0, [pc, #44]	; (8000434 <cmox_sha256_compute+0x34>)
 8000408:	9002      	str	r0, [sp, #8]
 800040a:	460d      	mov	r5, r1
 800040c:	4616      	mov	r6, r2
 800040e:	461f      	mov	r7, r3
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <cmox_sha256_compute+0x38>)
 8000412:	2208      	movs	r2, #8
 8000414:	2140      	movs	r1, #64	; 0x40
 8000416:	a804      	add	r0, sp, #16
 8000418:	f000 f939 	bl	800068e <cmox_md_construct>
 800041c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800041e:	9001      	str	r0, [sp, #4]
 8000420:	9700      	str	r7, [sp, #0]
 8000422:	4633      	mov	r3, r6
 8000424:	462a      	mov	r2, r5
 8000426:	4621      	mov	r1, r4
 8000428:	a802      	add	r0, sp, #8
 800042a:	f7ff feeb 	bl	8000204 <cmox_hash_common_compute>
 800042e:	b023      	add	sp, #140	; 0x8c
 8000430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000432:	bf00      	nop
 8000434:	080003ec 	.word	0x080003ec
 8000438:	0800c4a4 	.word	0x0800c4a4

0800043c <cmox_sha256_transform>:
 800043c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000440:	b0c1      	sub	sp, #260	; 0x104
 8000442:	680b      	ldr	r3, [r1, #0]
 8000444:	ba1b      	rev	r3, r3
 8000446:	9301      	str	r3, [sp, #4]
 8000448:	4602      	mov	r2, r0
 800044a:	684b      	ldr	r3, [r1, #4]
 800044c:	a801      	add	r0, sp, #4
 800044e:	ba1b      	rev	r3, r3
 8000450:	6043      	str	r3, [r0, #4]
 8000452:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8000456:	688b      	ldr	r3, [r1, #8]
 8000458:	ba1b      	rev	r3, r3
 800045a:	6083      	str	r3, [r0, #8]
 800045c:	68cb      	ldr	r3, [r1, #12]
 800045e:	ba1b      	rev	r3, r3
 8000460:	60c3      	str	r3, [r0, #12]
 8000462:	690b      	ldr	r3, [r1, #16]
 8000464:	ba1b      	rev	r3, r3
 8000466:	6103      	str	r3, [r0, #16]
 8000468:	694b      	ldr	r3, [r1, #20]
 800046a:	ba1b      	rev	r3, r3
 800046c:	6143      	str	r3, [r0, #20]
 800046e:	698b      	ldr	r3, [r1, #24]
 8000470:	ba1b      	rev	r3, r3
 8000472:	6183      	str	r3, [r0, #24]
 8000474:	69cb      	ldr	r3, [r1, #28]
 8000476:	ba1b      	rev	r3, r3
 8000478:	61c3      	str	r3, [r0, #28]
 800047a:	6a0b      	ldr	r3, [r1, #32]
 800047c:	ba1b      	rev	r3, r3
 800047e:	6203      	str	r3, [r0, #32]
 8000480:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000482:	ba1b      	rev	r3, r3
 8000484:	6243      	str	r3, [r0, #36]	; 0x24
 8000486:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8000488:	ba1b      	rev	r3, r3
 800048a:	6283      	str	r3, [r0, #40]	; 0x28
 800048c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800048e:	ba1b      	rev	r3, r3
 8000490:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000492:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000494:	ba1b      	rev	r3, r3
 8000496:	6303      	str	r3, [r0, #48]	; 0x30
 8000498:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800049a:	ba1b      	rev	r3, r3
 800049c:	6343      	str	r3, [r0, #52]	; 0x34
 800049e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80004a0:	ba1b      	rev	r3, r3
 80004a2:	6383      	str	r3, [r0, #56]	; 0x38
 80004a4:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80004a6:	ba09      	rev	r1, r1
 80004a8:	63c1      	str	r1, [r0, #60]	; 0x3c
 80004aa:	2018      	movs	r0, #24
 80004ac:	f85c 4c08 	ldr.w	r4, [ip, #-8]
 80004b0:	ea4f 41f4 	mov.w	r1, r4, ror #19
 80004b4:	ea91 4374 	eors.w	r3, r1, r4, ror #17
 80004b8:	f85c 1c3c 	ldr.w	r1, [ip, #-60]
 80004bc:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
 80004c0:	ea4f 47b1 	mov.w	r7, r1, ror #18
 80004c4:	f85c 4c1c 	ldr.w	r4, [ip, #-28]
 80004c8:	ea97 16f1 	eors.w	r6, r7, r1, ror #7
 80004cc:	4423      	add	r3, r4
 80004ce:	ea86 06d1 	eor.w	r6, r6, r1, lsr #3
 80004d2:	18f3      	adds	r3, r6, r3
 80004d4:	f85c 6c40 	ldr.w	r6, [ip, #-64]
 80004d8:	18f3      	adds	r3, r6, r3
 80004da:	f8cc 3000 	str.w	r3, [ip]
 80004de:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 80004e2:	ea4f 46f4 	mov.w	r6, r4, ror #19
 80004e6:	ea96 4374 	eors.w	r3, r6, r4, ror #17
 80004ea:	f85c 6c38 	ldr.w	r6, [ip, #-56]
 80004ee:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
 80004f2:	ea4f 4ab6 	mov.w	sl, r6, ror #18
 80004f6:	f85c 4c18 	ldr.w	r4, [ip, #-24]
 80004fa:	ea8a 17f6 	eor.w	r7, sl, r6, ror #7
 80004fe:	4423      	add	r3, r4
 8000500:	ea87 07d6 	eor.w	r7, r7, r6, lsr #3
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	18c9      	adds	r1, r1, r3
 8000508:	f8cc 1004 	str.w	r1, [ip, #4]
 800050c:	1e40      	subs	r0, r0, #1
 800050e:	f10c 0c08 	add.w	ip, ip, #8
 8000512:	d1cb      	bne.n	80004ac <cmox_sha256_transform+0x70>
 8000514:	4610      	mov	r0, r2
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800051a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800051c:	f8d0 e060 	ldr.w	lr, [r0, #96]	; 0x60
 8000520:	f8d0 8070 	ldr.w	r8, [r0, #112]	; 0x70
 8000524:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8000526:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8000528:	f8d0 a068 	ldr.w	sl, [r0, #104]	; 0x68
 800052c:	6f85      	ldr	r5, [r0, #120]	; 0x78
 800052e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8000624 <cmox_sha256_transform+0x1e8>
 8000532:	f10d 0c04 	add.w	ip, sp, #4
 8000536:	2020      	movs	r0, #32
 8000538:	ea4f 16b3 	mov.w	r6, r3, ror #6
 800053c:	ea86 26f3 	eor.w	r6, r6, r3, ror #11
 8000540:	ea86 6673 	eor.w	r6, r6, r3, ror #25
 8000544:	1975      	adds	r5, r6, r5
 8000546:	ea84 0608 	eor.w	r6, r4, r8
 800054a:	401e      	ands	r6, r3
 800054c:	4066      	eors	r6, r4
 800054e:	1975      	adds	r5, r6, r5
 8000550:	f859 6b04 	ldr.w	r6, [r9], #4
 8000554:	f85c 7b04 	ldr.w	r7, [ip], #4
 8000558:	1975      	adds	r5, r6, r5
 800055a:	197e      	adds	r6, r7, r5
 800055c:	ea4f 07b1 	mov.w	r7, r1, ror #2
 8000560:	ea4e 0b01 	orr.w	fp, lr, r1
 8000564:	ea87 3771 	eor.w	r7, r7, r1, ror #13
 8000568:	ea0e 0501 	and.w	r5, lr, r1
 800056c:	ea0b 0b02 	and.w	fp, fp, r2
 8000570:	ea87 57b1 	eor.w	r7, r7, r1, ror #22
 8000574:	ea4b 0505 	orr.w	r5, fp, r5
 8000578:	19ef      	adds	r7, r5, r7
 800057a:	4645      	mov	r5, r8
 800057c:	eb06 080a 	add.w	r8, r6, sl
 8000580:	4692      	mov	sl, r2
 8000582:	4672      	mov	r2, lr
 8000584:	eb07 0e06 	add.w	lr, r7, r6
 8000588:	ea4f 16b8 	mov.w	r6, r8, ror #6
 800058c:	ea86 26f8 	eor.w	r6, r6, r8, ror #11
 8000590:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 8000594:	1934      	adds	r4, r6, r4
 8000596:	ea85 0603 	eor.w	r6, r5, r3
 800059a:	ea06 0608 	and.w	r6, r6, r8
 800059e:	406e      	eors	r6, r5
 80005a0:	1934      	adds	r4, r6, r4
 80005a2:	f859 6b04 	ldr.w	r6, [r9], #4
 80005a6:	f85c 7b04 	ldr.w	r7, [ip], #4
 80005aa:	1934      	adds	r4, r6, r4
 80005ac:	193e      	adds	r6, r7, r4
 80005ae:	ea4f 07be 	mov.w	r7, lr, ror #2
 80005b2:	ea41 0b0e 	orr.w	fp, r1, lr
 80005b6:	ea87 377e 	eor.w	r7, r7, lr, ror #13
 80005ba:	ea01 040e 	and.w	r4, r1, lr
 80005be:	ea0b 0b02 	and.w	fp, fp, r2
 80005c2:	ea87 57be 	eor.w	r7, r7, lr, ror #22
 80005c6:	ea4b 0404 	orr.w	r4, fp, r4
 80005ca:	19e7      	adds	r7, r4, r7
 80005cc:	461c      	mov	r4, r3
 80005ce:	eb06 030a 	add.w	r3, r6, sl
 80005d2:	4692      	mov	sl, r2
 80005d4:	460a      	mov	r2, r1
 80005d6:	19b9      	adds	r1, r7, r6
 80005d8:	1e40      	subs	r0, r0, #1
 80005da:	d1ad      	bne.n	8000538 <cmox_sha256_transform+0xfc>
 80005dc:	9800      	ldr	r0, [sp, #0]
 80005de:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 80005e0:	4431      	add	r1, r6
 80005e2:	65c1      	str	r1, [r0, #92]	; 0x5c
 80005e4:	9900      	ldr	r1, [sp, #0]
 80005e6:	6e08      	ldr	r0, [r1, #96]	; 0x60
 80005e8:	4470      	add	r0, lr
 80005ea:	6608      	str	r0, [r1, #96]	; 0x60
 80005ec:	9800      	ldr	r0, [sp, #0]
 80005ee:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80005f0:	1852      	adds	r2, r2, r1
 80005f2:	6642      	str	r2, [r0, #100]	; 0x64
 80005f4:	9900      	ldr	r1, [sp, #0]
 80005f6:	6e88      	ldr	r0, [r1, #104]	; 0x68
 80005f8:	4450      	add	r0, sl
 80005fa:	6688      	str	r0, [r1, #104]	; 0x68
 80005fc:	9800      	ldr	r0, [sp, #0]
 80005fe:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8000600:	185b      	adds	r3, r3, r1
 8000602:	66c3      	str	r3, [r0, #108]	; 0x6c
 8000604:	9900      	ldr	r1, [sp, #0]
 8000606:	6f08      	ldr	r0, [r1, #112]	; 0x70
 8000608:	4440      	add	r0, r8
 800060a:	6708      	str	r0, [r1, #112]	; 0x70
 800060c:	9800      	ldr	r0, [sp, #0]
 800060e:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8000610:	1864      	adds	r4, r4, r1
 8000612:	6744      	str	r4, [r0, #116]	; 0x74
 8000614:	9900      	ldr	r1, [sp, #0]
 8000616:	6f88      	ldr	r0, [r1, #120]	; 0x78
 8000618:	182d      	adds	r5, r5, r0
 800061a:	678d      	str	r5, [r1, #120]	; 0x78
 800061c:	b041      	add	sp, #260	; 0x104
 800061e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000622:	bf00      	nop
 8000624:	0800c3a4 	.word	0x0800c3a4

08000628 <cmox_md_updateState_small>:
 8000628:	2220      	movs	r2, #32
 800062a:	305c      	adds	r0, #92	; 0x5c
 800062c:	f00b b8cb 	b.w	800b7c6 <__aeabi_memcpy>

08000630 <cmox_md_copyLastState_small>:
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000632:	6884      	ldr	r4, [r0, #8]
 8000634:	08a3      	lsrs	r3, r4, #2
 8000636:	2200      	movs	r2, #0
 8000638:	f004 0403 	and.w	r4, r4, #3
 800063c:	e007      	b.n	800064e <cmox_md_copyLastState_small+0x1e>
 800063e:	f100 055c 	add.w	r5, r0, #92	; 0x5c
 8000642:	f855 6022 	ldr.w	r6, [r5, r2, lsl #2]
 8000646:	ba35      	rev	r5, r6
 8000648:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 800064c:	1c52      	adds	r2, r2, #1
 800064e:	429a      	cmp	r2, r3
 8000650:	d3f5      	bcc.n	800063e <cmox_md_copyLastState_small+0xe>
 8000652:	2200      	movs	r2, #0
 8000654:	e00b      	b.n	800066e <cmox_md_copyLastState_small+0x3e>
 8000656:	f100 055c 	add.w	r5, r0, #92	; 0x5c
 800065a:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800065e:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
 8000662:	00d5      	lsls	r5, r2, #3
 8000664:	f1c5 0518 	rsb	r5, r5, #24
 8000668:	40ee      	lsrs	r6, r5
 800066a:	55ce      	strb	r6, [r1, r7]
 800066c:	1c52      	adds	r2, r2, #1
 800066e:	42a2      	cmp	r2, r4
 8000670:	d3f1      	bcc.n	8000656 <cmox_md_copyLastState_small+0x26>
 8000672:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000674 <cmox_md_padMsgLen_small>:
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	68c4      	ldr	r4, [r0, #12]
 8000678:	6903      	ldr	r3, [r0, #16]
 800067a:	2200      	movs	r2, #0
 800067c:	1ae3      	subs	r3, r4, r3
 800067e:	18d5      	adds	r5, r2, r3
 8000680:	5c8c      	ldrb	r4, [r1, r2]
 8000682:	4405      	add	r5, r0
 8000684:	1c52      	adds	r2, r2, #1
 8000686:	2a08      	cmp	r2, #8
 8000688:	772c      	strb	r4, [r5, #28]
 800068a:	d3f8      	bcc.n	800067e <cmox_md_padMsgLen_small+0xa>
 800068c:	bd30      	pop	{r4, r5, pc}

0800068e <cmox_md_construct>:
 800068e:	6003      	str	r3, [r0, #0]
 8000690:	60c1      	str	r1, [r0, #12]
 8000692:	6102      	str	r2, [r0, #16]
 8000694:	4770      	bx	lr

08000696 <cmox_md_init>:
 8000696:	b538      	push	{r3, r4, r5, lr}
 8000698:	4604      	mov	r4, r0
 800069a:	4615      	mov	r5, r2
 800069c:	2200      	movs	r2, #0
 800069e:	6062      	str	r2, [r4, #4]
 80006a0:	6823      	ldr	r3, [r4, #0]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	4790      	blx	r2
 80006a6:	2000      	movs	r0, #0
 80006a8:	6160      	str	r0, [r4, #20]
 80006aa:	61a0      	str	r0, [r4, #24]
 80006ac:	60a5      	str	r5, [r4, #8]
 80006ae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80006b2:	bd32      	pop	{r1, r4, r5, pc}

080006b4 <cmox_md_setTagSize>:
 80006b4:	6081      	str	r1, [r0, #8]
 80006b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80006ba:	4770      	bx	lr

080006bc <cmox_md_append>:
 80006bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006c0:	4604      	mov	r4, r0
 80006c2:	7920      	ldrb	r0, [r4, #4]
 80006c4:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80006c8:	0745      	lsls	r5, r0, #29
 80006ca:	bf48      	it	mi
 80006cc:	4824      	ldrmi	r0, [pc, #144]	; (8000760 <cmox_md_append+0xa4>)
 80006ce:	d445      	bmi.n	800075c <cmox_md_append+0xa0>
 80006d0:	6966      	ldr	r6, [r4, #20]
 80006d2:	461d      	mov	r5, r3
 80006d4:	f1a8 0001 	sub.w	r0, r8, #1
 80006d8:	ea00 03d6 	and.w	r3, r0, r6, lsr #3
 80006dc:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 80006e0:	ebb6 0fc5 	cmp.w	r6, r5, lsl #3
 80006e4:	6166      	str	r6, [r4, #20]
 80006e6:	d202      	bcs.n	80006ee <cmox_md_append+0x32>
 80006e8:	69a6      	ldr	r6, [r4, #24]
 80006ea:	1c76      	adds	r6, r6, #1
 80006ec:	61a6      	str	r6, [r4, #24]
 80006ee:	4617      	mov	r7, r2
 80006f0:	69a6      	ldr	r6, [r4, #24]
 80006f2:	eb06 7655 	add.w	r6, r6, r5, lsr #29
 80006f6:	61a6      	str	r6, [r4, #24]
 80006f8:	460e      	mov	r6, r1
 80006fa:	18e9      	adds	r1, r5, r3
 80006fc:	4288      	cmp	r0, r1
 80006fe:	d225      	bcs.n	800074c <cmox_md_append+0x90>
 8000700:	eba8 0903 	sub.w	r9, r8, r3
 8000704:	464a      	mov	r2, r9
 8000706:	4631      	mov	r1, r6
 8000708:	18f8      	adds	r0, r7, r3
 800070a:	f00b f85c 	bl	800b7c6 <__aeabi_memcpy>
 800070e:	6822      	ldr	r2, [r4, #0]
 8000710:	6813      	ldr	r3, [r2, #0]
 8000712:	4639      	mov	r1, r7
 8000714:	e00f      	b.n	8000736 <cmox_md_append+0x7a>
 8000716:	4642      	mov	r2, r8
 8000718:	4638      	mov	r0, r7
 800071a:	f00b f854 	bl	800b7c6 <__aeabi_memcpy>
 800071e:	6823      	ldr	r3, [r4, #0]
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	4639      	mov	r1, r7
 8000724:	4620      	mov	r0, r4
 8000726:	4790      	blx	r2
 8000728:	e007      	b.n	800073a <cmox_md_append+0x7e>
 800072a:	1831      	adds	r1, r6, r0
 800072c:	f011 0003 	ands.w	r0, r1, #3
 8000730:	d1f1      	bne.n	8000716 <cmox_md_append+0x5a>
 8000732:	6822      	ldr	r2, [r4, #0]
 8000734:	6813      	ldr	r3, [r2, #0]
 8000736:	4620      	mov	r0, r4
 8000738:	4798      	blx	r3
 800073a:	4648      	mov	r0, r9
 800073c:	eb00 0908 	add.w	r9, r0, r8
 8000740:	f1a9 0101 	sub.w	r1, r9, #1
 8000744:	42a9      	cmp	r1, r5
 8000746:	d3f0      	bcc.n	800072a <cmox_md_append+0x6e>
 8000748:	2300      	movs	r3, #0
 800074a:	e000      	b.n	800074e <cmox_md_append+0x92>
 800074c:	2000      	movs	r0, #0
 800074e:	1a2a      	subs	r2, r5, r0
 8000750:	1831      	adds	r1, r6, r0
 8000752:	18f8      	adds	r0, r7, r3
 8000754:	f00b f837 	bl	800b7c6 <__aeabi_memcpy>
 8000758:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800075c:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
 8000760:	00020004 	.word	0x00020004

08000764 <cmox_md_generateTag>:
 8000764:	e92d 4ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000768:	4602      	mov	r2, r0
 800076a:	b085      	sub	sp, #20
 800076c:	68d0      	ldr	r0, [r2, #12]
 800076e:	6913      	ldr	r3, [r2, #16]
 8000770:	f8df c16c 	ldr.w	ip, [pc, #364]	; 80008e0 <cmox_md_generateTag+0x17c>
 8000774:	f8df 816c 	ldr.w	r8, [pc, #364]	; 80008e4 <cmox_md_generateTag+0x180>
 8000778:	eba0 0a03 	sub.w	sl, r0, r3
 800077c:	6850      	ldr	r0, [r2, #4]
 800077e:	f040 0004 	orr.w	r0, r0, #4
 8000782:	6050      	str	r0, [r2, #4]
 8000784:	2700      	movs	r7, #0
 8000786:	a803      	add	r0, sp, #12
 8000788:	9002      	str	r0, [sp, #8]
 800078a:	f10d 0e0c 	add.w	lr, sp, #12
 800078e:	e9d8 3400 	ldrd	r3, r4, [r8]
 8000792:	a803      	add	r0, sp, #12
 8000794:	4d54      	ldr	r5, [pc, #336]	; (80008e8 <cmox_md_generateTag+0x184>)
 8000796:	e9c0 3400 	strd	r3, r4, [r0]
 800079a:	7828      	ldrb	r0, [r5, #0]
 800079c:	4d53      	ldr	r5, [pc, #332]	; (80008ec <cmox_md_generateTag+0x188>)
 800079e:	2800      	cmp	r0, #0
 80007a0:	bf0c      	ite	eq
 80007a2:	2300      	moveq	r3, #0
 80007a4:	2304      	movne	r3, #4
 80007a6:	4699      	mov	r9, r3
 80007a8:	f85c 3003 	ldr.w	r3, [ip, r3]
 80007ac:	f85e 4009 	ldr.w	r4, [lr, r9]
 80007b0:	4423      	add	r3, r4
 80007b2:	2601      	movs	r6, #1
 80007b4:	601d      	str	r5, [r3, #0]
 80007b6:	681c      	ldr	r4, [r3, #0]
 80007b8:	609e      	str	r6, [r3, #8]
 80007ba:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80007be:	9d03      	ldr	r5, [sp, #12]
 80007c0:	f8dc 9000 	ldr.w	r9, [ip]
 80007c4:	f8de 6004 	ldr.w	r6, [lr, #4]
 80007c8:	405d      	eors	r5, r3
 80007ca:	4065      	eors	r5, r4
 80007cc:	4c48      	ldr	r4, [pc, #288]	; (80008f0 <cmox_md_generateTag+0x18c>)
 80007ce:	4065      	eors	r5, r4
 80007d0:	ea89 0606 	eor.w	r6, r9, r6
 80007d4:	4c47      	ldr	r4, [pc, #284]	; (80008f4 <cmox_md_generateTag+0x190>)
 80007d6:	4066      	eors	r6, r4
 80007d8:	1975      	adds	r5, r6, r5
 80007da:	4c47      	ldr	r4, [pc, #284]	; (80008f8 <cmox_md_generateTag+0x194>)
 80007dc:	4065      	eors	r5, r4
 80007de:	e9d8 6b00 	ldrd	r6, fp, [r8]
 80007e2:	ac03      	add	r4, sp, #12
 80007e4:	2800      	cmp	r0, #0
 80007e6:	e9c4 6b00 	strd	r6, fp, [r4]
 80007ea:	bf0e      	itee	eq
 80007ec:	2400      	moveq	r4, #0
 80007ee:	2004      	movne	r0, #4
 80007f0:	2404      	movne	r4, #4
 80007f2:	9e02      	ldr	r6, [sp, #8]
 80007f4:	f85c 0000 	ldr.w	r0, [ip, r0]
 80007f8:	5934      	ldr	r4, [r6, r4]
 80007fa:	1820      	adds	r0, r4, r0
 80007fc:	4c3f      	ldr	r4, [pc, #252]	; (80008fc <cmox_md_generateTag+0x198>)
 80007fe:	6004      	str	r4, [r0, #0]
 8000800:	2601      	movs	r6, #1
 8000802:	6804      	ldr	r4, [r0, #0]
 8000804:	6086      	str	r6, [r0, #8]
 8000806:	9803      	ldr	r0, [sp, #12]
 8000808:	9e02      	ldr	r6, [sp, #8]
 800080a:	4043      	eors	r3, r0
 800080c:	4063      	eors	r3, r4
 800080e:	4c38      	ldr	r4, [pc, #224]	; (80008f0 <cmox_md_generateTag+0x18c>)
 8000810:	6870      	ldr	r0, [r6, #4]
 8000812:	4063      	eors	r3, r4
 8000814:	ea89 0000 	eor.w	r0, r9, r0
 8000818:	4c36      	ldr	r4, [pc, #216]	; (80008f4 <cmox_md_generateTag+0x190>)
 800081a:	4060      	eors	r0, r4
 800081c:	4403      	add	r3, r0
 800081e:	4838      	ldr	r0, [pc, #224]	; (8000900 <cmox_md_generateTag+0x19c>)
 8000820:	4043      	eors	r3, r0
 8000822:	0028      	movs	r0, r5
 8000824:	bf18      	it	ne
 8000826:	2001      	movne	r0, #1
 8000828:	1e5b      	subs	r3, r3, #1
 800082a:	419b      	sbcs	r3, r3
 800082c:	2f04      	cmp	r7, #4
 800082e:	bf2c      	ite	cs
 8000830:	b2c0      	uxtbcs	r0, r0
 8000832:	0fd8      	lsrcc	r0, r3, #31
 8000834:	f102 0314 	add.w	r3, r2, #20
 8000838:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800083c:	f007 0303 	and.w	r3, r7, #3
 8000840:	f1c3 0303 	rsb	r3, r3, #3
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	40d8      	lsrs	r0, r3
 8000848:	f80d 0007 	strb.w	r0, [sp, r7]
 800084c:	1c7f      	adds	r7, r7, #1
 800084e:	2f08      	cmp	r7, #8
 8000850:	d39d      	bcc.n	800078e <cmox_md_generateTag+0x2a>
 8000852:	4615      	mov	r5, r2
 8000854:	460c      	mov	r4, r1
 8000856:	696a      	ldr	r2, [r5, #20]
 8000858:	69ab      	ldr	r3, [r5, #24]
 800085a:	68e8      	ldr	r0, [r5, #12]
 800085c:	08d2      	lsrs	r2, r2, #3
 800085e:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
 8000862:	1e40      	subs	r0, r0, #1
 8000864:	ea00 0702 	and.w	r7, r0, r2
 8000868:	2300      	movs	r3, #0
 800086a:	4002      	ands	r2, r0
 800086c:	429b      	cmp	r3, r3
 800086e:	d80a      	bhi.n	8000886 <cmox_md_generateTag+0x122>
 8000870:	4552      	cmp	r2, sl
 8000872:	d208      	bcs.n	8000886 <cmox_md_generateTag+0x122>
 8000874:	2080      	movs	r0, #128	; 0x80
 8000876:	55e0      	strb	r0, [r4, r7]
 8000878:	1c7f      	adds	r7, r7, #1
 800087a:	4557      	cmp	r7, sl
 800087c:	d216      	bcs.n	80008ac <cmox_md_generateTag+0x148>
 800087e:	ebaa 0107 	sub.w	r1, sl, r7
 8000882:	19e0      	adds	r0, r4, r7
 8000884:	e010      	b.n	80008a8 <cmox_md_generateTag+0x144>
 8000886:	2080      	movs	r0, #128	; 0x80
 8000888:	55e0      	strb	r0, [r4, r7]
 800088a:	e000      	b.n	800088e <cmox_md_generateTag+0x12a>
 800088c:	55e3      	strb	r3, [r4, r7]
 800088e:	68e8      	ldr	r0, [r5, #12]
 8000890:	1c7f      	adds	r7, r7, #1
 8000892:	4287      	cmp	r7, r0
 8000894:	d3fa      	bcc.n	800088c <cmox_md_generateTag+0x128>
 8000896:	682a      	ldr	r2, [r5, #0]
 8000898:	6813      	ldr	r3, [r2, #0]
 800089a:	4628      	mov	r0, r5
 800089c:	4798      	blx	r3
 800089e:	f1ba 0f00 	cmp.w	sl, #0
 80008a2:	d003      	beq.n	80008ac <cmox_md_generateTag+0x148>
 80008a4:	4651      	mov	r1, sl
 80008a6:	4620      	mov	r0, r4
 80008a8:	f00a ff8f 	bl	800b7ca <__aeabi_memclr>
 80008ac:	682a      	ldr	r2, [r5, #0]
 80008ae:	9e06      	ldr	r6, [sp, #24]
 80008b0:	9f05      	ldr	r7, [sp, #20]
 80008b2:	6893      	ldr	r3, [r2, #8]
 80008b4:	4669      	mov	r1, sp
 80008b6:	4628      	mov	r0, r5
 80008b8:	4798      	blx	r3
 80008ba:	682a      	ldr	r2, [r5, #0]
 80008bc:	f8d2 9000 	ldr.w	r9, [r2]
 80008c0:	4621      	mov	r1, r4
 80008c2:	4628      	mov	r0, r5
 80008c4:	47c8      	blx	r9
 80008c6:	682b      	ldr	r3, [r5, #0]
 80008c8:	68da      	ldr	r2, [r3, #12]
 80008ca:	4639      	mov	r1, r7
 80008cc:	4628      	mov	r0, r5
 80008ce:	4790      	blx	r2
 80008d0:	b10e      	cbz	r6, 80008d6 <cmox_md_generateTag+0x172>
 80008d2:	68a8      	ldr	r0, [r5, #8]
 80008d4:	6030      	str	r0, [r6, #0]
 80008d6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80008da:	b007      	add	sp, #28
 80008dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008e0:	0800c394 	.word	0x0800c394
 80008e4:	08000904 	.word	0x08000904
 80008e8:	20000188 	.word	0x20000188
 80008ec:	9310c55f 	.word	0x9310c55f
 80008f0:	12008504 	.word	0x12008504
 80008f4:	7a0168fc 	.word	0x7a0168fc
 80008f8:	ff24f5c0 	.word	0xff24f5c0
 80008fc:	d433af24 	.word	0xd433af24
 8000900:	8b69af26 	.word	0x8b69af26
 8000904:	0101b004 	.word	0x0101b004
 8000908:	45011700 	.word	0x45011700

0800090c <__aeabi_memset>:
 800090c:	b470      	push	{r4, r5, r6}
 800090e:	0784      	lsls	r4, r0, #30
 8000910:	d046      	beq.n	80009a0 <__aeabi_memset+0x94>
 8000912:	1e4c      	subs	r4, r1, #1
 8000914:	2900      	cmp	r1, #0
 8000916:	d041      	beq.n	800099c <__aeabi_memset+0x90>
 8000918:	b2d5      	uxtb	r5, r2
 800091a:	4603      	mov	r3, r0
 800091c:	e002      	b.n	8000924 <__aeabi_memset+0x18>
 800091e:	1e61      	subs	r1, r4, #1
 8000920:	b3e4      	cbz	r4, 800099c <__aeabi_memset+0x90>
 8000922:	460c      	mov	r4, r1
 8000924:	f803 5b01 	strb.w	r5, [r3], #1
 8000928:	0799      	lsls	r1, r3, #30
 800092a:	d1f8      	bne.n	800091e <__aeabi_memset+0x12>
 800092c:	2c03      	cmp	r4, #3
 800092e:	d92e      	bls.n	800098e <__aeabi_memset+0x82>
 8000930:	b2d5      	uxtb	r5, r2
 8000932:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000936:	2c0f      	cmp	r4, #15
 8000938:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800093c:	d919      	bls.n	8000972 <__aeabi_memset+0x66>
 800093e:	4626      	mov	r6, r4
 8000940:	f103 0110 	add.w	r1, r3, #16
 8000944:	3e10      	subs	r6, #16
 8000946:	2e0f      	cmp	r6, #15
 8000948:	f841 5c10 	str.w	r5, [r1, #-16]
 800094c:	f841 5c0c 	str.w	r5, [r1, #-12]
 8000950:	f841 5c08 	str.w	r5, [r1, #-8]
 8000954:	f841 5c04 	str.w	r5, [r1, #-4]
 8000958:	f101 0110 	add.w	r1, r1, #16
 800095c:	d8f2      	bhi.n	8000944 <__aeabi_memset+0x38>
 800095e:	f1a4 0110 	sub.w	r1, r4, #16
 8000962:	f021 010f 	bic.w	r1, r1, #15
 8000966:	f004 040f 	and.w	r4, r4, #15
 800096a:	3110      	adds	r1, #16
 800096c:	2c03      	cmp	r4, #3
 800096e:	440b      	add	r3, r1
 8000970:	d90d      	bls.n	800098e <__aeabi_memset+0x82>
 8000972:	461e      	mov	r6, r3
 8000974:	4621      	mov	r1, r4
 8000976:	3904      	subs	r1, #4
 8000978:	2903      	cmp	r1, #3
 800097a:	f846 5b04 	str.w	r5, [r6], #4
 800097e:	d8fa      	bhi.n	8000976 <__aeabi_memset+0x6a>
 8000980:	1f21      	subs	r1, r4, #4
 8000982:	f021 0103 	bic.w	r1, r1, #3
 8000986:	3104      	adds	r1, #4
 8000988:	440b      	add	r3, r1
 800098a:	f004 0403 	and.w	r4, r4, #3
 800098e:	b12c      	cbz	r4, 800099c <__aeabi_memset+0x90>
 8000990:	b2d2      	uxtb	r2, r2
 8000992:	441c      	add	r4, r3
 8000994:	f803 2b01 	strb.w	r2, [r3], #1
 8000998:	42a3      	cmp	r3, r4
 800099a:	d1fb      	bne.n	8000994 <__aeabi_memset+0x88>
 800099c:	bc70      	pop	{r4, r5, r6}
 800099e:	4770      	bx	lr
 80009a0:	460c      	mov	r4, r1
 80009a2:	4603      	mov	r3, r0
 80009a4:	e7c2      	b.n	800092c <__aeabi_memset+0x20>
	...

080009b0 <memchr>:
 80009b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80009b4:	2a10      	cmp	r2, #16
 80009b6:	db2b      	blt.n	8000a10 <memchr+0x60>
 80009b8:	f010 0f07 	tst.w	r0, #7
 80009bc:	d008      	beq.n	80009d0 <memchr+0x20>
 80009be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80009c2:	3a01      	subs	r2, #1
 80009c4:	428b      	cmp	r3, r1
 80009c6:	d02d      	beq.n	8000a24 <memchr+0x74>
 80009c8:	f010 0f07 	tst.w	r0, #7
 80009cc:	b342      	cbz	r2, 8000a20 <memchr+0x70>
 80009ce:	d1f6      	bne.n	80009be <memchr+0xe>
 80009d0:	b4f0      	push	{r4, r5, r6, r7}
 80009d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80009d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80009da:	f022 0407 	bic.w	r4, r2, #7
 80009de:	f07f 0700 	mvns.w	r7, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80009e8:	3c08      	subs	r4, #8
 80009ea:	ea85 0501 	eor.w	r5, r5, r1
 80009ee:	ea86 0601 	eor.w	r6, r6, r1
 80009f2:	fa85 f547 	uadd8	r5, r5, r7
 80009f6:	faa3 f587 	sel	r5, r3, r7
 80009fa:	fa86 f647 	uadd8	r6, r6, r7
 80009fe:	faa5 f687 	sel	r6, r5, r7
 8000a02:	b98e      	cbnz	r6, 8000a28 <memchr+0x78>
 8000a04:	d1ee      	bne.n	80009e4 <memchr+0x34>
 8000a06:	bcf0      	pop	{r4, r5, r6, r7}
 8000a08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000a0c:	f002 0207 	and.w	r2, r2, #7
 8000a10:	b132      	cbz	r2, 8000a20 <memchr+0x70>
 8000a12:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000a16:	3a01      	subs	r2, #1
 8000a18:	ea83 0301 	eor.w	r3, r3, r1
 8000a1c:	b113      	cbz	r3, 8000a24 <memchr+0x74>
 8000a1e:	d1f8      	bne.n	8000a12 <memchr+0x62>
 8000a20:	2000      	movs	r0, #0
 8000a22:	4770      	bx	lr
 8000a24:	3801      	subs	r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	2d00      	cmp	r5, #0
 8000a2a:	bf06      	itte	eq
 8000a2c:	4635      	moveq	r5, r6
 8000a2e:	3803      	subeq	r0, #3
 8000a30:	3807      	subne	r0, #7
 8000a32:	f015 0f01 	tst.w	r5, #1
 8000a36:	d107      	bne.n	8000a48 <memchr+0x98>
 8000a38:	3001      	adds	r0, #1
 8000a3a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000a3e:	bf02      	ittt	eq
 8000a40:	3001      	addeq	r0, #1
 8000a42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000a46:	3001      	addeq	r0, #1
 8000a48:	bcf0      	pop	{r4, r5, r6, r7}
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_uldivmod>:
 8000a50:	b953      	cbnz	r3, 8000a68 <__aeabi_uldivmod+0x18>
 8000a52:	b94a      	cbnz	r2, 8000a68 <__aeabi_uldivmod+0x18>
 8000a54:	2900      	cmp	r1, #0
 8000a56:	bf08      	it	eq
 8000a58:	2800      	cmpeq	r0, #0
 8000a5a:	bf1c      	itt	ne
 8000a5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a60:	f04f 30ff 	movne.w	r0, #4294967295
 8000a64:	f000 b970 	b.w	8000d48 <__aeabi_idiv0>
 8000a68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a70:	f000 f806 	bl	8000a80 <__udivmoddi4>
 8000a74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a7c:	b004      	add	sp, #16
 8000a7e:	4770      	bx	lr

08000a80 <__udivmoddi4>:
 8000a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a84:	9e08      	ldr	r6, [sp, #32]
 8000a86:	460d      	mov	r5, r1
 8000a88:	4604      	mov	r4, r0
 8000a8a:	460f      	mov	r7, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14a      	bne.n	8000b26 <__udivmoddi4+0xa6>
 8000a90:	428a      	cmp	r2, r1
 8000a92:	4694      	mov	ip, r2
 8000a94:	d965      	bls.n	8000b62 <__udivmoddi4+0xe2>
 8000a96:	fab2 f382 	clz	r3, r2
 8000a9a:	b143      	cbz	r3, 8000aae <__udivmoddi4+0x2e>
 8000a9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aa0:	f1c3 0220 	rsb	r2, r3, #32
 8000aa4:	409f      	lsls	r7, r3
 8000aa6:	fa20 f202 	lsr.w	r2, r0, r2
 8000aaa:	4317      	orrs	r7, r2
 8000aac:	409c      	lsls	r4, r3
 8000aae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ab2:	fa1f f58c 	uxth.w	r5, ip
 8000ab6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000aba:	0c22      	lsrs	r2, r4, #16
 8000abc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ac0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac4:	fb01 f005 	mul.w	r0, r1, r5
 8000ac8:	4290      	cmp	r0, r2
 8000aca:	d90a      	bls.n	8000ae2 <__udivmoddi4+0x62>
 8000acc:	eb1c 0202 	adds.w	r2, ip, r2
 8000ad0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad4:	f080 811c 	bcs.w	8000d10 <__udivmoddi4+0x290>
 8000ad8:	4290      	cmp	r0, r2
 8000ada:	f240 8119 	bls.w	8000d10 <__udivmoddi4+0x290>
 8000ade:	3902      	subs	r1, #2
 8000ae0:	4462      	add	r2, ip
 8000ae2:	1a12      	subs	r2, r2, r0
 8000ae4:	b2a4      	uxth	r4, r4
 8000ae6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aea:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000af2:	fb00 f505 	mul.w	r5, r0, r5
 8000af6:	42a5      	cmp	r5, r4
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x90>
 8000afa:	eb1c 0404 	adds.w	r4, ip, r4
 8000afe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b02:	f080 8107 	bcs.w	8000d14 <__udivmoddi4+0x294>
 8000b06:	42a5      	cmp	r5, r4
 8000b08:	f240 8104 	bls.w	8000d14 <__udivmoddi4+0x294>
 8000b0c:	4464      	add	r4, ip
 8000b0e:	3802      	subs	r0, #2
 8000b10:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b14:	1b64      	subs	r4, r4, r5
 8000b16:	2100      	movs	r1, #0
 8000b18:	b11e      	cbz	r6, 8000b22 <__udivmoddi4+0xa2>
 8000b1a:	40dc      	lsrs	r4, r3
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e9c6 4300 	strd	r4, r3, [r6]
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0xbc>
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	f000 80ed 	beq.w	8000d0a <__udivmoddi4+0x28a>
 8000b30:	2100      	movs	r1, #0
 8000b32:	e9c6 0500 	strd	r0, r5, [r6]
 8000b36:	4608      	mov	r0, r1
 8000b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3c:	fab3 f183 	clz	r1, r3
 8000b40:	2900      	cmp	r1, #0
 8000b42:	d149      	bne.n	8000bd8 <__udivmoddi4+0x158>
 8000b44:	42ab      	cmp	r3, r5
 8000b46:	d302      	bcc.n	8000b4e <__udivmoddi4+0xce>
 8000b48:	4282      	cmp	r2, r0
 8000b4a:	f200 80f8 	bhi.w	8000d3e <__udivmoddi4+0x2be>
 8000b4e:	1a84      	subs	r4, r0, r2
 8000b50:	eb65 0203 	sbc.w	r2, r5, r3
 8000b54:	2001      	movs	r0, #1
 8000b56:	4617      	mov	r7, r2
 8000b58:	2e00      	cmp	r6, #0
 8000b5a:	d0e2      	beq.n	8000b22 <__udivmoddi4+0xa2>
 8000b5c:	e9c6 4700 	strd	r4, r7, [r6]
 8000b60:	e7df      	b.n	8000b22 <__udivmoddi4+0xa2>
 8000b62:	b902      	cbnz	r2, 8000b66 <__udivmoddi4+0xe6>
 8000b64:	deff      	udf	#255	; 0xff
 8000b66:	fab2 f382 	clz	r3, r2
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x210>
 8000b70:	1a8a      	subs	r2, r1, r2
 8000b72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b76:	fa1f fe8c 	uxth.w	lr, ip
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b80:	fb07 2015 	mls	r0, r7, r5, r2
 8000b84:	0c22      	lsrs	r2, r4, #16
 8000b86:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b8a:	fb0e f005 	mul.w	r0, lr, r5
 8000b8e:	4290      	cmp	r0, r2
 8000b90:	d908      	bls.n	8000ba4 <__udivmoddi4+0x124>
 8000b92:	eb1c 0202 	adds.w	r2, ip, r2
 8000b96:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b9a:	d202      	bcs.n	8000ba2 <__udivmoddi4+0x122>
 8000b9c:	4290      	cmp	r0, r2
 8000b9e:	f200 80cb 	bhi.w	8000d38 <__udivmoddi4+0x2b8>
 8000ba2:	4645      	mov	r5, r8
 8000ba4:	1a12      	subs	r2, r2, r0
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bac:	fb07 2210 	mls	r2, r7, r0, r2
 8000bb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb8:	45a6      	cmp	lr, r4
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x14e>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc4:	d202      	bcs.n	8000bcc <__udivmoddi4+0x14c>
 8000bc6:	45a6      	cmp	lr, r4
 8000bc8:	f200 80bb 	bhi.w	8000d42 <__udivmoddi4+0x2c2>
 8000bcc:	4610      	mov	r0, r2
 8000bce:	eba4 040e 	sub.w	r4, r4, lr
 8000bd2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bd6:	e79f      	b.n	8000b18 <__udivmoddi4+0x98>
 8000bd8:	f1c1 0720 	rsb	r7, r1, #32
 8000bdc:	408b      	lsls	r3, r1
 8000bde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be6:	fa05 f401 	lsl.w	r4, r5, r1
 8000bea:	fa20 f307 	lsr.w	r3, r0, r7
 8000bee:	40fd      	lsrs	r5, r7
 8000bf0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	fb09 5518 	mls	r5, r9, r8, r5
 8000c02:	0c1c      	lsrs	r4, r3, #16
 8000c04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c08:	fb08 f50e 	mul.w	r5, r8, lr
 8000c0c:	42a5      	cmp	r5, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	fa00 f001 	lsl.w	r0, r0, r1
 8000c16:	d90b      	bls.n	8000c30 <__udivmoddi4+0x1b0>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c20:	f080 8088 	bcs.w	8000d34 <__udivmoddi4+0x2b4>
 8000c24:	42a5      	cmp	r5, r4
 8000c26:	f240 8085 	bls.w	8000d34 <__udivmoddi4+0x2b4>
 8000c2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2e:	4464      	add	r4, ip
 8000c30:	1b64      	subs	r4, r4, r5
 8000c32:	b29d      	uxth	r5, r3
 8000c34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c38:	fb09 4413 	mls	r4, r9, r3, r4
 8000c3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c40:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c44:	45a6      	cmp	lr, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x1da>
 8000c48:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c50:	d26c      	bcs.n	8000d2c <__udivmoddi4+0x2ac>
 8000c52:	45a6      	cmp	lr, r4
 8000c54:	d96a      	bls.n	8000d2c <__udivmoddi4+0x2ac>
 8000c56:	3b02      	subs	r3, #2
 8000c58:	4464      	add	r4, ip
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fba3 9502 	umull	r9, r5, r3, r2
 8000c62:	eba4 040e 	sub.w	r4, r4, lr
 8000c66:	42ac      	cmp	r4, r5
 8000c68:	46c8      	mov	r8, r9
 8000c6a:	46ae      	mov	lr, r5
 8000c6c:	d356      	bcc.n	8000d1c <__udivmoddi4+0x29c>
 8000c6e:	d053      	beq.n	8000d18 <__udivmoddi4+0x298>
 8000c70:	b156      	cbz	r6, 8000c88 <__udivmoddi4+0x208>
 8000c72:	ebb0 0208 	subs.w	r2, r0, r8
 8000c76:	eb64 040e 	sbc.w	r4, r4, lr
 8000c7a:	fa04 f707 	lsl.w	r7, r4, r7
 8000c7e:	40ca      	lsrs	r2, r1
 8000c80:	40cc      	lsrs	r4, r1
 8000c82:	4317      	orrs	r7, r2
 8000c84:	e9c6 7400 	strd	r7, r4, [r6]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c90:	f1c3 0120 	rsb	r1, r3, #32
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	fa20 f201 	lsr.w	r2, r0, r1
 8000c9c:	fa25 f101 	lsr.w	r1, r5, r1
 8000ca0:	409d      	lsls	r5, r3
 8000ca2:	432a      	orrs	r2, r5
 8000ca4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca8:	fa1f fe8c 	uxth.w	lr, ip
 8000cac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb0:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb4:	0c11      	lsrs	r1, r2, #16
 8000cb6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cba:	fb00 f50e 	mul.w	r5, r0, lr
 8000cbe:	428d      	cmp	r5, r1
 8000cc0:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x258>
 8000cc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cce:	d22f      	bcs.n	8000d30 <__udivmoddi4+0x2b0>
 8000cd0:	428d      	cmp	r5, r1
 8000cd2:	d92d      	bls.n	8000d30 <__udivmoddi4+0x2b0>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4461      	add	r1, ip
 8000cd8:	1b49      	subs	r1, r1, r5
 8000cda:	b292      	uxth	r2, r2
 8000cdc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ce0:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ce8:	fb05 f10e 	mul.w	r1, r5, lr
 8000cec:	4291      	cmp	r1, r2
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x282>
 8000cf0:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf8:	d216      	bcs.n	8000d28 <__udivmoddi4+0x2a8>
 8000cfa:	4291      	cmp	r1, r2
 8000cfc:	d914      	bls.n	8000d28 <__udivmoddi4+0x2a8>
 8000cfe:	3d02      	subs	r5, #2
 8000d00:	4462      	add	r2, ip
 8000d02:	1a52      	subs	r2, r2, r1
 8000d04:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d08:	e738      	b.n	8000b7c <__udivmoddi4+0xfc>
 8000d0a:	4631      	mov	r1, r6
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	e708      	b.n	8000b22 <__udivmoddi4+0xa2>
 8000d10:	4639      	mov	r1, r7
 8000d12:	e6e6      	b.n	8000ae2 <__udivmoddi4+0x62>
 8000d14:	4610      	mov	r0, r2
 8000d16:	e6fb      	b.n	8000b10 <__udivmoddi4+0x90>
 8000d18:	4548      	cmp	r0, r9
 8000d1a:	d2a9      	bcs.n	8000c70 <__udivmoddi4+0x1f0>
 8000d1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000d20:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d24:	3b01      	subs	r3, #1
 8000d26:	e7a3      	b.n	8000c70 <__udivmoddi4+0x1f0>
 8000d28:	4645      	mov	r5, r8
 8000d2a:	e7ea      	b.n	8000d02 <__udivmoddi4+0x282>
 8000d2c:	462b      	mov	r3, r5
 8000d2e:	e794      	b.n	8000c5a <__udivmoddi4+0x1da>
 8000d30:	4640      	mov	r0, r8
 8000d32:	e7d1      	b.n	8000cd8 <__udivmoddi4+0x258>
 8000d34:	46d0      	mov	r8, sl
 8000d36:	e77b      	b.n	8000c30 <__udivmoddi4+0x1b0>
 8000d38:	3d02      	subs	r5, #2
 8000d3a:	4462      	add	r2, ip
 8000d3c:	e732      	b.n	8000ba4 <__udivmoddi4+0x124>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e70a      	b.n	8000b58 <__udivmoddi4+0xd8>
 8000d42:	4464      	add	r4, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e742      	b.n	8000bce <__udivmoddi4+0x14e>

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <MY_FLASH_EraseSector>:
static uint8_t MY_SectorNum;

//functions definitions
//1. Erase Sector
static void MY_FLASH_EraseSector(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000d50:	f002 fcae 	bl	80036b0 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(MY_SectorNum, FLASH_VOLTAGE_RANGE_3);
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <MY_FLASH_EraseSector+0x1c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2102      	movs	r1, #2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 fe0a 	bl	8003974 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8000d60:	f002 fcc8 	bl	80036f4 <HAL_FLASH_Lock>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000190 	.word	0x20000190

08000d6c <MY_FLASH_SetSectorAddrs>:

//2. Set Sector Adress
void MY_FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
	MY_SectorNum = sector;
 8000d78:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <MY_FLASH_SetSectorAddrs+0x24>)
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	7013      	strb	r3, [r2, #0]
	MY_SectorAddrs = addrs;
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <MY_FLASH_SetSectorAddrs+0x28>)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	20000190 	.word	0x20000190
 8000d94:	2000018c 	.word	0x2000018c

08000d98 <MY_FLASH_WriteN>:

//3. Write Flash
void MY_FLASH_WriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8000d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d9c:	b088      	sub	sp, #32
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	60f8      	str	r0, [r7, #12]
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 8000da8:	4b37      	ldr	r3, [pc, #220]	; (8000e88 <MY_FLASH_WriteN+0xf0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	4413      	add	r3, r2
 8000db0:	61fb      	str	r3, [r7, #28]
	
	//Erase sector before write
	MY_FLASH_EraseSector();
 8000db2:	f7ff ffcb 	bl	8000d4c <MY_FLASH_EraseSector>
	
	//Unlock Flash
	HAL_FLASH_Unlock();
 8000db6:	f002 fc7b 	bl	80036b0 <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d03f      	beq.n	8000e40 <MY_FLASH_WriteN+0xa8>
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	dc59      	bgt.n	8000e78 <MY_FLASH_WriteN+0xe0>
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d002      	beq.n	8000dce <MY_FLASH_WriteN+0x36>
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d01c      	beq.n	8000e06 <MY_FLASH_WriteN+0x6e>
 8000dcc:	e054      	b.n	8000e78 <MY_FLASH_WriteN+0xe0>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
 8000dd2:	e013      	b.n	8000dfc <MY_FLASH_WriteN+0x64>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4413      	add	r3, r2
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2200      	movs	r2, #0
 8000de0:	469a      	mov	sl, r3
 8000de2:	4693      	mov	fp, r2
 8000de4:	4652      	mov	r2, sl
 8000de6:	465b      	mov	r3, fp
 8000de8:	69f9      	ldr	r1, [r7, #28]
 8000dea:	2000      	movs	r0, #0
 8000dec:	f002 fc0c 	bl	8003608 <HAL_FLASH_Program>
					flashAddress++;
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	3301      	adds	r3, #1
 8000df4:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	61bb      	str	r3, [r7, #24]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d3e7      	bcc.n	8000dd4 <MY_FLASH_WriteN+0x3c>
				}
			break;
 8000e04:	e038      	b.n	8000e78 <MY_FLASH_WriteN+0xe0>
		
		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	e014      	b.n	8000e36 <MY_FLASH_WriteN+0x9e>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	68ba      	ldr	r2, [r7, #8]
 8000e12:	4413      	add	r3, r2
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	2200      	movs	r2, #0
 8000e1a:	4698      	mov	r8, r3
 8000e1c:	4691      	mov	r9, r2
 8000e1e:	4642      	mov	r2, r8
 8000e20:	464b      	mov	r3, r9
 8000e22:	69f9      	ldr	r1, [r7, #28]
 8000e24:	2001      	movs	r0, #1
 8000e26:	f002 fbef 	bl	8003608 <HAL_FLASH_Program>
					flashAddress+=2;
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	3301      	adds	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d3e6      	bcc.n	8000e0c <MY_FLASH_WriteN+0x74>
				}
			break;
 8000e3e:	e01b      	b.n	8000e78 <MY_FLASH_WriteN+0xe0>
		
		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	e013      	b.n	8000e6e <MY_FLASH_WriteN+0xd6>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2200      	movs	r2, #0
 8000e52:	461c      	mov	r4, r3
 8000e54:	4615      	mov	r5, r2
 8000e56:	4622      	mov	r2, r4
 8000e58:	462b      	mov	r3, r5
 8000e5a:	69f9      	ldr	r1, [r7, #28]
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f002 fbd3 	bl	8003608 <HAL_FLASH_Program>
					flashAddress+=4;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d3e7      	bcc.n	8000e46 <MY_FLASH_WriteN+0xae>
				}
			break;
 8000e76:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 8000e78:	f002 fc3c 	bl	80036f4 <HAL_FLASH_Lock>
}
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e86:	bf00      	nop
 8000e88:	2000018c 	.word	0x2000018c

08000e8c <MY_FLASH_ReadN>:
//4. Read Flash
void MY_FLASH_ReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 8000e9a:	4b29      	ldr	r3, [pc, #164]	; (8000f40 <MY_FLASH_ReadN+0xb4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	61fb      	str	r3, [r7, #28]
	
	switch(dataType)
 8000ea4:	78fb      	ldrb	r3, [r7, #3]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d02f      	beq.n	8000f0a <MY_FLASH_ReadN+0x7e>
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	dc42      	bgt.n	8000f34 <MY_FLASH_ReadN+0xa8>
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d002      	beq.n	8000eb8 <MY_FLASH_ReadN+0x2c>
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d014      	beq.n	8000ee0 <MY_FLASH_ReadN+0x54>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 8000eb6:	e03d      	b.n	8000f34 <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
 8000ebc:	e00b      	b.n	8000ed6 <MY_FLASH_ReadN+0x4a>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 8000ebe:	69fa      	ldr	r2, [r7, #28]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	440b      	add	r3, r1
 8000ec6:	7812      	ldrb	r2, [r2, #0]
 8000ec8:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	61bb      	str	r3, [r7, #24]
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d3ef      	bcc.n	8000ebe <MY_FLASH_ReadN+0x32>
			break;
 8000ede:	e029      	b.n	8000f34 <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	e00c      	b.n	8000f00 <MY_FLASH_ReadN+0x74>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 8000ee6:	69fa      	ldr	r2, [r7, #28]
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	440b      	add	r3, r1
 8000ef0:	8812      	ldrh	r2, [r2, #0]
 8000ef2:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d3ee      	bcc.n	8000ee6 <MY_FLASH_ReadN+0x5a>
			break;
 8000f08:	e014      	b.n	8000f34 <MY_FLASH_ReadN+0xa8>
				for(uint32_t i=0; i<Nsize; i++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	e00c      	b.n	8000f2a <MY_FLASH_ReadN+0x9e>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 8000f10:	69fa      	ldr	r2, [r7, #28]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	440b      	add	r3, r1
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	3301      	adds	r3, #1
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d3ee      	bcc.n	8000f10 <MY_FLASH_ReadN+0x84>
			break;
 8000f32:	bf00      	nop
}
 8000f34:	bf00      	nop
 8000f36:	3724      	adds	r7, #36	; 0x24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	2000018c 	.word	0x2000018c

08000f44 <write_flash>:
void write_flash(uint32_t idx, uint8_t *wrBuf, uint32_t Nsize){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000f50:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8000f54:	6018      	str	r0, [r3, #0]
 8000f56:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000f5a:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8000f5e:	6019      	str	r1, [r3, #0]
 8000f60:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000f64:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000f68:	601a      	str	r2, [r3, #0]
	uint8_t temp_mem[1000];
	MY_FLASH_ReadN(0,temp_mem,500,DATA_TYPE_8);
 8000f6a:	f107 0114 	add.w	r1, r7, #20
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff ff89 	bl	8000e8c <MY_FLASH_ReadN>
	for (int i=0;i<Nsize;i++){
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8000f80:	e01a      	b.n	8000fb8 <write_flash+0x74>
		temp_mem[idx+i] = wrBuf[i];
 8000f82:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8000f86:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8000f8a:	f5a2 727e 	sub.w	r2, r2, #1016	; 0x3f8
 8000f8e:	6812      	ldr	r2, [r2, #0]
 8000f90:	441a      	add	r2, r3
 8000f92:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	; 0x3fc
 8000f96:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000f9a:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	440b      	add	r3, r1
 8000fa2:	7811      	ldrb	r1, [r2, #0]
 8000fa4:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8000fa8:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 8000fac:	54d1      	strb	r1, [r2, r3]
	for (int i=0;i<Nsize;i++){
 8000fae:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8000fb8:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8000fbc:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8000fc0:	f5a2 727f 	sub.w	r2, r2, #1020	; 0x3fc
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d8db      	bhi.n	8000f82 <write_flash+0x3e>
		//printf("temp is = %02x\n",wrBuf[i]);
	}
	MY_FLASH_WriteN(0,temp_mem,500,DATA_TYPE_8);
 8000fca:	f107 0114 	add.w	r1, r7, #20
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f7ff fedf 	bl	8000d98 <MY_FLASH_WriteN>
}
 8000fda:	bf00      	nop
 8000fdc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <cmox_ll_init>:
  * @brief          CMOX library low level initialization
  * @param          pArg User defined parameter that is transmitted from initialize service
  * @retval         Initialization status: @ref CMOX_INIT_SUCCESS / @ref CMOX_INIT_FAIL
  */
cmox_init_retval_t cmox_ll_init(void *pArg)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  (void)pArg;
  /* Ensure CRC is enabled for cryptographic processing */
  __HAL_RCC_CRC_RELEASE_RESET();
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <cmox_ll_init+0x40>)
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <cmox_ll_init+0x40>)
 8000ff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ff6:	6113      	str	r3, [r2, #16]
  __HAL_RCC_CRC_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <cmox_ll_init+0x40>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4a08      	ldr	r2, [pc, #32]	; (8001024 <cmox_ll_init+0x40>)
 8001002:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001006:	6313      	str	r3, [r2, #48]	; 0x30
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <cmox_ll_init+0x40>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
  return CMOX_INIT_SUCCESS;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800

08001028 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001030:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001034:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	d013      	beq.n	8001068 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001040:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001044:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001048:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00b      	beq.n	8001068 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001050:	e000      	b.n	8001054 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001052:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001054:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0f9      	beq.n	8001052 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800105e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001068:	687b      	ldr	r3, [r7, #4]
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f002 f900 	bl	8003280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f000 f848 	bl	8001114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f000 f954 	bl	8001330 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001088:	f000 f8c2 	bl	8001210 <MX_I2C1_Init>
  MX_RNG_Init();
 800108c:	f000 f8ee 	bl	800126c <MX_RNG_Init>
  MX_USB_DEVICE_Init();
 8001090:	f009 fb82 	bl	800a798 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001094:	f000 f8fe 	bl	8001294 <MX_TIM2_Init>
  MX_CRC_Init();
 8001098:	f000 f8a6 	bl	80011e8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  MY_FLASH_SetSectorAddrs(sector_name, sector_base_address);
 800109c:	4919      	ldr	r1, [pc, #100]	; (8001104 <main+0x8c>)
 800109e:	200b      	movs	r0, #11
 80010a0:	f7ff fe64 	bl	8000d6c <MY_FLASH_SetSectorAddrs>
  SSD1306_Init();
 80010a4:	f001 faf0 	bl	8002688 <SSD1306_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80010a8:	4817      	ldr	r0, [pc, #92]	; (8001108 <main+0x90>)
 80010aa:	f005 fc45 	bl	8006938 <HAL_TIM_Base_Start_IT>
  //  write_flash(BrandNew_address, &Brand_new, 1);
  //  write_flash(Nusers_address, &user_num, 1);
  //  write_flash(WrongPassword_address, &WrongPassword, 1);
    Startup();
 80010ae:	f000 f9bb 	bl	8001428 <Startup>
  //	  for(int j=0;j<16;j++){
  //		 printf("Master user %d =%2x\n",i,MasterKey[j]);
  //	  }
  //  }

	if (cmox_initialize(NULL) != CMOX_INIT_SUCCESS)
 80010b2:	2000      	movs	r0, #0
 80010b4:	f7ff f8d4 	bl	8000260 <cmox_initialize>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <main+0x4c>
	{
		  printf("Init is done\n");
 80010be:	4813      	ldr	r0, [pc, #76]	; (800110c <main+0x94>)
 80010c0:	f00a fa16 	bl	800b4f0 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(state == Lock)LockDevice();
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <main+0x98>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <main+0x58>
 80010cc:	f000 fc82 	bl	80019d4 <LockDevice>
	  if(state == Reset)ResetFactory();
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <main+0x98>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d101      	bne.n	80010dc <main+0x64>
 80010d8:	f000 fe44 	bl	8001d64 <ResetFactory>
	  if(state == Transmit)TransmitMenu();
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <main+0x98>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d101      	bne.n	80010e8 <main+0x70>
 80010e4:	f000 fada 	bl	800169c <TransmitMenu>
	  if(state == Enrollment)Enroll();
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <main+0x98>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d101      	bne.n	80010f4 <main+0x7c>
 80010f0:	f000 fb0a 	bl	8001708 <Enroll>
	  if(state == Menu)MainMenu();
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <main+0x98>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d1e3      	bne.n	80010c4 <main+0x4c>
 80010fc:	f000 f9dc 	bl	80014b8 <MainMenu>
	  if(state == Lock)LockDevice();
 8001100:	e7e0      	b.n	80010c4 <main+0x4c>
 8001102:	bf00      	nop
 8001104:	080e0000 	.word	0x080e0000
 8001108:	20000200 	.word	0x20000200
 800110c:	0800c288 	.word	0x0800c288
 8001110:	20000281 	.word	0x20000281

08001114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b094      	sub	sp, #80	; 0x50
 8001118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	2230      	movs	r2, #48	; 0x30
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f00a fad4 	bl	800b6d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <SystemClock_Config+0xcc>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	4a27      	ldr	r2, [pc, #156]	; (80011e0 <SystemClock_Config+0xcc>)
 8001142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001146:	6413      	str	r3, [r2, #64]	; 0x40
 8001148:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <SystemClock_Config+0xcc>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001154:	2300      	movs	r3, #0
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <SystemClock_Config+0xd0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <SystemClock_Config+0xd0>)
 800115e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <SystemClock_Config+0xd0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001170:	2301      	movs	r3, #1
 8001172:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001174:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117a:	2302      	movs	r3, #2
 800117c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800117e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001182:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001184:	2308      	movs	r3, #8
 8001186:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001188:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800118c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800118e:	2302      	movs	r3, #2
 8001190:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001192:	2307      	movs	r3, #7
 8001194:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001196:	f107 0320 	add.w	r3, r7, #32
 800119a:	4618      	mov	r0, r3
 800119c:	f004 fe36 	bl	8005e0c <HAL_RCC_OscConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011a6:	f001 fa01 	bl	80025ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011aa:	230f      	movs	r3, #15
 80011ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ae:	2302      	movs	r3, #2
 80011b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80011b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	2105      	movs	r1, #5
 80011c8:	4618      	mov	r0, r3
 80011ca:	f005 f897 	bl	80062fc <HAL_RCC_ClockConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011d4:	f001 f9ea 	bl	80025ac <Error_Handler>
  }
}
 80011d8:	bf00      	nop
 80011da:	3750      	adds	r7, #80	; 0x50
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40007000 	.word	0x40007000

080011e8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_CRC_Init+0x20>)
 80011ee:	4a07      	ldr	r2, [pc, #28]	; (800120c <MX_CRC_Init+0x24>)
 80011f0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_CRC_Init+0x20>)
 80011f4:	f002 f9eb 	bl	80035ce <HAL_CRC_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80011fe:	f001 f9d5 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000194 	.word	0x20000194
 800120c:	40023000 	.word	0x40023000

08001210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	; (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f002 fdc1 	bl	8003dd4 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f001 f9a8 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000019c 	.word	0x2000019c
 8001264:	40005400 	.word	0x40005400
 8001268:	00061a80 	.word	0x00061a80

0800126c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_RNG_Init+0x20>)
 8001272:	4a07      	ldr	r2, [pc, #28]	; (8001290 <MX_RNG_Init+0x24>)
 8001274:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_RNG_Init+0x20>)
 8001278:	f005 fa4c 	bl	8006714 <HAL_RNG_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001282:	f001 f993 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200001f0 	.word	0x200001f0
 8001290:	50060800 	.word	0x50060800

08001294 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a8:	463b      	mov	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b0:	4b1e      	ldr	r3, [pc, #120]	; (800132c <MX_TIM2_Init+0x98>)
 80012b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000;
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <MX_TIM2_Init+0x98>)
 80012ba:	f24a 4210 	movw	r2, #42000	; 0xa410
 80012be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <MX_TIM2_Init+0x98>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <MX_TIM2_Init+0x98>)
 80012c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <MX_TIM2_Init+0x98>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <MX_TIM2_Init+0x98>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012da:	4814      	ldr	r0, [pc, #80]	; (800132c <MX_TIM2_Init+0x98>)
 80012dc:	f005 fadd 	bl	800689a <HAL_TIM_Base_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012e6:	f001 f961 	bl	80025ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	4619      	mov	r1, r3
 80012f6:	480d      	ldr	r0, [pc, #52]	; (800132c <MX_TIM2_Init+0x98>)
 80012f8:	f005 fc7e 	bl	8006bf8 <HAL_TIM_ConfigClockSource>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001302:	f001 f953 	bl	80025ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001306:	2320      	movs	r3, #32
 8001308:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800130e:	463b      	mov	r3, r7
 8001310:	4619      	mov	r1, r3
 8001312:	4806      	ldr	r0, [pc, #24]	; (800132c <MX_TIM2_Init+0x98>)
 8001314:	f005 fea6 	bl	8007064 <HAL_TIMEx_MasterConfigSynchronization>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800131e:	f001 f945 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000200 	.word	0x20000200

08001330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	4b34      	ldr	r3, [pc, #208]	; (800141c <MX_GPIO_Init+0xec>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a33      	ldr	r2, [pc, #204]	; (800141c <MX_GPIO_Init+0xec>)
 8001350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b31      	ldr	r3, [pc, #196]	; (800141c <MX_GPIO_Init+0xec>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b2d      	ldr	r3, [pc, #180]	; (800141c <MX_GPIO_Init+0xec>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a2c      	ldr	r2, [pc, #176]	; (800141c <MX_GPIO_Init+0xec>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <MX_GPIO_Init+0xec>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <MX_GPIO_Init+0xec>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a25      	ldr	r2, [pc, #148]	; (800141c <MX_GPIO_Init+0xec>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b23      	ldr	r3, [pc, #140]	; (800141c <MX_GPIO_Init+0xec>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	4b1f      	ldr	r3, [pc, #124]	; (800141c <MX_GPIO_Init+0xec>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a1e      	ldr	r2, [pc, #120]	; (800141c <MX_GPIO_Init+0xec>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <MX_GPIO_Init+0xec>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_GPIO_Init+0xec>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a17      	ldr	r2, [pc, #92]	; (800141c <MX_GPIO_Init+0xec>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <MX_GPIO_Init+0xec>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_Pin|Orange_Pin|Red_Pin|Blue_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80013d8:	4811      	ldr	r0, [pc, #68]	; (8001420 <MX_GPIO_Init+0xf0>)
 80013da:	f002 fcc7 	bl	8003d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Green_Pin Orange_Pin Red_Pin Blue_Pin */
  GPIO_InitStruct.Pin = Green_Pin|Orange_Pin|Red_Pin|Blue_Pin;
 80013de:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	480a      	ldr	r0, [pc, #40]	; (8001420 <MX_GPIO_Init+0xf0>)
 80013f8:	f002 fb04 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : Bt1_Pin Bt2_Pin */
  GPIO_InitStruct.Pin = Bt1_Pin|Bt2_Pin;
 80013fc:	23c0      	movs	r3, #192	; 0xc0
 80013fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_GPIO_Init+0xf4>)
 8001410:	f002 faf8 	bl	8003a04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001414:	bf00      	nop
 8001416:	3728      	adds	r7, #40	; 0x28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40020800 	.word	0x40020800

08001428 <Startup>:

/* USER CODE BEGIN 4 */
void Startup(){
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af02      	add	r7, sp, #8
	MY_FLASH_ReadN(BrandNew_address,&Brand_new,1,DATA_TYPE_8);
 800142e:	2300      	movs	r3, #0
 8001430:	2201      	movs	r2, #1
 8001432:	491c      	ldr	r1, [pc, #112]	; (80014a4 <Startup+0x7c>)
 8001434:	2000      	movs	r0, #0
 8001436:	f7ff fd29 	bl	8000e8c <MY_FLASH_ReadN>
	SSD1306_DrawBitmap(0,0,logo, 128, 64, 1);
 800143a:	2301      	movs	r3, #1
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	2340      	movs	r3, #64	; 0x40
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <Startup+0x80>)
 8001446:	2100      	movs	r1, #0
 8001448:	2000      	movs	r0, #0
 800144a:	f001 f8b4 	bl	80025b6 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 800144e:	f001 f9df 	bl	8002810 <SSD1306_UpdateScreen>
	HAL_Delay (1000);
 8001452:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001456:	f001 ff85 	bl	8003364 <HAL_Delay>
	SSD1306_Clear();
 800145a:	f001 fc82 	bl	8002d62 <SSD1306_Clear>
	if(Brand_new == 0){
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <Startup+0x7c>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d116      	bne.n	8001494 <Startup+0x6c>
		//printf("Brand new = %02x\n",Brand_new);
		SSD1306_Clear();
 8001466:	f001 fc7c 	bl	8002d62 <SSD1306_Clear>
	    SSD1306_GotoXY (15,25);
 800146a:	2119      	movs	r1, #25
 800146c:	200f      	movs	r0, #15
 800146e:	f001 fa75 	bl	800295c <SSD1306_GotoXY>
	    SSD1306_Puts ("Brand new", &Font_11x18, 1);
 8001472:	2201      	movs	r2, #1
 8001474:	490d      	ldr	r1, [pc, #52]	; (80014ac <Startup+0x84>)
 8001476:	480e      	ldr	r0, [pc, #56]	; (80014b0 <Startup+0x88>)
 8001478:	f001 fb06 	bl	8002a88 <SSD1306_Puts>
	    SSD1306_UpdateScreen();
 800147c:	f001 f9c8 	bl	8002810 <SSD1306_UpdateScreen>
	    HAL_Delay (2000);
 8001480:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001484:	f001 ff6e 	bl	8003364 <HAL_Delay>
	    SSD1306_Clear();
 8001488:	f001 fc6b 	bl	8002d62 <SSD1306_Clear>
	    state=Enrollment;
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <Startup+0x8c>)
 800148e:	2203      	movs	r2, #3
 8001490:	701a      	strb	r2, [r3, #0]
	}else{
		wrong_LEDs();
		state=Lock;
	}
}
 8001492:	e004      	b.n	800149e <Startup+0x76>
		wrong_LEDs();
 8001494:	f000 fdaa 	bl	8001fec <wrong_LEDs>
		state=Lock;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <Startup+0x8c>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000248 	.word	0x20000248
 80014a8:	0800d97c 	.word	0x0800d97c
 80014ac:	20000008 	.word	0x20000008
 80014b0:	0800c298 	.word	0x0800c298
 80014b4:	20000281 	.word	0x20000281

080014b8 <MainMenu>:

void MainMenu(){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af02      	add	r7, sp, #8
	SSD1306_Clear();
 80014be:	f001 fc50 	bl	8002d62 <SSD1306_Clear>
	SSD1306_GotoXY (50,9);
 80014c2:	2109      	movs	r1, #9
 80014c4:	2032      	movs	r0, #50	; 0x32
 80014c6:	f001 fa49 	bl	800295c <SSD1306_GotoXY>
	SSD1306_Puts ("lock",&Font_7x10, 1);
 80014ca:	2201      	movs	r2, #1
 80014cc:	496b      	ldr	r1, [pc, #428]	; (800167c <MainMenu+0x1c4>)
 80014ce:	486c      	ldr	r0, [pc, #432]	; (8001680 <MainMenu+0x1c8>)
 80014d0:	f001 fada 	bl	8002a88 <SSD1306_Puts>
	SSD1306_GotoXY (46,21);
 80014d4:	2115      	movs	r1, #21
 80014d6:	202e      	movs	r0, #46	; 0x2e
 80014d8:	f001 fa40 	bl	800295c <SSD1306_GotoXY>
	SSD1306_Puts ("Reset",&Font_7x10, 1);
 80014dc:	2201      	movs	r2, #1
 80014de:	4967      	ldr	r1, [pc, #412]	; (800167c <MainMenu+0x1c4>)
 80014e0:	4868      	ldr	r0, [pc, #416]	; (8001684 <MainMenu+0x1cc>)
 80014e2:	f001 fad1 	bl	8002a88 <SSD1306_Puts>
	SSD1306_GotoXY (33,33);
 80014e6:	2121      	movs	r1, #33	; 0x21
 80014e8:	2021      	movs	r0, #33	; 0x21
 80014ea:	f001 fa37 	bl	800295c <SSD1306_GotoXY>
	SSD1306_Puts ("Transmit",&Font_7x10, 1);
 80014ee:	2201      	movs	r2, #1
 80014f0:	4962      	ldr	r1, [pc, #392]	; (800167c <MainMenu+0x1c4>)
 80014f2:	4865      	ldr	r0, [pc, #404]	; (8001688 <MainMenu+0x1d0>)
 80014f4:	f001 fac8 	bl	8002a88 <SSD1306_Puts>
	SSD1306_GotoXY (29,45);
 80014f8:	212d      	movs	r1, #45	; 0x2d
 80014fa:	201d      	movs	r0, #29
 80014fc:	f001 fa2e 	bl	800295c <SSD1306_GotoXY>
	SSD1306_Puts ("Enrollment",&Font_7x10, 1);
 8001500:	2201      	movs	r2, #1
 8001502:	495e      	ldr	r1, [pc, #376]	; (800167c <MainMenu+0x1c4>)
 8001504:	4861      	ldr	r0, [pc, #388]	; (800168c <MainMenu+0x1d4>)
 8001506:	f001 fabf 	bl	8002a88 <SSD1306_Puts>
	if(MenuState == Lock){SSD1306_DrawFilledRectangle(27,7,78,12,1);SSD1306_GotoXY (50,9);SSD1306_Puts ("lock",&Font_7x10, 0);}
 800150a:	4b61      	ldr	r3, [pc, #388]	; (8001690 <MainMenu+0x1d8>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d110      	bne.n	8001534 <MainMenu+0x7c>
 8001512:	2301      	movs	r3, #1
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	230c      	movs	r3, #12
 8001518:	224e      	movs	r2, #78	; 0x4e
 800151a:	2107      	movs	r1, #7
 800151c:	201b      	movs	r0, #27
 800151e:	f001 fbd3 	bl	8002cc8 <SSD1306_DrawFilledRectangle>
 8001522:	2109      	movs	r1, #9
 8001524:	2032      	movs	r0, #50	; 0x32
 8001526:	f001 fa19 	bl	800295c <SSD1306_GotoXY>
 800152a:	2200      	movs	r2, #0
 800152c:	4953      	ldr	r1, [pc, #332]	; (800167c <MainMenu+0x1c4>)
 800152e:	4854      	ldr	r0, [pc, #336]	; (8001680 <MainMenu+0x1c8>)
 8001530:	f001 faaa 	bl	8002a88 <SSD1306_Puts>
	if(MenuState == Reset){SSD1306_DrawFilledRectangle(27,19,78,12,1);SSD1306_GotoXY (46,21);SSD1306_Puts ("Reset",&Font_7x10, 0);}
 8001534:	4b56      	ldr	r3, [pc, #344]	; (8001690 <MainMenu+0x1d8>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d110      	bne.n	800155e <MainMenu+0xa6>
 800153c:	2301      	movs	r3, #1
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	230c      	movs	r3, #12
 8001542:	224e      	movs	r2, #78	; 0x4e
 8001544:	2113      	movs	r1, #19
 8001546:	201b      	movs	r0, #27
 8001548:	f001 fbbe 	bl	8002cc8 <SSD1306_DrawFilledRectangle>
 800154c:	2115      	movs	r1, #21
 800154e:	202e      	movs	r0, #46	; 0x2e
 8001550:	f001 fa04 	bl	800295c <SSD1306_GotoXY>
 8001554:	2200      	movs	r2, #0
 8001556:	4949      	ldr	r1, [pc, #292]	; (800167c <MainMenu+0x1c4>)
 8001558:	484a      	ldr	r0, [pc, #296]	; (8001684 <MainMenu+0x1cc>)
 800155a:	f001 fa95 	bl	8002a88 <SSD1306_Puts>
	if(MenuState == Transmit){SSD1306_DrawFilledRectangle(27,31,78,12,1);SSD1306_GotoXY (36,33);SSD1306_Puts ("Transmit",&Font_7x10, 0);}
 800155e:	4b4c      	ldr	r3, [pc, #304]	; (8001690 <MainMenu+0x1d8>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d110      	bne.n	8001588 <MainMenu+0xd0>
 8001566:	2301      	movs	r3, #1
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	230c      	movs	r3, #12
 800156c:	224e      	movs	r2, #78	; 0x4e
 800156e:	211f      	movs	r1, #31
 8001570:	201b      	movs	r0, #27
 8001572:	f001 fba9 	bl	8002cc8 <SSD1306_DrawFilledRectangle>
 8001576:	2121      	movs	r1, #33	; 0x21
 8001578:	2024      	movs	r0, #36	; 0x24
 800157a:	f001 f9ef 	bl	800295c <SSD1306_GotoXY>
 800157e:	2200      	movs	r2, #0
 8001580:	493e      	ldr	r1, [pc, #248]	; (800167c <MainMenu+0x1c4>)
 8001582:	4841      	ldr	r0, [pc, #260]	; (8001688 <MainMenu+0x1d0>)
 8001584:	f001 fa80 	bl	8002a88 <SSD1306_Puts>
	if(MenuState == Enrollment){SSD1306_DrawFilledRectangle(27,43,78,12,1);SSD1306_GotoXY (29,45);SSD1306_Puts ("Enrollment",&Font_7x10, 0);}
 8001588:	4b41      	ldr	r3, [pc, #260]	; (8001690 <MainMenu+0x1d8>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b03      	cmp	r3, #3
 800158e:	d110      	bne.n	80015b2 <MainMenu+0xfa>
 8001590:	2301      	movs	r3, #1
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	230c      	movs	r3, #12
 8001596:	224e      	movs	r2, #78	; 0x4e
 8001598:	212b      	movs	r1, #43	; 0x2b
 800159a:	201b      	movs	r0, #27
 800159c:	f001 fb94 	bl	8002cc8 <SSD1306_DrawFilledRectangle>
 80015a0:	212d      	movs	r1, #45	; 0x2d
 80015a2:	201d      	movs	r0, #29
 80015a4:	f001 f9da 	bl	800295c <SSD1306_GotoXY>
 80015a8:	2200      	movs	r2, #0
 80015aa:	4934      	ldr	r1, [pc, #208]	; (800167c <MainMenu+0x1c4>)
 80015ac:	4837      	ldr	r0, [pc, #220]	; (800168c <MainMenu+0x1d4>)
 80015ae:	f001 fa6b 	bl	8002a88 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80015b2:	f001 f92d 	bl	8002810 <SSD1306_UpdateScreen>
	while(1){
		if(!DeviceState){state=Lock;break;}
 80015b6:	4b37      	ldr	r3, [pc, #220]	; (8001694 <MainMenu+0x1dc>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	f083 0301 	eor.w	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <MainMenu+0x114>
 80015c4:	4b34      	ldr	r3, [pc, #208]	; (8001698 <MainMenu+0x1e0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
 80015ca:	e052      	b.n	8001672 <MainMenu+0x1ba>
		uint8_t btn_state =checkButtons();
 80015cc:	f000 fe9a 	bl	8002304 <checkButtons>
 80015d0:	4603      	mov	r3, r0
 80015d2:	71fb      	strb	r3, [r7, #7]
		if(btn_state==0){//up
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d110      	bne.n	80015fc <MainMenu+0x144>
			MenuState--;
 80015da:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <MainMenu+0x1d8>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	3b01      	subs	r3, #1
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <MainMenu+0x1d8>)
 80015e4:	701a      	strb	r2, [r3, #0]
			if(MenuState==255)MenuState=3;
 80015e6:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <MainMenu+0x1d8>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2bff      	cmp	r3, #255	; 0xff
 80015ec:	d102      	bne.n	80015f4 <MainMenu+0x13c>
 80015ee:	4b28      	ldr	r3, [pc, #160]	; (8001690 <MainMenu+0x1d8>)
 80015f0:	2203      	movs	r2, #3
 80015f2:	701a      	strb	r2, [r3, #0]
			state = Menu;
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <MainMenu+0x1e0>)
 80015f6:	2204      	movs	r2, #4
 80015f8:	701a      	strb	r2, [r3, #0]
			break;
 80015fa:	e03a      	b.n	8001672 <MainMenu+0x1ba>
		}else if(btn_state == 1){//down
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d110      	bne.n	8001624 <MainMenu+0x16c>
			MenuState++;
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <MainMenu+0x1d8>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <MainMenu+0x1d8>)
 800160c:	701a      	strb	r2, [r3, #0]
			if(MenuState==4)MenuState=0;
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <MainMenu+0x1d8>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b04      	cmp	r3, #4
 8001614:	d102      	bne.n	800161c <MainMenu+0x164>
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <MainMenu+0x1d8>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
			state = Menu;
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <MainMenu+0x1e0>)
 800161e:	2204      	movs	r2, #4
 8001620:	701a      	strb	r2, [r3, #0]
			break;
 8001622:	e026      	b.n	8001672 <MainMenu+0x1ba>
		}else if(btn_state ==2){//both
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d1c5      	bne.n	80015b6 <MainMenu+0xfe>
			if(MenuState==0)state=Lock;
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MainMenu+0x1d8>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d102      	bne.n	8001638 <MainMenu+0x180>
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <MainMenu+0x1e0>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
			if(MenuState==1)state=Reset;
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MainMenu+0x1d8>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d102      	bne.n	8001646 <MainMenu+0x18e>
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <MainMenu+0x1e0>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
			if(MenuState==2)state=Transmit;
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MainMenu+0x1d8>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d102      	bne.n	8001654 <MainMenu+0x19c>
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <MainMenu+0x1e0>)
 8001650:	2202      	movs	r2, #2
 8001652:	701a      	strb	r2, [r3, #0]
			if(MenuState==3)state=Enrollment;
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MainMenu+0x1d8>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b03      	cmp	r3, #3
 800165a:	d102      	bne.n	8001662 <MainMenu+0x1aa>
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MainMenu+0x1e0>)
 800165e:	2203      	movs	r2, #3
 8001660:	701a      	strb	r2, [r3, #0]
			if(MenuState==4)state=Menu;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MainMenu+0x1d8>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b04      	cmp	r3, #4
 8001668:	d102      	bne.n	8001670 <MainMenu+0x1b8>
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <MainMenu+0x1e0>)
 800166c:	2204      	movs	r2, #4
 800166e:	701a      	strb	r2, [r3, #0]
			break;
 8001670:	bf00      	nop
		}
	}
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000000 	.word	0x20000000
 8001680:	0800c2a4 	.word	0x0800c2a4
 8001684:	0800c2ac 	.word	0x0800c2ac
 8001688:	0800c2b4 	.word	0x0800c2b4
 800168c:	0800c2c0 	.word	0x0800c2c0
 8001690:	20000282 	.word	0x20000282
 8001694:	20000284 	.word	0x20000284
 8001698:	20000281 	.word	0x20000281

0800169c <TransmitMenu>:

void TransmitMenu() {
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
	static uint32_t previousRevTimer = 0xFFFFFFFF;
	uint32_t RevTimer = Timeout - Timer;
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <TransmitMenu+0x5c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f1c3 030a 	rsb	r3, r3, #10
 80016aa:	60fb      	str	r3, [r7, #12]
	if (RevTimer != previousRevTimer) {
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <TransmitMenu+0x60>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d01b      	beq.n	80016ee <TransmitMenu+0x52>
		previousRevTimer = RevTimer;
 80016b6:	4a11      	ldr	r2, [pc, #68]	; (80016fc <TransmitMenu+0x60>)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6013      	str	r3, [r2, #0]
		SSD1306_Clear();
 80016bc:	f001 fb51 	bl	8002d62 <SSD1306_Clear>
		SSD1306_GotoXY(15, 27);
 80016c0:	211b      	movs	r1, #27
 80016c2:	200f      	movs	r0, #15
 80016c4:	f001 f94a 	bl	800295c <SSD1306_GotoXY>
		SSD1306_Puts("Timeout in ", &Font_7x10, 1);
 80016c8:	2201      	movs	r2, #1
 80016ca:	490d      	ldr	r1, [pc, #52]	; (8001700 <TransmitMenu+0x64>)
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <TransmitMenu+0x68>)
 80016ce:	f001 f9db 	bl	8002a88 <SSD1306_Puts>
		char str[12];
		itoa(RevTimer, str, 10);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4639      	mov	r1, r7
 80016d6:	220a      	movs	r2, #10
 80016d8:	4618      	mov	r0, r3
 80016da:	f009 fd95 	bl	800b208 <itoa>
		SSD1306_Puts(str, &Font_7x10, 1);
 80016de:	463b      	mov	r3, r7
 80016e0:	2201      	movs	r2, #1
 80016e2:	4907      	ldr	r1, [pc, #28]	; (8001700 <TransmitMenu+0x64>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f001 f9cf 	bl	8002a88 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80016ea:	f001 f891 	bl	8002810 <SSD1306_UpdateScreen>
	}
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000288 	.word	0x20000288
 80016fc:	20000010 	.word	0x20000010
 8001700:	20000000 	.word	0x20000000
 8001704:	0800c2cc 	.word	0x0800c2cc

08001708 <Enroll>:
void Enroll(){
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af02      	add	r7, sp, #8
	SSD1306_Clear();
 800170e:	f001 fb28 	bl	8002d62 <SSD1306_Clear>
	SSD1306_GotoXY (20,5);
 8001712:	2105      	movs	r1, #5
 8001714:	2014      	movs	r0, #20
 8001716:	f001 f921 	bl	800295c <SSD1306_GotoXY>
	SSD1306_Puts ("Enter new pin", &Font_7x10, 1);
 800171a:	2201      	movs	r2, #1
 800171c:	49a6      	ldr	r1, [pc, #664]	; (80019b8 <Enroll+0x2b0>)
 800171e:	48a7      	ldr	r0, [pc, #668]	; (80019bc <Enroll+0x2b4>)
 8001720:	f001 f9b2 	bl	8002a88 <SSD1306_Puts>
	SSD1306_DrawFilledRectangle(9,20,110,30,1);
 8001724:	2301      	movs	r3, #1
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	231e      	movs	r3, #30
 800172a:	226e      	movs	r2, #110	; 0x6e
 800172c:	2114      	movs	r1, #20
 800172e:	2009      	movs	r0, #9
 8001730:	f001 faca 	bl	8002cc8 <SSD1306_DrawFilledRectangle>
	SSD1306_DrawLine(18,40,24,40,0);
 8001734:	2300      	movs	r3, #0
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2328      	movs	r3, #40	; 0x28
 800173a:	2218      	movs	r2, #24
 800173c:	2128      	movs	r1, #40	; 0x28
 800173e:	2012      	movs	r0, #18
 8001740:	f001 f9c7 	bl	8002ad2 <SSD1306_DrawLine>
	SSD1306_DrawLine(30,40,36,40,0);
 8001744:	2300      	movs	r3, #0
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2328      	movs	r3, #40	; 0x28
 800174a:	2224      	movs	r2, #36	; 0x24
 800174c:	2128      	movs	r1, #40	; 0x28
 800174e:	201e      	movs	r0, #30
 8001750:	f001 f9bf 	bl	8002ad2 <SSD1306_DrawLine>
	SSD1306_DrawLine(42,40,48,40,0);
 8001754:	2300      	movs	r3, #0
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2328      	movs	r3, #40	; 0x28
 800175a:	2230      	movs	r2, #48	; 0x30
 800175c:	2128      	movs	r1, #40	; 0x28
 800175e:	202a      	movs	r0, #42	; 0x2a
 8001760:	f001 f9b7 	bl	8002ad2 <SSD1306_DrawLine>
	SSD1306_DrawLine(54,40,60,40,0);
 8001764:	2300      	movs	r3, #0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2328      	movs	r3, #40	; 0x28
 800176a:	223c      	movs	r2, #60	; 0x3c
 800176c:	2128      	movs	r1, #40	; 0x28
 800176e:	2036      	movs	r0, #54	; 0x36
 8001770:	f001 f9af 	bl	8002ad2 <SSD1306_DrawLine>
	SSD1306_DrawLine(66,40,72,40,0);
 8001774:	2300      	movs	r3, #0
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2328      	movs	r3, #40	; 0x28
 800177a:	2248      	movs	r2, #72	; 0x48
 800177c:	2128      	movs	r1, #40	; 0x28
 800177e:	2042      	movs	r0, #66	; 0x42
 8001780:	f001 f9a7 	bl	8002ad2 <SSD1306_DrawLine>
	SSD1306_DrawLine(78,40,84,40,0);
 8001784:	2300      	movs	r3, #0
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2328      	movs	r3, #40	; 0x28
 800178a:	2254      	movs	r2, #84	; 0x54
 800178c:	2128      	movs	r1, #40	; 0x28
 800178e:	204e      	movs	r0, #78	; 0x4e
 8001790:	f001 f99f 	bl	8002ad2 <SSD1306_DrawLine>
	SSD1306_DrawLine(90,40,96,40,0);
 8001794:	2300      	movs	r3, #0
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2328      	movs	r3, #40	; 0x28
 800179a:	2260      	movs	r2, #96	; 0x60
 800179c:	2128      	movs	r1, #40	; 0x28
 800179e:	205a      	movs	r0, #90	; 0x5a
 80017a0:	f001 f997 	bl	8002ad2 <SSD1306_DrawLine>
	SSD1306_DrawLine(102,40,108,40,0);
 80017a4:	2300      	movs	r3, #0
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2328      	movs	r3, #40	; 0x28
 80017aa:	226c      	movs	r2, #108	; 0x6c
 80017ac:	2128      	movs	r1, #40	; 0x28
 80017ae:	2066      	movs	r0, #102	; 0x66
 80017b0:	f001 f98f 	bl	8002ad2 <SSD1306_DrawLine>
	SSD1306_GotoXY (18,33);
 80017b4:	2121      	movs	r1, #33	; 0x21
 80017b6:	2012      	movs	r0, #18
 80017b8:	f001 f8d0 	bl	800295c <SSD1306_GotoXY>
	SSD1306_Putc('0',&Font_7x10,0);
 80017bc:	2200      	movs	r2, #0
 80017be:	497e      	ldr	r1, [pc, #504]	; (80019b8 <Enroll+0x2b0>)
 80017c0:	2030      	movs	r0, #48	; 0x30
 80017c2:	f001 f8e1 	bl	8002988 <SSD1306_Putc>
	SSD1306_UpdateScreen();
 80017c6:	f001 f823 	bl	8002810 <SSD1306_UpdateScreen>
	bool flag = true;
 80017ca:	2301      	movs	r3, #1
 80017cc:	71fb      	strb	r3, [r7, #7]
	uint8_t index=0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_num=0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	717b      	strb	r3, [r7, #5]
	while(flag){
 80017d6:	e0e5      	b.n	80019a4 <Enroll+0x29c>
		if(!DeviceState){state=Lock;break;}
 80017d8:	4b79      	ldr	r3, [pc, #484]	; (80019c0 <Enroll+0x2b8>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	f083 0301 	eor.w	r3, r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <Enroll+0xe6>
 80017e6:	4b77      	ldr	r3, [pc, #476]	; (80019c4 <Enroll+0x2bc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	e0df      	b.n	80019ae <Enroll+0x2a6>
		uint8_t temp =checkButtons();
 80017ee:	f000 fd89 	bl	8002304 <checkButtons>
 80017f2:	4603      	mov	r3, r0
 80017f4:	713b      	strb	r3, [r7, #4]
		if(temp == 0){
 80017f6:	793b      	ldrb	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d11e      	bne.n	800183a <Enroll+0x132>
			//printf("Up\n");
			temp_num++;
 80017fc:	797b      	ldrb	r3, [r7, #5]
 80017fe:	3301      	adds	r3, #1
 8001800:	717b      	strb	r3, [r7, #5]
			if(temp_num==10)temp_num=0;
 8001802:	797b      	ldrb	r3, [r7, #5]
 8001804:	2b0a      	cmp	r3, #10
 8001806:	d101      	bne.n	800180c <Enroll+0x104>
 8001808:	2300      	movs	r3, #0
 800180a:	717b      	strb	r3, [r7, #5]
			SSD1306_GotoXY (18+index*12,33);
 800180c:	79bb      	ldrb	r3, [r7, #6]
 800180e:	b29b      	uxth	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	0052      	lsls	r2, r2, #1
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	b29b      	uxth	r3, r3
 800181a:	3312      	adds	r3, #18
 800181c:	b29b      	uxth	r3, r3
 800181e:	2121      	movs	r1, #33	; 0x21
 8001820:	4618      	mov	r0, r3
 8001822:	f001 f89b 	bl	800295c <SSD1306_GotoXY>
			SSD1306_Putc(temp_num+'0',&Font_7x10,0);
 8001826:	797b      	ldrb	r3, [r7, #5]
 8001828:	3330      	adds	r3, #48	; 0x30
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2200      	movs	r2, #0
 800182e:	4962      	ldr	r1, [pc, #392]	; (80019b8 <Enroll+0x2b0>)
 8001830:	4618      	mov	r0, r3
 8001832:	f001 f8a9 	bl	8002988 <SSD1306_Putc>
			SSD1306_UpdateScreen();
 8001836:	f000 ffeb 	bl	8002810 <SSD1306_UpdateScreen>

		}
		if(temp == 1){
 800183a:	793b      	ldrb	r3, [r7, #4]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d11e      	bne.n	800187e <Enroll+0x176>
			//printf("Down\n");
			temp_num--;
 8001840:	797b      	ldrb	r3, [r7, #5]
 8001842:	3b01      	subs	r3, #1
 8001844:	717b      	strb	r3, [r7, #5]
			if(temp_num==255)temp_num=9;
 8001846:	797b      	ldrb	r3, [r7, #5]
 8001848:	2bff      	cmp	r3, #255	; 0xff
 800184a:	d101      	bne.n	8001850 <Enroll+0x148>
 800184c:	2309      	movs	r3, #9
 800184e:	717b      	strb	r3, [r7, #5]
			SSD1306_GotoXY (18+index*12,33);
 8001850:	79bb      	ldrb	r3, [r7, #6]
 8001852:	b29b      	uxth	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	0052      	lsls	r2, r2, #1
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	b29b      	uxth	r3, r3
 800185e:	3312      	adds	r3, #18
 8001860:	b29b      	uxth	r3, r3
 8001862:	2121      	movs	r1, #33	; 0x21
 8001864:	4618      	mov	r0, r3
 8001866:	f001 f879 	bl	800295c <SSD1306_GotoXY>
			SSD1306_Putc(temp_num+'0',&Font_7x10,0);
 800186a:	797b      	ldrb	r3, [r7, #5]
 800186c:	3330      	adds	r3, #48	; 0x30
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2200      	movs	r2, #0
 8001872:	4951      	ldr	r1, [pc, #324]	; (80019b8 <Enroll+0x2b0>)
 8001874:	4618      	mov	r0, r3
 8001876:	f001 f887 	bl	8002988 <SSD1306_Putc>
			SSD1306_UpdateScreen();
 800187a:	f000 ffc9 	bl	8002810 <SSD1306_UpdateScreen>

			}
		if(temp == 2){
 800187e:	793b      	ldrb	r3, [r7, #4]
 8001880:	2b02      	cmp	r3, #2
 8001882:	f040 808f 	bne.w	80019a4 <Enroll+0x29c>
			//printf("Both\n");
			if(index == 7){
 8001886:	79bb      	ldrb	r3, [r7, #6]
 8001888:	2b07      	cmp	r3, #7
 800188a:	d157      	bne.n	800193c <Enroll+0x234>
				password[index]=temp_num;
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	494e      	ldr	r1, [pc, #312]	; (80019c8 <Enroll+0x2c0>)
 8001890:	797a      	ldrb	r2, [r7, #5]
 8001892:	54ca      	strb	r2, [r1, r3]
				flag = false;
 8001894:	2300      	movs	r3, #0
 8001896:	71fb      	strb	r3, [r7, #7]
				SSD1306_GotoXY (18+index*12,33);
 8001898:	79bb      	ldrb	r3, [r7, #6]
 800189a:	b29b      	uxth	r3, r3
 800189c:	461a      	mov	r2, r3
 800189e:	0052      	lsls	r2, r2, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	3312      	adds	r3, #18
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	2121      	movs	r1, #33	; 0x21
 80018ac:	4618      	mov	r0, r3
 80018ae:	f001 f855 	bl	800295c <SSD1306_GotoXY>
				SSD1306_Putc('*',&Font_7x10,0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	4940      	ldr	r1, [pc, #256]	; (80019b8 <Enroll+0x2b0>)
 80018b6:	202a      	movs	r0, #42	; 0x2a
 80018b8:	f001 f866 	bl	8002988 <SSD1306_Putc>
				SSD1306_UpdateScreen();
 80018bc:	f000 ffa8 	bl	8002810 <SSD1306_UpdateScreen>
				MY_FLASH_ReadN(Nusers_address,&user_num,1,DATA_TYPE_8);
 80018c0:	2300      	movs	r3, #0
 80018c2:	2201      	movs	r2, #1
 80018c4:	4941      	ldr	r1, [pc, #260]	; (80019cc <Enroll+0x2c4>)
 80018c6:	2001      	movs	r0, #1
 80018c8:	f7ff fae0 	bl	8000e8c <MY_FLASH_ReadN>
				write_flash(MemDatastartpoint + (user_num*24), password, 8);
 80018cc:	4b3f      	ldr	r3, [pc, #252]	; (80019cc <Enroll+0x2c4>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	3303      	adds	r3, #3
 80018dc:	2208      	movs	r2, #8
 80018de:	493a      	ldr	r1, [pc, #232]	; (80019c8 <Enroll+0x2c0>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fb2f 	bl	8000f44 <write_flash>
				Get_rng(MasterKey);
 80018e6:	483a      	ldr	r0, [pc, #232]	; (80019d0 <Enroll+0x2c8>)
 80018e8:	f000 fde0 	bl	80024ac <Get_rng>
				write_flash(MemDatastartpoint+8 + (user_num*24), MasterKey, 16);
 80018ec:	4b37      	ldr	r3, [pc, #220]	; (80019cc <Enroll+0x2c4>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	330b      	adds	r3, #11
 80018fc:	2210      	movs	r2, #16
 80018fe:	4934      	ldr	r1, [pc, #208]	; (80019d0 <Enroll+0x2c8>)
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fb1f 	bl	8000f44 <write_flash>
				uint8_t value =1;
 8001906:	2301      	movs	r3, #1
 8001908:	70fb      	strb	r3, [r7, #3]
				write_flash(BrandNew_address, &value, 1);
 800190a:	1cfb      	adds	r3, r7, #3
 800190c:	2201      	movs	r2, #1
 800190e:	4619      	mov	r1, r3
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff fb17 	bl	8000f44 <write_flash>
				user_num++;
 8001916:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <Enroll+0x2c4>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	3301      	adds	r3, #1
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <Enroll+0x2c4>)
 8001920:	701a      	strb	r2, [r3, #0]
				write_flash(Nusers_address, &user_num, 1);
 8001922:	2201      	movs	r2, #1
 8001924:	4929      	ldr	r1, [pc, #164]	; (80019cc <Enroll+0x2c4>)
 8001926:	2001      	movs	r0, #1
 8001928:	f7ff fb0c 	bl	8000f44 <write_flash>
				blink();
 800192c:	f000 fb9e 	bl	800206c <blink>
				SSD1306_Clear();
 8001930:	f001 fa17 	bl	8002d62 <SSD1306_Clear>
				state=Lock;
 8001934:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <Enroll+0x2bc>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	e033      	b.n	80019a4 <Enroll+0x29c>

			}else{
				password[index]=temp_num;
 800193c:	79bb      	ldrb	r3, [r7, #6]
 800193e:	4922      	ldr	r1, [pc, #136]	; (80019c8 <Enroll+0x2c0>)
 8001940:	797a      	ldrb	r2, [r7, #5]
 8001942:	54ca      	strb	r2, [r1, r3]
				temp_num = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	717b      	strb	r3, [r7, #5]
				SSD1306_GotoXY (18+index*12,33);
 8001948:	79bb      	ldrb	r3, [r7, #6]
 800194a:	b29b      	uxth	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	0052      	lsls	r2, r2, #1
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	b29b      	uxth	r3, r3
 8001956:	3312      	adds	r3, #18
 8001958:	b29b      	uxth	r3, r3
 800195a:	2121      	movs	r1, #33	; 0x21
 800195c:	4618      	mov	r0, r3
 800195e:	f000 fffd 	bl	800295c <SSD1306_GotoXY>
				SSD1306_Putc('*',&Font_7x10,0);
 8001962:	2200      	movs	r2, #0
 8001964:	4914      	ldr	r1, [pc, #80]	; (80019b8 <Enroll+0x2b0>)
 8001966:	202a      	movs	r0, #42	; 0x2a
 8001968:	f001 f80e 	bl	8002988 <SSD1306_Putc>
				SSD1306_UpdateScreen();
 800196c:	f000 ff50 	bl	8002810 <SSD1306_UpdateScreen>
				index++;
 8001970:	79bb      	ldrb	r3, [r7, #6]
 8001972:	3301      	adds	r3, #1
 8001974:	71bb      	strb	r3, [r7, #6]
				SSD1306_GotoXY (18+index*12,33);
 8001976:	79bb      	ldrb	r3, [r7, #6]
 8001978:	b29b      	uxth	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	0052      	lsls	r2, r2, #1
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	b29b      	uxth	r3, r3
 8001984:	3312      	adds	r3, #18
 8001986:	b29b      	uxth	r3, r3
 8001988:	2121      	movs	r1, #33	; 0x21
 800198a:	4618      	mov	r0, r3
 800198c:	f000 ffe6 	bl	800295c <SSD1306_GotoXY>
				SSD1306_Putc(temp_num+'0',&Font_7x10,0);
 8001990:	797b      	ldrb	r3, [r7, #5]
 8001992:	3330      	adds	r3, #48	; 0x30
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2200      	movs	r2, #0
 8001998:	4907      	ldr	r1, [pc, #28]	; (80019b8 <Enroll+0x2b0>)
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fff4 	bl	8002988 <SSD1306_Putc>
				SSD1306_UpdateScreen();
 80019a0:	f000 ff36 	bl	8002810 <SSD1306_UpdateScreen>
	while(flag){
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f47f af16 	bne.w	80017d8 <Enroll+0xd0>
			}
		}
	}
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000000 	.word	0x20000000
 80019bc:	0800c2d8 	.word	0x0800c2d8
 80019c0:	20000284 	.word	0x20000284
 80019c4:	20000281 	.word	0x20000281
 80019c8:	2000024c 	.word	0x2000024c
 80019cc:	20000264 	.word	0x20000264
 80019d0:	20000254 	.word	0x20000254

080019d4 <LockDevice>:

void LockDevice(){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af02      	add	r7, sp, #8
	DeviceState=false;
 80019da:	4bb6      	ldr	r3, [pc, #728]	; (8001cb4 <LockDevice+0x2e0>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
	TimerState=false;
 80019e0:	4bb5      	ldr	r3, [pc, #724]	; (8001cb8 <LockDevice+0x2e4>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
	SSD1306_Clear();
 80019e6:	f001 f9bc 	bl	8002d62 <SSD1306_Clear>
	SSD1306_GotoXY (32,5);
 80019ea:	2105      	movs	r1, #5
 80019ec:	2020      	movs	r0, #32
 80019ee:	f000 ffb5 	bl	800295c <SSD1306_GotoXY>
	SSD1306_Puts ("Enter pin", &Font_7x10, 1);
 80019f2:	2201      	movs	r2, #1
 80019f4:	49b1      	ldr	r1, [pc, #708]	; (8001cbc <LockDevice+0x2e8>)
 80019f6:	48b2      	ldr	r0, [pc, #712]	; (8001cc0 <LockDevice+0x2ec>)
 80019f8:	f001 f846 	bl	8002a88 <SSD1306_Puts>
	SSD1306_DrawFilledRectangle(9,20,110,30,1);
 80019fc:	2301      	movs	r3, #1
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	231e      	movs	r3, #30
 8001a02:	226e      	movs	r2, #110	; 0x6e
 8001a04:	2114      	movs	r1, #20
 8001a06:	2009      	movs	r0, #9
 8001a08:	f001 f95e 	bl	8002cc8 <SSD1306_DrawFilledRectangle>
	SSD1306_DrawLine(18,40,24,40,0);
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2328      	movs	r3, #40	; 0x28
 8001a12:	2218      	movs	r2, #24
 8001a14:	2128      	movs	r1, #40	; 0x28
 8001a16:	2012      	movs	r0, #18
 8001a18:	f001 f85b 	bl	8002ad2 <SSD1306_DrawLine>
	SSD1306_DrawLine(30,40,36,40,0);
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2328      	movs	r3, #40	; 0x28
 8001a22:	2224      	movs	r2, #36	; 0x24
 8001a24:	2128      	movs	r1, #40	; 0x28
 8001a26:	201e      	movs	r0, #30
 8001a28:	f001 f853 	bl	8002ad2 <SSD1306_DrawLine>
	SSD1306_DrawLine(42,40,48,40,0);
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2328      	movs	r3, #40	; 0x28
 8001a32:	2230      	movs	r2, #48	; 0x30
 8001a34:	2128      	movs	r1, #40	; 0x28
 8001a36:	202a      	movs	r0, #42	; 0x2a
 8001a38:	f001 f84b 	bl	8002ad2 <SSD1306_DrawLine>
	SSD1306_DrawLine(54,40,60,40,0);
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2328      	movs	r3, #40	; 0x28
 8001a42:	223c      	movs	r2, #60	; 0x3c
 8001a44:	2128      	movs	r1, #40	; 0x28
 8001a46:	2036      	movs	r0, #54	; 0x36
 8001a48:	f001 f843 	bl	8002ad2 <SSD1306_DrawLine>
	SSD1306_DrawLine(66,40,72,40,0);
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2328      	movs	r3, #40	; 0x28
 8001a52:	2248      	movs	r2, #72	; 0x48
 8001a54:	2128      	movs	r1, #40	; 0x28
 8001a56:	2042      	movs	r0, #66	; 0x42
 8001a58:	f001 f83b 	bl	8002ad2 <SSD1306_DrawLine>
	SSD1306_DrawLine(78,40,84,40,0);
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2328      	movs	r3, #40	; 0x28
 8001a62:	2254      	movs	r2, #84	; 0x54
 8001a64:	2128      	movs	r1, #40	; 0x28
 8001a66:	204e      	movs	r0, #78	; 0x4e
 8001a68:	f001 f833 	bl	8002ad2 <SSD1306_DrawLine>
	SSD1306_DrawLine(90,40,96,40,0);
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2328      	movs	r3, #40	; 0x28
 8001a72:	2260      	movs	r2, #96	; 0x60
 8001a74:	2128      	movs	r1, #40	; 0x28
 8001a76:	205a      	movs	r0, #90	; 0x5a
 8001a78:	f001 f82b 	bl	8002ad2 <SSD1306_DrawLine>
	SSD1306_DrawLine(102,40,108,40,0);
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2328      	movs	r3, #40	; 0x28
 8001a82:	226c      	movs	r2, #108	; 0x6c
 8001a84:	2128      	movs	r1, #40	; 0x28
 8001a86:	2066      	movs	r0, #102	; 0x66
 8001a88:	f001 f823 	bl	8002ad2 <SSD1306_DrawLine>
	SSD1306_GotoXY (18,33);
 8001a8c:	2121      	movs	r1, #33	; 0x21
 8001a8e:	2012      	movs	r0, #18
 8001a90:	f000 ff64 	bl	800295c <SSD1306_GotoXY>
	SSD1306_Putc('0',&Font_7x10,0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	4989      	ldr	r1, [pc, #548]	; (8001cbc <LockDevice+0x2e8>)
 8001a98:	2030      	movs	r0, #48	; 0x30
 8001a9a:	f000 ff75 	bl	8002988 <SSD1306_Putc>
	SSD1306_UpdateScreen();
 8001a9e:	f000 feb7 	bl	8002810 <SSD1306_UpdateScreen>
	bool flag = true;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	71fb      	strb	r3, [r7, #7]
	uint8_t index=0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_num=0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	717b      	strb	r3, [r7, #5]
	while(flag){
 8001aae:	e14b      	b.n	8001d48 <LockDevice+0x374>
		uint8_t temp =checkButtons();
 8001ab0:	f000 fc28 	bl	8002304 <checkButtons>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	713b      	strb	r3, [r7, #4]
		if(temp == 0){
 8001ab8:	793b      	ldrb	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d11e      	bne.n	8001afc <LockDevice+0x128>
			//printf("Up\n");
			temp_num++;
 8001abe:	797b      	ldrb	r3, [r7, #5]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	717b      	strb	r3, [r7, #5]
			if(temp_num==10)temp_num=0;
 8001ac4:	797b      	ldrb	r3, [r7, #5]
 8001ac6:	2b0a      	cmp	r3, #10
 8001ac8:	d101      	bne.n	8001ace <LockDevice+0xfa>
 8001aca:	2300      	movs	r3, #0
 8001acc:	717b      	strb	r3, [r7, #5]
			SSD1306_GotoXY (18+index*12,33);
 8001ace:	79bb      	ldrb	r3, [r7, #6]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	0052      	lsls	r2, r2, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3312      	adds	r3, #18
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	2121      	movs	r1, #33	; 0x21
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 ff3a 	bl	800295c <SSD1306_GotoXY>
			SSD1306_Putc(temp_num+'0',&Font_7x10,0);
 8001ae8:	797b      	ldrb	r3, [r7, #5]
 8001aea:	3330      	adds	r3, #48	; 0x30
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2200      	movs	r2, #0
 8001af0:	4972      	ldr	r1, [pc, #456]	; (8001cbc <LockDevice+0x2e8>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 ff48 	bl	8002988 <SSD1306_Putc>
			SSD1306_UpdateScreen();
 8001af8:	f000 fe8a 	bl	8002810 <SSD1306_UpdateScreen>

		}
		if(temp == 1){
 8001afc:	793b      	ldrb	r3, [r7, #4]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d11e      	bne.n	8001b40 <LockDevice+0x16c>
			//printf("Down\n");
			temp_num--;
 8001b02:	797b      	ldrb	r3, [r7, #5]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	717b      	strb	r3, [r7, #5]
			if(temp_num==255)temp_num=9;
 8001b08:	797b      	ldrb	r3, [r7, #5]
 8001b0a:	2bff      	cmp	r3, #255	; 0xff
 8001b0c:	d101      	bne.n	8001b12 <LockDevice+0x13e>
 8001b0e:	2309      	movs	r3, #9
 8001b10:	717b      	strb	r3, [r7, #5]
			SSD1306_GotoXY (18+index*12,33);
 8001b12:	79bb      	ldrb	r3, [r7, #6]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	0052      	lsls	r2, r2, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3312      	adds	r3, #18
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	2121      	movs	r1, #33	; 0x21
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 ff18 	bl	800295c <SSD1306_GotoXY>
			SSD1306_Putc(temp_num+'0',&Font_7x10,0);
 8001b2c:	797b      	ldrb	r3, [r7, #5]
 8001b2e:	3330      	adds	r3, #48	; 0x30
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2200      	movs	r2, #0
 8001b34:	4961      	ldr	r1, [pc, #388]	; (8001cbc <LockDevice+0x2e8>)
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 ff26 	bl	8002988 <SSD1306_Putc>
			SSD1306_UpdateScreen();
 8001b3c:	f000 fe68 	bl	8002810 <SSD1306_UpdateScreen>

			}
		if(temp == 2){
 8001b40:	793b      	ldrb	r3, [r7, #4]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	f040 8100 	bne.w	8001d48 <LockDevice+0x374>
			//printf("Both\n");
			if(index == 7){
 8001b48:	79bb      	ldrb	r3, [r7, #6]
 8001b4a:	2b07      	cmp	r3, #7
 8001b4c:	f040 80c8 	bne.w	8001ce0 <LockDevice+0x30c>
				password[index]=temp_num;
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	495c      	ldr	r1, [pc, #368]	; (8001cc4 <LockDevice+0x2f0>)
 8001b54:	797a      	ldrb	r2, [r7, #5]
 8001b56:	54ca      	strb	r2, [r1, r3]
				flag = false;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	71fb      	strb	r3, [r7, #7]
				SSD1306_GotoXY (18+index*12,33);
 8001b5c:	79bb      	ldrb	r3, [r7, #6]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	0052      	lsls	r2, r2, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3312      	adds	r3, #18
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2121      	movs	r1, #33	; 0x21
 8001b70:	4618      	mov	r0, r3
 8001b72:	f000 fef3 	bl	800295c <SSD1306_GotoXY>
				SSD1306_Putc('*',&Font_7x10,0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	4950      	ldr	r1, [pc, #320]	; (8001cbc <LockDevice+0x2e8>)
 8001b7a:	202a      	movs	r0, #42	; 0x2a
 8001b7c:	f000 ff04 	bl	8002988 <SSD1306_Putc>
				SSD1306_UpdateScreen();
 8001b80:	f000 fe46 	bl	8002810 <SSD1306_UpdateScreen>
				//check password
				if(CheckPassword()){
 8001b84:	f000 fab6 	bl	80020f4 <CheckPassword>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d023      	beq.n	8001bd6 <LockDevice+0x202>
					//printf("correct\n");
					MY_FLASH_ReadN(MemDatastartpoint + (CurrentUser*24),CurrentPassword,8,DATA_TYPE_8);
 8001b8e:	4b4e      	ldr	r3, [pc, #312]	; (8001cc8 <LockDevice+0x2f4>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	3303      	adds	r3, #3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	4949      	ldr	r1, [pc, #292]	; (8001ccc <LockDevice+0x2f8>)
 8001ba6:	f7ff f971 	bl	8000e8c <MY_FLASH_ReadN>
				  	MY_FLASH_ReadN(MemDatastartpoint+8 + (CurrentUser*24),CurrentMasterKey,16,DATA_TYPE_8);
 8001baa:	4b47      	ldr	r3, [pc, #284]	; (8001cc8 <LockDevice+0x2f4>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	330b      	adds	r3, #11
 8001bba:	4618      	mov	r0, r3
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	4943      	ldr	r1, [pc, #268]	; (8001cd0 <LockDevice+0x2fc>)
 8001bc2:	f7ff f963 	bl	8000e8c <MY_FLASH_ReadN>
				  	//for(int i=0;i<8;i++)printf("%d",CurrentPassword[i]);
				  	//printf("\n");
				  	//printf("CurrentMasterKey = ");
				  	//for(int i=0;i<16;i++)printf("%02x",CurrentMasterKey[i]);
				  	//printf("\n");
				  	blink();
 8001bc6:	f000 fa51 	bl	800206c <blink>
				  	DeviceState=true;
 8001bca:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <LockDevice+0x2e0>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]
				  	state=Menu;
 8001bd0:	4b40      	ldr	r3, [pc, #256]	; (8001cd4 <LockDevice+0x300>)
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	701a      	strb	r2, [r3, #0]
				}
				if(!CheckPassword()){
 8001bd6:	f000 fa8d 	bl	80020f4 <CheckPassword>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f083 0301 	eor.w	r3, r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d063      	beq.n	8001cae <LockDevice+0x2da>
					//printf("wrong\n");
					MY_FLASH_ReadN(WrongPassword_address,&WrongPassword,1,DATA_TYPE_8);
 8001be6:	2300      	movs	r3, #0
 8001be8:	2201      	movs	r2, #1
 8001bea:	493b      	ldr	r1, [pc, #236]	; (8001cd8 <LockDevice+0x304>)
 8001bec:	2002      	movs	r0, #2
 8001bee:	f7ff f94d 	bl	8000e8c <MY_FLASH_ReadN>
					WrongPassword++;
 8001bf2:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <LockDevice+0x304>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b37      	ldr	r3, [pc, #220]	; (8001cd8 <LockDevice+0x304>)
 8001bfc:	701a      	strb	r2, [r3, #0]
					if(WrongPassword<5){
 8001bfe:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <LockDevice+0x304>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d832      	bhi.n	8001c6c <LockDevice+0x298>
						if(WrongPassword==1)HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, GPIO_PIN_SET);
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <LockDevice+0x304>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d105      	bne.n	8001c1a <LockDevice+0x246>
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c14:	4831      	ldr	r0, [pc, #196]	; (8001cdc <LockDevice+0x308>)
 8001c16:	f002 f8a9 	bl	8003d6c <HAL_GPIO_WritePin>
						if(WrongPassword==2)HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_SET);
 8001c1a:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <LockDevice+0x304>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d105      	bne.n	8001c2e <LockDevice+0x25a>
 8001c22:	2201      	movs	r2, #1
 8001c24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c28:	482c      	ldr	r0, [pc, #176]	; (8001cdc <LockDevice+0x308>)
 8001c2a:	f002 f89f 	bl	8003d6c <HAL_GPIO_WritePin>
						if(WrongPassword==3)HAL_GPIO_WritePin(Orange_GPIO_Port, Orange_Pin, GPIO_PIN_SET);
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <LockDevice+0x304>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d105      	bne.n	8001c42 <LockDevice+0x26e>
 8001c36:	2201      	movs	r2, #1
 8001c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c3c:	4827      	ldr	r0, [pc, #156]	; (8001cdc <LockDevice+0x308>)
 8001c3e:	f002 f895 	bl	8003d6c <HAL_GPIO_WritePin>
						if(WrongPassword==4)HAL_GPIO_WritePin(Red_GPIO_Port,Red_Pin, GPIO_PIN_SET);
 8001c42:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <LockDevice+0x304>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d105      	bne.n	8001c56 <LockDevice+0x282>
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c50:	4822      	ldr	r0, [pc, #136]	; (8001cdc <LockDevice+0x308>)
 8001c52:	f002 f88b 	bl	8003d6c <HAL_GPIO_WritePin>
						write_flash(WrongPassword_address, &WrongPassword, 1);
 8001c56:	2201      	movs	r2, #1
 8001c58:	491f      	ldr	r1, [pc, #124]	; (8001cd8 <LockDevice+0x304>)
 8001c5a:	2002      	movs	r0, #2
 8001c5c:	f7ff f972 	bl	8000f44 <write_flash>
						OledAlarm();
 8001c60:	f000 f958 	bl	8001f14 <OledAlarm>
						state=Lock;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <LockDevice+0x300>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	e020      	b.n	8001cae <LockDevice+0x2da>
					}else{
						//printf("Erasing\n");
						EraseAlaram();
 8001c6c:	f000 f984 	bl	8001f78 <EraseAlaram>
						EraseMem();
 8001c70:	f000 f9a6 	bl	8001fc0 <EraseMem>
						blink();
 8001c74:	f000 f9fa 	bl	800206c <blink>
						HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, GPIO_PIN_RESET);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c7e:	4817      	ldr	r0, [pc, #92]	; (8001cdc <LockDevice+0x308>)
 8001c80:	f002 f874 	bl	8003d6c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8a:	4814      	ldr	r0, [pc, #80]	; (8001cdc <LockDevice+0x308>)
 8001c8c:	f002 f86e 	bl	8003d6c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Orange_GPIO_Port, Orange_Pin, GPIO_PIN_RESET);
 8001c90:	2200      	movs	r2, #0
 8001c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c96:	4811      	ldr	r0, [pc, #68]	; (8001cdc <LockDevice+0x308>)
 8001c98:	f002 f868 	bl	8003d6c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(Red_GPIO_Port,Red_Pin, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ca2:	480e      	ldr	r0, [pc, #56]	; (8001cdc <LockDevice+0x308>)
 8001ca4:	f002 f862 	bl	8003d6c <HAL_GPIO_WritePin>
						state=Enrollment;
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <LockDevice+0x300>)
 8001caa:	2203      	movs	r2, #3
 8001cac:	701a      	strb	r2, [r3, #0]
					}
				}
				SSD1306_Clear();
 8001cae:	f001 f858 	bl	8002d62 <SSD1306_Clear>
 8001cb2:	e049      	b.n	8001d48 <LockDevice+0x374>
 8001cb4:	20000284 	.word	0x20000284
 8001cb8:	20000283 	.word	0x20000283
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	0800c2e8 	.word	0x0800c2e8
 8001cc4:	2000024c 	.word	0x2000024c
 8001cc8:	20000266 	.word	0x20000266
 8001ccc:	20000268 	.word	0x20000268
 8001cd0:	20000270 	.word	0x20000270
 8001cd4:	20000281 	.word	0x20000281
 8001cd8:	20000280 	.word	0x20000280
 8001cdc:	40020c00 	.word	0x40020c00

			}else{
				password[index]=temp_num;
 8001ce0:	79bb      	ldrb	r3, [r7, #6]
 8001ce2:	491e      	ldr	r1, [pc, #120]	; (8001d5c <LockDevice+0x388>)
 8001ce4:	797a      	ldrb	r2, [r7, #5]
 8001ce6:	54ca      	strb	r2, [r1, r3]
				temp_num = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	717b      	strb	r3, [r7, #5]
				SSD1306_GotoXY (18+index*12,33);
 8001cec:	79bb      	ldrb	r3, [r7, #6]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	0052      	lsls	r2, r2, #1
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	3312      	adds	r3, #18
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	2121      	movs	r1, #33	; 0x21
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fe2b 	bl	800295c <SSD1306_GotoXY>
				SSD1306_Putc('*',&Font_7x10,0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	4915      	ldr	r1, [pc, #84]	; (8001d60 <LockDevice+0x38c>)
 8001d0a:	202a      	movs	r0, #42	; 0x2a
 8001d0c:	f000 fe3c 	bl	8002988 <SSD1306_Putc>
				SSD1306_UpdateScreen();
 8001d10:	f000 fd7e 	bl	8002810 <SSD1306_UpdateScreen>
				index++;
 8001d14:	79bb      	ldrb	r3, [r7, #6]
 8001d16:	3301      	adds	r3, #1
 8001d18:	71bb      	strb	r3, [r7, #6]
				SSD1306_GotoXY (18+index*12,33);
 8001d1a:	79bb      	ldrb	r3, [r7, #6]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	0052      	lsls	r2, r2, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3312      	adds	r3, #18
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	2121      	movs	r1, #33	; 0x21
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 fe14 	bl	800295c <SSD1306_GotoXY>
				SSD1306_Putc(temp_num+'0',&Font_7x10,0);
 8001d34:	797b      	ldrb	r3, [r7, #5]
 8001d36:	3330      	adds	r3, #48	; 0x30
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	4908      	ldr	r1, [pc, #32]	; (8001d60 <LockDevice+0x38c>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fe22 	bl	8002988 <SSD1306_Putc>
				SSD1306_UpdateScreen();
 8001d44:	f000 fd64 	bl	8002810 <SSD1306_UpdateScreen>
	while(flag){
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f47f aeb0 	bne.w	8001ab0 <LockDevice+0xdc>
			}
		}
	}
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000024c 	.word	0x2000024c
 8001d60:	20000000 	.word	0x20000000

08001d64 <ResetFactory>:

void ResetFactory(){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af02      	add	r7, sp, #8
	SSD1306_Clear();
 8001d6a:	f000 fffa 	bl	8002d62 <SSD1306_Clear>
	SSD1306_DrawFilledRectangle(71,35,25,12,1);
 8001d6e:	2301      	movs	r3, #1
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	230c      	movs	r3, #12
 8001d74:	2219      	movs	r2, #25
 8001d76:	2123      	movs	r1, #35	; 0x23
 8001d78:	2047      	movs	r0, #71	; 0x47
 8001d7a:	f000 ffa5 	bl	8002cc8 <SSD1306_DrawFilledRectangle>
	SSD1306_GotoXY (18,17);
 8001d7e:	2111      	movs	r1, #17
 8001d80:	2012      	movs	r0, #18
 8001d82:	f000 fdeb 	bl	800295c <SSD1306_GotoXY>
	SSD1306_Puts ("Reset factory",&Font_7x10, 1);
 8001d86:	2201      	movs	r2, #1
 8001d88:	495b      	ldr	r1, [pc, #364]	; (8001ef8 <ResetFactory+0x194>)
 8001d8a:	485c      	ldr	r0, [pc, #368]	; (8001efc <ResetFactory+0x198>)
 8001d8c:	f000 fe7c 	bl	8002a88 <SSD1306_Puts>
	SSD1306_GotoXY (38,37);
 8001d90:	2125      	movs	r1, #37	; 0x25
 8001d92:	2026      	movs	r0, #38	; 0x26
 8001d94:	f000 fde2 	bl	800295c <SSD1306_GotoXY>
	SSD1306_Puts ("Yes",&Font_7x10, 1);
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4957      	ldr	r1, [pc, #348]	; (8001ef8 <ResetFactory+0x194>)
 8001d9c:	4858      	ldr	r0, [pc, #352]	; (8001f00 <ResetFactory+0x19c>)
 8001d9e:	f000 fe73 	bl	8002a88 <SSD1306_Puts>
	SSD1306_GotoXY (78,37);
 8001da2:	2125      	movs	r1, #37	; 0x25
 8001da4:	204e      	movs	r0, #78	; 0x4e
 8001da6:	f000 fdd9 	bl	800295c <SSD1306_GotoXY>
	SSD1306_Puts ("No",&Font_7x10, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	4952      	ldr	r1, [pc, #328]	; (8001ef8 <ResetFactory+0x194>)
 8001dae:	4855      	ldr	r0, [pc, #340]	; (8001f04 <ResetFactory+0x1a0>)
 8001db0:	f000 fe6a 	bl	8002a88 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001db4:	f000 fd2c 	bl	8002810 <SSD1306_UpdateScreen>
	bool YesNo = false;
 8001db8:	2300      	movs	r3, #0
 8001dba:	71fb      	strb	r3, [r7, #7]
	while(1){
		if(!DeviceState){state=Lock;break;}
 8001dbc:	4b52      	ldr	r3, [pc, #328]	; (8001f08 <ResetFactory+0x1a4>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	f083 0301 	eor.w	r3, r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <ResetFactory+0x6e>
 8001dca:	4b50      	ldr	r3, [pc, #320]	; (8001f0c <ResetFactory+0x1a8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	e08e      	b.n	8001ef0 <ResetFactory+0x18c>
		uint8_t btn_state =checkButtons();
 8001dd2:	f000 fa97 	bl	8002304 <checkButtons>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71bb      	strb	r3, [r7, #6]
		if(btn_state==0){//up
 8001dda:	79bb      	ldrb	r3, [r7, #6]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d129      	bne.n	8001e34 <ResetFactory+0xd0>
			SSD1306_Clear();
 8001de0:	f000 ffbf 	bl	8002d62 <SSD1306_Clear>
			SSD1306_DrawFilledRectangle(36,35,25,12,1);
 8001de4:	2301      	movs	r3, #1
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	230c      	movs	r3, #12
 8001dea:	2219      	movs	r2, #25
 8001dec:	2123      	movs	r1, #35	; 0x23
 8001dee:	2024      	movs	r0, #36	; 0x24
 8001df0:	f000 ff6a 	bl	8002cc8 <SSD1306_DrawFilledRectangle>
			SSD1306_GotoXY (18,17);
 8001df4:	2111      	movs	r1, #17
 8001df6:	2012      	movs	r0, #18
 8001df8:	f000 fdb0 	bl	800295c <SSD1306_GotoXY>
			SSD1306_Puts ("Reset factory",&Font_7x10, 1);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	493e      	ldr	r1, [pc, #248]	; (8001ef8 <ResetFactory+0x194>)
 8001e00:	483e      	ldr	r0, [pc, #248]	; (8001efc <ResetFactory+0x198>)
 8001e02:	f000 fe41 	bl	8002a88 <SSD1306_Puts>
			SSD1306_GotoXY (38,37);
 8001e06:	2125      	movs	r1, #37	; 0x25
 8001e08:	2026      	movs	r0, #38	; 0x26
 8001e0a:	f000 fda7 	bl	800295c <SSD1306_GotoXY>
			SSD1306_Puts ("Yes",&Font_7x10, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	4939      	ldr	r1, [pc, #228]	; (8001ef8 <ResetFactory+0x194>)
 8001e12:	483b      	ldr	r0, [pc, #236]	; (8001f00 <ResetFactory+0x19c>)
 8001e14:	f000 fe38 	bl	8002a88 <SSD1306_Puts>
			SSD1306_GotoXY (78,37);
 8001e18:	2125      	movs	r1, #37	; 0x25
 8001e1a:	204e      	movs	r0, #78	; 0x4e
 8001e1c:	f000 fd9e 	bl	800295c <SSD1306_GotoXY>
			SSD1306_Puts ("No",&Font_7x10, 1);
 8001e20:	2201      	movs	r2, #1
 8001e22:	4935      	ldr	r1, [pc, #212]	; (8001ef8 <ResetFactory+0x194>)
 8001e24:	4837      	ldr	r0, [pc, #220]	; (8001f04 <ResetFactory+0x1a0>)
 8001e26:	f000 fe2f 	bl	8002a88 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001e2a:	f000 fcf1 	bl	8002810 <SSD1306_UpdateScreen>
			YesNo = true;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	71fb      	strb	r3, [r7, #7]
 8001e32:	e7c3      	b.n	8001dbc <ResetFactory+0x58>
		}else if(btn_state == 1){//down
 8001e34:	79bb      	ldrb	r3, [r7, #6]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d129      	bne.n	8001e8e <ResetFactory+0x12a>
			SSD1306_Clear();
 8001e3a:	f000 ff92 	bl	8002d62 <SSD1306_Clear>
			SSD1306_DrawFilledRectangle(71,35,25,12,1);
 8001e3e:	2301      	movs	r3, #1
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	230c      	movs	r3, #12
 8001e44:	2219      	movs	r2, #25
 8001e46:	2123      	movs	r1, #35	; 0x23
 8001e48:	2047      	movs	r0, #71	; 0x47
 8001e4a:	f000 ff3d 	bl	8002cc8 <SSD1306_DrawFilledRectangle>
			SSD1306_GotoXY (18,17);
 8001e4e:	2111      	movs	r1, #17
 8001e50:	2012      	movs	r0, #18
 8001e52:	f000 fd83 	bl	800295c <SSD1306_GotoXY>
			SSD1306_Puts ("Reset factory",&Font_7x10, 1);
 8001e56:	2201      	movs	r2, #1
 8001e58:	4927      	ldr	r1, [pc, #156]	; (8001ef8 <ResetFactory+0x194>)
 8001e5a:	4828      	ldr	r0, [pc, #160]	; (8001efc <ResetFactory+0x198>)
 8001e5c:	f000 fe14 	bl	8002a88 <SSD1306_Puts>
			SSD1306_GotoXY (38,37);
 8001e60:	2125      	movs	r1, #37	; 0x25
 8001e62:	2026      	movs	r0, #38	; 0x26
 8001e64:	f000 fd7a 	bl	800295c <SSD1306_GotoXY>
			SSD1306_Puts ("Yes",&Font_7x10, 1);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	4923      	ldr	r1, [pc, #140]	; (8001ef8 <ResetFactory+0x194>)
 8001e6c:	4824      	ldr	r0, [pc, #144]	; (8001f00 <ResetFactory+0x19c>)
 8001e6e:	f000 fe0b 	bl	8002a88 <SSD1306_Puts>
			SSD1306_GotoXY (78,37);
 8001e72:	2125      	movs	r1, #37	; 0x25
 8001e74:	204e      	movs	r0, #78	; 0x4e
 8001e76:	f000 fd71 	bl	800295c <SSD1306_GotoXY>
			SSD1306_Puts ("No",&Font_7x10, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	491e      	ldr	r1, [pc, #120]	; (8001ef8 <ResetFactory+0x194>)
 8001e7e:	4821      	ldr	r0, [pc, #132]	; (8001f04 <ResetFactory+0x1a0>)
 8001e80:	f000 fe02 	bl	8002a88 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001e84:	f000 fcc4 	bl	8002810 <SSD1306_UpdateScreen>
			YesNo = false;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	71fb      	strb	r3, [r7, #7]
 8001e8c:	e796      	b.n	8001dbc <ResetFactory+0x58>
		}else if(btn_state ==2){//both
 8001e8e:	79bb      	ldrb	r3, [r7, #6]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d193      	bne.n	8001dbc <ResetFactory+0x58>
			if(YesNo){
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d020      	beq.n	8001edc <ResetFactory+0x178>
				EraseAlaram();
 8001e9a:	f000 f86d 	bl	8001f78 <EraseAlaram>
				EraseMem();
 8001e9e:	f000 f88f 	bl	8001fc0 <EraseMem>
				blink();
 8001ea2:	f000 f8e3 	bl	800206c <blink>
				HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eac:	4818      	ldr	r0, [pc, #96]	; (8001f10 <ResetFactory+0x1ac>)
 8001eae:	f001 ff5d 	bl	8003d6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb8:	4815      	ldr	r0, [pc, #84]	; (8001f10 <ResetFactory+0x1ac>)
 8001eba:	f001 ff57 	bl	8003d6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Orange_GPIO_Port, Orange_Pin, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec4:	4812      	ldr	r0, [pc, #72]	; (8001f10 <ResetFactory+0x1ac>)
 8001ec6:	f001 ff51 	bl	8003d6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Red_GPIO_Port,Red_Pin, GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ed0:	480f      	ldr	r0, [pc, #60]	; (8001f10 <ResetFactory+0x1ac>)
 8001ed2:	f001 ff4b 	bl	8003d6c <HAL_GPIO_WritePin>
				state=Enrollment;
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <ResetFactory+0x1a8>)
 8001ed8:	2203      	movs	r2, #3
 8001eda:	701a      	strb	r2, [r3, #0]
			}
			if(!YesNo){
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	f083 0301 	eor.w	r3, r3, #1
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <ResetFactory+0x18a>
				//printf("resetCanceled\n");
				state=Menu;
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <ResetFactory+0x1a8>)
 8001eea:	2204      	movs	r2, #4
 8001eec:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001eee:	bf00      	nop
		}
	}
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	0800c2f4 	.word	0x0800c2f4
 8001f00:	0800c304 	.word	0x0800c304
 8001f04:	0800c308 	.word	0x0800c308
 8001f08:	20000284 	.word	0x20000284
 8001f0c:	20000281 	.word	0x20000281
 8001f10:	40020c00 	.word	0x40020c00

08001f14 <OledAlarm>:

void OledAlarm(){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8001f18:	f000 ff23 	bl	8002d62 <SSD1306_Clear>
	SSD1306_GotoXY (25,0);
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2019      	movs	r0, #25
 8001f20:	f000 fd1c 	bl	800295c <SSD1306_GotoXY>
	SSD1306_Puts ("Warning", &Font_11x18, 1);
 8001f24:	2201      	movs	r2, #1
 8001f26:	490f      	ldr	r1, [pc, #60]	; (8001f64 <OledAlarm+0x50>)
 8001f28:	480f      	ldr	r0, [pc, #60]	; (8001f68 <OledAlarm+0x54>)
 8001f2a:	f000 fdad 	bl	8002a88 <SSD1306_Puts>
	SSD1306_GotoXY (11,36);
 8001f2e:	2124      	movs	r1, #36	; 0x24
 8001f30:	200b      	movs	r0, #11
 8001f32:	f000 fd13 	bl	800295c <SSD1306_GotoXY>
	SSD1306_Putc (4 - WrongPassword + '0', &Font_7x10, 1);
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <OledAlarm+0x58>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2201      	movs	r2, #1
 8001f42:	490b      	ldr	r1, [pc, #44]	; (8001f70 <OledAlarm+0x5c>)
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fd1f 	bl	8002988 <SSD1306_Putc>
	SSD1306_Puts (" more attempts", &Font_7x10, 1);
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4908      	ldr	r1, [pc, #32]	; (8001f70 <OledAlarm+0x5c>)
 8001f4e:	4809      	ldr	r0, [pc, #36]	; (8001f74 <OledAlarm+0x60>)
 8001f50:	f000 fd9a 	bl	8002a88 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001f54:	f000 fc5c 	bl	8002810 <SSD1306_UpdateScreen>
	HAL_Delay(3000);
 8001f58:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f5c:	f001 fa02 	bl	8003364 <HAL_Delay>

}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000008 	.word	0x20000008
 8001f68:	0800c30c 	.word	0x0800c30c
 8001f6c:	20000280 	.word	0x20000280
 8001f70:	20000000 	.word	0x20000000
 8001f74:	0800c314 	.word	0x0800c314

08001f78 <EraseAlaram>:

void EraseAlaram(){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8001f7c:	f000 fef1 	bl	8002d62 <SSD1306_Clear>
	SSD1306_GotoXY (31,14);
 8001f80:	210e      	movs	r1, #14
 8001f82:	201f      	movs	r0, #31
 8001f84:	f000 fcea 	bl	800295c <SSD1306_GotoXY>
	SSD1306_Puts ("Memory", &Font_11x18, 1);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	490a      	ldr	r1, [pc, #40]	; (8001fb4 <EraseAlaram+0x3c>)
 8001f8c:	480a      	ldr	r0, [pc, #40]	; (8001fb8 <EraseAlaram+0x40>)
 8001f8e:	f000 fd7b 	bl	8002a88 <SSD1306_Puts>
	SSD1306_GotoXY (14,32);
 8001f92:	2120      	movs	r1, #32
 8001f94:	200e      	movs	r0, #14
 8001f96:	f000 fce1 	bl	800295c <SSD1306_GotoXY>
	SSD1306_Puts ("erasing:(", &Font_11x18, 1);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4905      	ldr	r1, [pc, #20]	; (8001fb4 <EraseAlaram+0x3c>)
 8001f9e:	4807      	ldr	r0, [pc, #28]	; (8001fbc <EraseAlaram+0x44>)
 8001fa0:	f000 fd72 	bl	8002a88 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001fa4:	f000 fc34 	bl	8002810 <SSD1306_UpdateScreen>
	HAL_Delay(3000);
 8001fa8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001fac:	f001 f9da 	bl	8003364 <HAL_Delay>
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	0800c324 	.word	0x0800c324
 8001fbc:	0800c32c 	.word	0x0800c32c

08001fc0 <EraseMem>:

void EraseMem(){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b0be      	sub	sp, #248	; 0xf8
 8001fc4:	af00      	add	r7, sp, #0
	uint8_t All0[243] = {0};
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	f107 0308 	add.w	r3, r7, #8
 8001fce:	22ef      	movs	r2, #239	; 0xef
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f009 fb7c 	bl	800b6d0 <memset>
	write_flash(0, All0, 243);
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	22f3      	movs	r2, #243	; 0xf3
 8001fdc:	4619      	mov	r1, r3
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f7fe ffb0 	bl	8000f44 <write_flash>
}
 8001fe4:	bf00      	nop
 8001fe6:	37f8      	adds	r7, #248	; 0xf8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <wrong_LEDs>:

void wrong_LEDs(){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
	MY_FLASH_ReadN(WrongPassword_address,&WrongPassword,1,DATA_TYPE_8);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	491b      	ldr	r1, [pc, #108]	; (8002064 <wrong_LEDs+0x78>)
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	f7fe ff47 	bl	8000e8c <MY_FLASH_ReadN>
	for(int i=WrongPassword;i>=0;i--){
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <wrong_LEDs+0x78>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	e026      	b.n	8002054 <wrong_LEDs+0x68>
		if(i==1)HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, GPIO_PIN_SET);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <wrong_LEDs+0x2c>
 800200c:	2201      	movs	r2, #1
 800200e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002012:	4815      	ldr	r0, [pc, #84]	; (8002068 <wrong_LEDs+0x7c>)
 8002014:	f001 feaa 	bl	8003d6c <HAL_GPIO_WritePin>
		if(i==2)HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_SET);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d105      	bne.n	800202a <wrong_LEDs+0x3e>
 800201e:	2201      	movs	r2, #1
 8002020:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002024:	4810      	ldr	r0, [pc, #64]	; (8002068 <wrong_LEDs+0x7c>)
 8002026:	f001 fea1 	bl	8003d6c <HAL_GPIO_WritePin>
		if(i==3)HAL_GPIO_WritePin(Orange_GPIO_Port, Orange_Pin, GPIO_PIN_SET);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d105      	bne.n	800203c <wrong_LEDs+0x50>
 8002030:	2201      	movs	r2, #1
 8002032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002036:	480c      	ldr	r0, [pc, #48]	; (8002068 <wrong_LEDs+0x7c>)
 8002038:	f001 fe98 	bl	8003d6c <HAL_GPIO_WritePin>
		if(i==4)HAL_GPIO_WritePin(Red_GPIO_Port,Red_Pin, GPIO_PIN_SET);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b04      	cmp	r3, #4
 8002040:	d105      	bne.n	800204e <wrong_LEDs+0x62>
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002048:	4807      	ldr	r0, [pc, #28]	; (8002068 <wrong_LEDs+0x7c>)
 800204a:	f001 fe8f 	bl	8003d6c <HAL_GPIO_WritePin>
	for(int i=WrongPassword;i>=0;i--){
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3b01      	subs	r3, #1
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	dad5      	bge.n	8002006 <wrong_LEDs+0x1a>
	}
}
 800205a:	bf00      	nop
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000280 	.word	0x20000280
 8002068:	40020c00 	.word	0x40020c00

0800206c <blink>:

void blink(){
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, GPIO_PIN_RESET);
 8002072:	2200      	movs	r2, #0
 8002074:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002078:	481d      	ldr	r0, [pc, #116]	; (80020f0 <blink+0x84>)
 800207a:	f001 fe77 	bl	8003d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_RESET);
 800207e:	2200      	movs	r2, #0
 8002080:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002084:	481a      	ldr	r0, [pc, #104]	; (80020f0 <blink+0x84>)
 8002086:	f001 fe71 	bl	8003d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Orange_GPIO_Port, Orange_Pin, GPIO_PIN_RESET);
 800208a:	2200      	movs	r2, #0
 800208c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002090:	4817      	ldr	r0, [pc, #92]	; (80020f0 <blink+0x84>)
 8002092:	f001 fe6b 	bl	8003d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Red_GPIO_Port,Red_Pin, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800209c:	4814      	ldr	r0, [pc, #80]	; (80020f0 <blink+0x84>)
 800209e:	f001 fe65 	bl	8003d6c <HAL_GPIO_WritePin>
	for(int i=0;i<6;i++){
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	e01a      	b.n	80020de <blink+0x72>
		HAL_GPIO_TogglePin(Green_GPIO_Port, Green_Pin);
 80020a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ac:	4810      	ldr	r0, [pc, #64]	; (80020f0 <blink+0x84>)
 80020ae:	f001 fe76 	bl	8003d9e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Orange_GPIO_Port, Orange_Pin);
 80020b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020b6:	480e      	ldr	r0, [pc, #56]	; (80020f0 <blink+0x84>)
 80020b8:	f001 fe71 	bl	8003d9e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Red_GPIO_Port, Red_Pin);
 80020bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020c0:	480b      	ldr	r0, [pc, #44]	; (80020f0 <blink+0x84>)
 80020c2:	f001 fe6c 	bl	8003d9e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Blue_GPIO_Port, Blue_Pin);
 80020c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020ca:	4809      	ldr	r0, [pc, #36]	; (80020f0 <blink+0x84>)
 80020cc:	f001 fe67 	bl	8003d9e <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 80020d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80020d4:	f001 f946 	bl	8003364 <HAL_Delay>
	for(int i=0;i<6;i++){
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3301      	adds	r3, #1
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b05      	cmp	r3, #5
 80020e2:	dde1      	ble.n	80020a8 <blink+0x3c>
	}
	wrong_LEDs();
 80020e4:	f7ff ff82 	bl	8001fec <wrong_LEDs>
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40020c00 	.word	0x40020c00

080020f4 <CheckPassword>:

bool CheckPassword(){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
  uint8_t tempPassword[8];
  MY_FLASH_ReadN(Nusers_address,&user_num,1,DATA_TYPE_8);
 80020fa:	2300      	movs	r3, #0
 80020fc:	2201      	movs	r2, #1
 80020fe:	4918      	ldr	r1, [pc, #96]	; (8002160 <CheckPassword+0x6c>)
 8002100:	2001      	movs	r0, #1
 8002102:	f7fe fec3 	bl	8000e8c <MY_FLASH_ReadN>
  for (int i=0;i<user_num;i++){
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	e01d      	b.n	8002148 <CheckPassword+0x54>
	  MY_FLASH_ReadN(MemDatastartpoint + (i*24),tempPassword,8,DATA_TYPE_8);
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4613      	mov	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	3303      	adds	r3, #3
 8002118:	4618      	mov	r0, r3
 800211a:	1d39      	adds	r1, r7, #4
 800211c:	2300      	movs	r3, #0
 800211e:	2208      	movs	r2, #8
 8002120:	f7fe feb4 	bl	8000e8c <MY_FLASH_ReadN>
	  if (memcmp(tempPassword, password, 8) == 0) {
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	2208      	movs	r2, #8
 8002128:	490e      	ldr	r1, [pc, #56]	; (8002164 <CheckPassword+0x70>)
 800212a:	4618      	mov	r0, r3
 800212c:	f009 fac0 	bl	800b6b0 <memcmp>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d105      	bne.n	8002142 <CheckPassword+0x4e>
		  CurrentUser = i;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <CheckPassword+0x74>)
 800213c:	701a      	strb	r2, [r3, #0]
		  return true;
 800213e:	2301      	movs	r3, #1
 8002140:	e009      	b.n	8002156 <CheckPassword+0x62>
  for (int i=0;i<user_num;i++){
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3301      	adds	r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <CheckPassword+0x6c>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4293      	cmp	r3, r2
 8002152:	dbdb      	blt.n	800210c <CheckPassword+0x18>
	  }
  }
  return false;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000264 	.word	0x20000264
 8002164:	2000024c 	.word	0x2000024c
 8002168:	20000266 	.word	0x20000266

0800216c <CDC_recieveCALLBACK>:

void CDC_recieveCALLBACK(uint8_t *buf, uint32_t len){
 800216c:	b580      	push	{r7, lr}
 800216e:	b090      	sub	sp, #64	; 0x40
 8002170:	af02      	add	r7, sp, #8
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
	uint8_t status=0;	//0 lock 1 unlock 2 brand new
 8002176:	2300      	movs	r3, #0
 8002178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(buf[0]==0){
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d12b      	bne.n	80021dc <CDC_recieveCALLBACK+0x70>
		MY_FLASH_ReadN(BrandNew_address,&Brand_new,1,DATA_TYPE_8);
 8002184:	2300      	movs	r3, #0
 8002186:	2201      	movs	r2, #1
 8002188:	4956      	ldr	r1, [pc, #344]	; (80022e4 <CDC_recieveCALLBACK+0x178>)
 800218a:	2000      	movs	r0, #0
 800218c:	f7fe fe7e 	bl	8000e8c <MY_FLASH_ReadN>
		if(Brand_new == 0){
 8002190:	4b54      	ldr	r3, [pc, #336]	; (80022e4 <CDC_recieveCALLBACK+0x178>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d109      	bne.n	80021ac <CDC_recieveCALLBACK+0x40>
			status = 2;
 8002198:	2302      	movs	r3, #2
 800219a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			CDC_Transmit_FS(&status, 1);
 800219e:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80021a2:	2101      	movs	r1, #1
 80021a4:	4618      	mov	r0, r3
 80021a6:	f008 fbbb 	bl	800a920 <CDC_Transmit_FS>
			//for (int i=0;i<32;i++)printf("%02x",computed_hash[i]);
			//printf("\n");
			CDC_Transmit_FS(computed_hash, 32);
		}
	}
}
 80021aa:	e097      	b.n	80022dc <CDC_recieveCALLBACK+0x170>
		}else if(DeviceState){
 80021ac:	4b4e      	ldr	r3, [pc, #312]	; (80022e8 <CDC_recieveCALLBACK+0x17c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d009      	beq.n	80021c8 <CDC_recieveCALLBACK+0x5c>
			status = 1;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			CDC_Transmit_FS(&status, 1);
 80021ba:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80021be:	2101      	movs	r1, #1
 80021c0:	4618      	mov	r0, r3
 80021c2:	f008 fbad 	bl	800a920 <CDC_Transmit_FS>
}
 80021c6:	e089      	b.n	80022dc <CDC_recieveCALLBACK+0x170>
			status = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			CDC_Transmit_FS(&status, 1);
 80021ce:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80021d2:	2101      	movs	r1, #1
 80021d4:	4618      	mov	r0, r3
 80021d6:	f008 fba3 	bl	800a920 <CDC_Transmit_FS>
}
 80021da:	e07f      	b.n	80022dc <CDC_recieveCALLBACK+0x170>
	}else if(buf[0]==1){
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d113      	bne.n	800220c <CDC_recieveCALLBACK+0xa0>
		if(DeviceState){
 80021e4:	4b40      	ldr	r3, [pc, #256]	; (80022e8 <CDC_recieveCALLBACK+0x17c>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d077      	beq.n	80022dc <CDC_recieveCALLBACK+0x170>
			status = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			CDC_Transmit_FS(&status, 1);
 80021f2:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80021f6:	2101      	movs	r1, #1
 80021f8:	4618      	mov	r0, r3
 80021fa:	f008 fb91 	bl	800a920 <CDC_Transmit_FS>
			DeviceState=0;
 80021fe:	4b3a      	ldr	r3, [pc, #232]	; (80022e8 <CDC_recieveCALLBACK+0x17c>)
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
			TimerState = 1;
 8002204:	4b39      	ldr	r3, [pc, #228]	; (80022ec <CDC_recieveCALLBACK+0x180>)
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
}
 800220a:	e067      	b.n	80022dc <CDC_recieveCALLBACK+0x170>
	}else if(buf[0]==2){
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d163      	bne.n	80022dc <CDC_recieveCALLBACK+0x170>
		if(DeviceState){
 8002214:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <CDC_recieveCALLBACK+0x17c>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d05f      	beq.n	80022dc <CDC_recieveCALLBACK+0x170>
	    uint32_t carry = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
	    uint8_t Key[4] = {buf[1], buf[2], buf[3], buf[4]};
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	785b      	ldrb	r3, [r3, #1]
 8002224:	743b      	strb	r3, [r7, #16]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	789b      	ldrb	r3, [r3, #2]
 800222a:	747b      	strb	r3, [r7, #17]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	78db      	ldrb	r3, [r3, #3]
 8002230:	74bb      	strb	r3, [r7, #18]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	791b      	ldrb	r3, [r3, #4]
 8002236:	74fb      	strb	r3, [r7, #19]
	    for (int i = 0; i < 16; i++) {
 8002238:	2300      	movs	r3, #0
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
 800223c:	e022      	b.n	8002284 <CDC_recieveCALLBACK+0x118>
	        uint32_t sum = CurrentMasterKey[i] + (i < 4 ? Key[i] : 0) + carry;
 800223e:	4a2c      	ldr	r2, [pc, #176]	; (80022f0 <CDC_recieveCALLBACK+0x184>)
 8002240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002242:	4413      	add	r3, r2
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	4619      	mov	r1, r3
 8002248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224a:	2b03      	cmp	r3, #3
 800224c:	dc05      	bgt.n	800225a <CDC_recieveCALLBACK+0xee>
 800224e:	f107 0210 	add.w	r2, r7, #16
 8002252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002254:	4413      	add	r3, r2
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	e000      	b.n	800225c <CDC_recieveCALLBACK+0xf0>
 800225a:	2300      	movs	r3, #0
 800225c:	440b      	add	r3, r1
 800225e:	461a      	mov	r2, r3
 8002260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002262:	4413      	add	r3, r2
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
	        result[i] = sum & 0xFF;
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	b2d9      	uxtb	r1, r3
 800226a:	f107 0214 	add.w	r2, r7, #20
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	4413      	add	r3, r2
 8002272:	460a      	mov	r2, r1
 8002274:	701a      	strb	r2, [r3, #0]
	        carry = (sum >> 8) & 0xFF;
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	b2db      	uxtb	r3, r3
 800227c:	637b      	str	r3, [r7, #52]	; 0x34
	    for (int i = 0; i < 16; i++) {
 800227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002280:	3301      	adds	r3, #1
 8002282:	633b      	str	r3, [r7, #48]	; 0x30
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	2b0f      	cmp	r3, #15
 8002288:	ddd9      	ble.n	800223e <CDC_recieveCALLBACK+0xd2>
		printf("result = ");
 800228a:	481a      	ldr	r0, [pc, #104]	; (80022f4 <CDC_recieveCALLBACK+0x188>)
 800228c:	f009 f8c2 	bl	800b414 <iprintf>
		for (int i=0;i<16;i++)printf("%02x",result[i]);
 8002290:	2300      	movs	r3, #0
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002294:	e00b      	b.n	80022ae <CDC_recieveCALLBACK+0x142>
 8002296:	f107 0214 	add.w	r2, r7, #20
 800229a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229c:	4413      	add	r3, r2
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	4815      	ldr	r0, [pc, #84]	; (80022f8 <CDC_recieveCALLBACK+0x18c>)
 80022a4:	f009 f8b6 	bl	800b414 <iprintf>
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	3301      	adds	r3, #1
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	2b0f      	cmp	r3, #15
 80022b2:	ddf0      	ble.n	8002296 <CDC_recieveCALLBACK+0x12a>
		printf("\n");
 80022b4:	200a      	movs	r0, #10
 80022b6:	f009 f8bf 	bl	800b438 <putchar>
	    cmox_hash_compute(CMOX_SHA256_ALGO,         /* Use SHA256 algorithm */
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <CDC_recieveCALLBACK+0x190>)
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	f107 0114 	add.w	r1, r7, #20
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	2320      	movs	r3, #32
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <CDC_recieveCALLBACK+0x194>)
 80022ce:	2210      	movs	r2, #16
 80022d0:	f7fd ff7e 	bl	80001d0 <cmox_hash_compute>
			CDC_Transmit_FS(computed_hash, 32);
 80022d4:	2120      	movs	r1, #32
 80022d6:	480a      	ldr	r0, [pc, #40]	; (8002300 <CDC_recieveCALLBACK+0x194>)
 80022d8:	f008 fb22 	bl	800a920 <CDC_Transmit_FS>
}
 80022dc:	bf00      	nop
 80022de:	3738      	adds	r7, #56	; 0x38
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000248 	.word	0x20000248
 80022e8:	20000284 	.word	0x20000284
 80022ec:	20000283 	.word	0x20000283
 80022f0:	20000270 	.word	0x20000270
 80022f4:	0800c338 	.word	0x0800c338
 80022f8:	0800c344 	.word	0x0800c344
 80022fc:	0800c3a0 	.word	0x0800c3a0
 8002300:	2000028c 	.word	0x2000028c

08002304 <checkButtons>:

int checkButtons(){
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
	bool flag_bt1  = true;
 800230a:	2301      	movs	r3, #1
 800230c:	71fb      	strb	r3, [r7, #7]
	bool flag_bt2  = true;
 800230e:	2301      	movs	r3, #1
 8002310:	71bb      	strb	r3, [r7, #6]
	bool flag_both = true;
 8002312:	2301      	movs	r3, #1
 8002314:	717b      	strb	r3, [r7, #5]
	while(1){
		if(!DeviceState && TimerState){state=Lock;break;}
 8002316:	4b40      	ldr	r3, [pc, #256]	; (8002418 <checkButtons+0x114>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	f083 0301 	eor.w	r3, r3, #1
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d009      	beq.n	8002338 <checkButtons+0x34>
 8002324:	4b3d      	ldr	r3, [pc, #244]	; (800241c <checkButtons+0x118>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <checkButtons+0x34>
 800232c:	4b3c      	ldr	r3, [pc, #240]	; (8002420 <checkButtons+0x11c>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
 8002332:	bf00      	nop
		}else if(!read_Bt2() && !flag_bt2 && flag_both){
			flag_bt2  = true;
			return 1;
		}
	}
	return 3;//nothing
 8002334:	2303      	movs	r3, #3
 8002336:	e06a      	b.n	800240e <checkButtons+0x10a>
		if(read_Bt1() && read_Bt2() && flag_both){
 8002338:	f000 f874 	bl	8002424 <read_Bt1>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <checkButtons+0x54>
 8002342:	f000 f883 	bl	800244c <read_Bt2>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <checkButtons+0x54>
 800234c:	797b      	ldrb	r3, [r7, #5]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <checkButtons+0x54>
			flag_both = false;
 8002352:	2300      	movs	r3, #0
 8002354:	717b      	strb	r3, [r7, #5]
 8002356:	e059      	b.n	800240c <checkButtons+0x108>
		}else if(read_Bt1() && flag_bt1){
 8002358:	f000 f864 	bl	8002424 <read_Bt1>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <checkButtons+0x6a>
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <checkButtons+0x6a>
			flag_bt1 = false;
 8002368:	2300      	movs	r3, #0
 800236a:	71fb      	strb	r3, [r7, #7]
 800236c:	e04e      	b.n	800240c <checkButtons+0x108>
		}else if(read_Bt2() && flag_bt2){
 800236e:	f000 f86d 	bl	800244c <read_Bt2>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <checkButtons+0x80>
 8002378:	79bb      	ldrb	r3, [r7, #6]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <checkButtons+0x80>
			flag_bt2 = false;
 800237e:	2300      	movs	r3, #0
 8002380:	71bb      	strb	r3, [r7, #6]
 8002382:	e043      	b.n	800240c <checkButtons+0x108>
		}else if(!read_Bt1() && !read_Bt2() && !flag_both){
 8002384:	f000 f84e 	bl	8002424 <read_Bt1>
 8002388:	4603      	mov	r3, r0
 800238a:	f083 0301 	eor.w	r3, r3, #1
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d011      	beq.n	80023b8 <checkButtons+0xb4>
 8002394:	f000 f85a 	bl	800244c <read_Bt2>
 8002398:	4603      	mov	r3, r0
 800239a:	f083 0301 	eor.w	r3, r3, #1
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d009      	beq.n	80023b8 <checkButtons+0xb4>
 80023a4:	797b      	ldrb	r3, [r7, #5]
 80023a6:	f083 0301 	eor.w	r3, r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <checkButtons+0xb4>
			flag_both = true;
 80023b0:	2301      	movs	r3, #1
 80023b2:	717b      	strb	r3, [r7, #5]
			return 2;
 80023b4:	2302      	movs	r3, #2
 80023b6:	e02a      	b.n	800240e <checkButtons+0x10a>
		}else if(!read_Bt1() && !flag_bt1 && flag_both){
 80023b8:	f000 f834 	bl	8002424 <read_Bt1>
 80023bc:	4603      	mov	r3, r0
 80023be:	f083 0301 	eor.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00c      	beq.n	80023e2 <checkButtons+0xde>
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	f083 0301 	eor.w	r3, r3, #1
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <checkButtons+0xde>
 80023d4:	797b      	ldrb	r3, [r7, #5]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <checkButtons+0xde>
			flag_bt1  = true;
 80023da:	2301      	movs	r3, #1
 80023dc:	71fb      	strb	r3, [r7, #7]
			return 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	e015      	b.n	800240e <checkButtons+0x10a>
		}else if(!read_Bt2() && !flag_bt2 && flag_both){
 80023e2:	f000 f833 	bl	800244c <read_Bt2>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f083 0301 	eor.w	r3, r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d091      	beq.n	8002316 <checkButtons+0x12>
 80023f2:	79bb      	ldrb	r3, [r7, #6]
 80023f4:	f083 0301 	eor.w	r3, r3, #1
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d08b      	beq.n	8002316 <checkButtons+0x12>
 80023fe:	797b      	ldrb	r3, [r7, #5]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d088      	beq.n	8002316 <checkButtons+0x12>
			flag_bt2  = true;
 8002404:	2301      	movs	r3, #1
 8002406:	71bb      	strb	r3, [r7, #6]
			return 1;
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <checkButtons+0x10a>
		if(!DeviceState && TimerState){state=Lock;break;}
 800240c:	e783      	b.n	8002316 <checkButtons+0x12>
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000284 	.word	0x20000284
 800241c:	20000283 	.word	0x20000283
 8002420:	20000281 	.word	0x20000281

08002424 <read_Bt1>:

bool read_Bt1(){
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 8002428:	2005      	movs	r0, #5
 800242a:	f000 ff9b 	bl	8003364 <HAL_Delay>
	return HAL_GPIO_ReadPin(Bt1_GPIO_Port, Bt1_Pin);
 800242e:	2140      	movs	r1, #64	; 0x40
 8002430:	4805      	ldr	r0, [pc, #20]	; (8002448 <read_Bt1+0x24>)
 8002432:	f001 fc83 	bl	8003d3c <HAL_GPIO_ReadPin>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf14      	ite	ne
 800243c:	2301      	movne	r3, #1
 800243e:	2300      	moveq	r3, #0
 8002440:	b2db      	uxtb	r3, r3
}
 8002442:	4618      	mov	r0, r3
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40020800 	.word	0x40020800

0800244c <read_Bt2>:

bool read_Bt2(){
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 8002450:	2005      	movs	r0, #5
 8002452:	f000 ff87 	bl	8003364 <HAL_Delay>
	return HAL_GPIO_ReadPin(Bt2_GPIO_Port, Bt2_Pin);
 8002456:	2180      	movs	r1, #128	; 0x80
 8002458:	4805      	ldr	r0, [pc, #20]	; (8002470 <read_Bt2+0x24>)
 800245a:	f001 fc6f 	bl	8003d3c <HAL_GPIO_ReadPin>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
}
 800246a:	4618      	mov	r0, r3
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40020800 	.word	0x40020800

08002474 <_write>:

int _write(int file, char *ptr, int len){
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for (DataIdx = 0; DataIdx < len; DataIdx++){
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e009      	b.n	800249a <_write+0x26>
	 ITM_SendChar(*ptr++);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	60ba      	str	r2, [r7, #8]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fdca 	bl	8001028 <ITM_SendChar>
 for (DataIdx = 0; DataIdx < len; DataIdx++){
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	3301      	adds	r3, #1
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	429a      	cmp	r2, r3
 80024a0:	dbf1      	blt.n	8002486 <_write+0x12>
 }
 return len;
 80024a2:	687b      	ldr	r3, [r7, #4]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <Get_rng>:

void Get_rng(uint8_t *rng){
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	for(int i=0;i<4;i++){
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	e02b      	b.n	8002512 <Get_rng+0x66>
		HAL_RNG_GenerateRandomNumber_IT(&hrng);
 80024ba:	481a      	ldr	r0, [pc, #104]	; (8002524 <Get_rng+0x78>)
 80024bc:	f004 f954 	bl	8006768 <HAL_RNG_GenerateRandomNumber_IT>
		while(!rngflag);
 80024c0:	bf00      	nop
 80024c2:	4b19      	ldr	r3, [pc, #100]	; (8002528 <Get_rng+0x7c>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	f083 0301 	eor.w	r3, r3, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f8      	bne.n	80024c2 <Get_rng+0x16>
		rngflag =0;
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <Get_rng+0x7c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
		uint32_t temp_rng = HAL_RNG_ReadLastRandomNumber(&hrng);
 80024d6:	4813      	ldr	r0, [pc, #76]	; (8002524 <Get_rng+0x78>)
 80024d8:	f004 f9c9 	bl	800686e <HAL_RNG_ReadLastRandomNumber>
 80024dc:	60f8      	str	r0, [r7, #12]
		//printf("temp_rng %d=%08x\n",i,temp_rng);
		for(int j=0;j<4;j++){
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	e010      	b.n	8002506 <Get_rng+0x5a>
			rng[j+i*4] = (uint8_t)(temp_rng >> (j*8));
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	fa22 f103 	lsr.w	r1, r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	009a      	lsls	r2, r3, #2
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4413      	add	r3, r2
 80024f6:	461a      	mov	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	b2ca      	uxtb	r2, r1
 80024fe:	701a      	strb	r2, [r3, #0]
		for(int j=0;j<4;j++){
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	3301      	adds	r3, #1
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b03      	cmp	r3, #3
 800250a:	ddeb      	ble.n	80024e4 <Get_rng+0x38>
	for(int i=0;i<4;i++){
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	3301      	adds	r3, #1
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b03      	cmp	r3, #3
 8002516:	ddd0      	ble.n	80024ba <Get_rng+0xe>
			//printf("temp_rng %d=%08x\n",j+i*4,rng[j+i*4]);
		}
	}
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200001f0 	.word	0x200001f0
 8002528:	20000265 	.word	0x20000265

0800252c <HAL_RNG_ReadyDataCallback>:

void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit){
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
  rngflag =1;
 8002536:	4b04      	ldr	r3, [pc, #16]	; (8002548 <HAL_RNG_ReadyDataCallback+0x1c>)
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	20000265 	.word	0x20000265

0800254c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  if(DeviceState){
 8002554:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d015      	beq.n	8002588 <HAL_TIM_PeriodElapsedCallback+0x3c>
	  Timer++;
 800255c:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	4a0f      	ldr	r2, [pc, #60]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002564:	6013      	str	r3, [r2, #0]
	  if(Timer == Timeout){
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b0a      	cmp	r3, #10
 800256c:	d10f      	bne.n	800258e <HAL_TIM_PeriodElapsedCallback+0x42>
		  DeviceState=false;
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
		  TimerState=true;		//false is lock true unlock
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
		  state=Lock;
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
		  Timer=0;
 8002580:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
  }else{
	  //TimerState=false;
	  Timer=0;
  }
  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
}
 8002586:	e002      	b.n	800258e <HAL_TIM_PeriodElapsedCallback+0x42>
	  Timer=0;
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000284 	.word	0x20000284
 80025a0:	20000288 	.word	0x20000288
 80025a4:	20000283 	.word	0x20000283
 80025a8:	20000281 	.word	0x20000281

080025ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b0:	b672      	cpsid	i
}
 80025b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025b4:	e7fe      	b.n	80025b4 <Error_Handler+0x8>

080025b6 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60ba      	str	r2, [r7, #8]
 80025be:	461a      	mov	r2, r3
 80025c0:	4603      	mov	r3, r0
 80025c2:	81fb      	strh	r3, [r7, #14]
 80025c4:	460b      	mov	r3, r1
 80025c6:	81bb      	strh	r3, [r7, #12]
 80025c8:	4613      	mov	r3, r2
 80025ca:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80025cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025d0:	3307      	adds	r3, #7
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	da00      	bge.n	80025d8 <SSD1306_DrawBitmap+0x22>
 80025d6:	3307      	adds	r3, #7
 80025d8:	10db      	asrs	r3, r3, #3
 80025da:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	82bb      	strh	r3, [r7, #20]
 80025e4:	e044      	b.n	8002670 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	827b      	strh	r3, [r7, #18]
 80025ea:	e02f      	b.n	800264c <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80025ec:	8a7b      	ldrh	r3, [r7, #18]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	75fb      	strb	r3, [r7, #23]
 80025fc:	e012      	b.n	8002624 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80025fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002602:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002606:	fb03 f202 	mul.w	r2, r3, r2
 800260a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800260e:	2b00      	cmp	r3, #0
 8002610:	da00      	bge.n	8002614 <SSD1306_DrawBitmap+0x5e>
 8002612:	3307      	adds	r3, #7
 8002614:	10db      	asrs	r3, r3, #3
 8002616:	b21b      	sxth	r3, r3
 8002618:	4413      	add	r3, r2
 800261a:	461a      	mov	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4413      	add	r3, r2
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002624:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002628:	2b00      	cmp	r3, #0
 800262a:	da09      	bge.n	8002640 <SSD1306_DrawBitmap+0x8a>
 800262c:	89fa      	ldrh	r2, [r7, #14]
 800262e:	8a7b      	ldrh	r3, [r7, #18]
 8002630:	4413      	add	r3, r2
 8002632:	b29b      	uxth	r3, r3
 8002634:	89b9      	ldrh	r1, [r7, #12]
 8002636:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f92e 	bl	800289c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002640:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002644:	b29b      	uxth	r3, r3
 8002646:	3301      	adds	r3, #1
 8002648:	b29b      	uxth	r3, r3
 800264a:	827b      	strh	r3, [r7, #18]
 800264c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002650:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002654:	429a      	cmp	r2, r3
 8002656:	dbc9      	blt.n	80025ec <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002658:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800265c:	b29b      	uxth	r3, r3
 800265e:	3301      	adds	r3, #1
 8002660:	b29b      	uxth	r3, r3
 8002662:	82bb      	strh	r3, [r7, #20]
 8002664:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002668:	b29b      	uxth	r3, r3
 800266a:	3301      	adds	r3, #1
 800266c:	b29b      	uxth	r3, r3
 800266e:	81bb      	strh	r3, [r7, #12]
 8002670:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002674:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002678:	429a      	cmp	r2, r3
 800267a:	dbb4      	blt.n	80025e6 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800268e:	f000 fb71 	bl	8002d74 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002692:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002696:	2201      	movs	r2, #1
 8002698:	2178      	movs	r1, #120	; 0x78
 800269a:	485b      	ldr	r0, [pc, #364]	; (8002808 <SSD1306_Init+0x180>)
 800269c:	f001 fddc 	bl	8004258 <HAL_I2C_IsDeviceReady>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e0a9      	b.n	80027fe <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80026aa:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80026ae:	607b      	str	r3, [r7, #4]
	while(p>0)
 80026b0:	e002      	b.n	80026b8 <SSD1306_Init+0x30>
		p--;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f9      	bne.n	80026b2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80026be:	22ae      	movs	r2, #174	; 0xae
 80026c0:	2100      	movs	r1, #0
 80026c2:	2078      	movs	r0, #120	; 0x78
 80026c4:	f000 fbd2 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80026c8:	2220      	movs	r2, #32
 80026ca:	2100      	movs	r1, #0
 80026cc:	2078      	movs	r0, #120	; 0x78
 80026ce:	f000 fbcd 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80026d2:	2210      	movs	r2, #16
 80026d4:	2100      	movs	r1, #0
 80026d6:	2078      	movs	r0, #120	; 0x78
 80026d8:	f000 fbc8 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80026dc:	22b0      	movs	r2, #176	; 0xb0
 80026de:	2100      	movs	r1, #0
 80026e0:	2078      	movs	r0, #120	; 0x78
 80026e2:	f000 fbc3 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80026e6:	22c8      	movs	r2, #200	; 0xc8
 80026e8:	2100      	movs	r1, #0
 80026ea:	2078      	movs	r0, #120	; 0x78
 80026ec:	f000 fbbe 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80026f0:	2200      	movs	r2, #0
 80026f2:	2100      	movs	r1, #0
 80026f4:	2078      	movs	r0, #120	; 0x78
 80026f6:	f000 fbb9 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80026fa:	2210      	movs	r2, #16
 80026fc:	2100      	movs	r1, #0
 80026fe:	2078      	movs	r0, #120	; 0x78
 8002700:	f000 fbb4 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002704:	2240      	movs	r2, #64	; 0x40
 8002706:	2100      	movs	r1, #0
 8002708:	2078      	movs	r0, #120	; 0x78
 800270a:	f000 fbaf 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800270e:	2281      	movs	r2, #129	; 0x81
 8002710:	2100      	movs	r1, #0
 8002712:	2078      	movs	r0, #120	; 0x78
 8002714:	f000 fbaa 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002718:	22ff      	movs	r2, #255	; 0xff
 800271a:	2100      	movs	r1, #0
 800271c:	2078      	movs	r0, #120	; 0x78
 800271e:	f000 fba5 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002722:	22a1      	movs	r2, #161	; 0xa1
 8002724:	2100      	movs	r1, #0
 8002726:	2078      	movs	r0, #120	; 0x78
 8002728:	f000 fba0 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800272c:	22a6      	movs	r2, #166	; 0xa6
 800272e:	2100      	movs	r1, #0
 8002730:	2078      	movs	r0, #120	; 0x78
 8002732:	f000 fb9b 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002736:	22a8      	movs	r2, #168	; 0xa8
 8002738:	2100      	movs	r1, #0
 800273a:	2078      	movs	r0, #120	; 0x78
 800273c:	f000 fb96 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002740:	223f      	movs	r2, #63	; 0x3f
 8002742:	2100      	movs	r1, #0
 8002744:	2078      	movs	r0, #120	; 0x78
 8002746:	f000 fb91 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800274a:	22a4      	movs	r2, #164	; 0xa4
 800274c:	2100      	movs	r1, #0
 800274e:	2078      	movs	r0, #120	; 0x78
 8002750:	f000 fb8c 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002754:	22d3      	movs	r2, #211	; 0xd3
 8002756:	2100      	movs	r1, #0
 8002758:	2078      	movs	r0, #120	; 0x78
 800275a:	f000 fb87 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	2078      	movs	r0, #120	; 0x78
 8002764:	f000 fb82 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002768:	22d5      	movs	r2, #213	; 0xd5
 800276a:	2100      	movs	r1, #0
 800276c:	2078      	movs	r0, #120	; 0x78
 800276e:	f000 fb7d 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002772:	22f0      	movs	r2, #240	; 0xf0
 8002774:	2100      	movs	r1, #0
 8002776:	2078      	movs	r0, #120	; 0x78
 8002778:	f000 fb78 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800277c:	22d9      	movs	r2, #217	; 0xd9
 800277e:	2100      	movs	r1, #0
 8002780:	2078      	movs	r0, #120	; 0x78
 8002782:	f000 fb73 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002786:	2222      	movs	r2, #34	; 0x22
 8002788:	2100      	movs	r1, #0
 800278a:	2078      	movs	r0, #120	; 0x78
 800278c:	f000 fb6e 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002790:	22da      	movs	r2, #218	; 0xda
 8002792:	2100      	movs	r1, #0
 8002794:	2078      	movs	r0, #120	; 0x78
 8002796:	f000 fb69 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800279a:	2212      	movs	r2, #18
 800279c:	2100      	movs	r1, #0
 800279e:	2078      	movs	r0, #120	; 0x78
 80027a0:	f000 fb64 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80027a4:	22db      	movs	r2, #219	; 0xdb
 80027a6:	2100      	movs	r1, #0
 80027a8:	2078      	movs	r0, #120	; 0x78
 80027aa:	f000 fb5f 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80027ae:	2220      	movs	r2, #32
 80027b0:	2100      	movs	r1, #0
 80027b2:	2078      	movs	r0, #120	; 0x78
 80027b4:	f000 fb5a 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80027b8:	228d      	movs	r2, #141	; 0x8d
 80027ba:	2100      	movs	r1, #0
 80027bc:	2078      	movs	r0, #120	; 0x78
 80027be:	f000 fb55 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80027c2:	2214      	movs	r2, #20
 80027c4:	2100      	movs	r1, #0
 80027c6:	2078      	movs	r0, #120	; 0x78
 80027c8:	f000 fb50 	bl	8002e6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80027cc:	22af      	movs	r2, #175	; 0xaf
 80027ce:	2100      	movs	r1, #0
 80027d0:	2078      	movs	r0, #120	; 0x78
 80027d2:	f000 fb4b 	bl	8002e6c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80027d6:	222e      	movs	r2, #46	; 0x2e
 80027d8:	2100      	movs	r1, #0
 80027da:	2078      	movs	r0, #120	; 0x78
 80027dc:	f000 fb46 	bl	8002e6c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f000 f843 	bl	800286c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80027e6:	f000 f813 	bl	8002810 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <SSD1306_Init+0x184>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <SSD1306_Init+0x184>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80027f6:	4b05      	ldr	r3, [pc, #20]	; (800280c <SSD1306_Init+0x184>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80027fc:	2301      	movs	r3, #1
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2000019c 	.word	0x2000019c
 800280c:	200006ac 	.word	0x200006ac

08002810 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002816:	2300      	movs	r3, #0
 8002818:	71fb      	strb	r3, [r7, #7]
 800281a:	e01d      	b.n	8002858 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	3b50      	subs	r3, #80	; 0x50
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	2100      	movs	r1, #0
 8002826:	2078      	movs	r0, #120	; 0x78
 8002828:	f000 fb20 	bl	8002e6c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800282c:	2200      	movs	r2, #0
 800282e:	2100      	movs	r1, #0
 8002830:	2078      	movs	r0, #120	; 0x78
 8002832:	f000 fb1b 	bl	8002e6c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002836:	2210      	movs	r2, #16
 8002838:	2100      	movs	r1, #0
 800283a:	2078      	movs	r0, #120	; 0x78
 800283c:	f000 fb16 	bl	8002e6c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	01db      	lsls	r3, r3, #7
 8002844:	4a08      	ldr	r2, [pc, #32]	; (8002868 <SSD1306_UpdateScreen+0x58>)
 8002846:	441a      	add	r2, r3
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	2140      	movs	r1, #64	; 0x40
 800284c:	2078      	movs	r0, #120	; 0x78
 800284e:	f000 faa7 	bl	8002da0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	3301      	adds	r3, #1
 8002856:	71fb      	strb	r3, [r7, #7]
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	2b07      	cmp	r3, #7
 800285c:	d9de      	bls.n	800281c <SSD1306_UpdateScreen+0xc>
	}
}
 800285e:	bf00      	nop
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	200002ac 	.word	0x200002ac

0800286c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <SSD1306_Fill+0x14>
 800287c:	2300      	movs	r3, #0
 800287e:	e000      	b.n	8002882 <SSD1306_Fill+0x16>
 8002880:	23ff      	movs	r3, #255	; 0xff
 8002882:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002886:	4619      	mov	r1, r3
 8002888:	4803      	ldr	r0, [pc, #12]	; (8002898 <SSD1306_Fill+0x2c>)
 800288a:	f008 ff21 	bl	800b6d0 <memset>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200002ac 	.word	0x200002ac

0800289c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	80fb      	strh	r3, [r7, #6]
 80028a6:	460b      	mov	r3, r1
 80028a8:	80bb      	strh	r3, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	70fb      	strb	r3, [r7, #3]
	if (
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	2b7f      	cmp	r3, #127	; 0x7f
 80028b2:	d848      	bhi.n	8002946 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80028b4:	88bb      	ldrh	r3, [r7, #4]
 80028b6:	2b3f      	cmp	r3, #63	; 0x3f
 80028b8:	d845      	bhi.n	8002946 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80028ba:	4b26      	ldr	r3, [pc, #152]	; (8002954 <SSD1306_DrawPixel+0xb8>)
 80028bc:	791b      	ldrb	r3, [r3, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d006      	beq.n	80028d0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d11a      	bne.n	800290c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80028d6:	88fa      	ldrh	r2, [r7, #6]
 80028d8:	88bb      	ldrh	r3, [r7, #4]
 80028da:	08db      	lsrs	r3, r3, #3
 80028dc:	b298      	uxth	r0, r3
 80028de:	4603      	mov	r3, r0
 80028e0:	01db      	lsls	r3, r3, #7
 80028e2:	4413      	add	r3, r2
 80028e4:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <SSD1306_DrawPixel+0xbc>)
 80028e6:	5cd3      	ldrb	r3, [r2, r3]
 80028e8:	b25a      	sxtb	r2, r3
 80028ea:	88bb      	ldrh	r3, [r7, #4]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	2101      	movs	r1, #1
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	b25b      	sxtb	r3, r3
 80028f8:	4313      	orrs	r3, r2
 80028fa:	b259      	sxtb	r1, r3
 80028fc:	88fa      	ldrh	r2, [r7, #6]
 80028fe:	4603      	mov	r3, r0
 8002900:	01db      	lsls	r3, r3, #7
 8002902:	4413      	add	r3, r2
 8002904:	b2c9      	uxtb	r1, r1
 8002906:	4a14      	ldr	r2, [pc, #80]	; (8002958 <SSD1306_DrawPixel+0xbc>)
 8002908:	54d1      	strb	r1, [r2, r3]
 800290a:	e01d      	b.n	8002948 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800290c:	88fa      	ldrh	r2, [r7, #6]
 800290e:	88bb      	ldrh	r3, [r7, #4]
 8002910:	08db      	lsrs	r3, r3, #3
 8002912:	b298      	uxth	r0, r3
 8002914:	4603      	mov	r3, r0
 8002916:	01db      	lsls	r3, r3, #7
 8002918:	4413      	add	r3, r2
 800291a:	4a0f      	ldr	r2, [pc, #60]	; (8002958 <SSD1306_DrawPixel+0xbc>)
 800291c:	5cd3      	ldrb	r3, [r2, r3]
 800291e:	b25a      	sxtb	r2, r3
 8002920:	88bb      	ldrh	r3, [r7, #4]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	2101      	movs	r1, #1
 8002928:	fa01 f303 	lsl.w	r3, r1, r3
 800292c:	b25b      	sxtb	r3, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	b25b      	sxtb	r3, r3
 8002932:	4013      	ands	r3, r2
 8002934:	b259      	sxtb	r1, r3
 8002936:	88fa      	ldrh	r2, [r7, #6]
 8002938:	4603      	mov	r3, r0
 800293a:	01db      	lsls	r3, r3, #7
 800293c:	4413      	add	r3, r2
 800293e:	b2c9      	uxtb	r1, r1
 8002940:	4a05      	ldr	r2, [pc, #20]	; (8002958 <SSD1306_DrawPixel+0xbc>)
 8002942:	54d1      	strb	r1, [r2, r3]
 8002944:	e000      	b.n	8002948 <SSD1306_DrawPixel+0xac>
		return;
 8002946:	bf00      	nop
	}
}
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	200006ac 	.word	0x200006ac
 8002958:	200002ac 	.word	0x200002ac

0800295c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	460a      	mov	r2, r1
 8002966:	80fb      	strh	r3, [r7, #6]
 8002968:	4613      	mov	r3, r2
 800296a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800296c:	4a05      	ldr	r2, [pc, #20]	; (8002984 <SSD1306_GotoXY+0x28>)
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002972:	4a04      	ldr	r2, [pc, #16]	; (8002984 <SSD1306_GotoXY+0x28>)
 8002974:	88bb      	ldrh	r3, [r7, #4]
 8002976:	8053      	strh	r3, [r2, #2]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	200006ac 	.word	0x200006ac

08002988 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	6039      	str	r1, [r7, #0]
 8002992:	71fb      	strb	r3, [r7, #7]
 8002994:	4613      	mov	r3, r2
 8002996:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002998:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <SSD1306_Putc+0xfc>)
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	4413      	add	r3, r2
	if (
 80029a4:	2b7f      	cmp	r3, #127	; 0x7f
 80029a6:	dc07      	bgt.n	80029b8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80029a8:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <SSD1306_Putc+0xfc>)
 80029aa:	885b      	ldrh	r3, [r3, #2]
 80029ac:	461a      	mov	r2, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	785b      	ldrb	r3, [r3, #1]
 80029b2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80029b4:	2b3f      	cmp	r3, #63	; 0x3f
 80029b6:	dd01      	ble.n	80029bc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	e05e      	b.n	8002a7a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	e04b      	b.n	8002a5a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	3b20      	subs	r3, #32
 80029ca:	6839      	ldr	r1, [r7, #0]
 80029cc:	7849      	ldrb	r1, [r1, #1]
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4619      	mov	r1, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	440b      	add	r3, r1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80029e0:	2300      	movs	r3, #0
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	e030      	b.n	8002a48 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d010      	beq.n	8002a18 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80029f6:	4b23      	ldr	r3, [pc, #140]	; (8002a84 <SSD1306_Putc+0xfc>)
 80029f8:	881a      	ldrh	r2, [r3, #0]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	b298      	uxth	r0, r3
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <SSD1306_Putc+0xfc>)
 8002a04:	885a      	ldrh	r2, [r3, #2]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	79ba      	ldrb	r2, [r7, #6]
 8002a10:	4619      	mov	r1, r3
 8002a12:	f7ff ff43 	bl	800289c <SSD1306_DrawPixel>
 8002a16:	e014      	b.n	8002a42 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002a18:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <SSD1306_Putc+0xfc>)
 8002a1a:	881a      	ldrh	r2, [r3, #0]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	b298      	uxth	r0, r3
 8002a24:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <SSD1306_Putc+0xfc>)
 8002a26:	885a      	ldrh	r2, [r3, #2]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	b299      	uxth	r1, r3
 8002a30:	79bb      	ldrb	r3, [r7, #6]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f7ff ff2d 	bl	800289c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	3301      	adds	r3, #1
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d3c8      	bcc.n	80029e6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	3301      	adds	r3, #1
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	785b      	ldrb	r3, [r3, #1]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d3ad      	bcc.n	80029c2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <SSD1306_Putc+0xfc>)
 8002a68:	881a      	ldrh	r2, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	4b03      	ldr	r3, [pc, #12]	; (8002a84 <SSD1306_Putc+0xfc>)
 8002a76:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002a78:	79fb      	ldrb	r3, [r7, #7]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	200006ac 	.word	0x200006ac

08002a88 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	4613      	mov	r3, r2
 8002a94:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002a96:	e012      	b.n	8002abe <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	79fa      	ldrb	r2, [r7, #7]
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff71 	bl	8002988 <SSD1306_Putc>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d002      	beq.n	8002ab8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	e008      	b.n	8002aca <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3301      	adds	r3, #1
 8002abc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1e8      	bne.n	8002a98 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8002ad2:	b590      	push	{r4, r7, lr}
 8002ad4:	b087      	sub	sp, #28
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4604      	mov	r4, r0
 8002ada:	4608      	mov	r0, r1
 8002adc:	4611      	mov	r1, r2
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4623      	mov	r3, r4
 8002ae2:	80fb      	strh	r3, [r7, #6]
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	80bb      	strh	r3, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]
 8002aec:	4613      	mov	r3, r2
 8002aee:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	2b7f      	cmp	r3, #127	; 0x7f
 8002af4:	d901      	bls.n	8002afa <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8002af6:	237f      	movs	r3, #127	; 0x7f
 8002af8:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8002afa:	887b      	ldrh	r3, [r7, #2]
 8002afc:	2b7f      	cmp	r3, #127	; 0x7f
 8002afe:	d901      	bls.n	8002b04 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8002b00:	237f      	movs	r3, #127	; 0x7f
 8002b02:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8002b04:	88bb      	ldrh	r3, [r7, #4]
 8002b06:	2b3f      	cmp	r3, #63	; 0x3f
 8002b08:	d901      	bls.n	8002b0e <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8002b0a:	233f      	movs	r3, #63	; 0x3f
 8002b0c:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8002b0e:	883b      	ldrh	r3, [r7, #0]
 8002b10:	2b3f      	cmp	r3, #63	; 0x3f
 8002b12:	d901      	bls.n	8002b18 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8002b14:	233f      	movs	r3, #63	; 0x3f
 8002b16:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8002b18:	88fa      	ldrh	r2, [r7, #6]
 8002b1a:	887b      	ldrh	r3, [r7, #2]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d205      	bcs.n	8002b2c <SSD1306_DrawLine+0x5a>
 8002b20:	887a      	ldrh	r2, [r7, #2]
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	b21b      	sxth	r3, r3
 8002b2a:	e004      	b.n	8002b36 <SSD1306_DrawLine+0x64>
 8002b2c:	88fa      	ldrh	r2, [r7, #6]
 8002b2e:	887b      	ldrh	r3, [r7, #2]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	b21b      	sxth	r3, r3
 8002b36:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8002b38:	88ba      	ldrh	r2, [r7, #4]
 8002b3a:	883b      	ldrh	r3, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d205      	bcs.n	8002b4c <SSD1306_DrawLine+0x7a>
 8002b40:	883a      	ldrh	r2, [r7, #0]
 8002b42:	88bb      	ldrh	r3, [r7, #4]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	b21b      	sxth	r3, r3
 8002b4a:	e004      	b.n	8002b56 <SSD1306_DrawLine+0x84>
 8002b4c:	88ba      	ldrh	r2, [r7, #4]
 8002b4e:	883b      	ldrh	r3, [r7, #0]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	b21b      	sxth	r3, r3
 8002b56:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8002b58:	88fa      	ldrh	r2, [r7, #6]
 8002b5a:	887b      	ldrh	r3, [r7, #2]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d201      	bcs.n	8002b64 <SSD1306_DrawLine+0x92>
 8002b60:	2301      	movs	r3, #1
 8002b62:	e001      	b.n	8002b68 <SSD1306_DrawLine+0x96>
 8002b64:	f04f 33ff 	mov.w	r3, #4294967295
 8002b68:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8002b6a:	88ba      	ldrh	r2, [r7, #4]
 8002b6c:	883b      	ldrh	r3, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d201      	bcs.n	8002b76 <SSD1306_DrawLine+0xa4>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e001      	b.n	8002b7a <SSD1306_DrawLine+0xa8>
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7a:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8002b7c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002b80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	dd06      	ble.n	8002b96 <SSD1306_DrawLine+0xc4>
 8002b88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b8c:	0fda      	lsrs	r2, r3, #31
 8002b8e:	4413      	add	r3, r2
 8002b90:	105b      	asrs	r3, r3, #1
 8002b92:	b21b      	sxth	r3, r3
 8002b94:	e006      	b.n	8002ba4 <SSD1306_DrawLine+0xd2>
 8002b96:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b9a:	0fda      	lsrs	r2, r3, #31
 8002b9c:	4413      	add	r3, r2
 8002b9e:	105b      	asrs	r3, r3, #1
 8002ba0:	425b      	negs	r3, r3
 8002ba2:	b21b      	sxth	r3, r3
 8002ba4:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8002ba6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d129      	bne.n	8002c02 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8002bae:	883a      	ldrh	r2, [r7, #0]
 8002bb0:	88bb      	ldrh	r3, [r7, #4]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d205      	bcs.n	8002bc2 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8002bb6:	883b      	ldrh	r3, [r7, #0]
 8002bb8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002bba:	88bb      	ldrh	r3, [r7, #4]
 8002bbc:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002bbe:	893b      	ldrh	r3, [r7, #8]
 8002bc0:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8002bc2:	887a      	ldrh	r2, [r7, #2]
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d205      	bcs.n	8002bd6 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8002bca:	887b      	ldrh	r3, [r7, #2]
 8002bcc:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002bd2:	893b      	ldrh	r3, [r7, #8]
 8002bd4:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8002bd6:	88bb      	ldrh	r3, [r7, #4]
 8002bd8:	82bb      	strh	r3, [r7, #20]
 8002bda:	e00c      	b.n	8002bf6 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8002bdc:	8ab9      	ldrh	r1, [r7, #20]
 8002bde:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fe59 	bl	800289c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002bea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	82bb      	strh	r3, [r7, #20]
 8002bf6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002bfa:	883b      	ldrh	r3, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	dded      	ble.n	8002bdc <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8002c00:	e05f      	b.n	8002cc2 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8002c02:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d129      	bne.n	8002c5e <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8002c0a:	883a      	ldrh	r2, [r7, #0]
 8002c0c:	88bb      	ldrh	r3, [r7, #4]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d205      	bcs.n	8002c1e <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8002c12:	883b      	ldrh	r3, [r7, #0]
 8002c14:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002c16:	88bb      	ldrh	r3, [r7, #4]
 8002c18:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002c1a:	893b      	ldrh	r3, [r7, #8]
 8002c1c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d205      	bcs.n	8002c32 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8002c26:	887b      	ldrh	r3, [r7, #2]
 8002c28:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002c2e:	893b      	ldrh	r3, [r7, #8]
 8002c30:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	82bb      	strh	r3, [r7, #20]
 8002c36:	e00c      	b.n	8002c52 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8002c38:	8abb      	ldrh	r3, [r7, #20]
 8002c3a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002c3e:	88b9      	ldrh	r1, [r7, #4]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fe2b 	bl	800289c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8002c46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	82bb      	strh	r3, [r7, #20]
 8002c52:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002c56:	887b      	ldrh	r3, [r7, #2]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	dded      	ble.n	8002c38 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8002c5c:	e031      	b.n	8002cc2 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8002c5e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002c62:	88b9      	ldrh	r1, [r7, #4]
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fe18 	bl	800289c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8002c6c:	88fa      	ldrh	r2, [r7, #6]
 8002c6e:	887b      	ldrh	r3, [r7, #2]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d103      	bne.n	8002c7c <SSD1306_DrawLine+0x1aa>
 8002c74:	88ba      	ldrh	r2, [r7, #4]
 8002c76:	883b      	ldrh	r3, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d021      	beq.n	8002cc0 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8002c7c:	8afb      	ldrh	r3, [r7, #22]
 8002c7e:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8002c80:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002c84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c88:	425b      	negs	r3, r3
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	dd08      	ble.n	8002ca0 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8002c8e:	8afa      	ldrh	r2, [r7, #22]
 8002c90:	8a3b      	ldrh	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8002c98:	89fa      	ldrh	r2, [r7, #14]
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8002ca0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002ca4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	dad8      	bge.n	8002c5e <SSD1306_DrawLine+0x18c>
			err += dx;
 8002cac:	8afa      	ldrh	r2, [r7, #22]
 8002cae:	8a7b      	ldrh	r3, [r7, #18]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8002cb6:	89ba      	ldrh	r2, [r7, #12]
 8002cb8:	88bb      	ldrh	r3, [r7, #4]
 8002cba:	4413      	add	r3, r2
 8002cbc:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8002cbe:	e7ce      	b.n	8002c5e <SSD1306_DrawLine+0x18c>
			break;
 8002cc0:	bf00      	nop
		} 
	}
}
 8002cc2:	371c      	adds	r7, #28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd90      	pop	{r4, r7, pc}

08002cc8 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8002cc8:	b590      	push	{r4, r7, lr}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	4604      	mov	r4, r0
 8002cd0:	4608      	mov	r0, r1
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4623      	mov	r3, r4
 8002cd8:	80fb      	strh	r3, [r7, #6]
 8002cda:	4603      	mov	r3, r0
 8002cdc:	80bb      	strh	r3, [r7, #4]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	807b      	strh	r3, [r7, #2]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8002cea:	d836      	bhi.n	8002d5a <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8002cec:	88bb      	ldrh	r3, [r7, #4]
 8002cee:	2b3f      	cmp	r3, #63	; 0x3f
 8002cf0:	d833      	bhi.n	8002d5a <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8002cf2:	88fa      	ldrh	r2, [r7, #6]
 8002cf4:	887b      	ldrh	r3, [r7, #2]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8002cfa:	dd03      	ble.n	8002d04 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002d02:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8002d04:	88ba      	ldrh	r2, [r7, #4]
 8002d06:	883b      	ldrh	r3, [r7, #0]
 8002d08:	4413      	add	r3, r2
 8002d0a:	2b3f      	cmp	r3, #63	; 0x3f
 8002d0c:	dd03      	ble.n	8002d16 <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8002d0e:	88bb      	ldrh	r3, [r7, #4]
 8002d10:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002d14:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
 8002d1a:	e018      	b.n	8002d4e <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	88bb      	ldrh	r3, [r7, #4]
 8002d22:	4413      	add	r3, r2
 8002d24:	b299      	uxth	r1, r3
 8002d26:	88fa      	ldrh	r2, [r7, #6]
 8002d28:	887b      	ldrh	r3, [r7, #2]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	b29c      	uxth	r4, r3
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	88bb      	ldrh	r3, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	88f8      	ldrh	r0, [r7, #6]
 8002d3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	4622      	mov	r2, r4
 8002d44:	f7ff fec5 	bl	8002ad2 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	883a      	ldrh	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d2e1      	bcs.n	8002d1c <SSD1306_DrawFilledRectangle+0x54>
 8002d58:	e000      	b.n	8002d5c <SSD1306_DrawFilledRectangle+0x94>
		return;
 8002d5a:	bf00      	nop
	}
}
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd90      	pop	{r4, r7, pc}

08002d62 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7ff fd80 	bl	800286c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002d6c:	f7ff fd50 	bl	8002810 <SSD1306_UpdateScreen>
}
 8002d70:	bf00      	nop
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <ssd1306_I2C_Init+0x28>)
 8002d7c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002d7e:	e002      	b.n	8002d86 <ssd1306_I2C_Init+0x12>
		p--;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f9      	bne.n	8002d80 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	0003d090 	.word	0x0003d090

08002da0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002da0:	b590      	push	{r4, r7, lr}
 8002da2:	b0c7      	sub	sp, #284	; 0x11c
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	4604      	mov	r4, r0
 8002da8:	4608      	mov	r0, r1
 8002daa:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002dae:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8002db2:	600a      	str	r2, [r1, #0]
 8002db4:	4619      	mov	r1, r3
 8002db6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dba:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002dbe:	4622      	mov	r2, r4
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dc6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002dca:	4602      	mov	r2, r0
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dd2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002dd6:	460a      	mov	r2, r1
 8002dd8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002dda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002de2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002de6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002dea:	7812      	ldrb	r2, [r2, #0]
 8002dec:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002dee:	2300      	movs	r3, #0
 8002df0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002df4:	e015      	b.n	8002e22 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002df6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002dfa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002dfe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	441a      	add	r2, r3
 8002e06:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	7811      	ldrb	r1, [r2, #0]
 8002e0e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002e12:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002e16:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002e18:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002e22:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002e2c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002e30:	8812      	ldrh	r2, [r2, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d8df      	bhi.n	8002df6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002e36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e3a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	b299      	uxth	r1, r3
 8002e42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	f107 020c 	add.w	r2, r7, #12
 8002e54:	200a      	movs	r0, #10
 8002e56:	9000      	str	r0, [sp, #0]
 8002e58:	4803      	ldr	r0, [pc, #12]	; (8002e68 <ssd1306_I2C_WriteMulti+0xc8>)
 8002e5a:	f001 f8ff 	bl	800405c <HAL_I2C_Master_Transmit>
}
 8002e5e:	bf00      	nop
 8002e60:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd90      	pop	{r4, r7, pc}
 8002e68:	2000019c 	.word	0x2000019c

08002e6c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	4603      	mov	r3, r0
 8002e74:	71fb      	strb	r3, [r7, #7]
 8002e76:	460b      	mov	r3, r1
 8002e78:	71bb      	strb	r3, [r7, #6]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002e7e:	79bb      	ldrb	r3, [r7, #6]
 8002e80:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002e82:	797b      	ldrb	r3, [r7, #5]
 8002e84:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	b299      	uxth	r1, r3
 8002e8a:	f107 020c 	add.w	r2, r7, #12
 8002e8e:	230a      	movs	r3, #10
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	2302      	movs	r3, #2
 8002e94:	4803      	ldr	r0, [pc, #12]	; (8002ea4 <ssd1306_I2C_Write+0x38>)
 8002e96:	f001 f8e1 	bl	800405c <HAL_I2C_Master_Transmit>
}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	2000019c 	.word	0x2000019c

08002ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <HAL_MspInit+0x4c>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <HAL_MspInit+0x4c>)
 8002eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_MspInit+0x4c>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	603b      	str	r3, [r7, #0]
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_MspInit+0x4c>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <HAL_MspInit+0x4c>)
 8002ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_MspInit+0x4c>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ee6:	2007      	movs	r0, #7
 8002ee8:	f000 fb30 	bl	800354c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40023800 	.word	0x40023800

08002ef8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0b      	ldr	r2, [pc, #44]	; (8002f34 <HAL_CRC_MspInit+0x3c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d10d      	bne.n	8002f26 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <HAL_CRC_MspInit+0x40>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <HAL_CRC_MspInit+0x40>)
 8002f14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f18:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1a:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <HAL_CRC_MspInit+0x40>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002f26:	bf00      	nop
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40023000 	.word	0x40023000
 8002f38:	40023800 	.word	0x40023800

08002f3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f44:	f107 0314 	add.w	r3, r7, #20
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a19      	ldr	r2, [pc, #100]	; (8002fc0 <HAL_I2C_MspInit+0x84>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d12b      	bne.n	8002fb6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	4b18      	ldr	r3, [pc, #96]	; (8002fc4 <HAL_I2C_MspInit+0x88>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <HAL_I2C_MspInit+0x88>)
 8002f68:	f043 0302 	orr.w	r3, r3, #2
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6e:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <HAL_I2C_MspInit+0x88>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f7a:	23c0      	movs	r3, #192	; 0xc0
 8002f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f7e:	2312      	movs	r3, #18
 8002f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f86:	2303      	movs	r3, #3
 8002f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8e:	f107 0314 	add.w	r3, r7, #20
 8002f92:	4619      	mov	r1, r3
 8002f94:	480c      	ldr	r0, [pc, #48]	; (8002fc8 <HAL_I2C_MspInit+0x8c>)
 8002f96:	f000 fd35 	bl	8003a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_I2C_MspInit+0x88>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <HAL_I2C_MspInit+0x88>)
 8002fa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_I2C_MspInit+0x88>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002fb6:	bf00      	nop
 8002fb8:	3728      	adds	r7, #40	; 0x28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40005400 	.word	0x40005400
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40020400 	.word	0x40020400

08002fcc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a0e      	ldr	r2, [pc, #56]	; (8003014 <HAL_RNG_MspInit+0x48>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d115      	bne.n	800300a <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <HAL_RNG_MspInit+0x4c>)
 8002fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe6:	4a0c      	ldr	r2, [pc, #48]	; (8003018 <HAL_RNG_MspInit+0x4c>)
 8002fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fec:	6353      	str	r3, [r2, #52]	; 0x34
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <HAL_RNG_MspInit+0x4c>)
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	2050      	movs	r0, #80	; 0x50
 8003000:	f000 faaf 	bl	8003562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8003004:	2050      	movs	r0, #80	; 0x50
 8003006:	f000 fac8 	bl	800359a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	50060800 	.word	0x50060800
 8003018:	40023800 	.word	0x40023800

0800301c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302c:	d115      	bne.n	800305a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <HAL_TIM_Base_MspInit+0x48>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4a0b      	ldr	r2, [pc, #44]	; (8003064 <HAL_TIM_Base_MspInit+0x48>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	6413      	str	r3, [r2, #64]	; 0x40
 800303e:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_TIM_Base_MspInit+0x48>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800304a:	2200      	movs	r2, #0
 800304c:	2100      	movs	r1, #0
 800304e:	201c      	movs	r0, #28
 8003050:	f000 fa87 	bl	8003562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003054:	201c      	movs	r0, #28
 8003056:	f000 faa0 	bl	800359a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800

08003068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800306c:	e7fe      	b.n	800306c <NMI_Handler+0x4>

0800306e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800306e:	b480      	push	{r7}
 8003070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003072:	e7fe      	b.n	8003072 <HardFault_Handler+0x4>

08003074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003078:	e7fe      	b.n	8003078 <MemManage_Handler+0x4>

0800307a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800307a:	b480      	push	{r7}
 800307c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800307e:	e7fe      	b.n	800307e <BusFault_Handler+0x4>

08003080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003084:	e7fe      	b.n	8003084 <UsageFault_Handler+0x4>

08003086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030b4:	f000 f936 	bl	8003324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030b8:	bf00      	nop
 80030ba:	bd80      	pop	{r7, pc}

080030bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030c0:	4802      	ldr	r0, [pc, #8]	; (80030cc <TIM2_IRQHandler+0x10>)
 80030c2:	f003 fca9 	bl	8006a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000200 	.word	0x20000200

080030d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80030d4:	4802      	ldr	r0, [pc, #8]	; (80030e0 <OTG_FS_IRQHandler+0x10>)
 80030d6:	f001 fd8c 	bl	8004bf2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20001bbc 	.word	0x20001bbc

080030e4 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80030e8:	4802      	ldr	r0, [pc, #8]	; (80030f4 <HASH_RNG_IRQHandler+0x10>)
 80030ea:	f003 fb6c 	bl	80067c6 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200001f0 	.word	0x200001f0

080030f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	e00a      	b.n	8003120 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800310a:	f3af 8000 	nop.w
 800310e:	4601      	mov	r1, r0
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	60ba      	str	r2, [r7, #8]
 8003116:	b2ca      	uxtb	r2, r1
 8003118:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	3301      	adds	r3, #1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	dbf0      	blt.n	800310a <_read+0x12>
  }

  return len;
 8003128:	687b      	ldr	r3, [r7, #4]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800313a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800313e:	4618      	mov	r0, r3
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800315a:	605a      	str	r2, [r3, #4]
  return 0;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <_isatty>:

int _isatty(int file)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003172:	2301      	movs	r3, #1
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031a4:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <_sbrk+0x5c>)
 80031a6:	4b15      	ldr	r3, [pc, #84]	; (80031fc <_sbrk+0x60>)
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031b0:	4b13      	ldr	r3, [pc, #76]	; (8003200 <_sbrk+0x64>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031b8:	4b11      	ldr	r3, [pc, #68]	; (8003200 <_sbrk+0x64>)
 80031ba:	4a12      	ldr	r2, [pc, #72]	; (8003204 <_sbrk+0x68>)
 80031bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <_sbrk+0x64>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d207      	bcs.n	80031dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031cc:	f008 face 	bl	800b76c <__errno>
 80031d0:	4603      	mov	r3, r0
 80031d2:	220c      	movs	r2, #12
 80031d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
 80031da:	e009      	b.n	80031f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <_sbrk+0x64>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <_sbrk+0x64>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	4a05      	ldr	r2, [pc, #20]	; (8003200 <_sbrk+0x64>)
 80031ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ee:	68fb      	ldr	r3, [r7, #12]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20020000 	.word	0x20020000
 80031fc:	00000400 	.word	0x00000400
 8003200:	200006b4 	.word	0x200006b4
 8003204:	20002410 	.word	0x20002410

08003208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <SystemInit+0x20>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	4a05      	ldr	r2, [pc, #20]	; (8003228 <SystemInit+0x20>)
 8003214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800322c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003264 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003230:	f7ff ffea 	bl	8003208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003234:	480c      	ldr	r0, [pc, #48]	; (8003268 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003236:	490d      	ldr	r1, [pc, #52]	; (800326c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003238:	4a0d      	ldr	r2, [pc, #52]	; (8003270 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800323a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800323c:	e002      	b.n	8003244 <LoopCopyDataInit>

0800323e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800323e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003242:	3304      	adds	r3, #4

08003244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003248:	d3f9      	bcc.n	800323e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800324a:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800324c:	4c0a      	ldr	r4, [pc, #40]	; (8003278 <LoopFillZerobss+0x22>)
  movs r3, #0
 800324e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003250:	e001      	b.n	8003256 <LoopFillZerobss>

08003252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003254:	3204      	adds	r2, #4

08003256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003258:	d3fb      	bcc.n	8003252 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800325a:	f008 fa8d 	bl	800b778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800325e:	f7fd ff0b 	bl	8001078 <main>
  bx  lr    
 8003262:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003264:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800326c:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8003270:	0800ddfc 	.word	0x0800ddfc
  ldr r2, =_sbss
 8003274:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8003278:	2000240c 	.word	0x2000240c

0800327c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800327c:	e7fe      	b.n	800327c <ADC_IRQHandler>
	...

08003280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_Init+0x40>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0d      	ldr	r2, [pc, #52]	; (80032c0 <HAL_Init+0x40>)
 800328a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800328e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_Init+0x40>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <HAL_Init+0x40>)
 8003296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800329a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800329c:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <HAL_Init+0x40>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <HAL_Init+0x40>)
 80032a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032a8:	2003      	movs	r0, #3
 80032aa:	f000 f94f 	bl	800354c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ae:	2000      	movs	r0, #0
 80032b0:	f000 f808 	bl	80032c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032b4:	f7ff fdf8 	bl	8002ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40023c00 	.word	0x40023c00

080032c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032cc:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_InitTick+0x54>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4b12      	ldr	r3, [pc, #72]	; (800331c <HAL_InitTick+0x58>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	4619      	mov	r1, r3
 80032d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032da:	fbb3 f3f1 	udiv	r3, r3, r1
 80032de:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f967 	bl	80035b6 <HAL_SYSTICK_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e00e      	b.n	8003310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b0f      	cmp	r3, #15
 80032f6:	d80a      	bhi.n	800330e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032f8:	2200      	movs	r2, #0
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003300:	f000 f92f 	bl	8003562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003304:	4a06      	ldr	r2, [pc, #24]	; (8003320 <HAL_InitTick+0x5c>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	e000      	b.n	8003310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000014 	.word	0x20000014
 800331c:	2000001c 	.word	0x2000001c
 8003320:	20000018 	.word	0x20000018

08003324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003328:	4b06      	ldr	r3, [pc, #24]	; (8003344 <HAL_IncTick+0x20>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	461a      	mov	r2, r3
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_IncTick+0x24>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4413      	add	r3, r2
 8003334:	4a04      	ldr	r2, [pc, #16]	; (8003348 <HAL_IncTick+0x24>)
 8003336:	6013      	str	r3, [r2, #0]
}
 8003338:	bf00      	nop
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	2000001c 	.word	0x2000001c
 8003348:	200006b8 	.word	0x200006b8

0800334c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return uwTick;
 8003350:	4b03      	ldr	r3, [pc, #12]	; (8003360 <HAL_GetTick+0x14>)
 8003352:	681b      	ldr	r3, [r3, #0]
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	200006b8 	.word	0x200006b8

08003364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800336c:	f7ff ffee 	bl	800334c <HAL_GetTick>
 8003370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d005      	beq.n	800338a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <HAL_Delay+0x44>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800338a:	bf00      	nop
 800338c:	f7ff ffde 	bl	800334c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	429a      	cmp	r2, r3
 800339a:	d8f7      	bhi.n	800338c <HAL_Delay+0x28>
  {
  }
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	2000001c 	.word	0x2000001c

080033ac <__NVIC_SetPriorityGrouping>:
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033bc:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <__NVIC_SetPriorityGrouping+0x44>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c8:	4013      	ands	r3, r2
 80033ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033de:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <__NVIC_SetPriorityGrouping+0x44>)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	60d3      	str	r3, [r2, #12]
}
 80033e4:	bf00      	nop
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000ed00 	.word	0xe000ed00

080033f4 <__NVIC_GetPriorityGrouping>:
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f8:	4b04      	ldr	r3, [pc, #16]	; (800340c <__NVIC_GetPriorityGrouping+0x18>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	f003 0307 	and.w	r3, r3, #7
}
 8003402:	4618      	mov	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <__NVIC_EnableIRQ>:
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	2b00      	cmp	r3, #0
 8003420:	db0b      	blt.n	800343a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	f003 021f 	and.w	r2, r3, #31
 8003428:	4907      	ldr	r1, [pc, #28]	; (8003448 <__NVIC_EnableIRQ+0x38>)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	2001      	movs	r0, #1
 8003432:	fa00 f202 	lsl.w	r2, r0, r2
 8003436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e000e100 	.word	0xe000e100

0800344c <__NVIC_SetPriority>:
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	6039      	str	r1, [r7, #0]
 8003456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345c:	2b00      	cmp	r3, #0
 800345e:	db0a      	blt.n	8003476 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	b2da      	uxtb	r2, r3
 8003464:	490c      	ldr	r1, [pc, #48]	; (8003498 <__NVIC_SetPriority+0x4c>)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	0112      	lsls	r2, r2, #4
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	440b      	add	r3, r1
 8003470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003474:	e00a      	b.n	800348c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	4908      	ldr	r1, [pc, #32]	; (800349c <__NVIC_SetPriority+0x50>)
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	3b04      	subs	r3, #4
 8003484:	0112      	lsls	r2, r2, #4
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	440b      	add	r3, r1
 800348a:	761a      	strb	r2, [r3, #24]
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	e000e100 	.word	0xe000e100
 800349c:	e000ed00 	.word	0xe000ed00

080034a0 <NVIC_EncodePriority>:
{
 80034a0:	b480      	push	{r7}
 80034a2:	b089      	sub	sp, #36	; 0x24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f1c3 0307 	rsb	r3, r3, #7
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	bf28      	it	cs
 80034be:	2304      	movcs	r3, #4
 80034c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3304      	adds	r3, #4
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	d902      	bls.n	80034d0 <NVIC_EncodePriority+0x30>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3b03      	subs	r3, #3
 80034ce:	e000      	b.n	80034d2 <NVIC_EncodePriority+0x32>
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d4:	f04f 32ff 	mov.w	r2, #4294967295
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43da      	mvns	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	401a      	ands	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e8:	f04f 31ff 	mov.w	r1, #4294967295
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	fa01 f303 	lsl.w	r3, r1, r3
 80034f2:	43d9      	mvns	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	4313      	orrs	r3, r2
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3724      	adds	r7, #36	; 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <SysTick_Config>:
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3b01      	subs	r3, #1
 8003514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003518:	d301      	bcc.n	800351e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800351a:	2301      	movs	r3, #1
 800351c:	e00f      	b.n	800353e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800351e:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <SysTick_Config+0x40>)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3b01      	subs	r3, #1
 8003524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003526:	210f      	movs	r1, #15
 8003528:	f04f 30ff 	mov.w	r0, #4294967295
 800352c:	f7ff ff8e 	bl	800344c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <SysTick_Config+0x40>)
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003536:	4b04      	ldr	r3, [pc, #16]	; (8003548 <SysTick_Config+0x40>)
 8003538:	2207      	movs	r2, #7
 800353a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	e000e010 	.word	0xe000e010

0800354c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ff29 	bl	80033ac <__NVIC_SetPriorityGrouping>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003562:	b580      	push	{r7, lr}
 8003564:	b086      	sub	sp, #24
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
 800356e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003574:	f7ff ff3e 	bl	80033f4 <__NVIC_GetPriorityGrouping>
 8003578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	6978      	ldr	r0, [r7, #20]
 8003580:	f7ff ff8e 	bl	80034a0 <NVIC_EncodePriority>
 8003584:	4602      	mov	r2, r0
 8003586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff5d 	bl	800344c <__NVIC_SetPriority>
}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	4603      	mov	r3, r0
 80035a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff ff31 	bl	8003410 <__NVIC_EnableIRQ>
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff ffa2 	bl	8003508 <SysTick_Config>
 80035c4:	4603      	mov	r3, r0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e00e      	b.n	80035fe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	795b      	ldrb	r3, [r3, #5]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d105      	bne.n	80035f6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff fc81 	bl	8002ef8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800361a:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <HAL_FLASH_Program+0xa0>)
 800361c:	7e1b      	ldrb	r3, [r3, #24]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_FLASH_Program+0x1e>
 8003622:	2302      	movs	r3, #2
 8003624:	e03b      	b.n	800369e <HAL_FLASH_Program+0x96>
 8003626:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <HAL_FLASH_Program+0xa0>)
 8003628:	2201      	movs	r2, #1
 800362a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800362c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003630:	f000 f870 	bl	8003714 <FLASH_WaitForLastOperation>
 8003634:	4603      	mov	r3, r0
 8003636:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003638:	7dfb      	ldrb	r3, [r7, #23]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d12b      	bne.n	8003696 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d105      	bne.n	8003650 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003644:	783b      	ldrb	r3, [r7, #0]
 8003646:	4619      	mov	r1, r3
 8003648:	68b8      	ldr	r0, [r7, #8]
 800364a:	f000 f91b 	bl	8003884 <FLASH_Program_Byte>
 800364e:	e016      	b.n	800367e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d105      	bne.n	8003662 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003656:	883b      	ldrh	r3, [r7, #0]
 8003658:	4619      	mov	r1, r3
 800365a:	68b8      	ldr	r0, [r7, #8]
 800365c:	f000 f8ee 	bl	800383c <FLASH_Program_HalfWord>
 8003660:	e00d      	b.n	800367e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d105      	bne.n	8003674 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	4619      	mov	r1, r3
 800366c:	68b8      	ldr	r0, [r7, #8]
 800366e:	f000 f8c3 	bl	80037f8 <FLASH_Program_Word>
 8003672:	e004      	b.n	800367e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003678:	68b8      	ldr	r0, [r7, #8]
 800367a:	f000 f88b 	bl	8003794 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800367e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003682:	f000 f847 	bl	8003714 <FLASH_WaitForLastOperation>
 8003686:	4603      	mov	r3, r0
 8003688:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800368a:	4b08      	ldr	r3, [pc, #32]	; (80036ac <HAL_FLASH_Program+0xa4>)
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	4a07      	ldr	r2, [pc, #28]	; (80036ac <HAL_FLASH_Program+0xa4>)
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003696:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <HAL_FLASH_Program+0xa0>)
 8003698:	2200      	movs	r2, #0
 800369a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800369c:	7dfb      	ldrb	r3, [r7, #23]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	200006bc 	.word	0x200006bc
 80036ac:	40023c00 	.word	0x40023c00

080036b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80036ba:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_FLASH_Unlock+0x38>)
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	da0b      	bge.n	80036da <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80036c2:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <HAL_FLASH_Unlock+0x38>)
 80036c4:	4a09      	ldr	r2, [pc, #36]	; (80036ec <HAL_FLASH_Unlock+0x3c>)
 80036c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80036c8:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <HAL_FLASH_Unlock+0x38>)
 80036ca:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <HAL_FLASH_Unlock+0x40>)
 80036cc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_FLASH_Unlock+0x38>)
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	da01      	bge.n	80036da <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80036da:	79fb      	ldrb	r3, [r7, #7]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	40023c00 	.word	0x40023c00
 80036ec:	45670123 	.word	0x45670123
 80036f0:	cdef89ab 	.word	0xcdef89ab

080036f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_FLASH_Lock+0x1c>)
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	4a04      	ldr	r2, [pc, #16]	; (8003710 <HAL_FLASH_Lock+0x1c>)
 80036fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003702:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	40023c00 	.word	0x40023c00

08003714 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003720:	4b1a      	ldr	r3, [pc, #104]	; (800378c <FLASH_WaitForLastOperation+0x78>)
 8003722:	2200      	movs	r2, #0
 8003724:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003726:	f7ff fe11 	bl	800334c <HAL_GetTick>
 800372a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800372c:	e010      	b.n	8003750 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d00c      	beq.n	8003750 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <FLASH_WaitForLastOperation+0x38>
 800373c:	f7ff fe06 	bl	800334c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	429a      	cmp	r2, r3
 800374a:	d201      	bcs.n	8003750 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e019      	b.n	8003784 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <FLASH_WaitForLastOperation+0x7c>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e8      	bne.n	800372e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <FLASH_WaitForLastOperation+0x7c>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <FLASH_WaitForLastOperation+0x7c>)
 800376a:	2201      	movs	r2, #1
 800376c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800376e:	4b08      	ldr	r3, [pc, #32]	; (8003790 <FLASH_WaitForLastOperation+0x7c>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800377a:	f000 f8a5 	bl	80038c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
  
}  
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	200006bc 	.word	0x200006bc
 8003790:	40023c00 	.word	0x40023c00

08003794 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80037a0:	4b14      	ldr	r3, [pc, #80]	; (80037f4 <FLASH_Program_DoubleWord+0x60>)
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	4a13      	ldr	r2, [pc, #76]	; (80037f4 <FLASH_Program_DoubleWord+0x60>)
 80037a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80037ac:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <FLASH_Program_DoubleWord+0x60>)
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	4a10      	ldr	r2, [pc, #64]	; (80037f4 <FLASH_Program_DoubleWord+0x60>)
 80037b2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80037b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80037b8:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <FLASH_Program_DoubleWord+0x60>)
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	4a0d      	ldr	r2, [pc, #52]	; (80037f4 <FLASH_Program_DoubleWord+0x60>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80037ca:	f3bf 8f6f 	isb	sy
}
 80037ce:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80037d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	000a      	movs	r2, r1
 80037de:	2300      	movs	r3, #0
 80037e0:	68f9      	ldr	r1, [r7, #12]
 80037e2:	3104      	adds	r1, #4
 80037e4:	4613      	mov	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	40023c00 	.word	0x40023c00

080037f8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003802:	4b0d      	ldr	r3, [pc, #52]	; (8003838 <FLASH_Program_Word+0x40>)
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	4a0c      	ldr	r2, [pc, #48]	; (8003838 <FLASH_Program_Word+0x40>)
 8003808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800380e:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <FLASH_Program_Word+0x40>)
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	4a09      	ldr	r2, [pc, #36]	; (8003838 <FLASH_Program_Word+0x40>)
 8003814:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003818:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800381a:	4b07      	ldr	r3, [pc, #28]	; (8003838 <FLASH_Program_Word+0x40>)
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	4a06      	ldr	r2, [pc, #24]	; (8003838 <FLASH_Program_Word+0x40>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	601a      	str	r2, [r3, #0]
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	40023c00 	.word	0x40023c00

0800383c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003848:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <FLASH_Program_HalfWord+0x44>)
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	4a0c      	ldr	r2, [pc, #48]	; (8003880 <FLASH_Program_HalfWord+0x44>)
 800384e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003852:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003854:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <FLASH_Program_HalfWord+0x44>)
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	4a09      	ldr	r2, [pc, #36]	; (8003880 <FLASH_Program_HalfWord+0x44>)
 800385a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800385e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <FLASH_Program_HalfWord+0x44>)
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	4a06      	ldr	r2, [pc, #24]	; (8003880 <FLASH_Program_HalfWord+0x44>)
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	887a      	ldrh	r2, [r7, #2]
 8003870:	801a      	strh	r2, [r3, #0]
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40023c00 	.word	0x40023c00

08003884 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <FLASH_Program_Byte+0x40>)
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	4a0b      	ldr	r2, [pc, #44]	; (80038c4 <FLASH_Program_Byte+0x40>)
 8003896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800389a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800389c:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <FLASH_Program_Byte+0x40>)
 800389e:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <FLASH_Program_Byte+0x40>)
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80038a4:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <FLASH_Program_Byte+0x40>)
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	4a06      	ldr	r2, [pc, #24]	; (80038c4 <FLASH_Program_Byte+0x40>)
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	701a      	strb	r2, [r3, #0]
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40023c00 	.word	0x40023c00

080038c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80038cc:	4b27      	ldr	r3, [pc, #156]	; (800396c <FLASH_SetErrorCode+0xa4>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <FLASH_SetErrorCode+0xa8>)
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f043 0310 	orr.w	r3, r3, #16
 80038e0:	4a23      	ldr	r2, [pc, #140]	; (8003970 <FLASH_SetErrorCode+0xa8>)
 80038e2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80038e4:	4b21      	ldr	r3, [pc, #132]	; (800396c <FLASH_SetErrorCode+0xa4>)
 80038e6:	2210      	movs	r2, #16
 80038e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80038ea:	4b20      	ldr	r3, [pc, #128]	; (800396c <FLASH_SetErrorCode+0xa4>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d008      	beq.n	8003908 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80038f6:	4b1e      	ldr	r3, [pc, #120]	; (8003970 <FLASH_SetErrorCode+0xa8>)
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f043 0308 	orr.w	r3, r3, #8
 80038fe:	4a1c      	ldr	r2, [pc, #112]	; (8003970 <FLASH_SetErrorCode+0xa8>)
 8003900:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003902:	4b1a      	ldr	r3, [pc, #104]	; (800396c <FLASH_SetErrorCode+0xa4>)
 8003904:	2220      	movs	r2, #32
 8003906:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003908:	4b18      	ldr	r3, [pc, #96]	; (800396c <FLASH_SetErrorCode+0xa4>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003914:	4b16      	ldr	r3, [pc, #88]	; (8003970 <FLASH_SetErrorCode+0xa8>)
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	f043 0304 	orr.w	r3, r3, #4
 800391c:	4a14      	ldr	r2, [pc, #80]	; (8003970 <FLASH_SetErrorCode+0xa8>)
 800391e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003920:	4b12      	ldr	r3, [pc, #72]	; (800396c <FLASH_SetErrorCode+0xa4>)
 8003922:	2240      	movs	r2, #64	; 0x40
 8003924:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003926:	4b11      	ldr	r3, [pc, #68]	; (800396c <FLASH_SetErrorCode+0xa4>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003932:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <FLASH_SetErrorCode+0xa8>)
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f043 0302 	orr.w	r3, r3, #2
 800393a:	4a0d      	ldr	r2, [pc, #52]	; (8003970 <FLASH_SetErrorCode+0xa8>)
 800393c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800393e:	4b0b      	ldr	r3, [pc, #44]	; (800396c <FLASH_SetErrorCode+0xa4>)
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003944:	4b09      	ldr	r3, [pc, #36]	; (800396c <FLASH_SetErrorCode+0xa4>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <FLASH_SetErrorCode+0xa8>)
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	f043 0320 	orr.w	r3, r3, #32
 8003958:	4a05      	ldr	r2, [pc, #20]	; (8003970 <FLASH_SetErrorCode+0xa8>)
 800395a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <FLASH_SetErrorCode+0xa4>)
 800395e:	2202      	movs	r2, #2
 8003960:	60da      	str	r2, [r3, #12]
  }
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	40023c00 	.word	0x40023c00
 8003970:	200006bc 	.word	0x200006bc

08003974 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d102      	bne.n	8003990 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	e010      	b.n	80039b2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d103      	bne.n	800399e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	e009      	b.n	80039b2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d103      	bne.n	80039ac <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80039a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	e002      	b.n	80039b2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80039ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039b0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80039b2:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <FLASH_Erase_Sector+0x8c>)
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	4a12      	ldr	r2, [pc, #72]	; (8003a00 <FLASH_Erase_Sector+0x8c>)
 80039b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <FLASH_Erase_Sector+0x8c>)
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	490f      	ldr	r1, [pc, #60]	; (8003a00 <FLASH_Erase_Sector+0x8c>)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80039ca:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <FLASH_Erase_Sector+0x8c>)
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	4a0c      	ldr	r2, [pc, #48]	; (8003a00 <FLASH_Erase_Sector+0x8c>)
 80039d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80039d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <FLASH_Erase_Sector+0x8c>)
 80039d8:	691a      	ldr	r2, [r3, #16]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4313      	orrs	r3, r2
 80039e0:	4a07      	ldr	r2, [pc, #28]	; (8003a00 <FLASH_Erase_Sector+0x8c>)
 80039e2:	f043 0302 	orr.w	r3, r3, #2
 80039e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <FLASH_Erase_Sector+0x8c>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	4a04      	ldr	r2, [pc, #16]	; (8003a00 <FLASH_Erase_Sector+0x8c>)
 80039ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f2:	6113      	str	r3, [r2, #16]
}
 80039f4:	bf00      	nop
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	40023c00 	.word	0x40023c00

08003a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b089      	sub	sp, #36	; 0x24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	e16b      	b.n	8003cf8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a20:	2201      	movs	r2, #1
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	f040 815a 	bne.w	8003cf2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d005      	beq.n	8003a56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d130      	bne.n	8003ab8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	2203      	movs	r2, #3
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 0201 	and.w	r2, r3, #1
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d017      	beq.n	8003af4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	2203      	movs	r2, #3
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d123      	bne.n	8003b48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	08da      	lsrs	r2, r3, #3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3208      	adds	r2, #8
 8003b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	220f      	movs	r2, #15
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	08da      	lsrs	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3208      	adds	r2, #8
 8003b42:	69b9      	ldr	r1, [r7, #24]
 8003b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	2203      	movs	r2, #3
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 0203 	and.w	r2, r3, #3
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80b4 	beq.w	8003cf2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	4b60      	ldr	r3, [pc, #384]	; (8003d10 <HAL_GPIO_Init+0x30c>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	4a5f      	ldr	r2, [pc, #380]	; (8003d10 <HAL_GPIO_Init+0x30c>)
 8003b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b98:	6453      	str	r3, [r2, #68]	; 0x44
 8003b9a:	4b5d      	ldr	r3, [pc, #372]	; (8003d10 <HAL_GPIO_Init+0x30c>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ba6:	4a5b      	ldr	r2, [pc, #364]	; (8003d14 <HAL_GPIO_Init+0x310>)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	089b      	lsrs	r3, r3, #2
 8003bac:	3302      	adds	r3, #2
 8003bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	220f      	movs	r2, #15
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a52      	ldr	r2, [pc, #328]	; (8003d18 <HAL_GPIO_Init+0x314>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d02b      	beq.n	8003c2a <HAL_GPIO_Init+0x226>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a51      	ldr	r2, [pc, #324]	; (8003d1c <HAL_GPIO_Init+0x318>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d025      	beq.n	8003c26 <HAL_GPIO_Init+0x222>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a50      	ldr	r2, [pc, #320]	; (8003d20 <HAL_GPIO_Init+0x31c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d01f      	beq.n	8003c22 <HAL_GPIO_Init+0x21e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a4f      	ldr	r2, [pc, #316]	; (8003d24 <HAL_GPIO_Init+0x320>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d019      	beq.n	8003c1e <HAL_GPIO_Init+0x21a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a4e      	ldr	r2, [pc, #312]	; (8003d28 <HAL_GPIO_Init+0x324>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d013      	beq.n	8003c1a <HAL_GPIO_Init+0x216>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a4d      	ldr	r2, [pc, #308]	; (8003d2c <HAL_GPIO_Init+0x328>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00d      	beq.n	8003c16 <HAL_GPIO_Init+0x212>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a4c      	ldr	r2, [pc, #304]	; (8003d30 <HAL_GPIO_Init+0x32c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d007      	beq.n	8003c12 <HAL_GPIO_Init+0x20e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a4b      	ldr	r2, [pc, #300]	; (8003d34 <HAL_GPIO_Init+0x330>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d101      	bne.n	8003c0e <HAL_GPIO_Init+0x20a>
 8003c0a:	2307      	movs	r3, #7
 8003c0c:	e00e      	b.n	8003c2c <HAL_GPIO_Init+0x228>
 8003c0e:	2308      	movs	r3, #8
 8003c10:	e00c      	b.n	8003c2c <HAL_GPIO_Init+0x228>
 8003c12:	2306      	movs	r3, #6
 8003c14:	e00a      	b.n	8003c2c <HAL_GPIO_Init+0x228>
 8003c16:	2305      	movs	r3, #5
 8003c18:	e008      	b.n	8003c2c <HAL_GPIO_Init+0x228>
 8003c1a:	2304      	movs	r3, #4
 8003c1c:	e006      	b.n	8003c2c <HAL_GPIO_Init+0x228>
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e004      	b.n	8003c2c <HAL_GPIO_Init+0x228>
 8003c22:	2302      	movs	r3, #2
 8003c24:	e002      	b.n	8003c2c <HAL_GPIO_Init+0x228>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <HAL_GPIO_Init+0x228>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	f002 0203 	and.w	r2, r2, #3
 8003c32:	0092      	lsls	r2, r2, #2
 8003c34:	4093      	lsls	r3, r2
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c3c:	4935      	ldr	r1, [pc, #212]	; (8003d14 <HAL_GPIO_Init+0x310>)
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	089b      	lsrs	r3, r3, #2
 8003c42:	3302      	adds	r3, #2
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c4a:	4b3b      	ldr	r3, [pc, #236]	; (8003d38 <HAL_GPIO_Init+0x334>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	43db      	mvns	r3, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4013      	ands	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c6e:	4a32      	ldr	r2, [pc, #200]	; (8003d38 <HAL_GPIO_Init+0x334>)
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c74:	4b30      	ldr	r3, [pc, #192]	; (8003d38 <HAL_GPIO_Init+0x334>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4013      	ands	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c98:	4a27      	ldr	r2, [pc, #156]	; (8003d38 <HAL_GPIO_Init+0x334>)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c9e:	4b26      	ldr	r3, [pc, #152]	; (8003d38 <HAL_GPIO_Init+0x334>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4013      	ands	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cc2:	4a1d      	ldr	r2, [pc, #116]	; (8003d38 <HAL_GPIO_Init+0x334>)
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <HAL_GPIO_Init+0x334>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cec:	4a12      	ldr	r2, [pc, #72]	; (8003d38 <HAL_GPIO_Init+0x334>)
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	2b0f      	cmp	r3, #15
 8003cfc:	f67f ae90 	bls.w	8003a20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	3724      	adds	r7, #36	; 0x24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40013800 	.word	0x40013800
 8003d18:	40020000 	.word	0x40020000
 8003d1c:	40020400 	.word	0x40020400
 8003d20:	40020800 	.word	0x40020800
 8003d24:	40020c00 	.word	0x40020c00
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40021400 	.word	0x40021400
 8003d30:	40021800 	.word	0x40021800
 8003d34:	40021c00 	.word	0x40021c00
 8003d38:	40013c00 	.word	0x40013c00

08003d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	887b      	ldrh	r3, [r7, #2]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
 8003d58:	e001      	b.n	8003d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	807b      	strh	r3, [r7, #2]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d7c:	787b      	ldrb	r3, [r7, #1]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d82:	887a      	ldrh	r2, [r7, #2]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d88:	e003      	b.n	8003d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d8a:	887b      	ldrh	r3, [r7, #2]
 8003d8c:	041a      	lsls	r2, r3, #16
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	619a      	str	r2, [r3, #24]
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	460b      	mov	r3, r1
 8003da8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003db0:	887a      	ldrh	r2, [r7, #2]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4013      	ands	r3, r2
 8003db6:	041a      	lsls	r2, r3, #16
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	43d9      	mvns	r1, r3
 8003dbc:	887b      	ldrh	r3, [r7, #2]
 8003dbe:	400b      	ands	r3, r1
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	619a      	str	r2, [r3, #24]
}
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
	...

08003dd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e12b      	b.n	800403e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff f89e 	bl	8002f3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2224      	movs	r2, #36	; 0x24
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e38:	f002 fc58 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 8003e3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4a81      	ldr	r2, [pc, #516]	; (8004048 <HAL_I2C_Init+0x274>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d807      	bhi.n	8003e58 <HAL_I2C_Init+0x84>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4a80      	ldr	r2, [pc, #512]	; (800404c <HAL_I2C_Init+0x278>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	bf94      	ite	ls
 8003e50:	2301      	movls	r3, #1
 8003e52:	2300      	movhi	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	e006      	b.n	8003e66 <HAL_I2C_Init+0x92>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4a7d      	ldr	r2, [pc, #500]	; (8004050 <HAL_I2C_Init+0x27c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	bf94      	ite	ls
 8003e60:	2301      	movls	r3, #1
 8003e62:	2300      	movhi	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e0e7      	b.n	800403e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4a78      	ldr	r2, [pc, #480]	; (8004054 <HAL_I2C_Init+0x280>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	0c9b      	lsrs	r3, r3, #18
 8003e78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4a6a      	ldr	r2, [pc, #424]	; (8004048 <HAL_I2C_Init+0x274>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d802      	bhi.n	8003ea8 <HAL_I2C_Init+0xd4>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	e009      	b.n	8003ebc <HAL_I2C_Init+0xe8>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003eae:	fb02 f303 	mul.w	r3, r2, r3
 8003eb2:	4a69      	ldr	r2, [pc, #420]	; (8004058 <HAL_I2C_Init+0x284>)
 8003eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb8:	099b      	lsrs	r3, r3, #6
 8003eba:	3301      	adds	r3, #1
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6812      	ldr	r2, [r2, #0]
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ece:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	495c      	ldr	r1, [pc, #368]	; (8004048 <HAL_I2C_Init+0x274>)
 8003ed8:	428b      	cmp	r3, r1
 8003eda:	d819      	bhi.n	8003f10 <HAL_I2C_Init+0x13c>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	1e59      	subs	r1, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eea:	1c59      	adds	r1, r3, #1
 8003eec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ef0:	400b      	ands	r3, r1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_I2C_Init+0x138>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1e59      	subs	r1, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f04:	3301      	adds	r3, #1
 8003f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0a:	e051      	b.n	8003fb0 <HAL_I2C_Init+0x1dc>
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	e04f      	b.n	8003fb0 <HAL_I2C_Init+0x1dc>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d111      	bne.n	8003f3c <HAL_I2C_Init+0x168>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	1e58      	subs	r0, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6859      	ldr	r1, [r3, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	440b      	add	r3, r1
 8003f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bf0c      	ite	eq
 8003f34:	2301      	moveq	r3, #1
 8003f36:	2300      	movne	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e012      	b.n	8003f62 <HAL_I2C_Init+0x18e>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1e58      	subs	r0, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6859      	ldr	r1, [r3, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	0099      	lsls	r1, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f52:	3301      	adds	r3, #1
 8003f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf0c      	ite	eq
 8003f5c:	2301      	moveq	r3, #1
 8003f5e:	2300      	movne	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_I2C_Init+0x196>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e022      	b.n	8003fb0 <HAL_I2C_Init+0x1dc>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10e      	bne.n	8003f90 <HAL_I2C_Init+0x1bc>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1e58      	subs	r0, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6859      	ldr	r1, [r3, #4]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	440b      	add	r3, r1
 8003f80:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f84:	3301      	adds	r3, #1
 8003f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f8e:	e00f      	b.n	8003fb0 <HAL_I2C_Init+0x1dc>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1e58      	subs	r0, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6859      	ldr	r1, [r3, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	0099      	lsls	r1, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	6809      	ldr	r1, [r1, #0]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69da      	ldr	r2, [r3, #28]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003fde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6911      	ldr	r1, [r2, #16]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	68d2      	ldr	r2, [r2, #12]
 8003fea:	4311      	orrs	r1, r2
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	000186a0 	.word	0x000186a0
 800404c:	001e847f 	.word	0x001e847f
 8004050:	003d08ff 	.word	0x003d08ff
 8004054:	431bde83 	.word	0x431bde83
 8004058:	10624dd3 	.word	0x10624dd3

0800405c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	607a      	str	r2, [r7, #4]
 8004066:	461a      	mov	r2, r3
 8004068:	460b      	mov	r3, r1
 800406a:	817b      	strh	r3, [r7, #10]
 800406c:	4613      	mov	r3, r2
 800406e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004070:	f7ff f96c 	bl	800334c <HAL_GetTick>
 8004074:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b20      	cmp	r3, #32
 8004080:	f040 80e0 	bne.w	8004244 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	2319      	movs	r3, #25
 800408a:	2201      	movs	r2, #1
 800408c:	4970      	ldr	r1, [pc, #448]	; (8004250 <HAL_I2C_Master_Transmit+0x1f4>)
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 fa92 	bl	80045b8 <I2C_WaitOnFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800409a:	2302      	movs	r3, #2
 800409c:	e0d3      	b.n	8004246 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_I2C_Master_Transmit+0x50>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e0cc      	b.n	8004246 <HAL_I2C_Master_Transmit+0x1ea>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d007      	beq.n	80040d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0201 	orr.w	r2, r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2221      	movs	r2, #33	; 0x21
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2210      	movs	r2, #16
 80040ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	893a      	ldrh	r2, [r7, #8]
 8004102:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4a50      	ldr	r2, [pc, #320]	; (8004254 <HAL_I2C_Master_Transmit+0x1f8>)
 8004112:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004114:	8979      	ldrh	r1, [r7, #10]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	6a3a      	ldr	r2, [r7, #32]
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f9ca 	bl	80044b4 <I2C_MasterRequestWrite>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e08d      	b.n	8004246 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412a:	2300      	movs	r3, #0
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004140:	e066      	b.n	8004210 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	6a39      	ldr	r1, [r7, #32]
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fb50 	bl	80047ec <I2C_WaitOnTXEFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00d      	beq.n	800416e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	2b04      	cmp	r3, #4
 8004158:	d107      	bne.n	800416a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004168:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e06b      	b.n	8004246 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	781a      	ldrb	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d11b      	bne.n	80041e4 <HAL_I2C_Master_Transmit+0x188>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d017      	beq.n	80041e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	6a39      	ldr	r1, [r7, #32]
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fb47 	bl	800487c <I2C_WaitOnBTFFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00d      	beq.n	8004210 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d107      	bne.n	800420c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e01a      	b.n	8004246 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004214:	2b00      	cmp	r3, #0
 8004216:	d194      	bne.n	8004142 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	e000      	b.n	8004246 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004244:	2302      	movs	r3, #2
  }
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	00100002 	.word	0x00100002
 8004254:	ffff0000 	.word	0xffff0000

08004258 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	; 0x28
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	460b      	mov	r3, r1
 8004266:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004268:	f7ff f870 	bl	800334c <HAL_GetTick>
 800426c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b20      	cmp	r3, #32
 800427c:	f040 8111 	bne.w	80044a2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	2319      	movs	r3, #25
 8004286:	2201      	movs	r2, #1
 8004288:	4988      	ldr	r1, [pc, #544]	; (80044ac <HAL_I2C_IsDeviceReady+0x254>)
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f994 	bl	80045b8 <I2C_WaitOnFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004296:	2302      	movs	r3, #2
 8004298:	e104      	b.n	80044a4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_I2C_IsDeviceReady+0x50>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e0fd      	b.n	80044a4 <HAL_I2C_IsDeviceReady+0x24c>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d007      	beq.n	80042ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0201 	orr.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2224      	movs	r2, #36	; 0x24
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4a70      	ldr	r2, [pc, #448]	; (80044b0 <HAL_I2C_IsDeviceReady+0x258>)
 80042f0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004300:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2200      	movs	r2, #0
 800430a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 f952 	bl	80045b8 <I2C_WaitOnFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00d      	beq.n	8004336 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004328:	d103      	bne.n	8004332 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004330:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e0b6      	b.n	80044a4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004336:	897b      	ldrh	r3, [r7, #10]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004344:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004346:	f7ff f801 	bl	800334c <HAL_GetTick>
 800434a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b02      	cmp	r3, #2
 8004358:	bf0c      	ite	eq
 800435a:	2301      	moveq	r3, #1
 800435c:	2300      	movne	r3, #0
 800435e:	b2db      	uxtb	r3, r3
 8004360:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004370:	bf0c      	ite	eq
 8004372:	2301      	moveq	r3, #1
 8004374:	2300      	movne	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800437a:	e025      	b.n	80043c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800437c:	f7fe ffe6 	bl	800334c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d302      	bcc.n	8004392 <HAL_I2C_IsDeviceReady+0x13a>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d103      	bne.n	800439a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	22a0      	movs	r2, #160	; 0xa0
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	bf0c      	ite	eq
 80043a8:	2301      	moveq	r3, #1
 80043aa:	2300      	movne	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2ba0      	cmp	r3, #160	; 0xa0
 80043d2:	d005      	beq.n	80043e0 <HAL_I2C_IsDeviceReady+0x188>
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d102      	bne.n	80043e0 <HAL_I2C_IsDeviceReady+0x188>
 80043da:	7dbb      	ldrb	r3, [r7, #22]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0cd      	beq.n	800437c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d129      	bne.n	800444a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004404:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004406:	2300      	movs	r3, #0
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	613b      	str	r3, [r7, #16]
 800441a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2319      	movs	r3, #25
 8004422:	2201      	movs	r2, #1
 8004424:	4921      	ldr	r1, [pc, #132]	; (80044ac <HAL_I2C_IsDeviceReady+0x254>)
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f8c6 	bl	80045b8 <I2C_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e036      	b.n	80044a4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	e02c      	b.n	80044a4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004458:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004462:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	2319      	movs	r3, #25
 800446a:	2201      	movs	r2, #1
 800446c:	490f      	ldr	r1, [pc, #60]	; (80044ac <HAL_I2C_IsDeviceReady+0x254>)
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f8a2 	bl	80045b8 <I2C_WaitOnFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e012      	b.n	80044a4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	3301      	adds	r3, #1
 8004482:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	429a      	cmp	r2, r3
 800448a:	f4ff af32 	bcc.w	80042f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80044a2:	2302      	movs	r3, #2
  }
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3720      	adds	r7, #32
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	00100002 	.word	0x00100002
 80044b0:	ffff0000 	.word	0xffff0000

080044b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	607a      	str	r2, [r7, #4]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	460b      	mov	r3, r1
 80044c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d006      	beq.n	80044de <I2C_MasterRequestWrite+0x2a>
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d003      	beq.n	80044de <I2C_MasterRequestWrite+0x2a>
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044dc:	d108      	bne.n	80044f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	e00b      	b.n	8004508 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	2b12      	cmp	r3, #18
 80044f6:	d107      	bne.n	8004508 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004506:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f84f 	bl	80045b8 <I2C_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00d      	beq.n	800453c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800452e:	d103      	bne.n	8004538 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004536:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e035      	b.n	80045a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004544:	d108      	bne.n	8004558 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004546:	897b      	ldrh	r3, [r7, #10]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004554:	611a      	str	r2, [r3, #16]
 8004556:	e01b      	b.n	8004590 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004558:	897b      	ldrh	r3, [r7, #10]
 800455a:	11db      	asrs	r3, r3, #7
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f003 0306 	and.w	r3, r3, #6
 8004562:	b2db      	uxtb	r3, r3
 8004564:	f063 030f 	orn	r3, r3, #15
 8004568:	b2da      	uxtb	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	490e      	ldr	r1, [pc, #56]	; (80045b0 <I2C_MasterRequestWrite+0xfc>)
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f898 	bl	80046ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e010      	b.n	80045a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004586:	897b      	ldrh	r3, [r7, #10]
 8004588:	b2da      	uxtb	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	4907      	ldr	r1, [pc, #28]	; (80045b4 <I2C_MasterRequestWrite+0x100>)
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f888 	bl	80046ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	00010008 	.word	0x00010008
 80045b4:	00010002 	.word	0x00010002

080045b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	4613      	mov	r3, r2
 80045c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045c8:	e048      	b.n	800465c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d0:	d044      	beq.n	800465c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d2:	f7fe febb 	bl	800334c <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d302      	bcc.n	80045e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d139      	bne.n	800465c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	0c1b      	lsrs	r3, r3, #16
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d10d      	bne.n	800460e <I2C_WaitOnFlagUntilTimeout+0x56>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	43da      	mvns	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4013      	ands	r3, r2
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	bf0c      	ite	eq
 8004604:	2301      	moveq	r3, #1
 8004606:	2300      	movne	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	461a      	mov	r2, r3
 800460c:	e00c      	b.n	8004628 <I2C_WaitOnFlagUntilTimeout+0x70>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	43da      	mvns	r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	4013      	ands	r3, r2
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	bf0c      	ite	eq
 8004620:	2301      	moveq	r3, #1
 8004622:	2300      	movne	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	429a      	cmp	r2, r3
 800462c:	d116      	bne.n	800465c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	f043 0220 	orr.w	r2, r3, #32
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e023      	b.n	80046a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	0c1b      	lsrs	r3, r3, #16
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b01      	cmp	r3, #1
 8004664:	d10d      	bne.n	8004682 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	43da      	mvns	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	4013      	ands	r3, r2
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	bf0c      	ite	eq
 8004678:	2301      	moveq	r3, #1
 800467a:	2300      	movne	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	e00c      	b.n	800469c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	43da      	mvns	r2, r3
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4013      	ands	r3, r2
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	bf0c      	ite	eq
 8004694:	2301      	moveq	r3, #1
 8004696:	2300      	movne	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	461a      	mov	r2, r3
 800469c:	79fb      	ldrb	r3, [r7, #7]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d093      	beq.n	80045ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046ba:	e071      	b.n	80047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ca:	d123      	bne.n	8004714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	f043 0204 	orr.w	r2, r3, #4
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e067      	b.n	80047e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471a:	d041      	beq.n	80047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800471c:	f7fe fe16 	bl	800334c <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	429a      	cmp	r2, r3
 800472a:	d302      	bcc.n	8004732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d136      	bne.n	80047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	0c1b      	lsrs	r3, r3, #16
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	d10c      	bne.n	8004756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	43da      	mvns	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4013      	ands	r3, r2
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	bf14      	ite	ne
 800474e:	2301      	movne	r3, #1
 8004750:	2300      	moveq	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	e00b      	b.n	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	43da      	mvns	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4013      	ands	r3, r2
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	bf14      	ite	ne
 8004768:	2301      	movne	r3, #1
 800476a:	2300      	moveq	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d016      	beq.n	80047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	f043 0220 	orr.w	r2, r3, #32
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e021      	b.n	80047e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	0c1b      	lsrs	r3, r3, #16
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d10c      	bne.n	80047c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	43da      	mvns	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4013      	ands	r3, r2
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bf14      	ite	ne
 80047bc:	2301      	movne	r3, #1
 80047be:	2300      	moveq	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	e00b      	b.n	80047dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	43da      	mvns	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4013      	ands	r3, r2
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bf14      	ite	ne
 80047d6:	2301      	movne	r3, #1
 80047d8:	2300      	moveq	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f47f af6d 	bne.w	80046bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047f8:	e034      	b.n	8004864 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f886 	bl	800490c <I2C_IsAcknowledgeFailed>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e034      	b.n	8004874 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d028      	beq.n	8004864 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004812:	f7fe fd9b 	bl	800334c <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	429a      	cmp	r2, r3
 8004820:	d302      	bcc.n	8004828 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d11d      	bne.n	8004864 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004832:	2b80      	cmp	r3, #128	; 0x80
 8004834:	d016      	beq.n	8004864 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	f043 0220 	orr.w	r2, r3, #32
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e007      	b.n	8004874 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486e:	2b80      	cmp	r3, #128	; 0x80
 8004870:	d1c3      	bne.n	80047fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004888:	e034      	b.n	80048f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f83e 	bl	800490c <I2C_IsAcknowledgeFailed>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e034      	b.n	8004904 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	d028      	beq.n	80048f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a2:	f7fe fd53 	bl	800334c <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d302      	bcc.n	80048b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d11d      	bne.n	80048f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d016      	beq.n	80048f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	f043 0220 	orr.w	r2, r3, #32
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e007      	b.n	8004904 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d1c3      	bne.n	800488a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004922:	d11b      	bne.n	800495c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800492c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	f043 0204 	orr.w	r2, r3, #4
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b086      	sub	sp, #24
 800496e:	af02      	add	r7, sp, #8
 8004970:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e101      	b.n	8004b80 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f006 f90a 	bl	800abb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2203      	movs	r2, #3
 80049a0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049aa:	d102      	bne.n	80049b2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f002 fcfb 	bl	80073b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	7c1a      	ldrb	r2, [r3, #16]
 80049c4:	f88d 2000 	strb.w	r2, [sp]
 80049c8:	3304      	adds	r3, #4
 80049ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049cc:	f002 fbda 	bl	8007184 <USB_CoreInit>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d005      	beq.n	80049e2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2202      	movs	r2, #2
 80049da:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e0ce      	b.n	8004b80 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2100      	movs	r1, #0
 80049e8:	4618      	mov	r0, r3
 80049ea:	f002 fcf3 	bl	80073d4 <USB_SetCurrentMode>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0bf      	b.n	8004b80 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a00:	2300      	movs	r3, #0
 8004a02:	73fb      	strb	r3, [r7, #15]
 8004a04:	e04a      	b.n	8004a9c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a06:	7bfa      	ldrb	r2, [r7, #15]
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	3315      	adds	r3, #21
 8004a16:	2201      	movs	r2, #1
 8004a18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a1a:	7bfa      	ldrb	r2, [r7, #15]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	4413      	add	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	3314      	adds	r3, #20
 8004a2a:	7bfa      	ldrb	r2, [r7, #15]
 8004a2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a2e:	7bfa      	ldrb	r2, [r7, #15]
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	b298      	uxth	r0, r3
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	332e      	adds	r3, #46	; 0x2e
 8004a42:	4602      	mov	r2, r0
 8004a44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a46:	7bfa      	ldrb	r2, [r7, #15]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	3318      	adds	r3, #24
 8004a56:	2200      	movs	r2, #0
 8004a58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a5a:	7bfa      	ldrb	r2, [r7, #15]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	331c      	adds	r3, #28
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a6e:	7bfa      	ldrb	r2, [r7, #15]
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4413      	add	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	3320      	adds	r3, #32
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a82:	7bfa      	ldrb	r2, [r7, #15]
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	3324      	adds	r3, #36	; 0x24
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	791b      	ldrb	r3, [r3, #4]
 8004aa0:	7bfa      	ldrb	r2, [r7, #15]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d3af      	bcc.n	8004a06 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	73fb      	strb	r3, [r7, #15]
 8004aaa:	e044      	b.n	8004b36 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004aac:	7bfa      	ldrb	r2, [r7, #15]
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	f203 2355 	addw	r3, r3, #597	; 0x255
 8004abe:	2200      	movs	r2, #0
 8004ac0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ac2:	7bfa      	ldrb	r2, [r7, #15]
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8004ad4:	7bfa      	ldrb	r2, [r7, #15]
 8004ad6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ad8:	7bfa      	ldrb	r2, [r7, #15]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004aee:	7bfa      	ldrb	r2, [r7, #15]
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	4413      	add	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b04:	7bfa      	ldrb	r2, [r7, #15]
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b1a:	7bfa      	ldrb	r2, [r7, #15]
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	4413      	add	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	440b      	add	r3, r1
 8004b28:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	3301      	adds	r3, #1
 8004b34:	73fb      	strb	r3, [r7, #15]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	791b      	ldrb	r3, [r3, #4]
 8004b3a:	7bfa      	ldrb	r2, [r7, #15]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d3b5      	bcc.n	8004aac <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	7c1a      	ldrb	r2, [r3, #16]
 8004b48:	f88d 2000 	strb.w	r2, [sp]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b50:	f002 fc8c 	bl	800746c <USB_DevInit>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d005      	beq.n	8004b66 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e00c      	b.n	8004b80 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f003 fcd0 	bl	800851e <USB_DevDisconnect>

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_PCD_Start+0x1c>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e022      	b.n	8004bea <HAL_PCD_Start+0x62>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d009      	beq.n	8004bcc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d105      	bne.n	8004bcc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f002 fbdd 	bl	8007390 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f003 fc7e 	bl	80084dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004bf2:	b590      	push	{r4, r7, lr}
 8004bf4:	b08d      	sub	sp, #52	; 0x34
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f003 fd3c 	bl	8008686 <USB_GetMode>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f040 848c 	bne.w	800552e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f003 fca0 	bl	8008560 <USB_ReadInterrupts>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 8482 	beq.w	800552c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	0a1b      	lsrs	r3, r3, #8
 8004c32:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f003 fc8d 	bl	8008560 <USB_ReadInterrupts>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d107      	bne.n	8004c60 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f002 0202 	and.w	r2, r2, #2
 8004c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f003 fc7b 	bl	8008560 <USB_ReadInterrupts>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d161      	bne.n	8004d38 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0210 	bic.w	r2, r2, #16
 8004c82:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	f003 020f 	and.w	r2, r3, #15
 8004c90:	4613      	mov	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	0c5b      	lsrs	r3, r3, #17
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d124      	bne.n	8004cfa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d035      	beq.n	8004d28 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	091b      	lsrs	r3, r3, #4
 8004cc4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004cc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	6a38      	ldr	r0, [r7, #32]
 8004cd0:	f003 fab2 	bl	8008238 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	091b      	lsrs	r3, r3, #4
 8004cdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ce0:	441a      	add	r2, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	695a      	ldr	r2, [r3, #20]
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	091b      	lsrs	r3, r3, #4
 8004cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cf2:	441a      	add	r2, r3
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	615a      	str	r2, [r3, #20]
 8004cf8:	e016      	b.n	8004d28 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	0c5b      	lsrs	r3, r3, #17
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	2b06      	cmp	r3, #6
 8004d04:	d110      	bne.n	8004d28 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6a38      	ldr	r0, [r7, #32]
 8004d12:	f003 fa91 	bl	8008238 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	695a      	ldr	r2, [r3, #20]
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	091b      	lsrs	r3, r3, #4
 8004d1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d22:	441a      	add	r2, r3
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699a      	ldr	r2, [r3, #24]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0210 	orr.w	r2, r2, #16
 8004d36:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f003 fc0f 	bl	8008560 <USB_ReadInterrupts>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d4c:	f040 80a7 	bne.w	8004e9e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f003 fc14 	bl	8008586 <USB_ReadDevAllOutEpInterrupt>
 8004d5e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004d60:	e099      	b.n	8004e96 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 808e 	beq.w	8004e8a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	4611      	mov	r1, r2
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f003 fc38 	bl	80085ee <USB_ReadDevOutEPInterrupt>
 8004d7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00c      	beq.n	8004da4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d96:	461a      	mov	r2, r3
 8004d98:	2301      	movs	r3, #1
 8004d9a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004d9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fea2 	bl	8005ae8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00c      	beq.n	8004dc8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dba:	461a      	mov	r2, r3
 8004dbc:	2308      	movs	r3, #8
 8004dbe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 ff78 	bl	8005cb8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d008      	beq.n	8004de4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dde:	461a      	mov	r2, r3
 8004de0:	2310      	movs	r3, #16
 8004de2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d030      	beq.n	8004e50 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df6:	2b80      	cmp	r3, #128	; 0x80
 8004df8:	d109      	bne.n	8004e0e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e0c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	4413      	add	r3, r2
 8004e20:	3304      	adds	r3, #4
 8004e22:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	78db      	ldrb	r3, [r3, #3]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d108      	bne.n	8004e3e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f005 ffbf 	bl	800adbc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d008      	beq.n	8004e6c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	461a      	mov	r2, r3
 8004e68:	2320      	movs	r3, #32
 8004e6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d009      	beq.n	8004e8a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e82:	461a      	mov	r2, r3
 8004e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e88:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f47f af62 	bne.w	8004d62 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f003 fb5c 	bl	8008560 <USB_ReadInterrupts>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004eb2:	f040 80db 	bne.w	800506c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f003 fb7d 	bl	80085ba <USB_ReadDevAllInEpInterrupt>
 8004ec0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004ec6:	e0cd      	b.n	8005064 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80c2 	beq.w	8005058 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f003 fba3 	bl	800862a <USB_ReadDevInEPInterrupt>
 8004ee4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d057      	beq.n	8004fa0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	69f9      	ldr	r1, [r7, #28]
 8004f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f10:	4013      	ands	r3, r2
 8004f12:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f20:	461a      	mov	r2, r3
 8004f22:	2301      	movs	r3, #1
 8004f24:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	799b      	ldrb	r3, [r3, #6]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d132      	bne.n	8004f94 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f32:	4613      	mov	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	440b      	add	r3, r1
 8004f3c:	3320      	adds	r3, #32
 8004f3e:	6819      	ldr	r1, [r3, #0]
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f44:	4613      	mov	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4403      	add	r3, r0
 8004f4e:	331c      	adds	r3, #28
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4419      	add	r1, r3
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f58:	4613      	mov	r3, r2
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4403      	add	r3, r0
 8004f62:	3320      	adds	r3, #32
 8004f64:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d113      	bne.n	8004f94 <HAL_PCD_IRQHandler+0x3a2>
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f70:	4613      	mov	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4413      	add	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	3324      	adds	r3, #36	; 0x24
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d108      	bne.n	8004f94 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	2101      	movs	r1, #1
 8004f90:	f003 fbaa 	bl	80086e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	4619      	mov	r1, r3
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f005 fe89 	bl	800acb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f003 0308 	and.w	r3, r3, #8
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d008      	beq.n	8004fbc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	2308      	movs	r3, #8
 8004fba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d008      	beq.n	8004fd8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d008      	beq.n	8004ff4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fee:	461a      	mov	r2, r3
 8004ff0:	2340      	movs	r3, #64	; 0x40
 8004ff2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d023      	beq.n	8005046 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004ffe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005000:	6a38      	ldr	r0, [r7, #32]
 8005002:	f002 fb97 	bl	8007734 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005008:	4613      	mov	r3, r2
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	4413      	add	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	3310      	adds	r3, #16
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	4413      	add	r3, r2
 8005016:	3304      	adds	r3, #4
 8005018:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	78db      	ldrb	r3, [r3, #3]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d108      	bne.n	8005034 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2200      	movs	r2, #0
 8005026:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	b2db      	uxtb	r3, r3
 800502c:	4619      	mov	r1, r3
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f005 fed6 	bl	800ade0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005040:	461a      	mov	r2, r3
 8005042:	2302      	movs	r3, #2
 8005044:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fcbb 	bl	80059ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	3301      	adds	r3, #1
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	2b00      	cmp	r3, #0
 8005068:	f47f af2e 	bne.w	8004ec8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f003 fa75 	bl	8008560 <USB_ReadInterrupts>
 8005076:	4603      	mov	r3, r0
 8005078:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800507c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005080:	d122      	bne.n	80050c8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005090:	f023 0301 	bic.w	r3, r3, #1
 8005094:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800509c:	2b01      	cmp	r3, #1
 800509e:	d108      	bne.n	80050b2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80050a8:	2100      	movs	r1, #0
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fea2 	bl	8005df4 <HAL_PCDEx_LPM_Callback>
 80050b0:	e002      	b.n	80050b8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f005 fe74 	bl	800ada0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	695a      	ldr	r2, [r3, #20]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80050c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f003 fa47 	bl	8008560 <USB_ReadInterrupts>
 80050d2:	4603      	mov	r3, r0
 80050d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050dc:	d112      	bne.n	8005104 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d102      	bne.n	80050f4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f005 fe30 	bl	800ad54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695a      	ldr	r2, [r3, #20]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005102:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f003 fa29 	bl	8008560 <USB_ReadInterrupts>
 800510e:	4603      	mov	r3, r0
 8005110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005118:	f040 80b7 	bne.w	800528a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800512a:	f023 0301 	bic.w	r3, r3, #1
 800512e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2110      	movs	r1, #16
 8005136:	4618      	mov	r0, r3
 8005138:	f002 fafc 	bl	8007734 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800513c:	2300      	movs	r3, #0
 800513e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005140:	e046      	b.n	80051d0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514e:	461a      	mov	r2, r3
 8005150:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005154:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005166:	0151      	lsls	r1, r2, #5
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	440a      	add	r2, r1
 800516c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005170:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005174:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005182:	461a      	mov	r2, r3
 8005184:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005188:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800519a:	0151      	lsls	r1, r2, #5
 800519c:	69fa      	ldr	r2, [r7, #28]
 800519e:	440a      	add	r2, r1
 80051a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ba:	0151      	lsls	r1, r2, #5
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	440a      	add	r2, r1
 80051c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051cc:	3301      	adds	r3, #1
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	791b      	ldrb	r3, [r3, #4]
 80051d4:	461a      	mov	r2, r3
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	4293      	cmp	r3, r2
 80051da:	d3b2      	bcc.n	8005142 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80051ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	7bdb      	ldrb	r3, [r3, #15]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d016      	beq.n	8005226 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005208:	f043 030b 	orr.w	r3, r3, #11
 800520c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800521e:	f043 030b 	orr.w	r3, r3, #11
 8005222:	6453      	str	r3, [r2, #68]	; 0x44
 8005224:	e015      	b.n	8005252 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005234:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005238:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800523c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800524c:	f043 030b 	orr.w	r3, r3, #11
 8005250:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005260:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005264:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005274:	461a      	mov	r2, r3
 8005276:	f003 fa37 	bl	80086e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695a      	ldr	r2, [r3, #20]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005288:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f003 f966 	bl	8008560 <USB_ReadInterrupts>
 8005294:	4603      	mov	r3, r0
 8005296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800529a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529e:	d123      	bne.n	80052e8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f003 f9fc 	bl	80086a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f002 fab9 	bl	8007826 <USB_GetDevSpeed>
 80052b4:	4603      	mov	r3, r0
 80052b6:	461a      	mov	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681c      	ldr	r4, [r3, #0]
 80052c0:	f001 fa08 	bl	80066d4 <HAL_RCC_GetHCLKFreq>
 80052c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052ca:	461a      	mov	r2, r3
 80052cc:	4620      	mov	r0, r4
 80052ce:	f001 ffbd 	bl	800724c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f005 fd15 	bl	800ad02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695a      	ldr	r2, [r3, #20]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80052e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f003 f937 	bl	8008560 <USB_ReadInterrupts>
 80052f2:	4603      	mov	r3, r0
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d10a      	bne.n	8005312 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f005 fcf2 	bl	800ace6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695a      	ldr	r2, [r3, #20]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f002 0208 	and.w	r2, r2, #8
 8005310:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f003 f922 	bl	8008560 <USB_ReadInterrupts>
 800531c:	4603      	mov	r3, r0
 800531e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005322:	2b80      	cmp	r3, #128	; 0x80
 8005324:	d123      	bne.n	800536e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005332:	2301      	movs	r3, #1
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
 8005336:	e014      	b.n	8005362 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533c:	4613      	mov	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	f203 2357 	addw	r3, r3, #599	; 0x257
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d105      	bne.n	800535c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	b2db      	uxtb	r3, r3
 8005354:	4619      	mov	r1, r3
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fb08 	bl	800596c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	3301      	adds	r3, #1
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	791b      	ldrb	r3, [r3, #4]
 8005366:	461a      	mov	r2, r3
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	4293      	cmp	r3, r2
 800536c:	d3e4      	bcc.n	8005338 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f003 f8f4 	bl	8008560 <USB_ReadInterrupts>
 8005378:	4603      	mov	r3, r0
 800537a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800537e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005382:	d13c      	bne.n	80053fe <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005384:	2301      	movs	r3, #1
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
 8005388:	e02b      	b.n	80053e2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539e:	4613      	mov	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	3318      	adds	r3, #24
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d115      	bne.n	80053dc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80053b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	da12      	bge.n	80053dc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ba:	4613      	mov	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	3317      	adds	r3, #23
 80053c6:	2201      	movs	r2, #1
 80053c8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	4619      	mov	r1, r3
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fac8 	bl	800596c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	3301      	adds	r3, #1
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	791b      	ldrb	r3, [r3, #4]
 80053e6:	461a      	mov	r2, r3
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d3cd      	bcc.n	800538a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80053fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f003 f8ac 	bl	8008560 <USB_ReadInterrupts>
 8005408:	4603      	mov	r3, r0
 800540a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800540e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005412:	d156      	bne.n	80054c2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005414:	2301      	movs	r3, #1
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
 8005418:	e045      	b.n	80054a6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800542e:	4613      	mov	r3, r2
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d12e      	bne.n	80054a0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005442:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005444:	2b00      	cmp	r3, #0
 8005446:	da2b      	bge.n	80054a0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8005454:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005458:	429a      	cmp	r2, r3
 800545a:	d121      	bne.n	80054a0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005460:	4613      	mov	r3, r2
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	440b      	add	r3, r1
 800546a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800546e:	2201      	movs	r2, #1
 8005470:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10a      	bne.n	80054a0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005498:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800549c:	6053      	str	r3, [r2, #4]
            break;
 800549e:	e008      	b.n	80054b2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	3301      	adds	r3, #1
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	791b      	ldrb	r3, [r3, #4]
 80054aa:	461a      	mov	r2, r3
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d3b3      	bcc.n	800541a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695a      	ldr	r2, [r3, #20]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80054c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f003 f84a 	bl	8008560 <USB_ReadInterrupts>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d6:	d10a      	bne.n	80054ee <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f005 fc93 	bl	800ae04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	695a      	ldr	r2, [r3, #20]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80054ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f003 f834 	bl	8008560 <USB_ReadInterrupts>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d115      	bne.n	800552e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f005 fc83 	bl	800ae20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6859      	ldr	r1, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
 800552a:	e000      	b.n	800552e <HAL_PCD_IRQHandler+0x93c>
      return;
 800552c:	bf00      	nop
    }
  }
}
 800552e:	3734      	adds	r7, #52	; 0x34
 8005530:	46bd      	mov	sp, r7
 8005532:	bd90      	pop	{r4, r7, pc}

08005534 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005546:	2b01      	cmp	r3, #1
 8005548:	d101      	bne.n	800554e <HAL_PCD_SetAddress+0x1a>
 800554a:	2302      	movs	r3, #2
 800554c:	e012      	b.n	8005574 <HAL_PCD_SetAddress+0x40>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	78fa      	ldrb	r2, [r7, #3]
 800555a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	78fa      	ldrb	r2, [r7, #3]
 8005562:	4611      	mov	r1, r2
 8005564:	4618      	mov	r0, r3
 8005566:	f002 ff93 	bl	8008490 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	4608      	mov	r0, r1
 8005586:	4611      	mov	r1, r2
 8005588:	461a      	mov	r2, r3
 800558a:	4603      	mov	r3, r0
 800558c:	70fb      	strb	r3, [r7, #3]
 800558e:	460b      	mov	r3, r1
 8005590:	803b      	strh	r3, [r7, #0]
 8005592:	4613      	mov	r3, r2
 8005594:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800559a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	da0f      	bge.n	80055c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055a2:	78fb      	ldrb	r3, [r7, #3]
 80055a4:	f003 020f 	and.w	r2, r3, #15
 80055a8:	4613      	mov	r3, r2
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	4413      	add	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	3310      	adds	r3, #16
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	4413      	add	r3, r2
 80055b6:	3304      	adds	r3, #4
 80055b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	705a      	strb	r2, [r3, #1]
 80055c0:	e00f      	b.n	80055e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055c2:	78fb      	ldrb	r3, [r7, #3]
 80055c4:	f003 020f 	and.w	r2, r3, #15
 80055c8:	4613      	mov	r3, r2
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	4413      	add	r3, r2
 80055d8:	3304      	adds	r3, #4
 80055da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80055ee:	883a      	ldrh	r2, [r7, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	78ba      	ldrb	r2, [r7, #2]
 80055f8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	785b      	ldrb	r3, [r3, #1]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d004      	beq.n	800560c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	b29a      	uxth	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800560c:	78bb      	ldrb	r3, [r7, #2]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d102      	bne.n	8005618 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_PCD_EP_Open+0xaa>
 8005622:	2302      	movs	r3, #2
 8005624:	e00e      	b.n	8005644 <HAL_PCD_EP_Open+0xc8>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68f9      	ldr	r1, [r7, #12]
 8005634:	4618      	mov	r0, r3
 8005636:	f002 f91b 	bl	8007870 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8005642:	7afb      	ldrb	r3, [r7, #11]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800565c:	2b00      	cmp	r3, #0
 800565e:	da0f      	bge.n	8005680 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	f003 020f 	and.w	r2, r3, #15
 8005666:	4613      	mov	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	3310      	adds	r3, #16
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	4413      	add	r3, r2
 8005674:	3304      	adds	r3, #4
 8005676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	705a      	strb	r2, [r3, #1]
 800567e:	e00f      	b.n	80056a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	f003 020f 	and.w	r2, r3, #15
 8005686:	4613      	mov	r3, r2
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	4413      	add	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	4413      	add	r3, r2
 8005696:	3304      	adds	r3, #4
 8005698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d101      	bne.n	80056ba <HAL_PCD_EP_Close+0x6e>
 80056b6:	2302      	movs	r3, #2
 80056b8:	e00e      	b.n	80056d8 <HAL_PCD_EP_Close+0x8c>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68f9      	ldr	r1, [r7, #12]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f002 f959 	bl	8007980 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	607a      	str	r2, [r7, #4]
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	460b      	mov	r3, r1
 80056ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056f0:	7afb      	ldrb	r3, [r7, #11]
 80056f2:	f003 020f 	and.w	r2, r3, #15
 80056f6:	4613      	mov	r3, r2
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4413      	add	r3, r2
 8005706:	3304      	adds	r3, #4
 8005708:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2200      	movs	r2, #0
 800571a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2200      	movs	r2, #0
 8005720:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005722:	7afb      	ldrb	r3, [r7, #11]
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	b2da      	uxtb	r2, r3
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	799b      	ldrb	r3, [r3, #6]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d102      	bne.n	800573c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	799b      	ldrb	r3, [r3, #6]
 8005744:	461a      	mov	r2, r3
 8005746:	6979      	ldr	r1, [r7, #20]
 8005748:	f002 f9f6 	bl	8007b38 <USB_EPStartXfer>

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	460b      	mov	r3, r1
 8005760:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005762:	78fb      	ldrb	r3, [r7, #3]
 8005764:	f003 020f 	and.w	r2, r3, #15
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8005778:	681b      	ldr	r3, [r3, #0]
}
 800577a:	4618      	mov	r0, r3
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b086      	sub	sp, #24
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
 8005792:	460b      	mov	r3, r1
 8005794:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005796:	7afb      	ldrb	r3, [r7, #11]
 8005798:	f003 020f 	and.w	r2, r3, #15
 800579c:	4613      	mov	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	3310      	adds	r3, #16
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4413      	add	r3, r2
 80057aa:	3304      	adds	r3, #4
 80057ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2200      	movs	r2, #0
 80057be:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2201      	movs	r2, #1
 80057c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057c6:	7afb      	ldrb	r3, [r7, #11]
 80057c8:	f003 030f 	and.w	r3, r3, #15
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	799b      	ldrb	r3, [r3, #6]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d102      	bne.n	80057e0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6818      	ldr	r0, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	799b      	ldrb	r3, [r3, #6]
 80057e8:	461a      	mov	r2, r3
 80057ea:	6979      	ldr	r1, [r7, #20]
 80057ec:	f002 f9a4 	bl	8007b38 <USB_EPStartXfer>

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	460b      	mov	r3, r1
 8005804:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005806:	78fb      	ldrb	r3, [r7, #3]
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	7912      	ldrb	r2, [r2, #4]
 8005810:	4293      	cmp	r3, r2
 8005812:	d901      	bls.n	8005818 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e04f      	b.n	80058b8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005818:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800581c:	2b00      	cmp	r3, #0
 800581e:	da0f      	bge.n	8005840 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	f003 020f 	and.w	r2, r3, #15
 8005826:	4613      	mov	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	4413      	add	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	3310      	adds	r3, #16
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	4413      	add	r3, r2
 8005834:	3304      	adds	r3, #4
 8005836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	705a      	strb	r2, [r3, #1]
 800583e:	e00d      	b.n	800585c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005840:	78fa      	ldrb	r2, [r7, #3]
 8005842:	4613      	mov	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	3304      	adds	r3, #4
 8005854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005862:	78fb      	ldrb	r3, [r7, #3]
 8005864:	f003 030f 	and.w	r3, r3, #15
 8005868:	b2da      	uxtb	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_PCD_EP_SetStall+0x82>
 8005878:	2302      	movs	r3, #2
 800587a:	e01d      	b.n	80058b8 <HAL_PCD_EP_SetStall+0xbe>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68f9      	ldr	r1, [r7, #12]
 800588a:	4618      	mov	r0, r3
 800588c:	f002 fd2c 	bl	80082e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	7999      	ldrb	r1, [r3, #6]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80058a8:	461a      	mov	r2, r3
 80058aa:	f002 ff1d 	bl	80086e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	f003 030f 	and.w	r3, r3, #15
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	7912      	ldrb	r2, [r2, #4]
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d901      	bls.n	80058de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e042      	b.n	8005964 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	da0f      	bge.n	8005906 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058e6:	78fb      	ldrb	r3, [r7, #3]
 80058e8:	f003 020f 	and.w	r2, r3, #15
 80058ec:	4613      	mov	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	3310      	adds	r3, #16
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	4413      	add	r3, r2
 80058fa:	3304      	adds	r3, #4
 80058fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	705a      	strb	r2, [r3, #1]
 8005904:	e00f      	b.n	8005926 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	f003 020f 	and.w	r2, r3, #15
 800590c:	4613      	mov	r3, r2
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	4413      	add	r3, r2
 800591c:	3304      	adds	r3, #4
 800591e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800592c:	78fb      	ldrb	r3, [r7, #3]
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	b2da      	uxtb	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800593e:	2b01      	cmp	r3, #1
 8005940:	d101      	bne.n	8005946 <HAL_PCD_EP_ClrStall+0x86>
 8005942:	2302      	movs	r3, #2
 8005944:	e00e      	b.n	8005964 <HAL_PCD_EP_ClrStall+0xa4>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68f9      	ldr	r1, [r7, #12]
 8005954:	4618      	mov	r0, r3
 8005956:	f002 fd35 	bl	80083c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	460b      	mov	r3, r1
 8005976:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800597c:	2b00      	cmp	r3, #0
 800597e:	da0c      	bge.n	800599a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	f003 020f 	and.w	r2, r3, #15
 8005986:	4613      	mov	r3, r2
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	3310      	adds	r3, #16
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	4413      	add	r3, r2
 8005994:	3304      	adds	r3, #4
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	e00c      	b.n	80059b4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800599a:	78fb      	ldrb	r3, [r7, #3]
 800599c:	f003 020f 	and.w	r2, r3, #15
 80059a0:	4613      	mov	r3, r2
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	4413      	add	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	4413      	add	r3, r2
 80059b0:	3304      	adds	r3, #4
 80059b2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68f9      	ldr	r1, [r7, #12]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f002 fb54 	bl	8008068 <USB_EPStopXfer>
 80059c0:	4603      	mov	r3, r0
 80059c2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80059c4:	7afb      	ldrb	r3, [r7, #11]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b08a      	sub	sp, #40	; 0x28
 80059d2:	af02      	add	r7, sp, #8
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	4613      	mov	r3, r2
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	4413      	add	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	3310      	adds	r3, #16
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	4413      	add	r3, r2
 80059f2:	3304      	adds	r3, #4
 80059f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	695a      	ldr	r2, [r3, #20]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d901      	bls.n	8005a06 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e06b      	b.n	8005ade <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	691a      	ldr	r2, [r3, #16]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d902      	bls.n	8005a22 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	3303      	adds	r3, #3
 8005a26:	089b      	lsrs	r3, r3, #2
 8005a28:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a2a:	e02a      	b.n	8005a82 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	69fa      	ldr	r2, [r7, #28]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d902      	bls.n	8005a48 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	3303      	adds	r3, #3
 8005a4c:	089b      	lsrs	r3, r3, #2
 8005a4e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	68d9      	ldr	r1, [r3, #12]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	4603      	mov	r3, r0
 8005a64:	6978      	ldr	r0, [r7, #20]
 8005a66:	f002 fba9 	bl	80081bc <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	441a      	add	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	695a      	ldr	r2, [r3, #20]
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	441a      	add	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d809      	bhi.n	8005aac <PCD_WriteEmptyTxFifo+0xde>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	695a      	ldr	r2, [r3, #20]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d203      	bcs.n	8005aac <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1bf      	bne.n	8005a2c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d811      	bhi.n	8005adc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	2201      	movs	r2, #1
 8005ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	6939      	ldr	r1, [r7, #16]
 8005ad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad8:	4013      	ands	r3, r2
 8005ada:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3720      	adds	r7, #32
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	333c      	adds	r3, #60	; 0x3c
 8005b00:	3304      	adds	r3, #4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	799b      	ldrb	r3, [r3, #6]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d17b      	bne.n	8005c16 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f003 0308 	and.w	r3, r3, #8
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d015      	beq.n	8005b54 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	4a61      	ldr	r2, [pc, #388]	; (8005cb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	f240 80b9 	bls.w	8005ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 80b3 	beq.w	8005ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b50:	6093      	str	r3, [r2, #8]
 8005b52:	e0a7      	b.n	8005ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d009      	beq.n	8005b72 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	2320      	movs	r3, #32
 8005b6e:	6093      	str	r3, [r2, #8]
 8005b70:	e098      	b.n	8005ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f040 8093 	bne.w	8005ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	4a4b      	ldr	r2, [pc, #300]	; (8005cb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d90f      	bls.n	8005ba6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00a      	beq.n	8005ba6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ba2:	6093      	str	r3, [r2, #8]
 8005ba4:	e07e      	b.n	8005ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3304      	adds	r3, #4
 8005bba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a1a      	ldr	r2, [r3, #32]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	0159      	lsls	r1, r3, #5
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	440b      	add	r3, r1
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bd2:	1ad2      	subs	r2, r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d114      	bne.n	8005c08 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	f002 fd78 	bl	80086e8 <USB_EP0_OutStart>
 8005bf8:	e006      	b.n	8005c08 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	441a      	add	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f005 f834 	bl	800ac7c <HAL_PCD_DataOutStageCallback>
 8005c14:	e046      	b.n	8005ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	4a26      	ldr	r2, [pc, #152]	; (8005cb4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d124      	bne.n	8005c68 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00a      	beq.n	8005c3e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c34:	461a      	mov	r2, r3
 8005c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c3a:	6093      	str	r3, [r2, #8]
 8005c3c:	e032      	b.n	8005ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d008      	beq.n	8005c5a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c54:	461a      	mov	r2, r3
 8005c56:	2320      	movs	r3, #32
 8005c58:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	4619      	mov	r1, r3
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f005 f80b 	bl	800ac7c <HAL_PCD_DataOutStageCallback>
 8005c66:	e01d      	b.n	8005ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d114      	bne.n	8005c98 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005c6e:	6879      	ldr	r1, [r7, #4]
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	4613      	mov	r3, r2
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	4413      	add	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	440b      	add	r3, r1
 8005c7c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d108      	bne.n	8005c98 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005c90:	461a      	mov	r2, r3
 8005c92:	2100      	movs	r1, #0
 8005c94:	f002 fd28 	bl	80086e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f004 ffec 	bl	800ac7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3720      	adds	r7, #32
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	4f54300a 	.word	0x4f54300a
 8005cb4:	4f54310a 	.word	0x4f54310a

08005cb8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	333c      	adds	r3, #60	; 0x3c
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4a15      	ldr	r2, [pc, #84]	; (8005d40 <PCD_EP_OutSetupPacket_int+0x88>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d90e      	bls.n	8005d0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d009      	beq.n	8005d0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d04:	461a      	mov	r2, r3
 8005d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f004 ffa3 	bl	800ac58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4a0a      	ldr	r2, [pc, #40]	; (8005d40 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d90c      	bls.n	8005d34 <PCD_EP_OutSetupPacket_int+0x7c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	799b      	ldrb	r3, [r3, #6]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d108      	bne.n	8005d34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	2101      	movs	r1, #1
 8005d30:	f002 fcda 	bl	80086e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	4f54300a 	.word	0x4f54300a

08005d44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
 8005d50:	4613      	mov	r3, r2
 8005d52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d107      	bne.n	8005d72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d62:	883b      	ldrh	r3, [r7, #0]
 8005d64:	0419      	lsls	r1, r3, #16
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d70:	e028      	b.n	8005dc4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	0c1b      	lsrs	r3, r3, #16
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d80:	2300      	movs	r3, #0
 8005d82:	73fb      	strb	r3, [r7, #15]
 8005d84:	e00d      	b.n	8005da2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	3340      	adds	r3, #64	; 0x40
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	0c1b      	lsrs	r3, r3, #16
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	4413      	add	r3, r2
 8005d9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	73fb      	strb	r3, [r7, #15]
 8005da2:	7bfa      	ldrb	r2, [r7, #15]
 8005da4:	78fb      	ldrb	r3, [r7, #3]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d3ec      	bcc.n	8005d86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005dac:	883b      	ldrh	r3, [r7, #0]
 8005dae:	0418      	lsls	r0, r3, #16
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6819      	ldr	r1, [r3, #0]
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	4302      	orrs	r2, r0
 8005dbc:	3340      	adds	r3, #64	; 0x40
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	460b      	mov	r3, r1
 8005ddc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	887a      	ldrh	r2, [r7, #2]
 8005de4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e267      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d075      	beq.n	8005f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e2a:	4b88      	ldr	r3, [pc, #544]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 030c 	and.w	r3, r3, #12
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d00c      	beq.n	8005e50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e36:	4b85      	ldr	r3, [pc, #532]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d112      	bne.n	8005e68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e42:	4b82      	ldr	r3, [pc, #520]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e4e:	d10b      	bne.n	8005e68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e50:	4b7e      	ldr	r3, [pc, #504]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d05b      	beq.n	8005f14 <HAL_RCC_OscConfig+0x108>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d157      	bne.n	8005f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e242      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e70:	d106      	bne.n	8005e80 <HAL_RCC_OscConfig+0x74>
 8005e72:	4b76      	ldr	r3, [pc, #472]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a75      	ldr	r2, [pc, #468]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e01d      	b.n	8005ebc <HAL_RCC_OscConfig+0xb0>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e88:	d10c      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x98>
 8005e8a:	4b70      	ldr	r3, [pc, #448]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a6f      	ldr	r2, [pc, #444]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	4b6d      	ldr	r3, [pc, #436]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a6c      	ldr	r2, [pc, #432]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e00b      	b.n	8005ebc <HAL_RCC_OscConfig+0xb0>
 8005ea4:	4b69      	ldr	r3, [pc, #420]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a68      	ldr	r2, [pc, #416]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	4b66      	ldr	r3, [pc, #408]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a65      	ldr	r2, [pc, #404]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d013      	beq.n	8005eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec4:	f7fd fa42 	bl	800334c <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ecc:	f7fd fa3e 	bl	800334c <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b64      	cmp	r3, #100	; 0x64
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e207      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ede:	4b5b      	ldr	r3, [pc, #364]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d0f0      	beq.n	8005ecc <HAL_RCC_OscConfig+0xc0>
 8005eea:	e014      	b.n	8005f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eec:	f7fd fa2e 	bl	800334c <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ef2:	e008      	b.n	8005f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ef4:	f7fd fa2a 	bl	800334c <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b64      	cmp	r3, #100	; 0x64
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e1f3      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f06:	4b51      	ldr	r3, [pc, #324]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1f0      	bne.n	8005ef4 <HAL_RCC_OscConfig+0xe8>
 8005f12:	e000      	b.n	8005f16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d063      	beq.n	8005fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f22:	4b4a      	ldr	r3, [pc, #296]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 030c 	and.w	r3, r3, #12
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00b      	beq.n	8005f46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f2e:	4b47      	ldr	r3, [pc, #284]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d11c      	bne.n	8005f74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f3a:	4b44      	ldr	r3, [pc, #272]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d116      	bne.n	8005f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f46:	4b41      	ldr	r3, [pc, #260]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <HAL_RCC_OscConfig+0x152>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d001      	beq.n	8005f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e1c7      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f5e:	4b3b      	ldr	r3, [pc, #236]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	4937      	ldr	r1, [pc, #220]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f72:	e03a      	b.n	8005fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d020      	beq.n	8005fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f7c:	4b34      	ldr	r3, [pc, #208]	; (8006050 <HAL_RCC_OscConfig+0x244>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f82:	f7fd f9e3 	bl	800334c <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f8a:	f7fd f9df 	bl	800334c <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e1a8      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f9c:	4b2b      	ldr	r3, [pc, #172]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0f0      	beq.n	8005f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa8:	4b28      	ldr	r3, [pc, #160]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	4925      	ldr	r1, [pc, #148]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	600b      	str	r3, [r1, #0]
 8005fbc:	e015      	b.n	8005fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fbe:	4b24      	ldr	r3, [pc, #144]	; (8006050 <HAL_RCC_OscConfig+0x244>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc4:	f7fd f9c2 	bl	800334c <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fcc:	f7fd f9be 	bl	800334c <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e187      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fde:	4b1b      	ldr	r3, [pc, #108]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f0      	bne.n	8005fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d036      	beq.n	8006064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d016      	beq.n	800602c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ffe:	4b15      	ldr	r3, [pc, #84]	; (8006054 <HAL_RCC_OscConfig+0x248>)
 8006000:	2201      	movs	r2, #1
 8006002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006004:	f7fd f9a2 	bl	800334c <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800600c:	f7fd f99e 	bl	800334c <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e167      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800601e:	4b0b      	ldr	r3, [pc, #44]	; (800604c <HAL_RCC_OscConfig+0x240>)
 8006020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0f0      	beq.n	800600c <HAL_RCC_OscConfig+0x200>
 800602a:	e01b      	b.n	8006064 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800602c:	4b09      	ldr	r3, [pc, #36]	; (8006054 <HAL_RCC_OscConfig+0x248>)
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006032:	f7fd f98b 	bl	800334c <HAL_GetTick>
 8006036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006038:	e00e      	b.n	8006058 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800603a:	f7fd f987 	bl	800334c <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d907      	bls.n	8006058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e150      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
 800604c:	40023800 	.word	0x40023800
 8006050:	42470000 	.word	0x42470000
 8006054:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006058:	4b88      	ldr	r3, [pc, #544]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800605a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1ea      	bne.n	800603a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 8097 	beq.w	80061a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006072:	2300      	movs	r3, #0
 8006074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006076:	4b81      	ldr	r3, [pc, #516]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10f      	bne.n	80060a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]
 8006086:	4b7d      	ldr	r3, [pc, #500]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	4a7c      	ldr	r2, [pc, #496]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800608c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006090:	6413      	str	r3, [r2, #64]	; 0x40
 8006092:	4b7a      	ldr	r3, [pc, #488]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609a:	60bb      	str	r3, [r7, #8]
 800609c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800609e:	2301      	movs	r3, #1
 80060a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a2:	4b77      	ldr	r3, [pc, #476]	; (8006280 <HAL_RCC_OscConfig+0x474>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d118      	bne.n	80060e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060ae:	4b74      	ldr	r3, [pc, #464]	; (8006280 <HAL_RCC_OscConfig+0x474>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a73      	ldr	r2, [pc, #460]	; (8006280 <HAL_RCC_OscConfig+0x474>)
 80060b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060ba:	f7fd f947 	bl	800334c <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c2:	f7fd f943 	bl	800334c <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e10c      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d4:	4b6a      	ldr	r3, [pc, #424]	; (8006280 <HAL_RCC_OscConfig+0x474>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0f0      	beq.n	80060c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d106      	bne.n	80060f6 <HAL_RCC_OscConfig+0x2ea>
 80060e8:	4b64      	ldr	r3, [pc, #400]	; (800627c <HAL_RCC_OscConfig+0x470>)
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	4a63      	ldr	r2, [pc, #396]	; (800627c <HAL_RCC_OscConfig+0x470>)
 80060ee:	f043 0301 	orr.w	r3, r3, #1
 80060f2:	6713      	str	r3, [r2, #112]	; 0x70
 80060f4:	e01c      	b.n	8006130 <HAL_RCC_OscConfig+0x324>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	2b05      	cmp	r3, #5
 80060fc:	d10c      	bne.n	8006118 <HAL_RCC_OscConfig+0x30c>
 80060fe:	4b5f      	ldr	r3, [pc, #380]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006102:	4a5e      	ldr	r2, [pc, #376]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006104:	f043 0304 	orr.w	r3, r3, #4
 8006108:	6713      	str	r3, [r2, #112]	; 0x70
 800610a:	4b5c      	ldr	r3, [pc, #368]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800610c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610e:	4a5b      	ldr	r2, [pc, #364]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006110:	f043 0301 	orr.w	r3, r3, #1
 8006114:	6713      	str	r3, [r2, #112]	; 0x70
 8006116:	e00b      	b.n	8006130 <HAL_RCC_OscConfig+0x324>
 8006118:	4b58      	ldr	r3, [pc, #352]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800611a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611c:	4a57      	ldr	r2, [pc, #348]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800611e:	f023 0301 	bic.w	r3, r3, #1
 8006122:	6713      	str	r3, [r2, #112]	; 0x70
 8006124:	4b55      	ldr	r3, [pc, #340]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006128:	4a54      	ldr	r2, [pc, #336]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800612a:	f023 0304 	bic.w	r3, r3, #4
 800612e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d015      	beq.n	8006164 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006138:	f7fd f908 	bl	800334c <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800613e:	e00a      	b.n	8006156 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006140:	f7fd f904 	bl	800334c <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	f241 3288 	movw	r2, #5000	; 0x1388
 800614e:	4293      	cmp	r3, r2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e0cb      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006156:	4b49      	ldr	r3, [pc, #292]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0ee      	beq.n	8006140 <HAL_RCC_OscConfig+0x334>
 8006162:	e014      	b.n	800618e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006164:	f7fd f8f2 	bl	800334c <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800616a:	e00a      	b.n	8006182 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800616c:	f7fd f8ee 	bl	800334c <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	f241 3288 	movw	r2, #5000	; 0x1388
 800617a:	4293      	cmp	r3, r2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e0b5      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006182:	4b3e      	ldr	r3, [pc, #248]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1ee      	bne.n	800616c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800618e:	7dfb      	ldrb	r3, [r7, #23]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d105      	bne.n	80061a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006194:	4b39      	ldr	r3, [pc, #228]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	4a38      	ldr	r2, [pc, #224]	; (800627c <HAL_RCC_OscConfig+0x470>)
 800619a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800619e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80a1 	beq.w	80062ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061aa:	4b34      	ldr	r3, [pc, #208]	; (800627c <HAL_RCC_OscConfig+0x470>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 030c 	and.w	r3, r3, #12
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d05c      	beq.n	8006270 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d141      	bne.n	8006242 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061be:	4b31      	ldr	r3, [pc, #196]	; (8006284 <HAL_RCC_OscConfig+0x478>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c4:	f7fd f8c2 	bl	800334c <HAL_GetTick>
 80061c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061cc:	f7fd f8be 	bl	800334c <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e087      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061de:	4b27      	ldr	r3, [pc, #156]	; (800627c <HAL_RCC_OscConfig+0x470>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1f0      	bne.n	80061cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	69da      	ldr	r2, [r3, #28]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	019b      	lsls	r3, r3, #6
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	085b      	lsrs	r3, r3, #1
 8006202:	3b01      	subs	r3, #1
 8006204:	041b      	lsls	r3, r3, #16
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620c:	061b      	lsls	r3, r3, #24
 800620e:	491b      	ldr	r1, [pc, #108]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006210:	4313      	orrs	r3, r2
 8006212:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006214:	4b1b      	ldr	r3, [pc, #108]	; (8006284 <HAL_RCC_OscConfig+0x478>)
 8006216:	2201      	movs	r2, #1
 8006218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621a:	f7fd f897 	bl	800334c <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006220:	e008      	b.n	8006234 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006222:	f7fd f893 	bl	800334c <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d901      	bls.n	8006234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e05c      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006234:	4b11      	ldr	r3, [pc, #68]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0f0      	beq.n	8006222 <HAL_RCC_OscConfig+0x416>
 8006240:	e054      	b.n	80062ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006242:	4b10      	ldr	r3, [pc, #64]	; (8006284 <HAL_RCC_OscConfig+0x478>)
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006248:	f7fd f880 	bl	800334c <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006250:	f7fd f87c 	bl	800334c <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e045      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006262:	4b06      	ldr	r3, [pc, #24]	; (800627c <HAL_RCC_OscConfig+0x470>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1f0      	bne.n	8006250 <HAL_RCC_OscConfig+0x444>
 800626e:	e03d      	b.n	80062ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d107      	bne.n	8006288 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e038      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
 800627c:	40023800 	.word	0x40023800
 8006280:	40007000 	.word	0x40007000
 8006284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006288:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <HAL_RCC_OscConfig+0x4ec>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d028      	beq.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d121      	bne.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d11a      	bne.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062b8:	4013      	ands	r3, r2
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d111      	bne.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ce:	085b      	lsrs	r3, r3, #1
 80062d0:	3b01      	subs	r3, #1
 80062d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d107      	bne.n	80062e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d001      	beq.n	80062ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e000      	b.n	80062ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40023800 	.word	0x40023800

080062fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e0cc      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006310:	4b68      	ldr	r3, [pc, #416]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d90c      	bls.n	8006338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800631e:	4b65      	ldr	r3, [pc, #404]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006326:	4b63      	ldr	r3, [pc, #396]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d001      	beq.n	8006338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e0b8      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d020      	beq.n	8006386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006350:	4b59      	ldr	r3, [pc, #356]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	4a58      	ldr	r2, [pc, #352]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006356:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800635a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006368:	4b53      	ldr	r3, [pc, #332]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	4a52      	ldr	r2, [pc, #328]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006374:	4b50      	ldr	r3, [pc, #320]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	494d      	ldr	r1, [pc, #308]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	4313      	orrs	r3, r2
 8006384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d044      	beq.n	800641c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d107      	bne.n	80063aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800639a:	4b47      	ldr	r3, [pc, #284]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d119      	bne.n	80063da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e07f      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d003      	beq.n	80063ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d107      	bne.n	80063ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ba:	4b3f      	ldr	r3, [pc, #252]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d109      	bne.n	80063da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e06f      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ca:	4b3b      	ldr	r3, [pc, #236]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e067      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063da:	4b37      	ldr	r3, [pc, #220]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f023 0203 	bic.w	r2, r3, #3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	4934      	ldr	r1, [pc, #208]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063ec:	f7fc ffae 	bl	800334c <HAL_GetTick>
 80063f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f2:	e00a      	b.n	800640a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063f4:	f7fc ffaa 	bl	800334c <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006402:	4293      	cmp	r3, r2
 8006404:	d901      	bls.n	800640a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e04f      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800640a:	4b2b      	ldr	r3, [pc, #172]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 020c 	and.w	r2, r3, #12
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	429a      	cmp	r2, r3
 800641a:	d1eb      	bne.n	80063f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800641c:	4b25      	ldr	r3, [pc, #148]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d20c      	bcs.n	8006444 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800642a:	4b22      	ldr	r3, [pc, #136]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006432:	4b20      	ldr	r3, [pc, #128]	; (80064b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	429a      	cmp	r2, r3
 800643e:	d001      	beq.n	8006444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e032      	b.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	d008      	beq.n	8006462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006450:	4b19      	ldr	r3, [pc, #100]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	4916      	ldr	r1, [pc, #88]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	4313      	orrs	r3, r2
 8006460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0308 	and.w	r3, r3, #8
 800646a:	2b00      	cmp	r3, #0
 800646c:	d009      	beq.n	8006482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800646e:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	00db      	lsls	r3, r3, #3
 800647c:	490e      	ldr	r1, [pc, #56]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800647e:	4313      	orrs	r3, r2
 8006480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006482:	f000 f821 	bl	80064c8 <HAL_RCC_GetSysClockFreq>
 8006486:	4602      	mov	r2, r0
 8006488:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	490a      	ldr	r1, [pc, #40]	; (80064bc <HAL_RCC_ClockConfig+0x1c0>)
 8006494:	5ccb      	ldrb	r3, [r1, r3]
 8006496:	fa22 f303 	lsr.w	r3, r2, r3
 800649a:	4a09      	ldr	r2, [pc, #36]	; (80064c0 <HAL_RCC_ClockConfig+0x1c4>)
 800649c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800649e:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <HAL_RCC_ClockConfig+0x1c8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fc ff0e 	bl	80032c4 <HAL_InitTick>

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40023c00 	.word	0x40023c00
 80064b8:	40023800 	.word	0x40023800
 80064bc:	0800dd7c 	.word	0x0800dd7c
 80064c0:	20000014 	.word	0x20000014
 80064c4:	20000018 	.word	0x20000018

080064c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064cc:	b094      	sub	sp, #80	; 0x50
 80064ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	647b      	str	r3, [r7, #68]	; 0x44
 80064d4:	2300      	movs	r3, #0
 80064d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064d8:	2300      	movs	r3, #0
 80064da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064e0:	4b79      	ldr	r3, [pc, #484]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f003 030c 	and.w	r3, r3, #12
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d00d      	beq.n	8006508 <HAL_RCC_GetSysClockFreq+0x40>
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	f200 80e1 	bhi.w	80066b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <HAL_RCC_GetSysClockFreq+0x34>
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d003      	beq.n	8006502 <HAL_RCC_GetSysClockFreq+0x3a>
 80064fa:	e0db      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064fc:	4b73      	ldr	r3, [pc, #460]	; (80066cc <HAL_RCC_GetSysClockFreq+0x204>)
 80064fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006500:	e0db      	b.n	80066ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006502:	4b73      	ldr	r3, [pc, #460]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006504:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006506:	e0d8      	b.n	80066ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006508:	4b6f      	ldr	r3, [pc, #444]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006510:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006512:	4b6d      	ldr	r3, [pc, #436]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d063      	beq.n	80065e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800651e:	4b6a      	ldr	r3, [pc, #424]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	099b      	lsrs	r3, r3, #6
 8006524:	2200      	movs	r2, #0
 8006526:	63bb      	str	r3, [r7, #56]	; 0x38
 8006528:	63fa      	str	r2, [r7, #60]	; 0x3c
 800652a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006530:	633b      	str	r3, [r7, #48]	; 0x30
 8006532:	2300      	movs	r3, #0
 8006534:	637b      	str	r3, [r7, #52]	; 0x34
 8006536:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800653a:	4622      	mov	r2, r4
 800653c:	462b      	mov	r3, r5
 800653e:	f04f 0000 	mov.w	r0, #0
 8006542:	f04f 0100 	mov.w	r1, #0
 8006546:	0159      	lsls	r1, r3, #5
 8006548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800654c:	0150      	lsls	r0, r2, #5
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	4621      	mov	r1, r4
 8006554:	1a51      	subs	r1, r2, r1
 8006556:	6139      	str	r1, [r7, #16]
 8006558:	4629      	mov	r1, r5
 800655a:	eb63 0301 	sbc.w	r3, r3, r1
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	f04f 0300 	mov.w	r3, #0
 8006568:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800656c:	4659      	mov	r1, fp
 800656e:	018b      	lsls	r3, r1, #6
 8006570:	4651      	mov	r1, sl
 8006572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006576:	4651      	mov	r1, sl
 8006578:	018a      	lsls	r2, r1, #6
 800657a:	4651      	mov	r1, sl
 800657c:	ebb2 0801 	subs.w	r8, r2, r1
 8006580:	4659      	mov	r1, fp
 8006582:	eb63 0901 	sbc.w	r9, r3, r1
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800659a:	4690      	mov	r8, r2
 800659c:	4699      	mov	r9, r3
 800659e:	4623      	mov	r3, r4
 80065a0:	eb18 0303 	adds.w	r3, r8, r3
 80065a4:	60bb      	str	r3, [r7, #8]
 80065a6:	462b      	mov	r3, r5
 80065a8:	eb49 0303 	adc.w	r3, r9, r3
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	f04f 0200 	mov.w	r2, #0
 80065b2:	f04f 0300 	mov.w	r3, #0
 80065b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80065ba:	4629      	mov	r1, r5
 80065bc:	024b      	lsls	r3, r1, #9
 80065be:	4621      	mov	r1, r4
 80065c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065c4:	4621      	mov	r1, r4
 80065c6:	024a      	lsls	r2, r1, #9
 80065c8:	4610      	mov	r0, r2
 80065ca:	4619      	mov	r1, r3
 80065cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ce:	2200      	movs	r2, #0
 80065d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065d8:	f7fa fa3a 	bl	8000a50 <__aeabi_uldivmod>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4613      	mov	r3, r2
 80065e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065e4:	e058      	b.n	8006698 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065e6:	4b38      	ldr	r3, [pc, #224]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	099b      	lsrs	r3, r3, #6
 80065ec:	2200      	movs	r2, #0
 80065ee:	4618      	mov	r0, r3
 80065f0:	4611      	mov	r1, r2
 80065f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065f6:	623b      	str	r3, [r7, #32]
 80065f8:	2300      	movs	r3, #0
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
 80065fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006600:	4642      	mov	r2, r8
 8006602:	464b      	mov	r3, r9
 8006604:	f04f 0000 	mov.w	r0, #0
 8006608:	f04f 0100 	mov.w	r1, #0
 800660c:	0159      	lsls	r1, r3, #5
 800660e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006612:	0150      	lsls	r0, r2, #5
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4641      	mov	r1, r8
 800661a:	ebb2 0a01 	subs.w	sl, r2, r1
 800661e:	4649      	mov	r1, r9
 8006620:	eb63 0b01 	sbc.w	fp, r3, r1
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	f04f 0300 	mov.w	r3, #0
 800662c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006630:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006634:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006638:	ebb2 040a 	subs.w	r4, r2, sl
 800663c:	eb63 050b 	sbc.w	r5, r3, fp
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	f04f 0300 	mov.w	r3, #0
 8006648:	00eb      	lsls	r3, r5, #3
 800664a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800664e:	00e2      	lsls	r2, r4, #3
 8006650:	4614      	mov	r4, r2
 8006652:	461d      	mov	r5, r3
 8006654:	4643      	mov	r3, r8
 8006656:	18e3      	adds	r3, r4, r3
 8006658:	603b      	str	r3, [r7, #0]
 800665a:	464b      	mov	r3, r9
 800665c:	eb45 0303 	adc.w	r3, r5, r3
 8006660:	607b      	str	r3, [r7, #4]
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	f04f 0300 	mov.w	r3, #0
 800666a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800666e:	4629      	mov	r1, r5
 8006670:	028b      	lsls	r3, r1, #10
 8006672:	4621      	mov	r1, r4
 8006674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006678:	4621      	mov	r1, r4
 800667a:	028a      	lsls	r2, r1, #10
 800667c:	4610      	mov	r0, r2
 800667e:	4619      	mov	r1, r3
 8006680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006682:	2200      	movs	r2, #0
 8006684:	61bb      	str	r3, [r7, #24]
 8006686:	61fa      	str	r2, [r7, #28]
 8006688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800668c:	f7fa f9e0 	bl	8000a50 <__aeabi_uldivmod>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4613      	mov	r3, r2
 8006696:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006698:	4b0b      	ldr	r3, [pc, #44]	; (80066c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	0c1b      	lsrs	r3, r3, #16
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	3301      	adds	r3, #1
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80066a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066b2:	e002      	b.n	80066ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066b4:	4b05      	ldr	r3, [pc, #20]	; (80066cc <HAL_RCC_GetSysClockFreq+0x204>)
 80066b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3750      	adds	r7, #80	; 0x50
 80066c0:	46bd      	mov	sp, r7
 80066c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066c6:	bf00      	nop
 80066c8:	40023800 	.word	0x40023800
 80066cc:	00f42400 	.word	0x00f42400
 80066d0:	007a1200 	.word	0x007a1200

080066d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066d8:	4b03      	ldr	r3, [pc, #12]	; (80066e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80066da:	681b      	ldr	r3, [r3, #0]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	20000014 	.word	0x20000014

080066ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066f0:	f7ff fff0 	bl	80066d4 <HAL_RCC_GetHCLKFreq>
 80066f4:	4602      	mov	r2, r0
 80066f6:	4b05      	ldr	r3, [pc, #20]	; (800670c <HAL_RCC_GetPCLK1Freq+0x20>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	0a9b      	lsrs	r3, r3, #10
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	4903      	ldr	r1, [pc, #12]	; (8006710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006702:	5ccb      	ldrb	r3, [r1, r3]
 8006704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006708:	4618      	mov	r0, r3
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40023800 	.word	0x40023800
 8006710:	0800dd8c 	.word	0x0800dd8c

08006714 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e01c      	b.n	8006760 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	795b      	ldrb	r3, [r3, #5]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d105      	bne.n	800673c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7fc fc48 	bl	8002fcc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 0204 	orr.w	r2, r2, #4
 8006750:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_RNG_GenerateRandomNumber_IT>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber_IT(RNG_HandleTypeDef *hrng)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006770:	2300      	movs	r3, #0
 8006772:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	791b      	ldrb	r3, [r3, #4]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_RNG_GenerateRandomNumber_IT+0x18>
 800677c:	2302      	movs	r3, #2
 800677e:	e01c      	b.n	80067ba <HAL_RNG_GenerateRandomNumber_IT+0x52>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	795b      	ldrb	r3, [r3, #5]
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b01      	cmp	r3, #1
 800678e:	d10b      	bne.n	80067a8 <HAL_RNG_GenerateRandomNumber_IT+0x40>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	715a      	strb	r2, [r3, #5]

    /* Enable the RNG Interrupts: Data Ready, Clock error, Seed error */
    __HAL_RNG_ENABLE_IT(hrng);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f042 0208 	orr.w	r2, r2, #8
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	e007      	b.n	80067b8 <HAL_RNG_GenerateRandomNumber_IT+0x50>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hrng);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	711a      	strb	r2, [r3, #4]

    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2204      	movs	r2, #4
 80067b2:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f003 0320 	and.w	r3, r3, #32
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d005      	beq.n	80067f0 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2210      	movs	r2, #16
 80067e8:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80067ea:	2301      	movs	r3, #1
 80067ec:	60fb      	str	r3, [r7, #12]
 80067ee:	e009      	b.n	8006804 <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d004      	beq.n	8006804 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2208      	movs	r2, #8
 80067fe:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8006800:	2301      	movs	r3, #1
 8006802:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d10b      	bne.n	8006822 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2204      	movs	r2, #4
 800680e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f838 	bl	8006886 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f06f 0260 	mvn.w	r2, #96	; 0x60
 800681e:	605a      	str	r2, [r3, #4]

    return;
 8006820:	e022      	b.n	8006868 <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01d      	beq.n	8006868 <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0208 	bic.w	r2, r2, #8
 800683a:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	795b      	ldrb	r3, [r3, #5]
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b04      	cmp	r3, #4
 800684e:	d00b      	beq.n	8006868 <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	4619      	mov	r1, r3
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fb fe62 	bl	800252c <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_RNG_ReadLastRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval random value
  */
uint32_t HAL_RNG_ReadLastRandomNumber(const RNG_HandleTypeDef *hrng)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  return (hrng->RandomNumber);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
}
 800687a:	4618      	mov	r0, r3
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8006886:	b480      	push	{r7}
 8006888:	b083      	sub	sp, #12
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800688e:	bf00      	nop
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e041      	b.n	8006930 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d106      	bne.n	80068c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7fc fbab 	bl	800301c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2202      	movs	r2, #2
 80068ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3304      	adds	r3, #4
 80068d6:	4619      	mov	r1, r3
 80068d8:	4610      	mov	r0, r2
 80068da:	f000 fa7d 	bl	8006dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b01      	cmp	r3, #1
 800694a:	d001      	beq.n	8006950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e04e      	b.n	80069ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0201 	orr.w	r2, r2, #1
 8006966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a23      	ldr	r2, [pc, #140]	; (80069fc <HAL_TIM_Base_Start_IT+0xc4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d022      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0x80>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697a:	d01d      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0x80>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a1f      	ldr	r2, [pc, #124]	; (8006a00 <HAL_TIM_Base_Start_IT+0xc8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d018      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0x80>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a1e      	ldr	r2, [pc, #120]	; (8006a04 <HAL_TIM_Base_Start_IT+0xcc>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d013      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0x80>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1c      	ldr	r2, [pc, #112]	; (8006a08 <HAL_TIM_Base_Start_IT+0xd0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d00e      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0x80>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1b      	ldr	r2, [pc, #108]	; (8006a0c <HAL_TIM_Base_Start_IT+0xd4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d009      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0x80>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a19      	ldr	r2, [pc, #100]	; (8006a10 <HAL_TIM_Base_Start_IT+0xd8>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d004      	beq.n	80069b8 <HAL_TIM_Base_Start_IT+0x80>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a18      	ldr	r2, [pc, #96]	; (8006a14 <HAL_TIM_Base_Start_IT+0xdc>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d111      	bne.n	80069dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b06      	cmp	r3, #6
 80069c8:	d010      	beq.n	80069ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f042 0201 	orr.w	r2, r2, #1
 80069d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069da:	e007      	b.n	80069ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0201 	orr.w	r2, r2, #1
 80069ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40010000 	.word	0x40010000
 8006a00:	40000400 	.word	0x40000400
 8006a04:	40000800 	.word	0x40000800
 8006a08:	40000c00 	.word	0x40000c00
 8006a0c:	40010400 	.word	0x40010400
 8006a10:	40014000 	.word	0x40014000
 8006a14:	40001800 	.word	0x40001800

08006a18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d020      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d01b      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0202 	mvn.w	r2, #2
 8006a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f999 	bl	8006d9a <HAL_TIM_IC_CaptureCallback>
 8006a68:	e005      	b.n	8006a76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f98b 	bl	8006d86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f99c 	bl	8006dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f003 0304 	and.w	r3, r3, #4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d020      	beq.n	8006ac8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01b      	beq.n	8006ac8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0204 	mvn.w	r2, #4
 8006a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f973 	bl	8006d9a <HAL_TIM_IC_CaptureCallback>
 8006ab4:	e005      	b.n	8006ac2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f965 	bl	8006d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f976 	bl	8006dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d020      	beq.n	8006b14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f003 0308 	and.w	r3, r3, #8
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01b      	beq.n	8006b14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f06f 0208 	mvn.w	r2, #8
 8006ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2204      	movs	r2, #4
 8006aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f94d 	bl	8006d9a <HAL_TIM_IC_CaptureCallback>
 8006b00:	e005      	b.n	8006b0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f93f 	bl	8006d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f950 	bl	8006dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f003 0310 	and.w	r3, r3, #16
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d020      	beq.n	8006b60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d01b      	beq.n	8006b60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0210 	mvn.w	r2, #16
 8006b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2208      	movs	r2, #8
 8006b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f927 	bl	8006d9a <HAL_TIM_IC_CaptureCallback>
 8006b4c:	e005      	b.n	8006b5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f919 	bl	8006d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f92a 	bl	8006dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00c      	beq.n	8006b84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d007      	beq.n	8006b84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f06f 0201 	mvn.w	r2, #1
 8006b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fb fce4 	bl	800254c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00c      	beq.n	8006ba8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d007      	beq.n	8006ba8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fae4 	bl	8007170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00c      	beq.n	8006bcc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d007      	beq.n	8006bcc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f8fb 	bl	8006dc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00c      	beq.n	8006bf0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f003 0320 	and.w	r3, r3, #32
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d007      	beq.n	8006bf0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f06f 0220 	mvn.w	r2, #32
 8006be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fab6 	bl	800715c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bf0:	bf00      	nop
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d101      	bne.n	8006c14 <HAL_TIM_ConfigClockSource+0x1c>
 8006c10:	2302      	movs	r3, #2
 8006c12:	e0b4      	b.n	8006d7e <HAL_TIM_ConfigClockSource+0x186>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c4c:	d03e      	beq.n	8006ccc <HAL_TIM_ConfigClockSource+0xd4>
 8006c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c52:	f200 8087 	bhi.w	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
 8006c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5a:	f000 8086 	beq.w	8006d6a <HAL_TIM_ConfigClockSource+0x172>
 8006c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c62:	d87f      	bhi.n	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
 8006c64:	2b70      	cmp	r3, #112	; 0x70
 8006c66:	d01a      	beq.n	8006c9e <HAL_TIM_ConfigClockSource+0xa6>
 8006c68:	2b70      	cmp	r3, #112	; 0x70
 8006c6a:	d87b      	bhi.n	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
 8006c6c:	2b60      	cmp	r3, #96	; 0x60
 8006c6e:	d050      	beq.n	8006d12 <HAL_TIM_ConfigClockSource+0x11a>
 8006c70:	2b60      	cmp	r3, #96	; 0x60
 8006c72:	d877      	bhi.n	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
 8006c74:	2b50      	cmp	r3, #80	; 0x50
 8006c76:	d03c      	beq.n	8006cf2 <HAL_TIM_ConfigClockSource+0xfa>
 8006c78:	2b50      	cmp	r3, #80	; 0x50
 8006c7a:	d873      	bhi.n	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
 8006c7c:	2b40      	cmp	r3, #64	; 0x40
 8006c7e:	d058      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0x13a>
 8006c80:	2b40      	cmp	r3, #64	; 0x40
 8006c82:	d86f      	bhi.n	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
 8006c84:	2b30      	cmp	r3, #48	; 0x30
 8006c86:	d064      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0x15a>
 8006c88:	2b30      	cmp	r3, #48	; 0x30
 8006c8a:	d86b      	bhi.n	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	d060      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0x15a>
 8006c90:	2b20      	cmp	r3, #32
 8006c92:	d867      	bhi.n	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d05c      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0x15a>
 8006c98:	2b10      	cmp	r3, #16
 8006c9a:	d05a      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0x15a>
 8006c9c:	e062      	b.n	8006d64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cae:	f000 f9b9 	bl	8007024 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	609a      	str	r2, [r3, #8]
      break;
 8006cca:	e04f      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cdc:	f000 f9a2 	bl	8007024 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cee:	609a      	str	r2, [r3, #8]
      break;
 8006cf0:	e03c      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f000 f916 	bl	8006f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2150      	movs	r1, #80	; 0x50
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 f96f 	bl	8006fee <TIM_ITRx_SetConfig>
      break;
 8006d10:	e02c      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f000 f935 	bl	8006f8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2160      	movs	r1, #96	; 0x60
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 f95f 	bl	8006fee <TIM_ITRx_SetConfig>
      break;
 8006d30:	e01c      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f000 f8f6 	bl	8006f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2140      	movs	r1, #64	; 0x40
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 f94f 	bl	8006fee <TIM_ITRx_SetConfig>
      break;
 8006d50:	e00c      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	f000 f946 	bl	8006fee <TIM_ITRx_SetConfig>
      break;
 8006d62:	e003      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	73fb      	strb	r3, [r7, #15]
      break;
 8006d68:	e000      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006da2:	bf00      	nop
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
	...

08006dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a46      	ldr	r2, [pc, #280]	; (8006f04 <TIM_Base_SetConfig+0x12c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d013      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df6:	d00f      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a43      	ldr	r2, [pc, #268]	; (8006f08 <TIM_Base_SetConfig+0x130>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d00b      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a42      	ldr	r2, [pc, #264]	; (8006f0c <TIM_Base_SetConfig+0x134>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d007      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a41      	ldr	r2, [pc, #260]	; (8006f10 <TIM_Base_SetConfig+0x138>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d003      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a40      	ldr	r2, [pc, #256]	; (8006f14 <TIM_Base_SetConfig+0x13c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d108      	bne.n	8006e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a35      	ldr	r2, [pc, #212]	; (8006f04 <TIM_Base_SetConfig+0x12c>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d02b      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e38:	d027      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a32      	ldr	r2, [pc, #200]	; (8006f08 <TIM_Base_SetConfig+0x130>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d023      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a31      	ldr	r2, [pc, #196]	; (8006f0c <TIM_Base_SetConfig+0x134>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d01f      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a30      	ldr	r2, [pc, #192]	; (8006f10 <TIM_Base_SetConfig+0x138>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d01b      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a2f      	ldr	r2, [pc, #188]	; (8006f14 <TIM_Base_SetConfig+0x13c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d017      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a2e      	ldr	r2, [pc, #184]	; (8006f18 <TIM_Base_SetConfig+0x140>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d013      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a2d      	ldr	r2, [pc, #180]	; (8006f1c <TIM_Base_SetConfig+0x144>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00f      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a2c      	ldr	r2, [pc, #176]	; (8006f20 <TIM_Base_SetConfig+0x148>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00b      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a2b      	ldr	r2, [pc, #172]	; (8006f24 <TIM_Base_SetConfig+0x14c>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d007      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a2a      	ldr	r2, [pc, #168]	; (8006f28 <TIM_Base_SetConfig+0x150>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d003      	beq.n	8006e8a <TIM_Base_SetConfig+0xb2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a29      	ldr	r2, [pc, #164]	; (8006f2c <TIM_Base_SetConfig+0x154>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d108      	bne.n	8006e9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a10      	ldr	r2, [pc, #64]	; (8006f04 <TIM_Base_SetConfig+0x12c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d003      	beq.n	8006ed0 <TIM_Base_SetConfig+0xf8>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a12      	ldr	r2, [pc, #72]	; (8006f14 <TIM_Base_SetConfig+0x13c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d103      	bne.n	8006ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	691a      	ldr	r2, [r3, #16]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d105      	bne.n	8006ef6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f023 0201 	bic.w	r2, r3, #1
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	611a      	str	r2, [r3, #16]
  }
}
 8006ef6:	bf00      	nop
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40010000 	.word	0x40010000
 8006f08:	40000400 	.word	0x40000400
 8006f0c:	40000800 	.word	0x40000800
 8006f10:	40000c00 	.word	0x40000c00
 8006f14:	40010400 	.word	0x40010400
 8006f18:	40014000 	.word	0x40014000
 8006f1c:	40014400 	.word	0x40014400
 8006f20:	40014800 	.word	0x40014800
 8006f24:	40001800 	.word	0x40001800
 8006f28:	40001c00 	.word	0x40001c00
 8006f2c:	40002000 	.word	0x40002000

08006f30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	f023 0201 	bic.w	r2, r3, #1
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	011b      	lsls	r3, r3, #4
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f023 030a 	bic.w	r3, r3, #10
 8006f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	621a      	str	r2, [r3, #32]
}
 8006f82:	bf00      	nop
 8006f84:	371c      	adds	r7, #28
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b087      	sub	sp, #28
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	f023 0210 	bic.w	r2, r3, #16
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	031b      	lsls	r3, r3, #12
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	011b      	lsls	r3, r3, #4
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	621a      	str	r2, [r3, #32]
}
 8006fe2:	bf00      	nop
 8006fe4:	371c      	adds	r7, #28
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b085      	sub	sp, #20
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007004:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4313      	orrs	r3, r2
 800700c:	f043 0307 	orr.w	r3, r3, #7
 8007010:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	609a      	str	r2, [r3, #8]
}
 8007018:	bf00      	nop
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800703e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	021a      	lsls	r2, r3, #8
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	431a      	orrs	r2, r3
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	4313      	orrs	r3, r2
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	4313      	orrs	r3, r2
 8007050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	609a      	str	r2, [r3, #8]
}
 8007058:	bf00      	nop
 800705a:	371c      	adds	r7, #28
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007074:	2b01      	cmp	r3, #1
 8007076:	d101      	bne.n	800707c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007078:	2302      	movs	r3, #2
 800707a:	e05a      	b.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a21      	ldr	r2, [pc, #132]	; (8007140 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d022      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c8:	d01d      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a1d      	ldr	r2, [pc, #116]	; (8007144 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d018      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1b      	ldr	r2, [pc, #108]	; (8007148 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d013      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a1a      	ldr	r2, [pc, #104]	; (800714c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00e      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a18      	ldr	r2, [pc, #96]	; (8007150 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d009      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a17      	ldr	r2, [pc, #92]	; (8007154 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d004      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a15      	ldr	r2, [pc, #84]	; (8007158 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d10c      	bne.n	8007120 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800710c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	4313      	orrs	r3, r2
 8007116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40010000 	.word	0x40010000
 8007144:	40000400 	.word	0x40000400
 8007148:	40000800 	.word	0x40000800
 800714c:	40000c00 	.word	0x40000c00
 8007150:	40010400 	.word	0x40010400
 8007154:	40014000 	.word	0x40014000
 8007158:	40001800 	.word	0x40001800

0800715c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007184:	b084      	sub	sp, #16
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	f107 001c 	add.w	r0, r7, #28
 8007192:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007196:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800719a:	2b01      	cmp	r3, #1
 800719c:	d123      	bne.n	80071e6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80071b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d105      	bne.n	80071da <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f001 fae2 	bl	80087a4 <USB_CoreReset>
 80071e0:	4603      	mov	r3, r0
 80071e2:	73fb      	strb	r3, [r7, #15]
 80071e4:	e01b      	b.n	800721e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f001 fad6 	bl	80087a4 <USB_CoreReset>
 80071f8:	4603      	mov	r3, r0
 80071fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80071fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007200:	2b00      	cmp	r3, #0
 8007202:	d106      	bne.n	8007212 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	639a      	str	r2, [r3, #56]	; 0x38
 8007210:	e005      	b.n	800721e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007216:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800721e:	7fbb      	ldrb	r3, [r7, #30]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d10b      	bne.n	800723c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f043 0206 	orr.w	r2, r3, #6
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f043 0220 	orr.w	r2, r3, #32
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007248:	b004      	add	sp, #16
 800724a:	4770      	bx	lr

0800724c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800725a:	79fb      	ldrb	r3, [r7, #7]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d165      	bne.n	800732c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	4a41      	ldr	r2, [pc, #260]	; (8007368 <USB_SetTurnaroundTime+0x11c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d906      	bls.n	8007276 <USB_SetTurnaroundTime+0x2a>
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4a40      	ldr	r2, [pc, #256]	; (800736c <USB_SetTurnaroundTime+0x120>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d202      	bcs.n	8007276 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007270:	230f      	movs	r3, #15
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	e062      	b.n	800733c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	4a3c      	ldr	r2, [pc, #240]	; (800736c <USB_SetTurnaroundTime+0x120>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d306      	bcc.n	800728c <USB_SetTurnaroundTime+0x40>
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	4a3b      	ldr	r2, [pc, #236]	; (8007370 <USB_SetTurnaroundTime+0x124>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d202      	bcs.n	800728c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007286:	230e      	movs	r3, #14
 8007288:	617b      	str	r3, [r7, #20]
 800728a:	e057      	b.n	800733c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	4a38      	ldr	r2, [pc, #224]	; (8007370 <USB_SetTurnaroundTime+0x124>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d306      	bcc.n	80072a2 <USB_SetTurnaroundTime+0x56>
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4a37      	ldr	r2, [pc, #220]	; (8007374 <USB_SetTurnaroundTime+0x128>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d202      	bcs.n	80072a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800729c:	230d      	movs	r3, #13
 800729e:	617b      	str	r3, [r7, #20]
 80072a0:	e04c      	b.n	800733c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	4a33      	ldr	r2, [pc, #204]	; (8007374 <USB_SetTurnaroundTime+0x128>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d306      	bcc.n	80072b8 <USB_SetTurnaroundTime+0x6c>
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	4a32      	ldr	r2, [pc, #200]	; (8007378 <USB_SetTurnaroundTime+0x12c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d802      	bhi.n	80072b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80072b2:	230c      	movs	r3, #12
 80072b4:	617b      	str	r3, [r7, #20]
 80072b6:	e041      	b.n	800733c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	4a2f      	ldr	r2, [pc, #188]	; (8007378 <USB_SetTurnaroundTime+0x12c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d906      	bls.n	80072ce <USB_SetTurnaroundTime+0x82>
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	4a2e      	ldr	r2, [pc, #184]	; (800737c <USB_SetTurnaroundTime+0x130>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d802      	bhi.n	80072ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80072c8:	230b      	movs	r3, #11
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	e036      	b.n	800733c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	4a2a      	ldr	r2, [pc, #168]	; (800737c <USB_SetTurnaroundTime+0x130>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d906      	bls.n	80072e4 <USB_SetTurnaroundTime+0x98>
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	4a29      	ldr	r2, [pc, #164]	; (8007380 <USB_SetTurnaroundTime+0x134>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d802      	bhi.n	80072e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80072de:	230a      	movs	r3, #10
 80072e0:	617b      	str	r3, [r7, #20]
 80072e2:	e02b      	b.n	800733c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	4a26      	ldr	r2, [pc, #152]	; (8007380 <USB_SetTurnaroundTime+0x134>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d906      	bls.n	80072fa <USB_SetTurnaroundTime+0xae>
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4a25      	ldr	r2, [pc, #148]	; (8007384 <USB_SetTurnaroundTime+0x138>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d202      	bcs.n	80072fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80072f4:	2309      	movs	r3, #9
 80072f6:	617b      	str	r3, [r7, #20]
 80072f8:	e020      	b.n	800733c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	4a21      	ldr	r2, [pc, #132]	; (8007384 <USB_SetTurnaroundTime+0x138>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d306      	bcc.n	8007310 <USB_SetTurnaroundTime+0xc4>
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	4a20      	ldr	r2, [pc, #128]	; (8007388 <USB_SetTurnaroundTime+0x13c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d802      	bhi.n	8007310 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800730a:	2308      	movs	r3, #8
 800730c:	617b      	str	r3, [r7, #20]
 800730e:	e015      	b.n	800733c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	4a1d      	ldr	r2, [pc, #116]	; (8007388 <USB_SetTurnaroundTime+0x13c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d906      	bls.n	8007326 <USB_SetTurnaroundTime+0xda>
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4a1c      	ldr	r2, [pc, #112]	; (800738c <USB_SetTurnaroundTime+0x140>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d202      	bcs.n	8007326 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007320:	2307      	movs	r3, #7
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	e00a      	b.n	800733c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007326:	2306      	movs	r3, #6
 8007328:	617b      	str	r3, [r7, #20]
 800732a:	e007      	b.n	800733c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d102      	bne.n	8007338 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007332:	2309      	movs	r3, #9
 8007334:	617b      	str	r3, [r7, #20]
 8007336:	e001      	b.n	800733c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007338:	2309      	movs	r3, #9
 800733a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	68da      	ldr	r2, [r3, #12]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	029b      	lsls	r3, r3, #10
 8007350:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007354:	431a      	orrs	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	371c      	adds	r7, #28
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	00d8acbf 	.word	0x00d8acbf
 800736c:	00e4e1c0 	.word	0x00e4e1c0
 8007370:	00f42400 	.word	0x00f42400
 8007374:	01067380 	.word	0x01067380
 8007378:	011a499f 	.word	0x011a499f
 800737c:	01312cff 	.word	0x01312cff
 8007380:	014ca43f 	.word	0x014ca43f
 8007384:	016e3600 	.word	0x016e3600
 8007388:	01a6ab1f 	.word	0x01a6ab1f
 800738c:	01e84800 	.word	0x01e84800

08007390 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f043 0201 	orr.w	r2, r3, #1
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f023 0201 	bic.w	r2, r3, #1
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d115      	bne.n	8007422 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007402:	200a      	movs	r0, #10
 8007404:	f7fb ffae 	bl	8003364 <HAL_Delay>
      ms += 10U;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	330a      	adds	r3, #10
 800740c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f001 f939 	bl	8008686 <USB_GetMode>
 8007414:	4603      	mov	r3, r0
 8007416:	2b01      	cmp	r3, #1
 8007418:	d01e      	beq.n	8007458 <USB_SetCurrentMode+0x84>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2bc7      	cmp	r3, #199	; 0xc7
 800741e:	d9f0      	bls.n	8007402 <USB_SetCurrentMode+0x2e>
 8007420:	e01a      	b.n	8007458 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007422:	78fb      	ldrb	r3, [r7, #3]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d115      	bne.n	8007454 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007434:	200a      	movs	r0, #10
 8007436:	f7fb ff95 	bl	8003364 <HAL_Delay>
      ms += 10U;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	330a      	adds	r3, #10
 800743e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f001 f920 	bl	8008686 <USB_GetMode>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d005      	beq.n	8007458 <USB_SetCurrentMode+0x84>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2bc7      	cmp	r3, #199	; 0xc7
 8007450:	d9f0      	bls.n	8007434 <USB_SetCurrentMode+0x60>
 8007452:	e001      	b.n	8007458 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e005      	b.n	8007464 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2bc8      	cmp	r3, #200	; 0xc8
 800745c:	d101      	bne.n	8007462 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800746c:	b084      	sub	sp, #16
 800746e:	b580      	push	{r7, lr}
 8007470:	b086      	sub	sp, #24
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800747a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007486:	2300      	movs	r3, #0
 8007488:	613b      	str	r3, [r7, #16]
 800748a:	e009      	b.n	80074a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	3340      	adds	r3, #64	; 0x40
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	2200      	movs	r2, #0
 8007498:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	3301      	adds	r3, #1
 800749e:	613b      	str	r3, [r7, #16]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	2b0e      	cmp	r3, #14
 80074a4:	d9f2      	bls.n	800748c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d11c      	bne.n	80074e8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074bc:	f043 0302 	orr.w	r3, r3, #2
 80074c0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074de:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	639a      	str	r2, [r3, #56]	; 0x38
 80074e6:	e00b      	b.n	8007500 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007506:	461a      	mov	r2, r3
 8007508:	2300      	movs	r3, #0
 800750a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800750c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007510:	2b01      	cmp	r3, #1
 8007512:	d10d      	bne.n	8007530 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007518:	2b00      	cmp	r3, #0
 800751a:	d104      	bne.n	8007526 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800751c:	2100      	movs	r1, #0
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f968 	bl	80077f4 <USB_SetDevSpeed>
 8007524:	e008      	b.n	8007538 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007526:	2101      	movs	r1, #1
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f963 	bl	80077f4 <USB_SetDevSpeed>
 800752e:	e003      	b.n	8007538 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007530:	2103      	movs	r1, #3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f95e 	bl	80077f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007538:	2110      	movs	r1, #16
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f8fa 	bl	8007734 <USB_FlushTxFifo>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f924 	bl	8007798 <USB_FlushRxFifo>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007560:	461a      	mov	r2, r3
 8007562:	2300      	movs	r3, #0
 8007564:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756c:	461a      	mov	r2, r3
 800756e:	2300      	movs	r3, #0
 8007570:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007578:	461a      	mov	r2, r3
 800757a:	2300      	movs	r3, #0
 800757c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800757e:	2300      	movs	r3, #0
 8007580:	613b      	str	r3, [r7, #16]
 8007582:	e043      	b.n	800760c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800759a:	d118      	bne.n	80075ce <USB_DevInit+0x162>
    {
      if (i == 0U)
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10a      	bne.n	80075b8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ae:	461a      	mov	r2, r3
 80075b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	e013      	b.n	80075e0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c4:	461a      	mov	r2, r3
 80075c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	e008      	b.n	80075e0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075da:	461a      	mov	r2, r3
 80075dc:	2300      	movs	r3, #0
 80075de:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ec:	461a      	mov	r2, r3
 80075ee:	2300      	movs	r3, #0
 80075f0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fe:	461a      	mov	r2, r3
 8007600:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007604:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	3301      	adds	r3, #1
 800760a:	613b      	str	r3, [r7, #16]
 800760c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007610:	461a      	mov	r2, r3
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	4293      	cmp	r3, r2
 8007616:	d3b5      	bcc.n	8007584 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007618:	2300      	movs	r3, #0
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	e043      	b.n	80076a6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	4413      	add	r3, r2
 8007626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007634:	d118      	bne.n	8007668 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10a      	bne.n	8007652 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007648:	461a      	mov	r2, r3
 800764a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	e013      	b.n	800767a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4413      	add	r3, r2
 800765a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765e:	461a      	mov	r2, r3
 8007660:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007664:	6013      	str	r3, [r2, #0]
 8007666:	e008      	b.n	800767a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007674:	461a      	mov	r2, r3
 8007676:	2300      	movs	r3, #0
 8007678:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007686:	461a      	mov	r2, r3
 8007688:	2300      	movs	r3, #0
 800768a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	015a      	lsls	r2, r3, #5
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4413      	add	r3, r2
 8007694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007698:	461a      	mov	r2, r3
 800769a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800769e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	3301      	adds	r3, #1
 80076a4:	613b      	str	r3, [r7, #16]
 80076a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80076aa:	461a      	mov	r2, r3
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d3b5      	bcc.n	800761e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076c4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80076d2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d105      	bne.n	80076e8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	f043 0210 	orr.w	r2, r3, #16
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	699a      	ldr	r2, [r3, #24]
 80076ec:	4b10      	ldr	r3, [pc, #64]	; (8007730 <USB_DevInit+0x2c4>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80076f4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d005      	beq.n	8007708 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	f043 0208 	orr.w	r2, r3, #8
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007708:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800770c:	2b01      	cmp	r3, #1
 800770e:	d107      	bne.n	8007720 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007718:	f043 0304 	orr.w	r3, r3, #4
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007720:	7dfb      	ldrb	r3, [r7, #23]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800772c:	b004      	add	sp, #16
 800772e:	4770      	bx	lr
 8007730:	803c3800 	.word	0x803c3800

08007734 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800773e:	2300      	movs	r3, #0
 8007740:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3301      	adds	r3, #1
 8007746:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800774e:	d901      	bls.n	8007754 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e01b      	b.n	800778c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	daf2      	bge.n	8007742 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	019b      	lsls	r3, r3, #6
 8007764:	f043 0220 	orr.w	r2, r3, #32
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3301      	adds	r3, #1
 8007770:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007778:	d901      	bls.n	800777e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e006      	b.n	800778c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	f003 0320 	and.w	r3, r3, #32
 8007786:	2b20      	cmp	r3, #32
 8007788:	d0f0      	beq.n	800776c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3301      	adds	r3, #1
 80077a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80077b0:	d901      	bls.n	80077b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e018      	b.n	80077e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	daf2      	bge.n	80077a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2210      	movs	r2, #16
 80077c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3301      	adds	r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80077d4:	d901      	bls.n	80077da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e006      	b.n	80077e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f003 0310 	and.w	r3, r3, #16
 80077e2:	2b10      	cmp	r3, #16
 80077e4:	d0f0      	beq.n	80077c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	78fb      	ldrb	r3, [r7, #3]
 800780e:	68f9      	ldr	r1, [r7, #12]
 8007810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007814:	4313      	orrs	r3, r2
 8007816:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007826:	b480      	push	{r7}
 8007828:	b087      	sub	sp, #28
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 0306 	and.w	r3, r3, #6
 800783e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d102      	bne.n	800784c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007846:	2300      	movs	r3, #0
 8007848:	75fb      	strb	r3, [r7, #23]
 800784a:	e00a      	b.n	8007862 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b02      	cmp	r3, #2
 8007850:	d002      	beq.n	8007858 <USB_GetDevSpeed+0x32>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2b06      	cmp	r3, #6
 8007856:	d102      	bne.n	800785e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007858:	2302      	movs	r3, #2
 800785a:	75fb      	strb	r3, [r7, #23]
 800785c:	e001      	b.n	8007862 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800785e:	230f      	movs	r3, #15
 8007860:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007862:	7dfb      	ldrb	r3, [r7, #23]
}
 8007864:	4618      	mov	r0, r3
 8007866:	371c      	adds	r7, #28
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	785b      	ldrb	r3, [r3, #1]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d13a      	bne.n	8007902 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007892:	69da      	ldr	r2, [r3, #28]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	f003 030f 	and.w	r3, r3, #15
 800789c:	2101      	movs	r1, #1
 800789e:	fa01 f303 	lsl.w	r3, r1, r3
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	68f9      	ldr	r1, [r7, #12]
 80078a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078aa:	4313      	orrs	r3, r2
 80078ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d155      	bne.n	8007970 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	791b      	ldrb	r3, [r3, #4]
 80078de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	059b      	lsls	r3, r3, #22
 80078e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078e8:	4313      	orrs	r3, r2
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	0151      	lsls	r1, r2, #5
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	440a      	add	r2, r1
 80078f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	e036      	b.n	8007970 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007908:	69da      	ldr	r2, [r3, #28]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	f003 030f 	and.w	r3, r3, #15
 8007912:	2101      	movs	r1, #1
 8007914:	fa01 f303 	lsl.w	r3, r1, r3
 8007918:	041b      	lsls	r3, r3, #16
 800791a:	68f9      	ldr	r1, [r7, #12]
 800791c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007920:	4313      	orrs	r3, r2
 8007922:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d11a      	bne.n	8007970 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	791b      	ldrb	r3, [r3, #4]
 8007954:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007956:	430b      	orrs	r3, r1
 8007958:	4313      	orrs	r3, r2
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	0151      	lsls	r1, r2, #5
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	440a      	add	r2, r1
 8007962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800796a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800796e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
	...

08007980 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	785b      	ldrb	r3, [r3, #1]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d161      	bne.n	8007a60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079b2:	d11f      	bne.n	80079f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80079d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	0151      	lsls	r1, r2, #5
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	440a      	add	r2, r1
 80079ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	f003 030f 	and.w	r3, r3, #15
 8007a04:	2101      	movs	r1, #1
 8007a06:	fa01 f303 	lsl.w	r3, r1, r3
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	43db      	mvns	r3, r3
 8007a0e:	68f9      	ldr	r1, [r7, #12]
 8007a10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a14:	4013      	ands	r3, r2
 8007a16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a1e:	69da      	ldr	r2, [r3, #28]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	f003 030f 	and.w	r3, r3, #15
 8007a28:	2101      	movs	r1, #1
 8007a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	43db      	mvns	r3, r3
 8007a32:	68f9      	ldr	r1, [r7, #12]
 8007a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a38:	4013      	ands	r3, r2
 8007a3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	0159      	lsls	r1, r3, #5
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	440b      	add	r3, r1
 8007a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a56:	4619      	mov	r1, r3
 8007a58:	4b35      	ldr	r3, [pc, #212]	; (8007b30 <USB_DeactivateEndpoint+0x1b0>)
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	600b      	str	r3, [r1, #0]
 8007a5e:	e060      	b.n	8007b22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a76:	d11f      	bne.n	8007ab8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	0151      	lsls	r1, r2, #5
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	440a      	add	r2, r1
 8007a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	0151      	lsls	r1, r2, #5
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	440a      	add	r2, r1
 8007aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ab2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ab6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	f003 030f 	and.w	r3, r3, #15
 8007ac8:	2101      	movs	r1, #1
 8007aca:	fa01 f303 	lsl.w	r3, r1, r3
 8007ace:	041b      	lsls	r3, r3, #16
 8007ad0:	43db      	mvns	r3, r3
 8007ad2:	68f9      	ldr	r1, [r7, #12]
 8007ad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ad8:	4013      	ands	r3, r2
 8007ada:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae2:	69da      	ldr	r2, [r3, #28]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	f003 030f 	and.w	r3, r3, #15
 8007aec:	2101      	movs	r1, #1
 8007aee:	fa01 f303 	lsl.w	r3, r1, r3
 8007af2:	041b      	lsls	r3, r3, #16
 8007af4:	43db      	mvns	r3, r3
 8007af6:	68f9      	ldr	r1, [r7, #12]
 8007af8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007afc:	4013      	ands	r3, r2
 8007afe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	0159      	lsls	r1, r3, #5
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	440b      	add	r3, r1
 8007b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <USB_DeactivateEndpoint+0x1b4>)
 8007b1e:	4013      	ands	r3, r2
 8007b20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	ec337800 	.word	0xec337800
 8007b34:	eff37800 	.word	0xeff37800

08007b38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08a      	sub	sp, #40	; 0x28
 8007b3c:	af02      	add	r7, sp, #8
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	4613      	mov	r3, r2
 8007b44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	785b      	ldrb	r3, [r3, #1]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	f040 817a 	bne.w	8007e4e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d132      	bne.n	8007bc8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	0151      	lsls	r1, r2, #5
 8007b74:	69fa      	ldr	r2, [r7, #28]
 8007b76:	440a      	add	r2, r1
 8007b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	69ba      	ldr	r2, [r7, #24]
 8007b96:	0151      	lsls	r1, r2, #5
 8007b98:	69fa      	ldr	r2, [r7, #28]
 8007b9a:	440a      	add	r2, r1
 8007b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ba0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ba4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	0151      	lsls	r1, r2, #5
 8007bb8:	69fa      	ldr	r2, [r7, #28]
 8007bba:	440a      	add	r2, r1
 8007bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bc0:	0cdb      	lsrs	r3, r3, #19
 8007bc2:	04db      	lsls	r3, r3, #19
 8007bc4:	6113      	str	r3, [r2, #16]
 8007bc6:	e092      	b.n	8007cee <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	0151      	lsls	r1, r2, #5
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	440a      	add	r2, r1
 8007bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007be2:	0cdb      	lsrs	r3, r3, #19
 8007be4:	04db      	lsls	r3, r3, #19
 8007be6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	0151      	lsls	r1, r2, #5
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	440a      	add	r2, r1
 8007bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c0a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d11a      	bne.n	8007c48 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	691a      	ldr	r2, [r3, #16]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d903      	bls.n	8007c26 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	689a      	ldr	r2, [r3, #8]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	0151      	lsls	r1, r2, #5
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	440a      	add	r2, r1
 8007c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c44:	6113      	str	r3, [r2, #16]
 8007c46:	e01b      	b.n	8007c80 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c54:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6919      	ldr	r1, [r3, #16]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	440b      	add	r3, r1
 8007c60:	1e59      	subs	r1, r3, #1
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c6a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007c6c:	4ba2      	ldr	r3, [pc, #648]	; (8007ef8 <USB_EPStartXfer+0x3c0>)
 8007c6e:	400b      	ands	r3, r1
 8007c70:	69b9      	ldr	r1, [r7, #24]
 8007c72:	0148      	lsls	r0, r1, #5
 8007c74:	69f9      	ldr	r1, [r7, #28]
 8007c76:	4401      	add	r1, r0
 8007c78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c8c:	691a      	ldr	r2, [r3, #16]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c96:	69b9      	ldr	r1, [r7, #24]
 8007c98:	0148      	lsls	r0, r1, #5
 8007c9a:	69f9      	ldr	r1, [r7, #28]
 8007c9c:	4401      	add	r1, r0
 8007c9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	791b      	ldrb	r3, [r3, #4]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d11f      	bne.n	8007cee <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	0151      	lsls	r1, r2, #5
 8007cc0:	69fa      	ldr	r2, [r7, #28]
 8007cc2:	440a      	add	r2, r1
 8007cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cc8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007ccc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	0151      	lsls	r1, r2, #5
 8007ce0:	69fa      	ldr	r2, [r7, #28]
 8007ce2:	440a      	add	r2, r1
 8007ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ce8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d14b      	bne.n	8007d8c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d009      	beq.n	8007d10 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d08:	461a      	mov	r2, r3
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	791b      	ldrb	r3, [r3, #4]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d128      	bne.n	8007d6a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d110      	bne.n	8007d4a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	0151      	lsls	r1, r2, #5
 8007d3a:	69fa      	ldr	r2, [r7, #28]
 8007d3c:	440a      	add	r2, r1
 8007d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	e00f      	b.n	8007d6a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	015a      	lsls	r2, r3, #5
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	69ba      	ldr	r2, [r7, #24]
 8007d5a:	0151      	lsls	r1, r2, #5
 8007d5c:	69fa      	ldr	r2, [r7, #28]
 8007d5e:	440a      	add	r2, r1
 8007d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	0151      	lsls	r1, r2, #5
 8007d7c:	69fa      	ldr	r2, [r7, #28]
 8007d7e:	440a      	add	r2, r1
 8007d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d88:	6013      	str	r3, [r2, #0]
 8007d8a:	e165      	b.n	8008058 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	0151      	lsls	r1, r2, #5
 8007d9e:	69fa      	ldr	r2, [r7, #28]
 8007da0:	440a      	add	r2, r1
 8007da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007da6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007daa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	791b      	ldrb	r3, [r3, #4]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d015      	beq.n	8007de0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 814d 	beq.w	8008058 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	f003 030f 	and.w	r3, r3, #15
 8007dce:	2101      	movs	r1, #1
 8007dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd4:	69f9      	ldr	r1, [r7, #28]
 8007dd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	634b      	str	r3, [r1, #52]	; 0x34
 8007dde:	e13b      	b.n	8008058 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d110      	bne.n	8007e12 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	0151      	lsls	r1, r2, #5
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	440a      	add	r2, r1
 8007e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	e00f      	b.n	8007e32 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	0151      	lsls	r1, r2, #5
 8007e24:	69fa      	ldr	r2, [r7, #28]
 8007e26:	440a      	add	r2, r1
 8007e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e30:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	68d9      	ldr	r1, [r3, #12]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	781a      	ldrb	r2, [r3, #0]
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	b298      	uxth	r0, r3
 8007e40:	79fb      	ldrb	r3, [r7, #7]
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	4603      	mov	r3, r0
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 f9b8 	bl	80081bc <USB_WritePacket>
 8007e4c:	e104      	b.n	8008058 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	69ba      	ldr	r2, [r7, #24]
 8007e5e:	0151      	lsls	r1, r2, #5
 8007e60:	69fa      	ldr	r2, [r7, #28]
 8007e62:	440a      	add	r2, r1
 8007e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e68:	0cdb      	lsrs	r3, r3, #19
 8007e6a:	04db      	lsls	r3, r3, #19
 8007e6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	0151      	lsls	r1, r2, #5
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	440a      	add	r2, r1
 8007e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e90:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d131      	bne.n	8007efc <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	689a      	ldr	r2, [r3, #8]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	689a      	ldr	r2, [r3, #8]
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ebc:	691a      	ldr	r2, [r3, #16]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ec6:	69b9      	ldr	r1, [r7, #24]
 8007ec8:	0148      	lsls	r0, r1, #5
 8007eca:	69f9      	ldr	r1, [r7, #28]
 8007ecc:	4401      	add	r1, r0
 8007ece:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	015a      	lsls	r2, r3, #5
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	4413      	add	r3, r2
 8007ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	0151      	lsls	r1, r2, #5
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	440a      	add	r2, r1
 8007eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ef0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ef4:	6113      	str	r3, [r2, #16]
 8007ef6:	e061      	b.n	8007fbc <USB_EPStartXfer+0x484>
 8007ef8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d123      	bne.n	8007f4c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f10:	691a      	ldr	r2, [r3, #16]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f1a:	69b9      	ldr	r1, [r7, #24]
 8007f1c:	0148      	lsls	r0, r1, #5
 8007f1e:	69f9      	ldr	r1, [r7, #28]
 8007f20:	4401      	add	r1, r0
 8007f22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f26:	4313      	orrs	r3, r2
 8007f28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	0151      	lsls	r1, r2, #5
 8007f3c:	69fa      	ldr	r2, [r7, #28]
 8007f3e:	440a      	add	r2, r1
 8007f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f48:	6113      	str	r3, [r2, #16]
 8007f4a:	e037      	b.n	8007fbc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	691a      	ldr	r2, [r3, #16]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	4413      	add	r3, r2
 8007f56:	1e5a      	subs	r2, r3, #1
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f60:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	8afa      	ldrh	r2, [r7, #22]
 8007f68:	fb03 f202 	mul.w	r2, r3, r2
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7c:	691a      	ldr	r2, [r3, #16]
 8007f7e:	8afb      	ldrh	r3, [r7, #22]
 8007f80:	04d9      	lsls	r1, r3, #19
 8007f82:	4b38      	ldr	r3, [pc, #224]	; (8008064 <USB_EPStartXfer+0x52c>)
 8007f84:	400b      	ands	r3, r1
 8007f86:	69b9      	ldr	r1, [r7, #24]
 8007f88:	0148      	lsls	r0, r1, #5
 8007f8a:	69f9      	ldr	r1, [r7, #28]
 8007f8c:	4401      	add	r1, r0
 8007f8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f92:	4313      	orrs	r3, r2
 8007f94:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa2:	691a      	ldr	r2, [r3, #16]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fac:	69b9      	ldr	r1, [r7, #24]
 8007fae:	0148      	lsls	r0, r1, #5
 8007fb0:	69f9      	ldr	r1, [r7, #28]
 8007fb2:	4401      	add	r1, r0
 8007fb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007fbc:	79fb      	ldrb	r3, [r7, #7]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d10d      	bne.n	8007fde <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d009      	beq.n	8007fde <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	68d9      	ldr	r1, [r3, #12]
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fda:	460a      	mov	r2, r1
 8007fdc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	791b      	ldrb	r3, [r3, #4]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d128      	bne.n	8008038 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d110      	bne.n	8008018 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	0151      	lsls	r1, r2, #5
 8008008:	69fa      	ldr	r2, [r7, #28]
 800800a:	440a      	add	r2, r1
 800800c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008010:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	e00f      	b.n	8008038 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	440a      	add	r2, r1
 800802e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008036:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	0151      	lsls	r1, r2, #5
 800804a:	69fa      	ldr	r2, [r7, #28]
 800804c:	440a      	add	r2, r1
 800804e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008052:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008056:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3720      	adds	r7, #32
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	1ff80000 	.word	0x1ff80000

08008068 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	785b      	ldrb	r3, [r3, #1]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d14a      	bne.n	800811c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	015a      	lsls	r2, r3, #5
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	4413      	add	r3, r2
 8008090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800809a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800809e:	f040 8086 	bne.w	80081ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	7812      	ldrb	r2, [r2, #0]
 80080b6:	0151      	lsls	r1, r2, #5
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	440a      	add	r2, r1
 80080bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	7812      	ldrb	r2, [r2, #0]
 80080da:	0151      	lsls	r1, r2, #5
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	440a      	add	r2, r1
 80080e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3301      	adds	r3, #1
 80080ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d902      	bls.n	8008100 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	75fb      	strb	r3, [r7, #23]
          break;
 80080fe:	e056      	b.n	80081ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	4413      	add	r3, r2
 800810a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008118:	d0e7      	beq.n	80080ea <USB_EPStopXfer+0x82>
 800811a:	e048      	b.n	80081ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	4413      	add	r3, r2
 8008126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008134:	d13b      	bne.n	80081ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	4413      	add	r3, r2
 8008140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	7812      	ldrb	r2, [r2, #0]
 800814a:	0151      	lsls	r1, r2, #5
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	440a      	add	r2, r1
 8008150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008154:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008158:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	7812      	ldrb	r2, [r2, #0]
 800816e:	0151      	lsls	r1, r2, #5
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	440a      	add	r2, r1
 8008174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008178:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800817c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3301      	adds	r3, #1
 8008182:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f242 7210 	movw	r2, #10000	; 0x2710
 800818a:	4293      	cmp	r3, r2
 800818c:	d902      	bls.n	8008194 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	75fb      	strb	r3, [r7, #23]
          break;
 8008192:	e00c      	b.n	80081ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	4413      	add	r3, r2
 800819e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081ac:	d0e7      	beq.n	800817e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	371c      	adds	r7, #28
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80081bc:	b480      	push	{r7}
 80081be:	b089      	sub	sp, #36	; 0x24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	4611      	mov	r1, r2
 80081c8:	461a      	mov	r2, r3
 80081ca:	460b      	mov	r3, r1
 80081cc:	71fb      	strb	r3, [r7, #7]
 80081ce:	4613      	mov	r3, r2
 80081d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80081da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d123      	bne.n	800822a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80081e2:	88bb      	ldrh	r3, [r7, #4]
 80081e4:	3303      	adds	r3, #3
 80081e6:	089b      	lsrs	r3, r3, #2
 80081e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80081ea:	2300      	movs	r3, #0
 80081ec:	61bb      	str	r3, [r7, #24]
 80081ee:	e018      	b.n	8008222 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80081f0:	79fb      	ldrb	r3, [r7, #7]
 80081f2:	031a      	lsls	r2, r3, #12
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081fc:	461a      	mov	r2, r3
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	3301      	adds	r3, #1
 8008208:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	3301      	adds	r3, #1
 800820e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	3301      	adds	r3, #1
 8008214:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	3301      	adds	r3, #1
 800821a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	3301      	adds	r3, #1
 8008220:	61bb      	str	r3, [r7, #24]
 8008222:	69ba      	ldr	r2, [r7, #24]
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	429a      	cmp	r2, r3
 8008228:	d3e2      	bcc.n	80081f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3724      	adds	r7, #36	; 0x24
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008238:	b480      	push	{r7}
 800823a:	b08b      	sub	sp, #44	; 0x2c
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	4613      	mov	r3, r2
 8008244:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800824e:	88fb      	ldrh	r3, [r7, #6]
 8008250:	089b      	lsrs	r3, r3, #2
 8008252:	b29b      	uxth	r3, r3
 8008254:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008256:	88fb      	ldrh	r3, [r7, #6]
 8008258:	f003 0303 	and.w	r3, r3, #3
 800825c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800825e:	2300      	movs	r3, #0
 8008260:	623b      	str	r3, [r7, #32]
 8008262:	e014      	b.n	800828e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	3301      	adds	r3, #1
 8008274:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	3301      	adds	r3, #1
 800827a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	3301      	adds	r3, #1
 8008280:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	3301      	adds	r3, #1
 8008286:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	3301      	adds	r3, #1
 800828c:	623b      	str	r3, [r7, #32]
 800828e:	6a3a      	ldr	r2, [r7, #32]
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	429a      	cmp	r2, r3
 8008294:	d3e6      	bcc.n	8008264 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008296:	8bfb      	ldrh	r3, [r7, #30]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01e      	beq.n	80082da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a6:	461a      	mov	r2, r3
 80082a8:	f107 0310 	add.w	r3, r7, #16
 80082ac:	6812      	ldr	r2, [r2, #0]
 80082ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	6a3b      	ldr	r3, [r7, #32]
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	fa22 f303 	lsr.w	r3, r2, r3
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	701a      	strb	r2, [r3, #0]
      i++;
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	3301      	adds	r3, #1
 80082c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	3301      	adds	r3, #1
 80082cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80082ce:	8bfb      	ldrh	r3, [r7, #30]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80082d4:	8bfb      	ldrh	r3, [r7, #30]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1ea      	bne.n	80082b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082dc:	4618      	mov	r0, r3
 80082de:	372c      	adds	r7, #44	; 0x2c
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	785b      	ldrb	r3, [r3, #1]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d12c      	bne.n	800835e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4413      	add	r3, r2
 800830c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	db12      	blt.n	800833c <USB_EPSetStall+0x54>
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00f      	beq.n	800833c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	015a      	lsls	r2, r3, #5
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4413      	add	r3, r2
 8008324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	0151      	lsls	r1, r2, #5
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	440a      	add	r2, r1
 8008332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008336:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800833a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	0151      	lsls	r1, r2, #5
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	440a      	add	r2, r1
 8008352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	e02b      	b.n	80083b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	db12      	blt.n	8008396 <USB_EPSetStall+0xae>
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00f      	beq.n	8008396 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4413      	add	r3, r2
 800837e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	0151      	lsls	r1, r2, #5
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	440a      	add	r2, r1
 800838c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008390:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008394:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	015a      	lsls	r2, r3, #5
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	4413      	add	r3, r2
 800839e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	0151      	lsls	r1, r2, #5
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	440a      	add	r2, r1
 80083ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	785b      	ldrb	r3, [r3, #1]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d128      	bne.n	8008432 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	0151      	lsls	r1, r2, #5
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	440a      	add	r2, r1
 80083f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	791b      	ldrb	r3, [r3, #4]
 8008404:	2b03      	cmp	r3, #3
 8008406:	d003      	beq.n	8008410 <USB_EPClearStall+0x4c>
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	791b      	ldrb	r3, [r3, #4]
 800840c:	2b02      	cmp	r3, #2
 800840e:	d138      	bne.n	8008482 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4413      	add	r3, r2
 8008418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	0151      	lsls	r1, r2, #5
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	440a      	add	r2, r1
 8008426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800842a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	e027      	b.n	8008482 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	0151      	lsls	r1, r2, #5
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	440a      	add	r2, r1
 8008448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800844c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008450:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	791b      	ldrb	r3, [r3, #4]
 8008456:	2b03      	cmp	r3, #3
 8008458:	d003      	beq.n	8008462 <USB_EPClearStall+0x9e>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	791b      	ldrb	r3, [r3, #4]
 800845e:	2b02      	cmp	r3, #2
 8008460:	d10f      	bne.n	8008482 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4413      	add	r3, r2
 800846a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	0151      	lsls	r1, r2, #5
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	440a      	add	r2, r1
 8008478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800847c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008480:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80084b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	78fb      	ldrb	r3, [r7, #3]
 80084be:	011b      	lsls	r3, r3, #4
 80084c0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80084c4:	68f9      	ldr	r1, [r7, #12]
 80084c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084ca:	4313      	orrs	r3, r2
 80084cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80084f6:	f023 0303 	bic.w	r3, r3, #3
 80084fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800850a:	f023 0302 	bic.w	r3, r3, #2
 800850e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3714      	adds	r7, #20
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800851e:	b480      	push	{r7}
 8008520:	b085      	sub	sp, #20
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008538:	f023 0303 	bic.w	r3, r3, #3
 800853c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800854c:	f043 0302 	orr.w	r3, r3, #2
 8008550:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	695b      	ldr	r3, [r3, #20]
 800856c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	4013      	ands	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008578:	68fb      	ldr	r3, [r7, #12]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008586:	b480      	push	{r7}
 8008588:	b085      	sub	sp, #20
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a2:	69db      	ldr	r3, [r3, #28]
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	4013      	ands	r3, r2
 80085a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	0c1b      	lsrs	r3, r3, #16
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b085      	sub	sp, #20
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d6:	69db      	ldr	r3, [r3, #28]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	4013      	ands	r3, r2
 80085dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	b29b      	uxth	r3, r3
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b085      	sub	sp, #20
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	460b      	mov	r3, r1
 80085f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80085fe:	78fb      	ldrb	r3, [r7, #3]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	4013      	ands	r3, r2
 800861a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800861c:	68bb      	ldr	r3, [r7, #8]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800862a:	b480      	push	{r7}
 800862c:	b087      	sub	sp, #28
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	460b      	mov	r3, r1
 8008634:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800864c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800864e:	78fb      	ldrb	r3, [r7, #3]
 8008650:	f003 030f 	and.w	r3, r3, #15
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	fa22 f303 	lsr.w	r3, r2, r3
 800865a:	01db      	lsls	r3, r3, #7
 800865c:	b2db      	uxtb	r3, r3
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	4313      	orrs	r3, r2
 8008662:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008664:	78fb      	ldrb	r3, [r7, #3]
 8008666:	015a      	lsls	r2, r3, #5
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	4413      	add	r3, r2
 800866c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	4013      	ands	r3, r2
 8008676:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008678:	68bb      	ldr	r3, [r7, #8]
}
 800867a:	4618      	mov	r0, r3
 800867c:	371c      	adds	r7, #28
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	f003 0301 	and.w	r3, r3, #1
}
 8008696:	4618      	mov	r0, r3
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b085      	sub	sp, #20
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80086c0:	f023 0307 	bic.w	r3, r3, #7
 80086c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	460b      	mov	r3, r1
 80086f2:	607a      	str	r2, [r7, #4]
 80086f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	333c      	adds	r3, #60	; 0x3c
 80086fe:	3304      	adds	r3, #4
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	4a26      	ldr	r2, [pc, #152]	; (80087a0 <USB_EP0_OutStart+0xb8>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d90a      	bls.n	8008722 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800871c:	d101      	bne.n	8008722 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	e037      	b.n	8008792 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008728:	461a      	mov	r2, r3
 800872a:	2300      	movs	r3, #0
 800872c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800873c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008750:	f043 0318 	orr.w	r3, r3, #24
 8008754:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008764:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008768:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800876a:	7afb      	ldrb	r3, [r7, #11]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d10f      	bne.n	8008790 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008776:	461a      	mov	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800878a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800878e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	371c      	adds	r7, #28
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	4f54300a 	.word	0x4f54300a

080087a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	3301      	adds	r3, #1
 80087b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80087bc:	d901      	bls.n	80087c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e01b      	b.n	80087fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	daf2      	bge.n	80087b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	f043 0201 	orr.w	r2, r3, #1
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	3301      	adds	r3, #1
 80087de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80087e6:	d901      	bls.n	80087ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e006      	b.n	80087fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d0f0      	beq.n	80087da <USB_CoreReset+0x36>

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
	...

08008808 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	460b      	mov	r3, r1
 8008812:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008814:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008818:	f002 fc9a 	bl	800b150 <USBD_static_malloc>
 800881c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d109      	bne.n	8008838 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	32b0      	adds	r2, #176	; 0xb0
 800882e:	2100      	movs	r1, #0
 8008830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008834:	2302      	movs	r3, #2
 8008836:	e0d4      	b.n	80089e2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008838:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800883c:	2100      	movs	r1, #0
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f002 ff46 	bl	800b6d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	32b0      	adds	r2, #176	; 0xb0
 800884e:	68f9      	ldr	r1, [r7, #12]
 8008850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	32b0      	adds	r2, #176	; 0xb0
 800885e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	7c1b      	ldrb	r3, [r3, #16]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d138      	bne.n	80088e2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008870:	4b5e      	ldr	r3, [pc, #376]	; (80089ec <USBD_CDC_Init+0x1e4>)
 8008872:	7819      	ldrb	r1, [r3, #0]
 8008874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008878:	2202      	movs	r2, #2
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f002 fb45 	bl	800af0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008880:	4b5a      	ldr	r3, [pc, #360]	; (80089ec <USBD_CDC_Init+0x1e4>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	f003 020f 	and.w	r2, r3, #15
 8008888:	6879      	ldr	r1, [r7, #4]
 800888a:	4613      	mov	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4413      	add	r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	440b      	add	r3, r1
 8008894:	3324      	adds	r3, #36	; 0x24
 8008896:	2201      	movs	r2, #1
 8008898:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800889a:	4b55      	ldr	r3, [pc, #340]	; (80089f0 <USBD_CDC_Init+0x1e8>)
 800889c:	7819      	ldrb	r1, [r3, #0]
 800889e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088a2:	2202      	movs	r2, #2
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f002 fb30 	bl	800af0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80088aa:	4b51      	ldr	r3, [pc, #324]	; (80089f0 <USBD_CDC_Init+0x1e8>)
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	f003 020f 	and.w	r2, r3, #15
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	4613      	mov	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	440b      	add	r3, r1
 80088be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80088c2:	2201      	movs	r2, #1
 80088c4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80088c6:	4b4b      	ldr	r3, [pc, #300]	; (80089f4 <USBD_CDC_Init+0x1ec>)
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	f003 020f 	and.w	r2, r3, #15
 80088ce:	6879      	ldr	r1, [r7, #4]
 80088d0:	4613      	mov	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	440b      	add	r3, r1
 80088da:	3326      	adds	r3, #38	; 0x26
 80088dc:	2210      	movs	r2, #16
 80088de:	801a      	strh	r2, [r3, #0]
 80088e0:	e035      	b.n	800894e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80088e2:	4b42      	ldr	r3, [pc, #264]	; (80089ec <USBD_CDC_Init+0x1e4>)
 80088e4:	7819      	ldrb	r1, [r3, #0]
 80088e6:	2340      	movs	r3, #64	; 0x40
 80088e8:	2202      	movs	r2, #2
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f002 fb0d 	bl	800af0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80088f0:	4b3e      	ldr	r3, [pc, #248]	; (80089ec <USBD_CDC_Init+0x1e4>)
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	f003 020f 	and.w	r2, r3, #15
 80088f8:	6879      	ldr	r1, [r7, #4]
 80088fa:	4613      	mov	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	440b      	add	r3, r1
 8008904:	3324      	adds	r3, #36	; 0x24
 8008906:	2201      	movs	r2, #1
 8008908:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800890a:	4b39      	ldr	r3, [pc, #228]	; (80089f0 <USBD_CDC_Init+0x1e8>)
 800890c:	7819      	ldrb	r1, [r3, #0]
 800890e:	2340      	movs	r3, #64	; 0x40
 8008910:	2202      	movs	r2, #2
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f002 faf9 	bl	800af0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008918:	4b35      	ldr	r3, [pc, #212]	; (80089f0 <USBD_CDC_Init+0x1e8>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	f003 020f 	and.w	r2, r3, #15
 8008920:	6879      	ldr	r1, [r7, #4]
 8008922:	4613      	mov	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	440b      	add	r3, r1
 800892c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008930:	2201      	movs	r2, #1
 8008932:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008934:	4b2f      	ldr	r3, [pc, #188]	; (80089f4 <USBD_CDC_Init+0x1ec>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	f003 020f 	and.w	r2, r3, #15
 800893c:	6879      	ldr	r1, [r7, #4]
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	440b      	add	r3, r1
 8008948:	3326      	adds	r3, #38	; 0x26
 800894a:	2210      	movs	r2, #16
 800894c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800894e:	4b29      	ldr	r3, [pc, #164]	; (80089f4 <USBD_CDC_Init+0x1ec>)
 8008950:	7819      	ldrb	r1, [r3, #0]
 8008952:	2308      	movs	r3, #8
 8008954:	2203      	movs	r2, #3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f002 fad7 	bl	800af0a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800895c:	4b25      	ldr	r3, [pc, #148]	; (80089f4 <USBD_CDC_Init+0x1ec>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	f003 020f 	and.w	r2, r3, #15
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	4613      	mov	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	440b      	add	r3, r1
 8008970:	3324      	adds	r3, #36	; 0x24
 8008972:	2201      	movs	r2, #1
 8008974:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	33b0      	adds	r3, #176	; 0xb0
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80089ac:	2302      	movs	r3, #2
 80089ae:	e018      	b.n	80089e2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	7c1b      	ldrb	r3, [r3, #16]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10a      	bne.n	80089ce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089b8:	4b0d      	ldr	r3, [pc, #52]	; (80089f0 <USBD_CDC_Init+0x1e8>)
 80089ba:	7819      	ldrb	r1, [r3, #0]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f002 fb8e 	bl	800b0e8 <USBD_LL_PrepareReceive>
 80089cc:	e008      	b.n	80089e0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089ce:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <USBD_CDC_Init+0x1e8>)
 80089d0:	7819      	ldrb	r1, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089d8:	2340      	movs	r3, #64	; 0x40
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f002 fb84 	bl	800b0e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	200000a7 	.word	0x200000a7
 80089f0:	200000a8 	.word	0x200000a8
 80089f4:	200000a9 	.word	0x200000a9

080089f8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008a04:	4b3a      	ldr	r3, [pc, #232]	; (8008af0 <USBD_CDC_DeInit+0xf8>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f002 faa3 	bl	800af56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008a10:	4b37      	ldr	r3, [pc, #220]	; (8008af0 <USBD_CDC_DeInit+0xf8>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	f003 020f 	and.w	r2, r3, #15
 8008a18:	6879      	ldr	r1, [r7, #4]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	440b      	add	r3, r1
 8008a24:	3324      	adds	r3, #36	; 0x24
 8008a26:	2200      	movs	r2, #0
 8008a28:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008a2a:	4b32      	ldr	r3, [pc, #200]	; (8008af4 <USBD_CDC_DeInit+0xfc>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f002 fa90 	bl	800af56 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008a36:	4b2f      	ldr	r3, [pc, #188]	; (8008af4 <USBD_CDC_DeInit+0xfc>)
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	f003 020f 	and.w	r2, r3, #15
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	440b      	add	r3, r1
 8008a4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a4e:	2200      	movs	r2, #0
 8008a50:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008a52:	4b29      	ldr	r3, [pc, #164]	; (8008af8 <USBD_CDC_DeInit+0x100>)
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f002 fa7c 	bl	800af56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008a5e:	4b26      	ldr	r3, [pc, #152]	; (8008af8 <USBD_CDC_DeInit+0x100>)
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	f003 020f 	and.w	r2, r3, #15
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	440b      	add	r3, r1
 8008a72:	3324      	adds	r3, #36	; 0x24
 8008a74:	2200      	movs	r2, #0
 8008a76:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008a78:	4b1f      	ldr	r3, [pc, #124]	; (8008af8 <USBD_CDC_DeInit+0x100>)
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	f003 020f 	and.w	r2, r3, #15
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	4613      	mov	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	440b      	add	r3, r1
 8008a8c:	3326      	adds	r3, #38	; 0x26
 8008a8e:	2200      	movs	r2, #0
 8008a90:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	32b0      	adds	r2, #176	; 0xb0
 8008a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d01f      	beq.n	8008ae4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	33b0      	adds	r3, #176	; 0xb0
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	32b0      	adds	r2, #176	; 0xb0
 8008ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f002 fb50 	bl	800b16c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	32b0      	adds	r2, #176	; 0xb0
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	200000a7 	.word	0x200000a7
 8008af4:	200000a8 	.word	0x200000a8
 8008af8:	200000a9 	.word	0x200000a9

08008afc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	32b0      	adds	r2, #176	; 0xb0
 8008b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b14:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e0bf      	b.n	8008cac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d050      	beq.n	8008bda <USBD_CDC_Setup+0xde>
 8008b38:	2b20      	cmp	r3, #32
 8008b3a:	f040 80af 	bne.w	8008c9c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	88db      	ldrh	r3, [r3, #6]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d03a      	beq.n	8008bbc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	b25b      	sxtb	r3, r3
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	da1b      	bge.n	8008b88 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	33b0      	adds	r3, #176	; 0xb0
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008b66:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	88d2      	ldrh	r2, [r2, #6]
 8008b6c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	88db      	ldrh	r3, [r3, #6]
 8008b72:	2b07      	cmp	r3, #7
 8008b74:	bf28      	it	cs
 8008b76:	2307      	movcs	r3, #7
 8008b78:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	89fa      	ldrh	r2, [r7, #14]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f001 fd89 	bl	800a698 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008b86:	e090      	b.n	8008caa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	785a      	ldrb	r2, [r3, #1]
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	88db      	ldrh	r3, [r3, #6]
 8008b96:	2b3f      	cmp	r3, #63	; 0x3f
 8008b98:	d803      	bhi.n	8008ba2 <USBD_CDC_Setup+0xa6>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	88db      	ldrh	r3, [r3, #6]
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	e000      	b.n	8008ba4 <USBD_CDC_Setup+0xa8>
 8008ba2:	2240      	movs	r2, #64	; 0x40
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008baa:	6939      	ldr	r1, [r7, #16]
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f001 fd9b 	bl	800a6f0 <USBD_CtlPrepareRx>
      break;
 8008bba:	e076      	b.n	8008caa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	33b0      	adds	r3, #176	; 0xb0
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	7850      	ldrb	r0, [r2, #1]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	4798      	blx	r3
      break;
 8008bd8:	e067      	b.n	8008caa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	785b      	ldrb	r3, [r3, #1]
 8008bde:	2b0b      	cmp	r3, #11
 8008be0:	d851      	bhi.n	8008c86 <USBD_CDC_Setup+0x18a>
 8008be2:	a201      	add	r2, pc, #4	; (adr r2, 8008be8 <USBD_CDC_Setup+0xec>)
 8008be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be8:	08008c19 	.word	0x08008c19
 8008bec:	08008c95 	.word	0x08008c95
 8008bf0:	08008c87 	.word	0x08008c87
 8008bf4:	08008c87 	.word	0x08008c87
 8008bf8:	08008c87 	.word	0x08008c87
 8008bfc:	08008c87 	.word	0x08008c87
 8008c00:	08008c87 	.word	0x08008c87
 8008c04:	08008c87 	.word	0x08008c87
 8008c08:	08008c87 	.word	0x08008c87
 8008c0c:	08008c87 	.word	0x08008c87
 8008c10:	08008c43 	.word	0x08008c43
 8008c14:	08008c6d 	.word	0x08008c6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d107      	bne.n	8008c34 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008c24:	f107 030a 	add.w	r3, r7, #10
 8008c28:	2202      	movs	r2, #2
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f001 fd33 	bl	800a698 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c32:	e032      	b.n	8008c9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f001 fcbd 	bl	800a5b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	75fb      	strb	r3, [r7, #23]
          break;
 8008c40:	e02b      	b.n	8008c9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b03      	cmp	r3, #3
 8008c4c:	d107      	bne.n	8008c5e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c4e:	f107 030d 	add.w	r3, r7, #13
 8008c52:	2201      	movs	r2, #1
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f001 fd1e 	bl	800a698 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c5c:	e01d      	b.n	8008c9a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f001 fca8 	bl	800a5b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c66:	2303      	movs	r3, #3
 8008c68:	75fb      	strb	r3, [r7, #23]
          break;
 8008c6a:	e016      	b.n	8008c9a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d00f      	beq.n	8008c98 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 fc9b 	bl	800a5b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c80:	2303      	movs	r3, #3
 8008c82:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008c84:	e008      	b.n	8008c98 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f001 fc94 	bl	800a5b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	75fb      	strb	r3, [r7, #23]
          break;
 8008c92:	e002      	b.n	8008c9a <USBD_CDC_Setup+0x19e>
          break;
 8008c94:	bf00      	nop
 8008c96:	e008      	b.n	8008caa <USBD_CDC_Setup+0x1ae>
          break;
 8008c98:	bf00      	nop
      }
      break;
 8008c9a:	e006      	b.n	8008caa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f001 fc89 	bl	800a5b6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ca8:	bf00      	nop
  }

  return (uint8_t)ret;
 8008caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	32b0      	adds	r2, #176	; 0xb0
 8008cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e065      	b.n	8008daa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	32b0      	adds	r2, #176	; 0xb0
 8008ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008cee:	78fb      	ldrb	r3, [r7, #3]
 8008cf0:	f003 020f 	and.w	r2, r3, #15
 8008cf4:	6879      	ldr	r1, [r7, #4]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	440b      	add	r3, r1
 8008d00:	3318      	adds	r3, #24
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d02f      	beq.n	8008d68 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008d08:	78fb      	ldrb	r3, [r7, #3]
 8008d0a:	f003 020f 	and.w	r2, r3, #15
 8008d0e:	6879      	ldr	r1, [r7, #4]
 8008d10:	4613      	mov	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4413      	add	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	440b      	add	r3, r1
 8008d1a:	3318      	adds	r3, #24
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	f003 010f 	and.w	r1, r3, #15
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	460b      	mov	r3, r1
 8008d28:	00db      	lsls	r3, r3, #3
 8008d2a:	440b      	add	r3, r1
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4403      	add	r3, r0
 8008d30:	331c      	adds	r3, #28
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	fbb2 f1f3 	udiv	r1, r2, r3
 8008d38:	fb01 f303 	mul.w	r3, r1, r3
 8008d3c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d112      	bne.n	8008d68 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008d42:	78fb      	ldrb	r3, [r7, #3]
 8008d44:	f003 020f 	and.w	r2, r3, #15
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	440b      	add	r3, r1
 8008d54:	3318      	adds	r3, #24
 8008d56:	2200      	movs	r2, #0
 8008d58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d5a:	78f9      	ldrb	r1, [r7, #3]
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	2200      	movs	r2, #0
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f002 f9a0 	bl	800b0a6 <USBD_LL_Transmit>
 8008d66:	e01f      	b.n	8008da8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	33b0      	adds	r3, #176	; 0xb0
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4413      	add	r3, r2
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d010      	beq.n	8008da8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	33b0      	adds	r3, #176	; 0xb0
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008da4:	78fa      	ldrb	r2, [r7, #3]
 8008da6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	460b      	mov	r3, r1
 8008dbc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	32b0      	adds	r2, #176	; 0xb0
 8008dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dcc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	32b0      	adds	r2, #176	; 0xb0
 8008dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008de0:	2303      	movs	r3, #3
 8008de2:	e01a      	b.n	8008e1a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008de4:	78fb      	ldrb	r3, [r7, #3]
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f002 f99e 	bl	800b12a <USBD_LL_GetRxDataSize>
 8008dee:	4602      	mov	r2, r0
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	33b0      	adds	r3, #176	; 0xb0
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008e14:	4611      	mov	r1, r2
 8008e16:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	32b0      	adds	r2, #176	; 0xb0
 8008e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e38:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e025      	b.n	8008e90 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	33b0      	adds	r3, #176	; 0xb0
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	4413      	add	r3, r2
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d01a      	beq.n	8008e8e <USBD_CDC_EP0_RxReady+0x6c>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e5e:	2bff      	cmp	r3, #255	; 0xff
 8008e60:	d015      	beq.n	8008e8e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	33b0      	adds	r3, #176	; 0xb0
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008e7a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008e82:	b292      	uxth	r2, r2
 8008e84:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	22ff      	movs	r2, #255	; 0xff
 8008e8a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ea0:	2182      	movs	r1, #130	; 0x82
 8008ea2:	4818      	ldr	r0, [pc, #96]	; (8008f04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ea4:	f000 fd4f 	bl	8009946 <USBD_GetEpDesc>
 8008ea8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008eaa:	2101      	movs	r1, #1
 8008eac:	4815      	ldr	r0, [pc, #84]	; (8008f04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008eae:	f000 fd4a 	bl	8009946 <USBD_GetEpDesc>
 8008eb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008eb4:	2181      	movs	r1, #129	; 0x81
 8008eb6:	4813      	ldr	r0, [pc, #76]	; (8008f04 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008eb8:	f000 fd45 	bl	8009946 <USBD_GetEpDesc>
 8008ebc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	2210      	movs	r2, #16
 8008ec8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d006      	beq.n	8008ede <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ed8:	711a      	strb	r2, [r3, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d006      	beq.n	8008ef2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eec:	711a      	strb	r2, [r3, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2243      	movs	r2, #67	; 0x43
 8008ef6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ef8:	4b02      	ldr	r3, [pc, #8]	; (8008f04 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3718      	adds	r7, #24
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	20000064 	.word	0x20000064

08008f08 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f10:	2182      	movs	r1, #130	; 0x82
 8008f12:	4818      	ldr	r0, [pc, #96]	; (8008f74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f14:	f000 fd17 	bl	8009946 <USBD_GetEpDesc>
 8008f18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	4815      	ldr	r0, [pc, #84]	; (8008f74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f1e:	f000 fd12 	bl	8009946 <USBD_GetEpDesc>
 8008f22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f24:	2181      	movs	r1, #129	; 0x81
 8008f26:	4813      	ldr	r0, [pc, #76]	; (8008f74 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f28:	f000 fd0d 	bl	8009946 <USBD_GetEpDesc>
 8008f2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	2210      	movs	r2, #16
 8008f38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d006      	beq.n	8008f4e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	2200      	movs	r2, #0
 8008f44:	711a      	strb	r2, [r3, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f042 0202 	orr.w	r2, r2, #2
 8008f4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d006      	beq.n	8008f62 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	711a      	strb	r2, [r3, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f042 0202 	orr.w	r2, r2, #2
 8008f60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2243      	movs	r2, #67	; 0x43
 8008f66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f68:	4b02      	ldr	r3, [pc, #8]	; (8008f74 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3718      	adds	r7, #24
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20000064 	.word	0x20000064

08008f78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f80:	2182      	movs	r1, #130	; 0x82
 8008f82:	4818      	ldr	r0, [pc, #96]	; (8008fe4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f84:	f000 fcdf 	bl	8009946 <USBD_GetEpDesc>
 8008f88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f8a:	2101      	movs	r1, #1
 8008f8c:	4815      	ldr	r0, [pc, #84]	; (8008fe4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f8e:	f000 fcda 	bl	8009946 <USBD_GetEpDesc>
 8008f92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f94:	2181      	movs	r1, #129	; 0x81
 8008f96:	4813      	ldr	r0, [pc, #76]	; (8008fe4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f98:	f000 fcd5 	bl	8009946 <USBD_GetEpDesc>
 8008f9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	2210      	movs	r2, #16
 8008fa8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d006      	beq.n	8008fbe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fb8:	711a      	strb	r2, [r3, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d006      	beq.n	8008fd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fcc:	711a      	strb	r2, [r3, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2243      	movs	r2, #67	; 0x43
 8008fd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008fd8:	4b02      	ldr	r3, [pc, #8]	; (8008fe4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20000064 	.word	0x20000064

08008fe8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	220a      	movs	r2, #10
 8008ff4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008ff6:	4b03      	ldr	r3, [pc, #12]	; (8009004 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	20000020 	.word	0x20000020

08009008 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009018:	2303      	movs	r3, #3
 800901a:	e009      	b.n	8009030 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	33b0      	adds	r3, #176	; 0xb0
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800903c:	b480      	push	{r7}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	32b0      	adds	r2, #176	; 0xb0
 8009052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009056:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800905e:	2303      	movs	r3, #3
 8009060:	e008      	b.n	8009074 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	371c      	adds	r7, #28
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	32b0      	adds	r2, #176	; 0xb0
 8009094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009098:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e004      	b.n	80090ae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
	...

080090bc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	32b0      	adds	r2, #176	; 0xb0
 80090ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80090d4:	2301      	movs	r3, #1
 80090d6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80090de:	2303      	movs	r3, #3
 80090e0:	e025      	b.n	800912e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d11f      	bne.n	800912c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80090f4:	4b10      	ldr	r3, [pc, #64]	; (8009138 <USBD_CDC_TransmitPacket+0x7c>)
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	f003 020f 	and.w	r2, r3, #15
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	4613      	mov	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4403      	add	r3, r0
 800910e:	3318      	adds	r3, #24
 8009110:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009112:	4b09      	ldr	r3, [pc, #36]	; (8009138 <USBD_CDC_TransmitPacket+0x7c>)
 8009114:	7819      	ldrb	r1, [r3, #0]
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f001 ffbf 	bl	800b0a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800912c:	7bfb      	ldrb	r3, [r7, #15]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	200000a7 	.word	0x200000a7

0800913c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	32b0      	adds	r2, #176	; 0xb0
 800914e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009152:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	32b0      	adds	r2, #176	; 0xb0
 800915e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009166:	2303      	movs	r3, #3
 8009168:	e018      	b.n	800919c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	7c1b      	ldrb	r3, [r3, #16]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10a      	bne.n	8009188 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009172:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <USBD_CDC_ReceivePacket+0x68>)
 8009174:	7819      	ldrb	r1, [r3, #0]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800917c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f001 ffb1 	bl	800b0e8 <USBD_LL_PrepareReceive>
 8009186:	e008      	b.n	800919a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009188:	4b06      	ldr	r3, [pc, #24]	; (80091a4 <USBD_CDC_ReceivePacket+0x68>)
 800918a:	7819      	ldrb	r1, [r3, #0]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009192:	2340      	movs	r3, #64	; 0x40
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f001 ffa7 	bl	800b0e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	200000a8 	.word	0x200000a8

080091a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	4613      	mov	r3, r2
 80091b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d101      	bne.n	80091c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80091bc:	2303      	movs	r3, #3
 80091be:	e01f      	b.n	8009200 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d003      	beq.n	80091e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	79fa      	ldrb	r2, [r7, #7]
 80091f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f001 fe21 	bl	800ae3c <USBD_LL_Init>
 80091fa:	4603      	mov	r3, r0
 80091fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80091fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009212:	2300      	movs	r3, #0
 8009214:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800921c:	2303      	movs	r3, #3
 800921e:	e025      	b.n	800926c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	32ae      	adds	r2, #174	; 0xae
 8009232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00f      	beq.n	800925c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	32ae      	adds	r2, #174	; 0xae
 8009246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924c:	f107 020e 	add.w	r2, r7, #14
 8009250:	4610      	mov	r0, r2
 8009252:	4798      	blx	r3
 8009254:	4602      	mov	r2, r0
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009262:	1c5a      	adds	r2, r3, #1
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f001 fe29 	bl	800aed4 <USBD_LL_Start>
 8009282:	4603      	mov	r3, r0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009294:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009296:	4618      	mov	r0, r3
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	460b      	mov	r3, r1
 80092ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d009      	beq.n	80092d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	78fa      	ldrb	r2, [r7, #3]
 80092c6:	4611      	mov	r1, r2
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	4798      	blx	r3
 80092cc:	4603      	mov	r3, r0
 80092ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b084      	sub	sp, #16
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	460b      	mov	r3, r1
 80092e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	78fa      	ldrb	r2, [r7, #3]
 80092f4:	4611      	mov	r1, r2
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	4798      	blx	r3
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009300:	2303      	movs	r3, #3
 8009302:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009304:	7bfb      	ldrb	r3, [r7, #15]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b084      	sub	sp, #16
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	4618      	mov	r0, r3
 8009322:	f001 f90e 	bl	800a542 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2201      	movs	r2, #1
 800932a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009334:	461a      	mov	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009342:	f003 031f 	and.w	r3, r3, #31
 8009346:	2b02      	cmp	r3, #2
 8009348:	d01a      	beq.n	8009380 <USBD_LL_SetupStage+0x72>
 800934a:	2b02      	cmp	r3, #2
 800934c:	d822      	bhi.n	8009394 <USBD_LL_SetupStage+0x86>
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <USBD_LL_SetupStage+0x4a>
 8009352:	2b01      	cmp	r3, #1
 8009354:	d00a      	beq.n	800936c <USBD_LL_SetupStage+0x5e>
 8009356:	e01d      	b.n	8009394 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800935e:	4619      	mov	r1, r3
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fb65 	bl	8009a30 <USBD_StdDevReq>
 8009366:	4603      	mov	r3, r0
 8009368:	73fb      	strb	r3, [r7, #15]
      break;
 800936a:	e020      	b.n	80093ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009372:	4619      	mov	r1, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fbcd 	bl	8009b14 <USBD_StdItfReq>
 800937a:	4603      	mov	r3, r0
 800937c:	73fb      	strb	r3, [r7, #15]
      break;
 800937e:	e016      	b.n	80093ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009386:	4619      	mov	r1, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fc2f 	bl	8009bec <USBD_StdEPReq>
 800938e:	4603      	mov	r3, r0
 8009390:	73fb      	strb	r3, [r7, #15]
      break;
 8009392:	e00c      	b.n	80093ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800939a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f001 fdf6 	bl	800af94 <USBD_LL_StallEP>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]
      break;
 80093ac:	bf00      	nop
  }

  return ret;
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	460b      	mov	r3, r1
 80093c2:	607a      	str	r2, [r7, #4]
 80093c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80093ca:	7afb      	ldrb	r3, [r7, #11]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d16e      	bne.n	80094ae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80093d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093de:	2b03      	cmp	r3, #3
 80093e0:	f040 8098 	bne.w	8009514 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d913      	bls.n	8009418 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	689a      	ldr	r2, [r3, #8]
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	1ad2      	subs	r2, r2, r3
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	4293      	cmp	r3, r2
 8009408:	bf28      	it	cs
 800940a:	4613      	movcs	r3, r2
 800940c:	461a      	mov	r2, r3
 800940e:	6879      	ldr	r1, [r7, #4]
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f001 f98a 	bl	800a72a <USBD_CtlContinueRx>
 8009416:	e07d      	b.n	8009514 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800941e:	f003 031f 	and.w	r3, r3, #31
 8009422:	2b02      	cmp	r3, #2
 8009424:	d014      	beq.n	8009450 <USBD_LL_DataOutStage+0x98>
 8009426:	2b02      	cmp	r3, #2
 8009428:	d81d      	bhi.n	8009466 <USBD_LL_DataOutStage+0xae>
 800942a:	2b00      	cmp	r3, #0
 800942c:	d002      	beq.n	8009434 <USBD_LL_DataOutStage+0x7c>
 800942e:	2b01      	cmp	r3, #1
 8009430:	d003      	beq.n	800943a <USBD_LL_DataOutStage+0x82>
 8009432:	e018      	b.n	8009466 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009434:	2300      	movs	r3, #0
 8009436:	75bb      	strb	r3, [r7, #22]
            break;
 8009438:	e018      	b.n	800946c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009440:	b2db      	uxtb	r3, r3
 8009442:	4619      	mov	r1, r3
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 fa64 	bl	8009912 <USBD_CoreFindIF>
 800944a:	4603      	mov	r3, r0
 800944c:	75bb      	strb	r3, [r7, #22]
            break;
 800944e:	e00d      	b.n	800946c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009456:	b2db      	uxtb	r3, r3
 8009458:	4619      	mov	r1, r3
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 fa66 	bl	800992c <USBD_CoreFindEP>
 8009460:	4603      	mov	r3, r0
 8009462:	75bb      	strb	r3, [r7, #22]
            break;
 8009464:	e002      	b.n	800946c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	75bb      	strb	r3, [r7, #22]
            break;
 800946a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800946c:	7dbb      	ldrb	r3, [r7, #22]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d119      	bne.n	80094a6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b03      	cmp	r3, #3
 800947c:	d113      	bne.n	80094a6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800947e:	7dba      	ldrb	r2, [r7, #22]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	32ae      	adds	r2, #174	; 0xae
 8009484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00b      	beq.n	80094a6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800948e:	7dba      	ldrb	r2, [r7, #22]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009496:	7dba      	ldrb	r2, [r7, #22]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	32ae      	adds	r2, #174	; 0xae
 800949c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f001 f950 	bl	800a74c <USBD_CtlSendStatus>
 80094ac:	e032      	b.n	8009514 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80094ae:	7afb      	ldrb	r3, [r7, #11]
 80094b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	4619      	mov	r1, r3
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 fa37 	bl	800992c <USBD_CoreFindEP>
 80094be:	4603      	mov	r3, r0
 80094c0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094c2:	7dbb      	ldrb	r3, [r7, #22]
 80094c4:	2bff      	cmp	r3, #255	; 0xff
 80094c6:	d025      	beq.n	8009514 <USBD_LL_DataOutStage+0x15c>
 80094c8:	7dbb      	ldrb	r3, [r7, #22]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d122      	bne.n	8009514 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b03      	cmp	r3, #3
 80094d8:	d117      	bne.n	800950a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80094da:	7dba      	ldrb	r2, [r7, #22]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	32ae      	adds	r2, #174	; 0xae
 80094e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00f      	beq.n	800950a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80094ea:	7dba      	ldrb	r2, [r7, #22]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80094f2:	7dba      	ldrb	r2, [r7, #22]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	32ae      	adds	r2, #174	; 0xae
 80094f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	7afa      	ldrb	r2, [r7, #11]
 8009500:	4611      	mov	r1, r2
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	4798      	blx	r3
 8009506:	4603      	mov	r3, r0
 8009508:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800950a:	7dfb      	ldrb	r3, [r7, #23]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d001      	beq.n	8009514 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009510:	7dfb      	ldrb	r3, [r7, #23]
 8009512:	e000      	b.n	8009516 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3718      	adds	r7, #24
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b086      	sub	sp, #24
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	460b      	mov	r3, r1
 8009528:	607a      	str	r2, [r7, #4]
 800952a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800952c:	7afb      	ldrb	r3, [r7, #11]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d16f      	bne.n	8009612 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3314      	adds	r3, #20
 8009536:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800953e:	2b02      	cmp	r3, #2
 8009540:	d15a      	bne.n	80095f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	689a      	ldr	r2, [r3, #8]
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	429a      	cmp	r2, r3
 800954c:	d914      	bls.n	8009578 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	689a      	ldr	r2, [r3, #8]
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	1ad2      	subs	r2, r2, r3
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	461a      	mov	r2, r3
 8009562:	6879      	ldr	r1, [r7, #4]
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f001 f8b2 	bl	800a6ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800956a:	2300      	movs	r3, #0
 800956c:	2200      	movs	r2, #0
 800956e:	2100      	movs	r1, #0
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f001 fdb9 	bl	800b0e8 <USBD_LL_PrepareReceive>
 8009576:	e03f      	b.n	80095f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	68da      	ldr	r2, [r3, #12]
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	429a      	cmp	r2, r3
 8009582:	d11c      	bne.n	80095be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800958c:	429a      	cmp	r2, r3
 800958e:	d316      	bcc.n	80095be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	685a      	ldr	r2, [r3, #4]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800959a:	429a      	cmp	r2, r3
 800959c:	d20f      	bcs.n	80095be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800959e:	2200      	movs	r2, #0
 80095a0:	2100      	movs	r1, #0
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f001 f893 	bl	800a6ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095b0:	2300      	movs	r3, #0
 80095b2:	2200      	movs	r2, #0
 80095b4:	2100      	movs	r1, #0
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f001 fd96 	bl	800b0e8 <USBD_LL_PrepareReceive>
 80095bc:	e01c      	b.n	80095f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b03      	cmp	r3, #3
 80095c8:	d10f      	bne.n	80095ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d009      	beq.n	80095ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2200      	movs	r2, #0
 80095da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80095ea:	2180      	movs	r1, #128	; 0x80
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f001 fcd1 	bl	800af94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f001 f8bd 	bl	800a772 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d03a      	beq.n	8009678 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f7ff fe42 	bl	800928c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009610:	e032      	b.n	8009678 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009612:	7afb      	ldrb	r3, [r7, #11]
 8009614:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009618:	b2db      	uxtb	r3, r3
 800961a:	4619      	mov	r1, r3
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 f985 	bl	800992c <USBD_CoreFindEP>
 8009622:	4603      	mov	r3, r0
 8009624:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009626:	7dfb      	ldrb	r3, [r7, #23]
 8009628:	2bff      	cmp	r3, #255	; 0xff
 800962a:	d025      	beq.n	8009678 <USBD_LL_DataInStage+0x15a>
 800962c:	7dfb      	ldrb	r3, [r7, #23]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d122      	bne.n	8009678 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b03      	cmp	r3, #3
 800963c:	d11c      	bne.n	8009678 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800963e:	7dfa      	ldrb	r2, [r7, #23]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	32ae      	adds	r2, #174	; 0xae
 8009644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d014      	beq.n	8009678 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800964e:	7dfa      	ldrb	r2, [r7, #23]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009656:	7dfa      	ldrb	r2, [r7, #23]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	32ae      	adds	r2, #174	; 0xae
 800965c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	7afa      	ldrb	r2, [r7, #11]
 8009664:	4611      	mov	r1, r2
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	4798      	blx	r3
 800966a:	4603      	mov	r3, r0
 800966c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800966e:	7dbb      	ldrb	r3, [r7, #22]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009674:	7dbb      	ldrb	r3, [r7, #22]
 8009676:	e000      	b.n	800967a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3718      	adds	r7, #24
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b084      	sub	sp, #16
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d014      	beq.n	80096e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00e      	beq.n	80096e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	6852      	ldr	r2, [r2, #4]
 80096d6:	b2d2      	uxtb	r2, r2
 80096d8:	4611      	mov	r1, r2
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	4798      	blx	r3
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80096e4:	2303      	movs	r3, #3
 80096e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096e8:	2340      	movs	r3, #64	; 0x40
 80096ea:	2200      	movs	r2, #0
 80096ec:	2100      	movs	r1, #0
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f001 fc0b 	bl	800af0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2240      	movs	r2, #64	; 0x40
 8009700:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009704:	2340      	movs	r3, #64	; 0x40
 8009706:	2200      	movs	r2, #0
 8009708:	2180      	movs	r1, #128	; 0x80
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f001 fbfd 	bl	800af0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2240      	movs	r2, #64	; 0x40
 800971a:	621a      	str	r2, [r3, #32]

  return ret;
 800971c:	7bfb      	ldrb	r3, [r7, #15]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009726:	b480      	push	{r7}
 8009728:	b083      	sub	sp, #12
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	460b      	mov	r3, r1
 8009730:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	78fa      	ldrb	r2, [r7, #3]
 8009736:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009746:	b480      	push	{r7}
 8009748:	b083      	sub	sp, #12
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b04      	cmp	r3, #4
 8009758:	d006      	beq.n	8009768 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009760:	b2da      	uxtb	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2204      	movs	r2, #4
 800976c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800977e:	b480      	push	{r7}
 8009780:	b083      	sub	sp, #12
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b04      	cmp	r3, #4
 8009790:	d106      	bne.n	80097a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009798:	b2da      	uxtb	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b082      	sub	sp, #8
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d110      	bne.n	80097e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00b      	beq.n	80097e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097d2:	69db      	ldr	r3, [r3, #28]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d005      	beq.n	80097e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097de:	69db      	ldr	r3, [r3, #28]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b082      	sub	sp, #8
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	32ae      	adds	r2, #174	; 0xae
 8009804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d101      	bne.n	8009810 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800980c:	2303      	movs	r3, #3
 800980e:	e01c      	b.n	800984a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b03      	cmp	r3, #3
 800981a:	d115      	bne.n	8009848 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	32ae      	adds	r2, #174	; 0xae
 8009826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800982a:	6a1b      	ldr	r3, [r3, #32]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00b      	beq.n	8009848 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	32ae      	adds	r2, #174	; 0xae
 800983a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	78fa      	ldrb	r2, [r7, #3]
 8009842:	4611      	mov	r1, r2
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b082      	sub	sp, #8
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	460b      	mov	r3, r1
 800985c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	32ae      	adds	r2, #174	; 0xae
 8009868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009870:	2303      	movs	r3, #3
 8009872:	e01c      	b.n	80098ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b03      	cmp	r3, #3
 800987e:	d115      	bne.n	80098ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	32ae      	adds	r2, #174	; 0xae
 800988a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00b      	beq.n	80098ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	32ae      	adds	r2, #174	; 0xae
 800989e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a4:	78fa      	ldrb	r2, [r7, #3]
 80098a6:	4611      	mov	r1, r2
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80098b6:	b480      	push	{r7}
 80098b8:	b083      	sub	sp, #12
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00e      	beq.n	8009908 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	6852      	ldr	r2, [r2, #4]
 80098f6:	b2d2      	uxtb	r2, r2
 80098f8:	4611      	mov	r1, r2
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	4798      	blx	r3
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009904:	2303      	movs	r3, #3
 8009906:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009908:	7bfb      	ldrb	r3, [r7, #15]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009912:	b480      	push	{r7}
 8009914:	b083      	sub	sp, #12
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	460b      	mov	r3, r1
 800991c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800991e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009920:	4618      	mov	r0, r3
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009938:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800993a:	4618      	mov	r0, r3
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b086      	sub	sp, #24
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	460b      	mov	r3, r1
 8009950:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800995a:	2300      	movs	r3, #0
 800995c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	885b      	ldrh	r3, [r3, #2]
 8009962:	b29a      	uxth	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	b29b      	uxth	r3, r3
 800996a:	429a      	cmp	r2, r3
 800996c:	d920      	bls.n	80099b0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	b29b      	uxth	r3, r3
 8009974:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009976:	e013      	b.n	80099a0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009978:	f107 030a 	add.w	r3, r7, #10
 800997c:	4619      	mov	r1, r3
 800997e:	6978      	ldr	r0, [r7, #20]
 8009980:	f000 f81b 	bl	80099ba <USBD_GetNextDesc>
 8009984:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	785b      	ldrb	r3, [r3, #1]
 800998a:	2b05      	cmp	r3, #5
 800998c:	d108      	bne.n	80099a0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	789b      	ldrb	r3, [r3, #2]
 8009996:	78fa      	ldrb	r2, [r7, #3]
 8009998:	429a      	cmp	r2, r3
 800999a:	d008      	beq.n	80099ae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800999c:	2300      	movs	r3, #0
 800999e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	885b      	ldrh	r3, [r3, #2]
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	897b      	ldrh	r3, [r7, #10]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d8e5      	bhi.n	8009978 <USBD_GetEpDesc+0x32>
 80099ac:	e000      	b.n	80099b0 <USBD_GetEpDesc+0x6a>
          break;
 80099ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80099b0:	693b      	ldr	r3, [r7, #16]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3718      	adds	r7, #24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80099ba:	b480      	push	{r7}
 80099bc:	b085      	sub	sp, #20
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	881a      	ldrh	r2, [r3, #0]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	4413      	add	r3, r2
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4413      	add	r3, r2
 80099e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80099e6:	68fb      	ldr	r3, [r7, #12]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b087      	sub	sp, #28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009a12:	8a3b      	ldrh	r3, [r7, #16]
 8009a14:	021b      	lsls	r3, r3, #8
 8009a16:	b21a      	sxth	r2, r3
 8009a18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	b21b      	sxth	r3, r3
 8009a20:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009a22:	89fb      	ldrh	r3, [r7, #14]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	371c      	adds	r7, #28
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a46:	2b40      	cmp	r3, #64	; 0x40
 8009a48:	d005      	beq.n	8009a56 <USBD_StdDevReq+0x26>
 8009a4a:	2b40      	cmp	r3, #64	; 0x40
 8009a4c:	d857      	bhi.n	8009afe <USBD_StdDevReq+0xce>
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00f      	beq.n	8009a72 <USBD_StdDevReq+0x42>
 8009a52:	2b20      	cmp	r3, #32
 8009a54:	d153      	bne.n	8009afe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	32ae      	adds	r2, #174	; 0xae
 8009a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	4798      	blx	r3
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a70:	e04a      	b.n	8009b08 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	785b      	ldrb	r3, [r3, #1]
 8009a76:	2b09      	cmp	r3, #9
 8009a78:	d83b      	bhi.n	8009af2 <USBD_StdDevReq+0xc2>
 8009a7a:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <USBD_StdDevReq+0x50>)
 8009a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a80:	08009ad5 	.word	0x08009ad5
 8009a84:	08009ae9 	.word	0x08009ae9
 8009a88:	08009af3 	.word	0x08009af3
 8009a8c:	08009adf 	.word	0x08009adf
 8009a90:	08009af3 	.word	0x08009af3
 8009a94:	08009ab3 	.word	0x08009ab3
 8009a98:	08009aa9 	.word	0x08009aa9
 8009a9c:	08009af3 	.word	0x08009af3
 8009aa0:	08009acb 	.word	0x08009acb
 8009aa4:	08009abd 	.word	0x08009abd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fa3c 	bl	8009f28 <USBD_GetDescriptor>
          break;
 8009ab0:	e024      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fba1 	bl	800a1fc <USBD_SetAddress>
          break;
 8009aba:	e01f      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fbe0 	bl	800a284 <USBD_SetConfig>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	73fb      	strb	r3, [r7, #15]
          break;
 8009ac8:	e018      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fc83 	bl	800a3d8 <USBD_GetConfig>
          break;
 8009ad2:	e013      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fcb4 	bl	800a444 <USBD_GetStatus>
          break;
 8009adc:	e00e      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fce3 	bl	800a4ac <USBD_SetFeature>
          break;
 8009ae6:	e009      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ae8:	6839      	ldr	r1, [r7, #0]
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 fd07 	bl	800a4fe <USBD_ClrFeature>
          break;
 8009af0:	e004      	b.n	8009afc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fd5e 	bl	800a5b6 <USBD_CtlError>
          break;
 8009afa:	bf00      	nop
      }
      break;
 8009afc:	e004      	b.n	8009b08 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fd58 	bl	800a5b6 <USBD_CtlError>
      break;
 8009b06:	bf00      	nop
  }

  return ret;
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop

08009b14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b2a:	2b40      	cmp	r3, #64	; 0x40
 8009b2c:	d005      	beq.n	8009b3a <USBD_StdItfReq+0x26>
 8009b2e:	2b40      	cmp	r3, #64	; 0x40
 8009b30:	d852      	bhi.n	8009bd8 <USBD_StdItfReq+0xc4>
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d001      	beq.n	8009b3a <USBD_StdItfReq+0x26>
 8009b36:	2b20      	cmp	r3, #32
 8009b38:	d14e      	bne.n	8009bd8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	3b01      	subs	r3, #1
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d840      	bhi.n	8009bca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	889b      	ldrh	r3, [r3, #4]
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d836      	bhi.n	8009bc0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	889b      	ldrh	r3, [r3, #4]
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7ff fed9 	bl	8009912 <USBD_CoreFindIF>
 8009b60:	4603      	mov	r3, r0
 8009b62:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b64:	7bbb      	ldrb	r3, [r7, #14]
 8009b66:	2bff      	cmp	r3, #255	; 0xff
 8009b68:	d01d      	beq.n	8009ba6 <USBD_StdItfReq+0x92>
 8009b6a:	7bbb      	ldrb	r3, [r7, #14]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d11a      	bne.n	8009ba6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009b70:	7bba      	ldrb	r2, [r7, #14]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	32ae      	adds	r2, #174	; 0xae
 8009b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00f      	beq.n	8009ba0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009b80:	7bba      	ldrb	r2, [r7, #14]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b88:	7bba      	ldrb	r2, [r7, #14]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	32ae      	adds	r2, #174	; 0xae
 8009b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	4798      	blx	r3
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b9e:	e004      	b.n	8009baa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ba4:	e001      	b.n	8009baa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	88db      	ldrh	r3, [r3, #6]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d110      	bne.n	8009bd4 <USBD_StdItfReq+0xc0>
 8009bb2:	7bfb      	ldrb	r3, [r7, #15]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10d      	bne.n	8009bd4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fdc7 	bl	800a74c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009bbe:	e009      	b.n	8009bd4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fcf7 	bl	800a5b6 <USBD_CtlError>
          break;
 8009bc8:	e004      	b.n	8009bd4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009bca:	6839      	ldr	r1, [r7, #0]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 fcf2 	bl	800a5b6 <USBD_CtlError>
          break;
 8009bd2:	e000      	b.n	8009bd6 <USBD_StdItfReq+0xc2>
          break;
 8009bd4:	bf00      	nop
      }
      break;
 8009bd6:	e004      	b.n	8009be2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fceb 	bl	800a5b6 <USBD_CtlError>
      break;
 8009be0:	bf00      	nop
  }

  return ret;
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	889b      	ldrh	r3, [r3, #4]
 8009bfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c08:	2b40      	cmp	r3, #64	; 0x40
 8009c0a:	d007      	beq.n	8009c1c <USBD_StdEPReq+0x30>
 8009c0c:	2b40      	cmp	r3, #64	; 0x40
 8009c0e:	f200 817f 	bhi.w	8009f10 <USBD_StdEPReq+0x324>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d02a      	beq.n	8009c6c <USBD_StdEPReq+0x80>
 8009c16:	2b20      	cmp	r3, #32
 8009c18:	f040 817a 	bne.w	8009f10 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c1c:	7bbb      	ldrb	r3, [r7, #14]
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7ff fe83 	bl	800992c <USBD_CoreFindEP>
 8009c26:	4603      	mov	r3, r0
 8009c28:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c2a:	7b7b      	ldrb	r3, [r7, #13]
 8009c2c:	2bff      	cmp	r3, #255	; 0xff
 8009c2e:	f000 8174 	beq.w	8009f1a <USBD_StdEPReq+0x32e>
 8009c32:	7b7b      	ldrb	r3, [r7, #13]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f040 8170 	bne.w	8009f1a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009c3a:	7b7a      	ldrb	r2, [r7, #13]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009c42:	7b7a      	ldrb	r2, [r7, #13]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	32ae      	adds	r2, #174	; 0xae
 8009c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f000 8163 	beq.w	8009f1a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009c54:	7b7a      	ldrb	r2, [r7, #13]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	32ae      	adds	r2, #174	; 0xae
 8009c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	4798      	blx	r3
 8009c66:	4603      	mov	r3, r0
 8009c68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c6a:	e156      	b.n	8009f1a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	785b      	ldrb	r3, [r3, #1]
 8009c70:	2b03      	cmp	r3, #3
 8009c72:	d008      	beq.n	8009c86 <USBD_StdEPReq+0x9a>
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	f300 8145 	bgt.w	8009f04 <USBD_StdEPReq+0x318>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f000 809b 	beq.w	8009db6 <USBD_StdEPReq+0x1ca>
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d03c      	beq.n	8009cfe <USBD_StdEPReq+0x112>
 8009c84:	e13e      	b.n	8009f04 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d002      	beq.n	8009c98 <USBD_StdEPReq+0xac>
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	d016      	beq.n	8009cc4 <USBD_StdEPReq+0xd8>
 8009c96:	e02c      	b.n	8009cf2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c98:	7bbb      	ldrb	r3, [r7, #14]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00d      	beq.n	8009cba <USBD_StdEPReq+0xce>
 8009c9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ca0:	2b80      	cmp	r3, #128	; 0x80
 8009ca2:	d00a      	beq.n	8009cba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f001 f973 	bl	800af94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cae:	2180      	movs	r1, #128	; 0x80
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f001 f96f 	bl	800af94 <USBD_LL_StallEP>
 8009cb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009cb8:	e020      	b.n	8009cfc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fc7a 	bl	800a5b6 <USBD_CtlError>
              break;
 8009cc2:	e01b      	b.n	8009cfc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	885b      	ldrh	r3, [r3, #2]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10e      	bne.n	8009cea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00b      	beq.n	8009cea <USBD_StdEPReq+0xfe>
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
 8009cd4:	2b80      	cmp	r3, #128	; 0x80
 8009cd6:	d008      	beq.n	8009cea <USBD_StdEPReq+0xfe>
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	88db      	ldrh	r3, [r3, #6]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d104      	bne.n	8009cea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ce0:	7bbb      	ldrb	r3, [r7, #14]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f001 f955 	bl	800af94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fd2e 	bl	800a74c <USBD_CtlSendStatus>

              break;
 8009cf0:	e004      	b.n	8009cfc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fc5e 	bl	800a5b6 <USBD_CtlError>
              break;
 8009cfa:	bf00      	nop
          }
          break;
 8009cfc:	e107      	b.n	8009f0e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d002      	beq.n	8009d10 <USBD_StdEPReq+0x124>
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	d016      	beq.n	8009d3c <USBD_StdEPReq+0x150>
 8009d0e:	e04b      	b.n	8009da8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00d      	beq.n	8009d32 <USBD_StdEPReq+0x146>
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
 8009d18:	2b80      	cmp	r3, #128	; 0x80
 8009d1a:	d00a      	beq.n	8009d32 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f001 f937 	bl	800af94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d26:	2180      	movs	r1, #128	; 0x80
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f001 f933 	bl	800af94 <USBD_LL_StallEP>
 8009d2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d30:	e040      	b.n	8009db4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fc3e 	bl	800a5b6 <USBD_CtlError>
              break;
 8009d3a:	e03b      	b.n	8009db4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	885b      	ldrh	r3, [r3, #2]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d136      	bne.n	8009db2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d004      	beq.n	8009d58 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d4e:	7bbb      	ldrb	r3, [r7, #14]
 8009d50:	4619      	mov	r1, r3
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f001 f93d 	bl	800afd2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 fcf7 	bl	800a74c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d5e:	7bbb      	ldrb	r3, [r7, #14]
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7ff fde2 	bl	800992c <USBD_CoreFindEP>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d6c:	7b7b      	ldrb	r3, [r7, #13]
 8009d6e:	2bff      	cmp	r3, #255	; 0xff
 8009d70:	d01f      	beq.n	8009db2 <USBD_StdEPReq+0x1c6>
 8009d72:	7b7b      	ldrb	r3, [r7, #13]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d11c      	bne.n	8009db2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009d78:	7b7a      	ldrb	r2, [r7, #13]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009d80:	7b7a      	ldrb	r2, [r7, #13]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	32ae      	adds	r2, #174	; 0xae
 8009d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d010      	beq.n	8009db2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d90:	7b7a      	ldrb	r2, [r7, #13]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	32ae      	adds	r2, #174	; 0xae
 8009d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	4798      	blx	r3
 8009da2:	4603      	mov	r3, r0
 8009da4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009da6:	e004      	b.n	8009db2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fc03 	bl	800a5b6 <USBD_CtlError>
              break;
 8009db0:	e000      	b.n	8009db4 <USBD_StdEPReq+0x1c8>
              break;
 8009db2:	bf00      	nop
          }
          break;
 8009db4:	e0ab      	b.n	8009f0e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d002      	beq.n	8009dc8 <USBD_StdEPReq+0x1dc>
 8009dc2:	2b03      	cmp	r3, #3
 8009dc4:	d032      	beq.n	8009e2c <USBD_StdEPReq+0x240>
 8009dc6:	e097      	b.n	8009ef8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d007      	beq.n	8009dde <USBD_StdEPReq+0x1f2>
 8009dce:	7bbb      	ldrb	r3, [r7, #14]
 8009dd0:	2b80      	cmp	r3, #128	; 0x80
 8009dd2:	d004      	beq.n	8009dde <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fbed 	bl	800a5b6 <USBD_CtlError>
                break;
 8009ddc:	e091      	b.n	8009f02 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	da0b      	bge.n	8009dfe <USBD_StdEPReq+0x212>
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
 8009de8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dec:	4613      	mov	r3, r2
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	4413      	add	r3, r2
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	3310      	adds	r3, #16
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	4413      	add	r3, r2
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	e00b      	b.n	8009e16 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	4413      	add	r3, r2
 8009e14:	3304      	adds	r3, #4
 8009e16:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	2202      	movs	r2, #2
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fc37 	bl	800a698 <USBD_CtlSendData>
              break;
 8009e2a:	e06a      	b.n	8009f02 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	da11      	bge.n	8009e58 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e34:	7bbb      	ldrb	r3, [r7, #14]
 8009e36:	f003 020f 	and.w	r2, r3, #15
 8009e3a:	6879      	ldr	r1, [r7, #4]
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4413      	add	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	440b      	add	r3, r1
 8009e46:	3324      	adds	r3, #36	; 0x24
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d117      	bne.n	8009e7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fbb0 	bl	800a5b6 <USBD_CtlError>
                  break;
 8009e56:	e054      	b.n	8009f02 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
 8009e5a:	f003 020f 	and.w	r2, r3, #15
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	4613      	mov	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	440b      	add	r3, r1
 8009e6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e6e:	881b      	ldrh	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d104      	bne.n	8009e7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fb9d 	bl	800a5b6 <USBD_CtlError>
                  break;
 8009e7c:	e041      	b.n	8009f02 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	da0b      	bge.n	8009e9e <USBD_StdEPReq+0x2b2>
 8009e86:	7bbb      	ldrb	r3, [r7, #14]
 8009e88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	3310      	adds	r3, #16
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	4413      	add	r3, r2
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	e00b      	b.n	8009eb6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d002      	beq.n	8009ec4 <USBD_StdEPReq+0x2d8>
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
 8009ec0:	2b80      	cmp	r3, #128	; 0x80
 8009ec2:	d103      	bne.n	8009ecc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	e00e      	b.n	8009eea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009ecc:	7bbb      	ldrb	r3, [r7, #14]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f001 f89d 	bl	800b010 <USBD_LL_IsStallEP>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d003      	beq.n	8009ee4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	601a      	str	r2, [r3, #0]
 8009ee2:	e002      	b.n	8009eea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	2202      	movs	r2, #2
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fbd1 	bl	800a698 <USBD_CtlSendData>
              break;
 8009ef6:	e004      	b.n	8009f02 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fb5b 	bl	800a5b6 <USBD_CtlError>
              break;
 8009f00:	bf00      	nop
          }
          break;
 8009f02:	e004      	b.n	8009f0e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fb55 	bl	800a5b6 <USBD_CtlError>
          break;
 8009f0c:	bf00      	nop
      }
      break;
 8009f0e:	e005      	b.n	8009f1c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009f10:	6839      	ldr	r1, [r7, #0]
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 fb4f 	bl	800a5b6 <USBD_CtlError>
      break;
 8009f18:	e000      	b.n	8009f1c <USBD_StdEPReq+0x330>
      break;
 8009f1a:	bf00      	nop
  }

  return ret;
 8009f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
	...

08009f28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f32:	2300      	movs	r3, #0
 8009f34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f36:	2300      	movs	r3, #0
 8009f38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	885b      	ldrh	r3, [r3, #2]
 8009f42:	0a1b      	lsrs	r3, r3, #8
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	3b01      	subs	r3, #1
 8009f48:	2b06      	cmp	r3, #6
 8009f4a:	f200 8128 	bhi.w	800a19e <USBD_GetDescriptor+0x276>
 8009f4e:	a201      	add	r2, pc, #4	; (adr r2, 8009f54 <USBD_GetDescriptor+0x2c>)
 8009f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f54:	08009f71 	.word	0x08009f71
 8009f58:	08009f89 	.word	0x08009f89
 8009f5c:	08009fc9 	.word	0x08009fc9
 8009f60:	0800a19f 	.word	0x0800a19f
 8009f64:	0800a19f 	.word	0x0800a19f
 8009f68:	0800a13f 	.word	0x0800a13f
 8009f6c:	0800a16b 	.word	0x0800a16b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	7c12      	ldrb	r2, [r2, #16]
 8009f7c:	f107 0108 	add.w	r1, r7, #8
 8009f80:	4610      	mov	r0, r2
 8009f82:	4798      	blx	r3
 8009f84:	60f8      	str	r0, [r7, #12]
      break;
 8009f86:	e112      	b.n	800a1ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	7c1b      	ldrb	r3, [r3, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10d      	bne.n	8009fac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f98:	f107 0208 	add.w	r2, r7, #8
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	4798      	blx	r3
 8009fa0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009faa:	e100      	b.n	800a1ae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb4:	f107 0208 	add.w	r2, r7, #8
 8009fb8:	4610      	mov	r0, r2
 8009fba:	4798      	blx	r3
 8009fbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	701a      	strb	r2, [r3, #0]
      break;
 8009fc6:	e0f2      	b.n	800a1ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	885b      	ldrh	r3, [r3, #2]
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b05      	cmp	r3, #5
 8009fd0:	f200 80ac 	bhi.w	800a12c <USBD_GetDescriptor+0x204>
 8009fd4:	a201      	add	r2, pc, #4	; (adr r2, 8009fdc <USBD_GetDescriptor+0xb4>)
 8009fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fda:	bf00      	nop
 8009fdc:	08009ff5 	.word	0x08009ff5
 8009fe0:	0800a029 	.word	0x0800a029
 8009fe4:	0800a05d 	.word	0x0800a05d
 8009fe8:	0800a091 	.word	0x0800a091
 8009fec:	0800a0c5 	.word	0x0800a0c5
 8009ff0:	0800a0f9 	.word	0x0800a0f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00b      	beq.n	800a018 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	7c12      	ldrb	r2, [r2, #16]
 800a00c:	f107 0108 	add.w	r1, r7, #8
 800a010:	4610      	mov	r0, r2
 800a012:	4798      	blx	r3
 800a014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a016:	e091      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 facb 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a020:	7afb      	ldrb	r3, [r7, #11]
 800a022:	3301      	adds	r3, #1
 800a024:	72fb      	strb	r3, [r7, #11]
          break;
 800a026:	e089      	b.n	800a13c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00b      	beq.n	800a04c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	7c12      	ldrb	r2, [r2, #16]
 800a040:	f107 0108 	add.w	r1, r7, #8
 800a044:	4610      	mov	r0, r2
 800a046:	4798      	blx	r3
 800a048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a04a:	e077      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a04c:	6839      	ldr	r1, [r7, #0]
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fab1 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a054:	7afb      	ldrb	r3, [r7, #11]
 800a056:	3301      	adds	r3, #1
 800a058:	72fb      	strb	r3, [r7, #11]
          break;
 800a05a:	e06f      	b.n	800a13c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00b      	beq.n	800a080 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	7c12      	ldrb	r2, [r2, #16]
 800a074:	f107 0108 	add.w	r1, r7, #8
 800a078:	4610      	mov	r0, r2
 800a07a:	4798      	blx	r3
 800a07c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a07e:	e05d      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a080:	6839      	ldr	r1, [r7, #0]
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fa97 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a088:	7afb      	ldrb	r3, [r7, #11]
 800a08a:	3301      	adds	r3, #1
 800a08c:	72fb      	strb	r3, [r7, #11]
          break;
 800a08e:	e055      	b.n	800a13c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00b      	beq.n	800a0b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	7c12      	ldrb	r2, [r2, #16]
 800a0a8:	f107 0108 	add.w	r1, r7, #8
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	4798      	blx	r3
 800a0b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0b2:	e043      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fa7d 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a0bc:	7afb      	ldrb	r3, [r7, #11]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0c2:	e03b      	b.n	800a13c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ca:	695b      	ldr	r3, [r3, #20]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00b      	beq.n	800a0e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	7c12      	ldrb	r2, [r2, #16]
 800a0dc:	f107 0108 	add.w	r1, r7, #8
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4798      	blx	r3
 800a0e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0e6:	e029      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fa63 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a0f0:	7afb      	ldrb	r3, [r7, #11]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0f6:	e021      	b.n	800a13c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00b      	beq.n	800a11c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	7c12      	ldrb	r2, [r2, #16]
 800a110:	f107 0108 	add.w	r1, r7, #8
 800a114:	4610      	mov	r0, r2
 800a116:	4798      	blx	r3
 800a118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a11a:	e00f      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fa49 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a124:	7afb      	ldrb	r3, [r7, #11]
 800a126:	3301      	adds	r3, #1
 800a128:	72fb      	strb	r3, [r7, #11]
          break;
 800a12a:	e007      	b.n	800a13c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fa41 	bl	800a5b6 <USBD_CtlError>
          err++;
 800a134:	7afb      	ldrb	r3, [r7, #11]
 800a136:	3301      	adds	r3, #1
 800a138:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a13a:	bf00      	nop
      }
      break;
 800a13c:	e037      	b.n	800a1ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	7c1b      	ldrb	r3, [r3, #16]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d109      	bne.n	800a15a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a14e:	f107 0208 	add.w	r2, r7, #8
 800a152:	4610      	mov	r0, r2
 800a154:	4798      	blx	r3
 800a156:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a158:	e029      	b.n	800a1ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a15a:	6839      	ldr	r1, [r7, #0]
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fa2a 	bl	800a5b6 <USBD_CtlError>
        err++;
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	3301      	adds	r3, #1
 800a166:	72fb      	strb	r3, [r7, #11]
      break;
 800a168:	e021      	b.n	800a1ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	7c1b      	ldrb	r3, [r3, #16]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10d      	bne.n	800a18e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a17a:	f107 0208 	add.w	r2, r7, #8
 800a17e:	4610      	mov	r0, r2
 800a180:	4798      	blx	r3
 800a182:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	3301      	adds	r3, #1
 800a188:	2207      	movs	r2, #7
 800a18a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a18c:	e00f      	b.n	800a1ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 fa10 	bl	800a5b6 <USBD_CtlError>
        err++;
 800a196:	7afb      	ldrb	r3, [r7, #11]
 800a198:	3301      	adds	r3, #1
 800a19a:	72fb      	strb	r3, [r7, #11]
      break;
 800a19c:	e007      	b.n	800a1ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fa08 	bl	800a5b6 <USBD_CtlError>
      err++;
 800a1a6:	7afb      	ldrb	r3, [r7, #11]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a1ac:	bf00      	nop
  }

  if (err != 0U)
 800a1ae:	7afb      	ldrb	r3, [r7, #11]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d11e      	bne.n	800a1f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	88db      	ldrh	r3, [r3, #6]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d016      	beq.n	800a1ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a1bc:	893b      	ldrh	r3, [r7, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00e      	beq.n	800a1e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	88da      	ldrh	r2, [r3, #6]
 800a1c6:	893b      	ldrh	r3, [r7, #8]
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	bf28      	it	cs
 800a1cc:	4613      	movcs	r3, r2
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a1d2:	893b      	ldrh	r3, [r7, #8]
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	68f9      	ldr	r1, [r7, #12]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fa5d 	bl	800a698 <USBD_CtlSendData>
 800a1de:	e009      	b.n	800a1f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a1e0:	6839      	ldr	r1, [r7, #0]
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f9e7 	bl	800a5b6 <USBD_CtlError>
 800a1e8:	e004      	b.n	800a1f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 faae 	bl	800a74c <USBD_CtlSendStatus>
 800a1f0:	e000      	b.n	800a1f4 <USBD_GetDescriptor+0x2cc>
    return;
 800a1f2:	bf00      	nop
  }
}
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop

0800a1fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	889b      	ldrh	r3, [r3, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d131      	bne.n	800a272 <USBD_SetAddress+0x76>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	88db      	ldrh	r3, [r3, #6]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d12d      	bne.n	800a272 <USBD_SetAddress+0x76>
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	885b      	ldrh	r3, [r3, #2]
 800a21a:	2b7f      	cmp	r3, #127	; 0x7f
 800a21c:	d829      	bhi.n	800a272 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	885b      	ldrh	r3, [r3, #2]
 800a222:	b2db      	uxtb	r3, r3
 800a224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a228:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a230:	b2db      	uxtb	r3, r3
 800a232:	2b03      	cmp	r3, #3
 800a234:	d104      	bne.n	800a240 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a236:	6839      	ldr	r1, [r7, #0]
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 f9bc 	bl	800a5b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a23e:	e01d      	b.n	800a27c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	7bfa      	ldrb	r2, [r7, #15]
 800a244:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a248:	7bfb      	ldrb	r3, [r7, #15]
 800a24a:	4619      	mov	r1, r3
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 ff0b 	bl	800b068 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 fa7a 	bl	800a74c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a258:	7bfb      	ldrb	r3, [r7, #15]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d004      	beq.n	800a268 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2202      	movs	r2, #2
 800a262:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a266:	e009      	b.n	800a27c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a270:	e004      	b.n	800a27c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f99e 	bl	800a5b6 <USBD_CtlError>
  }
}
 800a27a:	bf00      	nop
 800a27c:	bf00      	nop
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	885b      	ldrh	r3, [r3, #2]
 800a296:	b2da      	uxtb	r2, r3
 800a298:	4b4e      	ldr	r3, [pc, #312]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a29a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a29c:	4b4d      	ldr	r3, [pc, #308]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d905      	bls.n	800a2b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f985 	bl	800a5b6 <USBD_CtlError>
    return USBD_FAIL;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	e08c      	b.n	800a3ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d002      	beq.n	800a2c2 <USBD_SetConfig+0x3e>
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	d029      	beq.n	800a314 <USBD_SetConfig+0x90>
 800a2c0:	e075      	b.n	800a3ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a2c2:	4b44      	ldr	r3, [pc, #272]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d020      	beq.n	800a30c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a2ca:	4b42      	ldr	r3, [pc, #264]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a2d4:	4b3f      	ldr	r3, [pc, #252]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7fe ffe1 	bl	80092a2 <USBD_SetClassConfig>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d008      	beq.n	800a2fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a2ea:	6839      	ldr	r1, [r7, #0]
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f962 	bl	800a5b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2202      	movs	r2, #2
 800a2f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2fa:	e065      	b.n	800a3c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fa25 	bl	800a74c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2203      	movs	r2, #3
 800a306:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a30a:	e05d      	b.n	800a3c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 fa1d 	bl	800a74c <USBD_CtlSendStatus>
      break;
 800a312:	e059      	b.n	800a3c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a314:	4b2f      	ldr	r3, [pc, #188]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d112      	bne.n	800a342 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2202      	movs	r2, #2
 800a320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a324:	4b2b      	ldr	r3, [pc, #172]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	461a      	mov	r2, r3
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a32e:	4b29      	ldr	r3, [pc, #164]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	4619      	mov	r1, r3
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7fe ffd0 	bl	80092da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fa06 	bl	800a74c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a340:	e042      	b.n	800a3c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a342:	4b24      	ldr	r3, [pc, #144]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	461a      	mov	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d02a      	beq.n	800a3a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	b2db      	uxtb	r3, r3
 800a356:	4619      	mov	r1, r3
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f7fe ffbe 	bl	80092da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a35e:	4b1d      	ldr	r3, [pc, #116]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	461a      	mov	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a368:	4b1a      	ldr	r3, [pc, #104]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	4619      	mov	r1, r3
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f7fe ff97 	bl	80092a2 <USBD_SetClassConfig>
 800a374:	4603      	mov	r3, r0
 800a376:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a378:	7bfb      	ldrb	r3, [r7, #15]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00f      	beq.n	800a39e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a37e:	6839      	ldr	r1, [r7, #0]
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f918 	bl	800a5b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	4619      	mov	r1, r3
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7fe ffa3 	bl	80092da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2202      	movs	r2, #2
 800a398:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a39c:	e014      	b.n	800a3c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f9d4 	bl	800a74c <USBD_CtlSendStatus>
      break;
 800a3a4:	e010      	b.n	800a3c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f9d0 	bl	800a74c <USBD_CtlSendStatus>
      break;
 800a3ac:	e00c      	b.n	800a3c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f900 	bl	800a5b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3b6:	4b07      	ldr	r3, [pc, #28]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7fe ff8c 	bl	80092da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a3c6:	bf00      	nop
  }

  return ret;
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	200006dc 	.word	0x200006dc

0800a3d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	88db      	ldrh	r3, [r3, #6]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d004      	beq.n	800a3f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a3ea:	6839      	ldr	r1, [r7, #0]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f8e2 	bl	800a5b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a3f2:	e023      	b.n	800a43c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	dc02      	bgt.n	800a406 <USBD_GetConfig+0x2e>
 800a400:	2b00      	cmp	r3, #0
 800a402:	dc03      	bgt.n	800a40c <USBD_GetConfig+0x34>
 800a404:	e015      	b.n	800a432 <USBD_GetConfig+0x5a>
 800a406:	2b03      	cmp	r3, #3
 800a408:	d00b      	beq.n	800a422 <USBD_GetConfig+0x4a>
 800a40a:	e012      	b.n	800a432 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	3308      	adds	r3, #8
 800a416:	2201      	movs	r2, #1
 800a418:	4619      	mov	r1, r3
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f93c 	bl	800a698 <USBD_CtlSendData>
        break;
 800a420:	e00c      	b.n	800a43c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	3304      	adds	r3, #4
 800a426:	2201      	movs	r2, #1
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f934 	bl	800a698 <USBD_CtlSendData>
        break;
 800a430:	e004      	b.n	800a43c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 f8be 	bl	800a5b6 <USBD_CtlError>
        break;
 800a43a:	bf00      	nop
}
 800a43c:	bf00      	nop
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a454:	b2db      	uxtb	r3, r3
 800a456:	3b01      	subs	r3, #1
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d81e      	bhi.n	800a49a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	88db      	ldrh	r3, [r3, #6]
 800a460:	2b02      	cmp	r3, #2
 800a462:	d004      	beq.n	800a46e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a464:	6839      	ldr	r1, [r7, #0]
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f8a5 	bl	800a5b6 <USBD_CtlError>
        break;
 800a46c:	e01a      	b.n	800a4a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d005      	beq.n	800a48a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	f043 0202 	orr.w	r2, r3, #2
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	330c      	adds	r3, #12
 800a48e:	2202      	movs	r2, #2
 800a490:	4619      	mov	r1, r3
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 f900 	bl	800a698 <USBD_CtlSendData>
      break;
 800a498:	e004      	b.n	800a4a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a49a:	6839      	ldr	r1, [r7, #0]
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 f88a 	bl	800a5b6 <USBD_CtlError>
      break;
 800a4a2:	bf00      	nop
  }
}
 800a4a4:	bf00      	nop
 800a4a6:	3708      	adds	r7, #8
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	885b      	ldrh	r3, [r3, #2]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d107      	bne.n	800a4ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f940 	bl	800a74c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a4cc:	e013      	b.n	800a4f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	885b      	ldrh	r3, [r3, #2]
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d10b      	bne.n	800a4ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	889b      	ldrh	r3, [r3, #4]
 800a4da:	0a1b      	lsrs	r3, r3, #8
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f930 	bl	800a74c <USBD_CtlSendStatus>
}
 800a4ec:	e003      	b.n	800a4f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f860 	bl	800a5b6 <USBD_CtlError>
}
 800a4f6:	bf00      	nop
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b082      	sub	sp, #8
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	3b01      	subs	r3, #1
 800a512:	2b02      	cmp	r3, #2
 800a514:	d80b      	bhi.n	800a52e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	885b      	ldrh	r3, [r3, #2]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d10c      	bne.n	800a538 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f910 	bl	800a74c <USBD_CtlSendStatus>
      }
      break;
 800a52c:	e004      	b.n	800a538 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f840 	bl	800a5b6 <USBD_CtlError>
      break;
 800a536:	e000      	b.n	800a53a <USBD_ClrFeature+0x3c>
      break;
 800a538:	bf00      	nop
  }
}
 800a53a:	bf00      	nop
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b084      	sub	sp, #16
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	781a      	ldrb	r2, [r3, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	3301      	adds	r3, #1
 800a55c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	781a      	ldrb	r2, [r3, #0]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	3301      	adds	r3, #1
 800a56a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f7ff fa41 	bl	80099f4 <SWAPBYTE>
 800a572:	4603      	mov	r3, r0
 800a574:	461a      	mov	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3301      	adds	r3, #1
 800a57e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	3301      	adds	r3, #1
 800a584:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f7ff fa34 	bl	80099f4 <SWAPBYTE>
 800a58c:	4603      	mov	r3, r0
 800a58e:	461a      	mov	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	3301      	adds	r3, #1
 800a598:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	3301      	adds	r3, #1
 800a59e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f7ff fa27 	bl	80099f4 <SWAPBYTE>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	80da      	strh	r2, [r3, #6]
}
 800a5ae:	bf00      	nop
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b082      	sub	sp, #8
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
 800a5be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5c0:	2180      	movs	r1, #128	; 0x80
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 fce6 	bl	800af94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fce2 	bl	800af94 <USBD_LL_StallEP>
}
 800a5d0:	bf00      	nop
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d036      	beq.n	800a65c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a5f2:	6938      	ldr	r0, [r7, #16]
 800a5f4:	f000 f836 	bl	800a664 <USBD_GetLen>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	b29a      	uxth	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a606:	7dfb      	ldrb	r3, [r7, #23]
 800a608:	68ba      	ldr	r2, [r7, #8]
 800a60a:	4413      	add	r3, r2
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	7812      	ldrb	r2, [r2, #0]
 800a610:	701a      	strb	r2, [r3, #0]
  idx++;
 800a612:	7dfb      	ldrb	r3, [r7, #23]
 800a614:	3301      	adds	r3, #1
 800a616:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a618:	7dfb      	ldrb	r3, [r7, #23]
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	4413      	add	r3, r2
 800a61e:	2203      	movs	r2, #3
 800a620:	701a      	strb	r2, [r3, #0]
  idx++;
 800a622:	7dfb      	ldrb	r3, [r7, #23]
 800a624:	3301      	adds	r3, #1
 800a626:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a628:	e013      	b.n	800a652 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a62a:	7dfb      	ldrb	r3, [r7, #23]
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	4413      	add	r3, r2
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	7812      	ldrb	r2, [r2, #0]
 800a634:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	3301      	adds	r3, #1
 800a63a:	613b      	str	r3, [r7, #16]
    idx++;
 800a63c:	7dfb      	ldrb	r3, [r7, #23]
 800a63e:	3301      	adds	r3, #1
 800a640:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a642:	7dfb      	ldrb	r3, [r7, #23]
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	4413      	add	r3, r2
 800a648:	2200      	movs	r2, #0
 800a64a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a64c:	7dfb      	ldrb	r3, [r7, #23]
 800a64e:	3301      	adds	r3, #1
 800a650:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1e7      	bne.n	800a62a <USBD_GetString+0x52>
 800a65a:	e000      	b.n	800a65e <USBD_GetString+0x86>
    return;
 800a65c:	bf00      	nop
  }
}
 800a65e:	3718      	adds	r7, #24
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a66c:	2300      	movs	r3, #0
 800a66e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a674:	e005      	b.n	800a682 <USBD_GetLen+0x1e>
  {
    len++;
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	3301      	adds	r3, #1
 800a67a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	3301      	adds	r3, #1
 800a680:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d1f5      	bne.n	800a676 <USBD_GetLen+0x12>
  }

  return len;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2202      	movs	r2, #2
 800a6a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	2100      	movs	r1, #0
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f000 fcf1 	bl	800b0a6 <USBD_LL_Transmit>

  return USBD_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	60f8      	str	r0, [r7, #12]
 800a6d6:	60b9      	str	r1, [r7, #8]
 800a6d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	2100      	movs	r1, #0
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f000 fce0 	bl	800b0a6 <USBD_LL_Transmit>

  return USBD_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2203      	movs	r2, #3
 800a700:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	2100      	movs	r1, #0
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f000 fce4 	bl	800b0e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	60f8      	str	r0, [r7, #12]
 800a732:	60b9      	str	r1, [r7, #8]
 800a734:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	2100      	movs	r1, #0
 800a73c:	68f8      	ldr	r0, [r7, #12]
 800a73e:	f000 fcd3 	bl	800b0e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2204      	movs	r2, #4
 800a758:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a75c:	2300      	movs	r3, #0
 800a75e:	2200      	movs	r2, #0
 800a760:	2100      	movs	r1, #0
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fc9f 	bl	800b0a6 <USBD_LL_Transmit>

  return USBD_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b082      	sub	sp, #8
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2205      	movs	r2, #5
 800a77e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a782:	2300      	movs	r3, #0
 800a784:	2200      	movs	r2, #0
 800a786:	2100      	movs	r1, #0
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 fcad 	bl	800b0e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a79c:	2200      	movs	r2, #0
 800a79e:	4912      	ldr	r1, [pc, #72]	; (800a7e8 <MX_USB_DEVICE_Init+0x50>)
 800a7a0:	4812      	ldr	r0, [pc, #72]	; (800a7ec <MX_USB_DEVICE_Init+0x54>)
 800a7a2:	f7fe fd01 	bl	80091a8 <USBD_Init>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d001      	beq.n	800a7b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a7ac:	f7f7 fefe 	bl	80025ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a7b0:	490f      	ldr	r1, [pc, #60]	; (800a7f0 <MX_USB_DEVICE_Init+0x58>)
 800a7b2:	480e      	ldr	r0, [pc, #56]	; (800a7ec <MX_USB_DEVICE_Init+0x54>)
 800a7b4:	f7fe fd28 	bl	8009208 <USBD_RegisterClass>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a7be:	f7f7 fef5 	bl	80025ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a7c2:	490c      	ldr	r1, [pc, #48]	; (800a7f4 <MX_USB_DEVICE_Init+0x5c>)
 800a7c4:	4809      	ldr	r0, [pc, #36]	; (800a7ec <MX_USB_DEVICE_Init+0x54>)
 800a7c6:	f7fe fc1f 	bl	8009008 <USBD_CDC_RegisterInterface>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a7d0:	f7f7 feec 	bl	80025ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a7d4:	4805      	ldr	r0, [pc, #20]	; (800a7ec <MX_USB_DEVICE_Init+0x54>)
 800a7d6:	f7fe fd4d 	bl	8009274 <USBD_Start>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a7e0:	f7f7 fee4 	bl	80025ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a7e4:	bf00      	nop
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	200000c0 	.word	0x200000c0
 800a7ec:	200006e0 	.word	0x200006e0
 800a7f0:	2000002c 	.word	0x2000002c
 800a7f4:	200000ac 	.word	0x200000ac

0800a7f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	4905      	ldr	r1, [pc, #20]	; (800a814 <CDC_Init_FS+0x1c>)
 800a800:	4805      	ldr	r0, [pc, #20]	; (800a818 <CDC_Init_FS+0x20>)
 800a802:	f7fe fc1b 	bl	800903c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a806:	4905      	ldr	r1, [pc, #20]	; (800a81c <CDC_Init_FS+0x24>)
 800a808:	4803      	ldr	r0, [pc, #12]	; (800a818 <CDC_Init_FS+0x20>)
 800a80a:	f7fe fc39 	bl	8009080 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a80e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a810:	4618      	mov	r0, r3
 800a812:	bd80      	pop	{r7, pc}
 800a814:	200011bc 	.word	0x200011bc
 800a818:	200006e0 	.word	0x200006e0
 800a81c:	200009bc 	.word	0x200009bc

0800a820 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a820:	b480      	push	{r7}
 800a822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a824:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a826:	4618      	mov	r0, r3
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	4603      	mov	r3, r0
 800a838:	6039      	str	r1, [r7, #0]
 800a83a:	71fb      	strb	r3, [r7, #7]
 800a83c:	4613      	mov	r3, r2
 800a83e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a840:	79fb      	ldrb	r3, [r7, #7]
 800a842:	2b23      	cmp	r3, #35	; 0x23
 800a844:	d84a      	bhi.n	800a8dc <CDC_Control_FS+0xac>
 800a846:	a201      	add	r2, pc, #4	; (adr r2, 800a84c <CDC_Control_FS+0x1c>)
 800a848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84c:	0800a8dd 	.word	0x0800a8dd
 800a850:	0800a8dd 	.word	0x0800a8dd
 800a854:	0800a8dd 	.word	0x0800a8dd
 800a858:	0800a8dd 	.word	0x0800a8dd
 800a85c:	0800a8dd 	.word	0x0800a8dd
 800a860:	0800a8dd 	.word	0x0800a8dd
 800a864:	0800a8dd 	.word	0x0800a8dd
 800a868:	0800a8dd 	.word	0x0800a8dd
 800a86c:	0800a8dd 	.word	0x0800a8dd
 800a870:	0800a8dd 	.word	0x0800a8dd
 800a874:	0800a8dd 	.word	0x0800a8dd
 800a878:	0800a8dd 	.word	0x0800a8dd
 800a87c:	0800a8dd 	.word	0x0800a8dd
 800a880:	0800a8dd 	.word	0x0800a8dd
 800a884:	0800a8dd 	.word	0x0800a8dd
 800a888:	0800a8dd 	.word	0x0800a8dd
 800a88c:	0800a8dd 	.word	0x0800a8dd
 800a890:	0800a8dd 	.word	0x0800a8dd
 800a894:	0800a8dd 	.word	0x0800a8dd
 800a898:	0800a8dd 	.word	0x0800a8dd
 800a89c:	0800a8dd 	.word	0x0800a8dd
 800a8a0:	0800a8dd 	.word	0x0800a8dd
 800a8a4:	0800a8dd 	.word	0x0800a8dd
 800a8a8:	0800a8dd 	.word	0x0800a8dd
 800a8ac:	0800a8dd 	.word	0x0800a8dd
 800a8b0:	0800a8dd 	.word	0x0800a8dd
 800a8b4:	0800a8dd 	.word	0x0800a8dd
 800a8b8:	0800a8dd 	.word	0x0800a8dd
 800a8bc:	0800a8dd 	.word	0x0800a8dd
 800a8c0:	0800a8dd 	.word	0x0800a8dd
 800a8c4:	0800a8dd 	.word	0x0800a8dd
 800a8c8:	0800a8dd 	.word	0x0800a8dd
 800a8cc:	0800a8dd 	.word	0x0800a8dd
 800a8d0:	0800a8dd 	.word	0x0800a8dd
 800a8d4:	0800a8dd 	.word	0x0800a8dd
 800a8d8:	0800a8dd 	.word	0x0800a8dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a8dc:	bf00      	nop
  }

  return (USBD_OK);
 800a8de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a8f6:	6879      	ldr	r1, [r7, #4]
 800a8f8:	4808      	ldr	r0, [pc, #32]	; (800a91c <CDC_Receive_FS+0x30>)
 800a8fa:	f7fe fbc1 	bl	8009080 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a8fe:	4807      	ldr	r0, [pc, #28]	; (800a91c <CDC_Receive_FS+0x30>)
 800a900:	f7fe fc1c 	bl	800913c <USBD_CDC_ReceivePacket>
  CDC_recieveCALLBACK(Buf, Len[0]);
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4619      	mov	r1, r3
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7f7 fc2e 	bl	800216c <CDC_recieveCALLBACK>
  return (USBD_OK);
 800a910:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a912:	4618      	mov	r0, r3
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	200006e0 	.word	0x200006e0

0800a920 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	460b      	mov	r3, r1
 800a92a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a930:	4b0d      	ldr	r3, [pc, #52]	; (800a968 <CDC_Transmit_FS+0x48>)
 800a932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a936:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d001      	beq.n	800a946 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a942:	2301      	movs	r3, #1
 800a944:	e00b      	b.n	800a95e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a946:	887b      	ldrh	r3, [r7, #2]
 800a948:	461a      	mov	r2, r3
 800a94a:	6879      	ldr	r1, [r7, #4]
 800a94c:	4806      	ldr	r0, [pc, #24]	; (800a968 <CDC_Transmit_FS+0x48>)
 800a94e:	f7fe fb75 	bl	800903c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a952:	4805      	ldr	r0, [pc, #20]	; (800a968 <CDC_Transmit_FS+0x48>)
 800a954:	f7fe fbb2 	bl	80090bc <USBD_CDC_TransmitPacket>
 800a958:	4603      	mov	r3, r0
 800a95a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	200006e0 	.word	0x200006e0

0800a96c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b087      	sub	sp, #28
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	4613      	mov	r3, r2
 800a978:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a97e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a982:	4618      	mov	r0, r3
 800a984:	371c      	adds	r7, #28
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
	...

0800a990 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	4603      	mov	r3, r0
 800a998:	6039      	str	r1, [r7, #0]
 800a99a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	2212      	movs	r2, #18
 800a9a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a9a2:	4b03      	ldr	r3, [pc, #12]	; (800a9b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr
 800a9b0:	200000dc 	.word	0x200000dc

0800a9b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	6039      	str	r1, [r7, #0]
 800a9be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	2204      	movs	r2, #4
 800a9c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a9c6:	4b03      	ldr	r3, [pc, #12]	; (800a9d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr
 800a9d4:	200000f0 	.word	0x200000f0

0800a9d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	4603      	mov	r3, r0
 800a9e0:	6039      	str	r1, [r7, #0]
 800a9e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9e4:	79fb      	ldrb	r3, [r7, #7]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d105      	bne.n	800a9f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	4907      	ldr	r1, [pc, #28]	; (800aa0c <USBD_FS_ProductStrDescriptor+0x34>)
 800a9ee:	4808      	ldr	r0, [pc, #32]	; (800aa10 <USBD_FS_ProductStrDescriptor+0x38>)
 800a9f0:	f7ff fdf2 	bl	800a5d8 <USBD_GetString>
 800a9f4:	e004      	b.n	800aa00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	4904      	ldr	r1, [pc, #16]	; (800aa0c <USBD_FS_ProductStrDescriptor+0x34>)
 800a9fa:	4805      	ldr	r0, [pc, #20]	; (800aa10 <USBD_FS_ProductStrDescriptor+0x38>)
 800a9fc:	f7ff fdec 	bl	800a5d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa00:	4b02      	ldr	r3, [pc, #8]	; (800aa0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	200019bc 	.word	0x200019bc
 800aa10:	0800c34c 	.word	0x0800c34c

0800aa14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	6039      	str	r1, [r7, #0]
 800aa1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	4904      	ldr	r1, [pc, #16]	; (800aa34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa24:	4804      	ldr	r0, [pc, #16]	; (800aa38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa26:	f7ff fdd7 	bl	800a5d8 <USBD_GetString>
  return USBD_StrDesc;
 800aa2a:	4b02      	ldr	r3, [pc, #8]	; (800aa34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	200019bc 	.word	0x200019bc
 800aa38:	0800c364 	.word	0x0800c364

0800aa3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	4603      	mov	r3, r0
 800aa44:	6039      	str	r1, [r7, #0]
 800aa46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	221a      	movs	r2, #26
 800aa4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa4e:	f000 f843 	bl	800aad8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa52:	4b02      	ldr	r3, [pc, #8]	; (800aa5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	200000f4 	.word	0x200000f4

0800aa60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	4603      	mov	r3, r0
 800aa68:	6039      	str	r1, [r7, #0]
 800aa6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aa6c:	79fb      	ldrb	r3, [r7, #7]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d105      	bne.n	800aa7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa72:	683a      	ldr	r2, [r7, #0]
 800aa74:	4907      	ldr	r1, [pc, #28]	; (800aa94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa76:	4808      	ldr	r0, [pc, #32]	; (800aa98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa78:	f7ff fdae 	bl	800a5d8 <USBD_GetString>
 800aa7c:	e004      	b.n	800aa88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa7e:	683a      	ldr	r2, [r7, #0]
 800aa80:	4904      	ldr	r1, [pc, #16]	; (800aa94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa82:	4805      	ldr	r0, [pc, #20]	; (800aa98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa84:	f7ff fda8 	bl	800a5d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa88:	4b02      	ldr	r3, [pc, #8]	; (800aa94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3708      	adds	r7, #8
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	200019bc 	.word	0x200019bc
 800aa98:	0800c378 	.word	0x0800c378

0800aa9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	6039      	str	r1, [r7, #0]
 800aaa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aaa8:	79fb      	ldrb	r3, [r7, #7]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d105      	bne.n	800aaba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	4907      	ldr	r1, [pc, #28]	; (800aad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aab2:	4808      	ldr	r0, [pc, #32]	; (800aad4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aab4:	f7ff fd90 	bl	800a5d8 <USBD_GetString>
 800aab8:	e004      	b.n	800aac4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	4904      	ldr	r1, [pc, #16]	; (800aad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aabe:	4805      	ldr	r0, [pc, #20]	; (800aad4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aac0:	f7ff fd8a 	bl	800a5d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aac4:	4b02      	ldr	r3, [pc, #8]	; (800aad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	200019bc 	.word	0x200019bc
 800aad4:	0800c384 	.word	0x0800c384

0800aad8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aade:	4b0f      	ldr	r3, [pc, #60]	; (800ab1c <Get_SerialNum+0x44>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aae4:	4b0e      	ldr	r3, [pc, #56]	; (800ab20 <Get_SerialNum+0x48>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aaea:	4b0e      	ldr	r3, [pc, #56]	; (800ab24 <Get_SerialNum+0x4c>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d009      	beq.n	800ab12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aafe:	2208      	movs	r2, #8
 800ab00:	4909      	ldr	r1, [pc, #36]	; (800ab28 <Get_SerialNum+0x50>)
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f000 f814 	bl	800ab30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab08:	2204      	movs	r2, #4
 800ab0a:	4908      	ldr	r1, [pc, #32]	; (800ab2c <Get_SerialNum+0x54>)
 800ab0c:	68b8      	ldr	r0, [r7, #8]
 800ab0e:	f000 f80f 	bl	800ab30 <IntToUnicode>
  }
}
 800ab12:	bf00      	nop
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	1fff7a10 	.word	0x1fff7a10
 800ab20:	1fff7a14 	.word	0x1fff7a14
 800ab24:	1fff7a18 	.word	0x1fff7a18
 800ab28:	200000f6 	.word	0x200000f6
 800ab2c:	20000106 	.word	0x20000106

0800ab30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b087      	sub	sp, #28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab42:	2300      	movs	r3, #0
 800ab44:	75fb      	strb	r3, [r7, #23]
 800ab46:	e027      	b.n	800ab98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	0f1b      	lsrs	r3, r3, #28
 800ab4c:	2b09      	cmp	r3, #9
 800ab4e:	d80b      	bhi.n	800ab68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	0f1b      	lsrs	r3, r3, #28
 800ab54:	b2da      	uxtb	r2, r3
 800ab56:	7dfb      	ldrb	r3, [r7, #23]
 800ab58:	005b      	lsls	r3, r3, #1
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	440b      	add	r3, r1
 800ab60:	3230      	adds	r2, #48	; 0x30
 800ab62:	b2d2      	uxtb	r2, r2
 800ab64:	701a      	strb	r2, [r3, #0]
 800ab66:	e00a      	b.n	800ab7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	0f1b      	lsrs	r3, r3, #28
 800ab6c:	b2da      	uxtb	r2, r3
 800ab6e:	7dfb      	ldrb	r3, [r7, #23]
 800ab70:	005b      	lsls	r3, r3, #1
 800ab72:	4619      	mov	r1, r3
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	440b      	add	r3, r1
 800ab78:	3237      	adds	r2, #55	; 0x37
 800ab7a:	b2d2      	uxtb	r2, r2
 800ab7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	011b      	lsls	r3, r3, #4
 800ab82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ab84:	7dfb      	ldrb	r3, [r7, #23]
 800ab86:	005b      	lsls	r3, r3, #1
 800ab88:	3301      	adds	r3, #1
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	2200      	movs	r2, #0
 800ab90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ab92:	7dfb      	ldrb	r3, [r7, #23]
 800ab94:	3301      	adds	r3, #1
 800ab96:	75fb      	strb	r3, [r7, #23]
 800ab98:	7dfa      	ldrb	r2, [r7, #23]
 800ab9a:	79fb      	ldrb	r3, [r7, #7]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d3d3      	bcc.n	800ab48 <IntToUnicode+0x18>
  }
}
 800aba0:	bf00      	nop
 800aba2:	bf00      	nop
 800aba4:	371c      	adds	r7, #28
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
	...

0800abb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b08a      	sub	sp, #40	; 0x28
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abb8:	f107 0314 	add.w	r3, r7, #20
 800abbc:	2200      	movs	r2, #0
 800abbe:	601a      	str	r2, [r3, #0]
 800abc0:	605a      	str	r2, [r3, #4]
 800abc2:	609a      	str	r2, [r3, #8]
 800abc4:	60da      	str	r2, [r3, #12]
 800abc6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800abd0:	d13a      	bne.n	800ac48 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abd2:	2300      	movs	r3, #0
 800abd4:	613b      	str	r3, [r7, #16]
 800abd6:	4b1e      	ldr	r3, [pc, #120]	; (800ac50 <HAL_PCD_MspInit+0xa0>)
 800abd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abda:	4a1d      	ldr	r2, [pc, #116]	; (800ac50 <HAL_PCD_MspInit+0xa0>)
 800abdc:	f043 0301 	orr.w	r3, r3, #1
 800abe0:	6313      	str	r3, [r2, #48]	; 0x30
 800abe2:	4b1b      	ldr	r3, [pc, #108]	; (800ac50 <HAL_PCD_MspInit+0xa0>)
 800abe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe6:	f003 0301 	and.w	r3, r3, #1
 800abea:	613b      	str	r3, [r7, #16]
 800abec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800abee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800abf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abf4:	2302      	movs	r3, #2
 800abf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abf8:	2300      	movs	r3, #0
 800abfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abfc:	2303      	movs	r3, #3
 800abfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac00:	230a      	movs	r3, #10
 800ac02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac04:	f107 0314 	add.w	r3, r7, #20
 800ac08:	4619      	mov	r1, r3
 800ac0a:	4812      	ldr	r0, [pc, #72]	; (800ac54 <HAL_PCD_MspInit+0xa4>)
 800ac0c:	f7f8 fefa 	bl	8003a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac10:	4b0f      	ldr	r3, [pc, #60]	; (800ac50 <HAL_PCD_MspInit+0xa0>)
 800ac12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac14:	4a0e      	ldr	r2, [pc, #56]	; (800ac50 <HAL_PCD_MspInit+0xa0>)
 800ac16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac1a:	6353      	str	r3, [r2, #52]	; 0x34
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	60fb      	str	r3, [r7, #12]
 800ac20:	4b0b      	ldr	r3, [pc, #44]	; (800ac50 <HAL_PCD_MspInit+0xa0>)
 800ac22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac24:	4a0a      	ldr	r2, [pc, #40]	; (800ac50 <HAL_PCD_MspInit+0xa0>)
 800ac26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac2a:	6453      	str	r3, [r2, #68]	; 0x44
 800ac2c:	4b08      	ldr	r3, [pc, #32]	; (800ac50 <HAL_PCD_MspInit+0xa0>)
 800ac2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac34:	60fb      	str	r3, [r7, #12]
 800ac36:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ac38:	2200      	movs	r2, #0
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	2043      	movs	r0, #67	; 0x43
 800ac3e:	f7f8 fc90 	bl	8003562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ac42:	2043      	movs	r0, #67	; 0x43
 800ac44:	f7f8 fca9 	bl	800359a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ac48:	bf00      	nop
 800ac4a:	3728      	adds	r7, #40	; 0x28
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	40023800 	.word	0x40023800
 800ac54:	40020000 	.word	0x40020000

0800ac58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	4610      	mov	r0, r2
 800ac70:	f7fe fb4d 	bl	800930e <USBD_LL_SetupStage>
}
 800ac74:	bf00      	nop
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800ac8e:	78fa      	ldrb	r2, [r7, #3]
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	4613      	mov	r3, r2
 800ac94:	00db      	lsls	r3, r3, #3
 800ac96:	4413      	add	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	440b      	add	r3, r1
 800ac9c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	78fb      	ldrb	r3, [r7, #3]
 800aca4:	4619      	mov	r1, r3
 800aca6:	f7fe fb87 	bl	80093b8 <USBD_LL_DataOutStage>
}
 800acaa:	bf00      	nop
 800acac:	3708      	adds	r7, #8
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b082      	sub	sp, #8
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	460b      	mov	r3, r1
 800acbc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800acc4:	78fa      	ldrb	r2, [r7, #3]
 800acc6:	6879      	ldr	r1, [r7, #4]
 800acc8:	4613      	mov	r3, r2
 800acca:	00db      	lsls	r3, r3, #3
 800accc:	4413      	add	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	440b      	add	r3, r1
 800acd2:	3320      	adds	r3, #32
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	78fb      	ldrb	r3, [r7, #3]
 800acd8:	4619      	mov	r1, r3
 800acda:	f7fe fc20 	bl	800951e <USBD_LL_DataInStage>
}
 800acde:	bf00      	nop
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b082      	sub	sp, #8
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fe fd5a 	bl	80097ae <USBD_LL_SOF>
}
 800acfa:	bf00      	nop
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b084      	sub	sp, #16
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	79db      	ldrb	r3, [r3, #7]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d102      	bne.n	800ad1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ad16:	2300      	movs	r3, #0
 800ad18:	73fb      	strb	r3, [r7, #15]
 800ad1a:	e008      	b.n	800ad2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	79db      	ldrb	r3, [r3, #7]
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d102      	bne.n	800ad2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ad24:	2301      	movs	r3, #1
 800ad26:	73fb      	strb	r3, [r7, #15]
 800ad28:	e001      	b.n	800ad2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ad2a:	f7f7 fc3f 	bl	80025ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ad34:	7bfa      	ldrb	r2, [r7, #15]
 800ad36:	4611      	mov	r1, r2
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7fe fcf4 	bl	8009726 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7fe fc9c 	bl	8009682 <USBD_LL_Reset>
}
 800ad4a:	bf00      	nop
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fe fcef 	bl	8009746 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	6812      	ldr	r2, [r2, #0]
 800ad76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad7a:	f043 0301 	orr.w	r3, r3, #1
 800ad7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	7adb      	ldrb	r3, [r3, #11]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d005      	beq.n	800ad94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad88:	4b04      	ldr	r3, [pc, #16]	; (800ad9c <HAL_PCD_SuspendCallback+0x48>)
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	4a03      	ldr	r2, [pc, #12]	; (800ad9c <HAL_PCD_SuspendCallback+0x48>)
 800ad8e:	f043 0306 	orr.w	r3, r3, #6
 800ad92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ad94:	bf00      	nop
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	e000ed00 	.word	0xe000ed00

0800ada0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fe fce5 	bl	800977e <USBD_LL_Resume>
}
 800adb4:	bf00      	nop
 800adb6:	3708      	adds	r7, #8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	460b      	mov	r3, r1
 800adc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800adce:	78fa      	ldrb	r2, [r7, #3]
 800add0:	4611      	mov	r1, r2
 800add2:	4618      	mov	r0, r3
 800add4:	f7fe fd3d 	bl	8009852 <USBD_LL_IsoOUTIncomplete>
}
 800add8:	bf00      	nop
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	460b      	mov	r3, r1
 800adea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800adf2:	78fa      	ldrb	r2, [r7, #3]
 800adf4:	4611      	mov	r1, r2
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fe fcf9 	bl	80097ee <USBD_LL_IsoINIncomplete>
}
 800adfc:	bf00      	nop
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7fe fd4f 	bl	80098b6 <USBD_LL_DevConnected>
}
 800ae18:	bf00      	nop
 800ae1a:	3708      	adds	r7, #8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fe fd4c 	bl	80098cc <USBD_LL_DevDisconnected>
}
 800ae34:	bf00      	nop
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d13c      	bne.n	800aec6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ae4c:	4a20      	ldr	r2, [pc, #128]	; (800aed0 <USBD_LL_Init+0x94>)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a1e      	ldr	r2, [pc, #120]	; (800aed0 <USBD_LL_Init+0x94>)
 800ae58:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae5c:	4b1c      	ldr	r3, [pc, #112]	; (800aed0 <USBD_LL_Init+0x94>)
 800ae5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ae62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ae64:	4b1a      	ldr	r3, [pc, #104]	; (800aed0 <USBD_LL_Init+0x94>)
 800ae66:	2204      	movs	r2, #4
 800ae68:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ae6a:	4b19      	ldr	r3, [pc, #100]	; (800aed0 <USBD_LL_Init+0x94>)
 800ae6c:	2202      	movs	r2, #2
 800ae6e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae70:	4b17      	ldr	r3, [pc, #92]	; (800aed0 <USBD_LL_Init+0x94>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ae76:	4b16      	ldr	r3, [pc, #88]	; (800aed0 <USBD_LL_Init+0x94>)
 800ae78:	2202      	movs	r2, #2
 800ae7a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ae7c:	4b14      	ldr	r3, [pc, #80]	; (800aed0 <USBD_LL_Init+0x94>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ae82:	4b13      	ldr	r3, [pc, #76]	; (800aed0 <USBD_LL_Init+0x94>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ae88:	4b11      	ldr	r3, [pc, #68]	; (800aed0 <USBD_LL_Init+0x94>)
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ae8e:	4b10      	ldr	r3, [pc, #64]	; (800aed0 <USBD_LL_Init+0x94>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ae94:	4b0e      	ldr	r3, [pc, #56]	; (800aed0 <USBD_LL_Init+0x94>)
 800ae96:	2200      	movs	r2, #0
 800ae98:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ae9a:	480d      	ldr	r0, [pc, #52]	; (800aed0 <USBD_LL_Init+0x94>)
 800ae9c:	f7f9 fd65 	bl	800496a <HAL_PCD_Init>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d001      	beq.n	800aeaa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aea6:	f7f7 fb81 	bl	80025ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aeaa:	2180      	movs	r1, #128	; 0x80
 800aeac:	4808      	ldr	r0, [pc, #32]	; (800aed0 <USBD_LL_Init+0x94>)
 800aeae:	f7fa ff90 	bl	8005dd2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aeb2:	2240      	movs	r2, #64	; 0x40
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	4806      	ldr	r0, [pc, #24]	; (800aed0 <USBD_LL_Init+0x94>)
 800aeb8:	f7fa ff44 	bl	8005d44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800aebc:	2280      	movs	r2, #128	; 0x80
 800aebe:	2101      	movs	r1, #1
 800aec0:	4803      	ldr	r0, [pc, #12]	; (800aed0 <USBD_LL_Init+0x94>)
 800aec2:	f7fa ff3f 	bl	8005d44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3708      	adds	r7, #8
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	20001bbc 	.word	0x20001bbc

0800aed4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aedc:	2300      	movs	r3, #0
 800aede:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7f9 fe4c 	bl	8004b88 <HAL_PCD_Start>
 800aef0:	4603      	mov	r3, r0
 800aef2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aef4:	7bfb      	ldrb	r3, [r7, #15]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f000 f942 	bl	800b180 <USBD_Get_USB_Status>
 800aefc:	4603      	mov	r3, r0
 800aefe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af00:	7bbb      	ldrb	r3, [r7, #14]
}
 800af02:	4618      	mov	r0, r3
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b084      	sub	sp, #16
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
 800af12:	4608      	mov	r0, r1
 800af14:	4611      	mov	r1, r2
 800af16:	461a      	mov	r2, r3
 800af18:	4603      	mov	r3, r0
 800af1a:	70fb      	strb	r3, [r7, #3]
 800af1c:	460b      	mov	r3, r1
 800af1e:	70bb      	strb	r3, [r7, #2]
 800af20:	4613      	mov	r3, r2
 800af22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af24:	2300      	movs	r3, #0
 800af26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800af32:	78bb      	ldrb	r3, [r7, #2]
 800af34:	883a      	ldrh	r2, [r7, #0]
 800af36:	78f9      	ldrb	r1, [r7, #3]
 800af38:	f7fa fb20 	bl	800557c <HAL_PCD_EP_Open>
 800af3c:	4603      	mov	r3, r0
 800af3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af40:	7bfb      	ldrb	r3, [r7, #15]
 800af42:	4618      	mov	r0, r3
 800af44:	f000 f91c 	bl	800b180 <USBD_Get_USB_Status>
 800af48:	4603      	mov	r3, r0
 800af4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b084      	sub	sp, #16
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
 800af5e:	460b      	mov	r3, r1
 800af60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af62:	2300      	movs	r3, #0
 800af64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af66:	2300      	movs	r3, #0
 800af68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af70:	78fa      	ldrb	r2, [r7, #3]
 800af72:	4611      	mov	r1, r2
 800af74:	4618      	mov	r0, r3
 800af76:	f7fa fb69 	bl	800564c <HAL_PCD_EP_Close>
 800af7a:	4603      	mov	r3, r0
 800af7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
 800af80:	4618      	mov	r0, r3
 800af82:	f000 f8fd 	bl	800b180 <USBD_Get_USB_Status>
 800af86:	4603      	mov	r3, r0
 800af88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	460b      	mov	r3, r1
 800af9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afae:	78fa      	ldrb	r2, [r7, #3]
 800afb0:	4611      	mov	r1, r2
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fa fc21 	bl	80057fa <HAL_PCD_EP_SetStall>
 800afb8:	4603      	mov	r3, r0
 800afba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f000 f8de 	bl	800b180 <USBD_Get_USB_Status>
 800afc4:	4603      	mov	r3, r0
 800afc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b084      	sub	sp, #16
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
 800afda:	460b      	mov	r3, r1
 800afdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afec:	78fa      	ldrb	r2, [r7, #3]
 800afee:	4611      	mov	r1, r2
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7fa fc65 	bl	80058c0 <HAL_PCD_EP_ClrStall>
 800aff6:	4603      	mov	r3, r0
 800aff8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800affa:	7bfb      	ldrb	r3, [r7, #15]
 800affc:	4618      	mov	r0, r3
 800affe:	f000 f8bf 	bl	800b180 <USBD_Get_USB_Status>
 800b002:	4603      	mov	r3, r0
 800b004:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b006:	7bbb      	ldrb	r3, [r7, #14]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b010:	b480      	push	{r7}
 800b012:	b085      	sub	sp, #20
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b022:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	da0b      	bge.n	800b044 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b02c:	78fb      	ldrb	r3, [r7, #3]
 800b02e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b032:	68f9      	ldr	r1, [r7, #12]
 800b034:	4613      	mov	r3, r2
 800b036:	00db      	lsls	r3, r3, #3
 800b038:	4413      	add	r3, r2
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	440b      	add	r3, r1
 800b03e:	3316      	adds	r3, #22
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	e00b      	b.n	800b05c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b044:	78fb      	ldrb	r3, [r7, #3]
 800b046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b04a:	68f9      	ldr	r1, [r7, #12]
 800b04c:	4613      	mov	r3, r2
 800b04e:	00db      	lsls	r3, r3, #3
 800b050:	4413      	add	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	440b      	add	r3, r1
 800b056:	f203 2356 	addw	r3, r3, #598	; 0x256
 800b05a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3714      	adds	r7, #20
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	460b      	mov	r3, r1
 800b072:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b078:	2300      	movs	r3, #0
 800b07a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b082:	78fa      	ldrb	r2, [r7, #3]
 800b084:	4611      	mov	r1, r2
 800b086:	4618      	mov	r0, r3
 800b088:	f7fa fa54 	bl	8005534 <HAL_PCD_SetAddress>
 800b08c:	4603      	mov	r3, r0
 800b08e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b090:	7bfb      	ldrb	r3, [r7, #15]
 800b092:	4618      	mov	r0, r3
 800b094:	f000 f874 	bl	800b180 <USBD_Get_USB_Status>
 800b098:	4603      	mov	r3, r0
 800b09a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b09c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b086      	sub	sp, #24
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	60f8      	str	r0, [r7, #12]
 800b0ae:	607a      	str	r2, [r7, #4]
 800b0b0:	603b      	str	r3, [r7, #0]
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b0c4:	7af9      	ldrb	r1, [r7, #11]
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	f7fa fb5c 	bl	8005786 <HAL_PCD_EP_Transmit>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0d2:	7dfb      	ldrb	r3, [r7, #23]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f000 f853 	bl	800b180 <USBD_Get_USB_Status>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0de:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3718      	adds	r7, #24
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	607a      	str	r2, [r7, #4]
 800b0f2:	603b      	str	r3, [r7, #0]
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b106:	7af9      	ldrb	r1, [r7, #11]
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	f7fa fae8 	bl	80056e0 <HAL_PCD_EP_Receive>
 800b110:	4603      	mov	r3, r0
 800b112:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b114:	7dfb      	ldrb	r3, [r7, #23]
 800b116:	4618      	mov	r0, r3
 800b118:	f000 f832 	bl	800b180 <USBD_Get_USB_Status>
 800b11c:	4603      	mov	r3, r0
 800b11e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b120:	7dbb      	ldrb	r3, [r7, #22]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3718      	adds	r7, #24
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b082      	sub	sp, #8
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
 800b132:	460b      	mov	r3, r1
 800b134:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b13c:	78fa      	ldrb	r2, [r7, #3]
 800b13e:	4611      	mov	r1, r2
 800b140:	4618      	mov	r0, r3
 800b142:	f7fa fb08 	bl	8005756 <HAL_PCD_EP_GetRxCount>
 800b146:	4603      	mov	r3, r0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b158:	4b03      	ldr	r3, [pc, #12]	; (800b168 <USBD_static_malloc+0x18>)
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	370c      	adds	r7, #12
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	200020a0 	.word	0x200020a0

0800b16c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]

}
 800b174:	bf00      	nop
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	4603      	mov	r3, r0
 800b188:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b18a:	2300      	movs	r3, #0
 800b18c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b18e:	79fb      	ldrb	r3, [r7, #7]
 800b190:	2b03      	cmp	r3, #3
 800b192:	d817      	bhi.n	800b1c4 <USBD_Get_USB_Status+0x44>
 800b194:	a201      	add	r2, pc, #4	; (adr r2, 800b19c <USBD_Get_USB_Status+0x1c>)
 800b196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b19a:	bf00      	nop
 800b19c:	0800b1ad 	.word	0x0800b1ad
 800b1a0:	0800b1b3 	.word	0x0800b1b3
 800b1a4:	0800b1b9 	.word	0x0800b1b9
 800b1a8:	0800b1bf 	.word	0x0800b1bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b1b0:	e00b      	b.n	800b1ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b1b2:	2303      	movs	r3, #3
 800b1b4:	73fb      	strb	r3, [r7, #15]
    break;
 800b1b6:	e008      	b.n	800b1ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b1bc:	e005      	b.n	800b1ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	73fb      	strb	r3, [r7, #15]
    break;
 800b1c2:	e002      	b.n	800b1ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b1c8:	bf00      	nop
  }
  return usb_status;
 800b1ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <__itoa>:
 800b1d8:	1e93      	subs	r3, r2, #2
 800b1da:	2b22      	cmp	r3, #34	; 0x22
 800b1dc:	b510      	push	{r4, lr}
 800b1de:	460c      	mov	r4, r1
 800b1e0:	d904      	bls.n	800b1ec <__itoa+0x14>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	700b      	strb	r3, [r1, #0]
 800b1e6:	461c      	mov	r4, r3
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	bd10      	pop	{r4, pc}
 800b1ec:	2a0a      	cmp	r2, #10
 800b1ee:	d109      	bne.n	800b204 <__itoa+0x2c>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	da07      	bge.n	800b204 <__itoa+0x2c>
 800b1f4:	232d      	movs	r3, #45	; 0x2d
 800b1f6:	700b      	strb	r3, [r1, #0]
 800b1f8:	4240      	negs	r0, r0
 800b1fa:	2101      	movs	r1, #1
 800b1fc:	4421      	add	r1, r4
 800b1fe:	f000 f805 	bl	800b20c <__utoa>
 800b202:	e7f1      	b.n	800b1e8 <__itoa+0x10>
 800b204:	2100      	movs	r1, #0
 800b206:	e7f9      	b.n	800b1fc <__itoa+0x24>

0800b208 <itoa>:
 800b208:	f7ff bfe6 	b.w	800b1d8 <__itoa>

0800b20c <__utoa>:
 800b20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b20e:	4c1f      	ldr	r4, [pc, #124]	; (800b28c <__utoa+0x80>)
 800b210:	b08b      	sub	sp, #44	; 0x2c
 800b212:	4605      	mov	r5, r0
 800b214:	460b      	mov	r3, r1
 800b216:	466e      	mov	r6, sp
 800b218:	f104 0c20 	add.w	ip, r4, #32
 800b21c:	6820      	ldr	r0, [r4, #0]
 800b21e:	6861      	ldr	r1, [r4, #4]
 800b220:	4637      	mov	r7, r6
 800b222:	c703      	stmia	r7!, {r0, r1}
 800b224:	3408      	adds	r4, #8
 800b226:	4564      	cmp	r4, ip
 800b228:	463e      	mov	r6, r7
 800b22a:	d1f7      	bne.n	800b21c <__utoa+0x10>
 800b22c:	7921      	ldrb	r1, [r4, #4]
 800b22e:	7139      	strb	r1, [r7, #4]
 800b230:	1e91      	subs	r1, r2, #2
 800b232:	6820      	ldr	r0, [r4, #0]
 800b234:	6038      	str	r0, [r7, #0]
 800b236:	2922      	cmp	r1, #34	; 0x22
 800b238:	f04f 0100 	mov.w	r1, #0
 800b23c:	d904      	bls.n	800b248 <__utoa+0x3c>
 800b23e:	7019      	strb	r1, [r3, #0]
 800b240:	460b      	mov	r3, r1
 800b242:	4618      	mov	r0, r3
 800b244:	b00b      	add	sp, #44	; 0x2c
 800b246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b248:	1e58      	subs	r0, r3, #1
 800b24a:	4684      	mov	ip, r0
 800b24c:	fbb5 f7f2 	udiv	r7, r5, r2
 800b250:	fb02 5617 	mls	r6, r2, r7, r5
 800b254:	3628      	adds	r6, #40	; 0x28
 800b256:	446e      	add	r6, sp
 800b258:	460c      	mov	r4, r1
 800b25a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b25e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b262:	462e      	mov	r6, r5
 800b264:	42b2      	cmp	r2, r6
 800b266:	f101 0101 	add.w	r1, r1, #1
 800b26a:	463d      	mov	r5, r7
 800b26c:	d9ee      	bls.n	800b24c <__utoa+0x40>
 800b26e:	2200      	movs	r2, #0
 800b270:	545a      	strb	r2, [r3, r1]
 800b272:	1919      	adds	r1, r3, r4
 800b274:	1aa5      	subs	r5, r4, r2
 800b276:	42aa      	cmp	r2, r5
 800b278:	dae3      	bge.n	800b242 <__utoa+0x36>
 800b27a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b27e:	780e      	ldrb	r6, [r1, #0]
 800b280:	7006      	strb	r6, [r0, #0]
 800b282:	3201      	adds	r2, #1
 800b284:	f801 5901 	strb.w	r5, [r1], #-1
 800b288:	e7f4      	b.n	800b274 <__utoa+0x68>
 800b28a:	bf00      	nop
 800b28c:	0800dd94 	.word	0x0800dd94

0800b290 <std>:
 800b290:	2300      	movs	r3, #0
 800b292:	b510      	push	{r4, lr}
 800b294:	4604      	mov	r4, r0
 800b296:	e9c0 3300 	strd	r3, r3, [r0]
 800b29a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b29e:	6083      	str	r3, [r0, #8]
 800b2a0:	8181      	strh	r1, [r0, #12]
 800b2a2:	6643      	str	r3, [r0, #100]	; 0x64
 800b2a4:	81c2      	strh	r2, [r0, #14]
 800b2a6:	6183      	str	r3, [r0, #24]
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	2208      	movs	r2, #8
 800b2ac:	305c      	adds	r0, #92	; 0x5c
 800b2ae:	f000 fa0f 	bl	800b6d0 <memset>
 800b2b2:	4b0d      	ldr	r3, [pc, #52]	; (800b2e8 <std+0x58>)
 800b2b4:	6263      	str	r3, [r4, #36]	; 0x24
 800b2b6:	4b0d      	ldr	r3, [pc, #52]	; (800b2ec <std+0x5c>)
 800b2b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2ba:	4b0d      	ldr	r3, [pc, #52]	; (800b2f0 <std+0x60>)
 800b2bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2be:	4b0d      	ldr	r3, [pc, #52]	; (800b2f4 <std+0x64>)
 800b2c0:	6323      	str	r3, [r4, #48]	; 0x30
 800b2c2:	4b0d      	ldr	r3, [pc, #52]	; (800b2f8 <std+0x68>)
 800b2c4:	6224      	str	r4, [r4, #32]
 800b2c6:	429c      	cmp	r4, r3
 800b2c8:	d006      	beq.n	800b2d8 <std+0x48>
 800b2ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b2ce:	4294      	cmp	r4, r2
 800b2d0:	d002      	beq.n	800b2d8 <std+0x48>
 800b2d2:	33d0      	adds	r3, #208	; 0xd0
 800b2d4:	429c      	cmp	r4, r3
 800b2d6:	d105      	bne.n	800b2e4 <std+0x54>
 800b2d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2e0:	f000 ba6e 	b.w	800b7c0 <__retarget_lock_init_recursive>
 800b2e4:	bd10      	pop	{r4, pc}
 800b2e6:	bf00      	nop
 800b2e8:	0800b501 	.word	0x0800b501
 800b2ec:	0800b523 	.word	0x0800b523
 800b2f0:	0800b55b 	.word	0x0800b55b
 800b2f4:	0800b57f 	.word	0x0800b57f
 800b2f8:	200022c0 	.word	0x200022c0

0800b2fc <stdio_exit_handler>:
 800b2fc:	4a02      	ldr	r2, [pc, #8]	; (800b308 <stdio_exit_handler+0xc>)
 800b2fe:	4903      	ldr	r1, [pc, #12]	; (800b30c <stdio_exit_handler+0x10>)
 800b300:	4803      	ldr	r0, [pc, #12]	; (800b310 <stdio_exit_handler+0x14>)
 800b302:	f000 b869 	b.w	800b3d8 <_fwalk_sglue>
 800b306:	bf00      	nop
 800b308:	20000110 	.word	0x20000110
 800b30c:	0800c091 	.word	0x0800c091
 800b310:	2000011c 	.word	0x2000011c

0800b314 <cleanup_stdio>:
 800b314:	6841      	ldr	r1, [r0, #4]
 800b316:	4b0c      	ldr	r3, [pc, #48]	; (800b348 <cleanup_stdio+0x34>)
 800b318:	4299      	cmp	r1, r3
 800b31a:	b510      	push	{r4, lr}
 800b31c:	4604      	mov	r4, r0
 800b31e:	d001      	beq.n	800b324 <cleanup_stdio+0x10>
 800b320:	f000 feb6 	bl	800c090 <_fflush_r>
 800b324:	68a1      	ldr	r1, [r4, #8]
 800b326:	4b09      	ldr	r3, [pc, #36]	; (800b34c <cleanup_stdio+0x38>)
 800b328:	4299      	cmp	r1, r3
 800b32a:	d002      	beq.n	800b332 <cleanup_stdio+0x1e>
 800b32c:	4620      	mov	r0, r4
 800b32e:	f000 feaf 	bl	800c090 <_fflush_r>
 800b332:	68e1      	ldr	r1, [r4, #12]
 800b334:	4b06      	ldr	r3, [pc, #24]	; (800b350 <cleanup_stdio+0x3c>)
 800b336:	4299      	cmp	r1, r3
 800b338:	d004      	beq.n	800b344 <cleanup_stdio+0x30>
 800b33a:	4620      	mov	r0, r4
 800b33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b340:	f000 bea6 	b.w	800c090 <_fflush_r>
 800b344:	bd10      	pop	{r4, pc}
 800b346:	bf00      	nop
 800b348:	200022c0 	.word	0x200022c0
 800b34c:	20002328 	.word	0x20002328
 800b350:	20002390 	.word	0x20002390

0800b354 <global_stdio_init.part.0>:
 800b354:	b510      	push	{r4, lr}
 800b356:	4b0b      	ldr	r3, [pc, #44]	; (800b384 <global_stdio_init.part.0+0x30>)
 800b358:	4c0b      	ldr	r4, [pc, #44]	; (800b388 <global_stdio_init.part.0+0x34>)
 800b35a:	4a0c      	ldr	r2, [pc, #48]	; (800b38c <global_stdio_init.part.0+0x38>)
 800b35c:	601a      	str	r2, [r3, #0]
 800b35e:	4620      	mov	r0, r4
 800b360:	2200      	movs	r2, #0
 800b362:	2104      	movs	r1, #4
 800b364:	f7ff ff94 	bl	800b290 <std>
 800b368:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b36c:	2201      	movs	r2, #1
 800b36e:	2109      	movs	r1, #9
 800b370:	f7ff ff8e 	bl	800b290 <std>
 800b374:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b378:	2202      	movs	r2, #2
 800b37a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b37e:	2112      	movs	r1, #18
 800b380:	f7ff bf86 	b.w	800b290 <std>
 800b384:	200023f8 	.word	0x200023f8
 800b388:	200022c0 	.word	0x200022c0
 800b38c:	0800b2fd 	.word	0x0800b2fd

0800b390 <__sfp_lock_acquire>:
 800b390:	4801      	ldr	r0, [pc, #4]	; (800b398 <__sfp_lock_acquire+0x8>)
 800b392:	f000 ba16 	b.w	800b7c2 <__retarget_lock_acquire_recursive>
 800b396:	bf00      	nop
 800b398:	20002401 	.word	0x20002401

0800b39c <__sfp_lock_release>:
 800b39c:	4801      	ldr	r0, [pc, #4]	; (800b3a4 <__sfp_lock_release+0x8>)
 800b39e:	f000 ba11 	b.w	800b7c4 <__retarget_lock_release_recursive>
 800b3a2:	bf00      	nop
 800b3a4:	20002401 	.word	0x20002401

0800b3a8 <__sinit>:
 800b3a8:	b510      	push	{r4, lr}
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	f7ff fff0 	bl	800b390 <__sfp_lock_acquire>
 800b3b0:	6a23      	ldr	r3, [r4, #32]
 800b3b2:	b11b      	cbz	r3, 800b3bc <__sinit+0x14>
 800b3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3b8:	f7ff bff0 	b.w	800b39c <__sfp_lock_release>
 800b3bc:	4b04      	ldr	r3, [pc, #16]	; (800b3d0 <__sinit+0x28>)
 800b3be:	6223      	str	r3, [r4, #32]
 800b3c0:	4b04      	ldr	r3, [pc, #16]	; (800b3d4 <__sinit+0x2c>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1f5      	bne.n	800b3b4 <__sinit+0xc>
 800b3c8:	f7ff ffc4 	bl	800b354 <global_stdio_init.part.0>
 800b3cc:	e7f2      	b.n	800b3b4 <__sinit+0xc>
 800b3ce:	bf00      	nop
 800b3d0:	0800b315 	.word	0x0800b315
 800b3d4:	200023f8 	.word	0x200023f8

0800b3d8 <_fwalk_sglue>:
 800b3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3dc:	4607      	mov	r7, r0
 800b3de:	4688      	mov	r8, r1
 800b3e0:	4614      	mov	r4, r2
 800b3e2:	2600      	movs	r6, #0
 800b3e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3e8:	f1b9 0901 	subs.w	r9, r9, #1
 800b3ec:	d505      	bpl.n	800b3fa <_fwalk_sglue+0x22>
 800b3ee:	6824      	ldr	r4, [r4, #0]
 800b3f0:	2c00      	cmp	r4, #0
 800b3f2:	d1f7      	bne.n	800b3e4 <_fwalk_sglue+0xc>
 800b3f4:	4630      	mov	r0, r6
 800b3f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3fa:	89ab      	ldrh	r3, [r5, #12]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d907      	bls.n	800b410 <_fwalk_sglue+0x38>
 800b400:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b404:	3301      	adds	r3, #1
 800b406:	d003      	beq.n	800b410 <_fwalk_sglue+0x38>
 800b408:	4629      	mov	r1, r5
 800b40a:	4638      	mov	r0, r7
 800b40c:	47c0      	blx	r8
 800b40e:	4306      	orrs	r6, r0
 800b410:	3568      	adds	r5, #104	; 0x68
 800b412:	e7e9      	b.n	800b3e8 <_fwalk_sglue+0x10>

0800b414 <iprintf>:
 800b414:	b40f      	push	{r0, r1, r2, r3}
 800b416:	b507      	push	{r0, r1, r2, lr}
 800b418:	4906      	ldr	r1, [pc, #24]	; (800b434 <iprintf+0x20>)
 800b41a:	ab04      	add	r3, sp, #16
 800b41c:	6808      	ldr	r0, [r1, #0]
 800b41e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b422:	6881      	ldr	r1, [r0, #8]
 800b424:	9301      	str	r3, [sp, #4]
 800b426:	f000 fb03 	bl	800ba30 <_vfiprintf_r>
 800b42a:	b003      	add	sp, #12
 800b42c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b430:	b004      	add	sp, #16
 800b432:	4770      	bx	lr
 800b434:	20000168 	.word	0x20000168

0800b438 <putchar>:
 800b438:	4b02      	ldr	r3, [pc, #8]	; (800b444 <putchar+0xc>)
 800b43a:	4601      	mov	r1, r0
 800b43c:	6818      	ldr	r0, [r3, #0]
 800b43e:	6882      	ldr	r2, [r0, #8]
 800b440:	f000 beb0 	b.w	800c1a4 <_putc_r>
 800b444:	20000168 	.word	0x20000168

0800b448 <_puts_r>:
 800b448:	6a03      	ldr	r3, [r0, #32]
 800b44a:	b570      	push	{r4, r5, r6, lr}
 800b44c:	6884      	ldr	r4, [r0, #8]
 800b44e:	4605      	mov	r5, r0
 800b450:	460e      	mov	r6, r1
 800b452:	b90b      	cbnz	r3, 800b458 <_puts_r+0x10>
 800b454:	f7ff ffa8 	bl	800b3a8 <__sinit>
 800b458:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b45a:	07db      	lsls	r3, r3, #31
 800b45c:	d405      	bmi.n	800b46a <_puts_r+0x22>
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	0598      	lsls	r0, r3, #22
 800b462:	d402      	bmi.n	800b46a <_puts_r+0x22>
 800b464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b466:	f000 f9ac 	bl	800b7c2 <__retarget_lock_acquire_recursive>
 800b46a:	89a3      	ldrh	r3, [r4, #12]
 800b46c:	0719      	lsls	r1, r3, #28
 800b46e:	d513      	bpl.n	800b498 <_puts_r+0x50>
 800b470:	6923      	ldr	r3, [r4, #16]
 800b472:	b18b      	cbz	r3, 800b498 <_puts_r+0x50>
 800b474:	3e01      	subs	r6, #1
 800b476:	68a3      	ldr	r3, [r4, #8]
 800b478:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b47c:	3b01      	subs	r3, #1
 800b47e:	60a3      	str	r3, [r4, #8]
 800b480:	b9e9      	cbnz	r1, 800b4be <_puts_r+0x76>
 800b482:	2b00      	cmp	r3, #0
 800b484:	da2e      	bge.n	800b4e4 <_puts_r+0x9c>
 800b486:	4622      	mov	r2, r4
 800b488:	210a      	movs	r1, #10
 800b48a:	4628      	mov	r0, r5
 800b48c:	f000 f87b 	bl	800b586 <__swbuf_r>
 800b490:	3001      	adds	r0, #1
 800b492:	d007      	beq.n	800b4a4 <_puts_r+0x5c>
 800b494:	250a      	movs	r5, #10
 800b496:	e007      	b.n	800b4a8 <_puts_r+0x60>
 800b498:	4621      	mov	r1, r4
 800b49a:	4628      	mov	r0, r5
 800b49c:	f000 f8b0 	bl	800b600 <__swsetup_r>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d0e7      	beq.n	800b474 <_puts_r+0x2c>
 800b4a4:	f04f 35ff 	mov.w	r5, #4294967295
 800b4a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4aa:	07da      	lsls	r2, r3, #31
 800b4ac:	d405      	bmi.n	800b4ba <_puts_r+0x72>
 800b4ae:	89a3      	ldrh	r3, [r4, #12]
 800b4b0:	059b      	lsls	r3, r3, #22
 800b4b2:	d402      	bmi.n	800b4ba <_puts_r+0x72>
 800b4b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4b6:	f000 f985 	bl	800b7c4 <__retarget_lock_release_recursive>
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	bd70      	pop	{r4, r5, r6, pc}
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	da04      	bge.n	800b4cc <_puts_r+0x84>
 800b4c2:	69a2      	ldr	r2, [r4, #24]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	dc06      	bgt.n	800b4d6 <_puts_r+0x8e>
 800b4c8:	290a      	cmp	r1, #10
 800b4ca:	d004      	beq.n	800b4d6 <_puts_r+0x8e>
 800b4cc:	6823      	ldr	r3, [r4, #0]
 800b4ce:	1c5a      	adds	r2, r3, #1
 800b4d0:	6022      	str	r2, [r4, #0]
 800b4d2:	7019      	strb	r1, [r3, #0]
 800b4d4:	e7cf      	b.n	800b476 <_puts_r+0x2e>
 800b4d6:	4622      	mov	r2, r4
 800b4d8:	4628      	mov	r0, r5
 800b4da:	f000 f854 	bl	800b586 <__swbuf_r>
 800b4de:	3001      	adds	r0, #1
 800b4e0:	d1c9      	bne.n	800b476 <_puts_r+0x2e>
 800b4e2:	e7df      	b.n	800b4a4 <_puts_r+0x5c>
 800b4e4:	6823      	ldr	r3, [r4, #0]
 800b4e6:	250a      	movs	r5, #10
 800b4e8:	1c5a      	adds	r2, r3, #1
 800b4ea:	6022      	str	r2, [r4, #0]
 800b4ec:	701d      	strb	r5, [r3, #0]
 800b4ee:	e7db      	b.n	800b4a8 <_puts_r+0x60>

0800b4f0 <puts>:
 800b4f0:	4b02      	ldr	r3, [pc, #8]	; (800b4fc <puts+0xc>)
 800b4f2:	4601      	mov	r1, r0
 800b4f4:	6818      	ldr	r0, [r3, #0]
 800b4f6:	f7ff bfa7 	b.w	800b448 <_puts_r>
 800b4fa:	bf00      	nop
 800b4fc:	20000168 	.word	0x20000168

0800b500 <__sread>:
 800b500:	b510      	push	{r4, lr}
 800b502:	460c      	mov	r4, r1
 800b504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b508:	f000 f90c 	bl	800b724 <_read_r>
 800b50c:	2800      	cmp	r0, #0
 800b50e:	bfab      	itete	ge
 800b510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b512:	89a3      	ldrhlt	r3, [r4, #12]
 800b514:	181b      	addge	r3, r3, r0
 800b516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b51a:	bfac      	ite	ge
 800b51c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b51e:	81a3      	strhlt	r3, [r4, #12]
 800b520:	bd10      	pop	{r4, pc}

0800b522 <__swrite>:
 800b522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b526:	461f      	mov	r7, r3
 800b528:	898b      	ldrh	r3, [r1, #12]
 800b52a:	05db      	lsls	r3, r3, #23
 800b52c:	4605      	mov	r5, r0
 800b52e:	460c      	mov	r4, r1
 800b530:	4616      	mov	r6, r2
 800b532:	d505      	bpl.n	800b540 <__swrite+0x1e>
 800b534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b538:	2302      	movs	r3, #2
 800b53a:	2200      	movs	r2, #0
 800b53c:	f000 f8e0 	bl	800b700 <_lseek_r>
 800b540:	89a3      	ldrh	r3, [r4, #12]
 800b542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b54a:	81a3      	strh	r3, [r4, #12]
 800b54c:	4632      	mov	r2, r6
 800b54e:	463b      	mov	r3, r7
 800b550:	4628      	mov	r0, r5
 800b552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b556:	f000 b8f7 	b.w	800b748 <_write_r>

0800b55a <__sseek>:
 800b55a:	b510      	push	{r4, lr}
 800b55c:	460c      	mov	r4, r1
 800b55e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b562:	f000 f8cd 	bl	800b700 <_lseek_r>
 800b566:	1c43      	adds	r3, r0, #1
 800b568:	89a3      	ldrh	r3, [r4, #12]
 800b56a:	bf15      	itete	ne
 800b56c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b56e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b576:	81a3      	strheq	r3, [r4, #12]
 800b578:	bf18      	it	ne
 800b57a:	81a3      	strhne	r3, [r4, #12]
 800b57c:	bd10      	pop	{r4, pc}

0800b57e <__sclose>:
 800b57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b582:	f000 b8ad 	b.w	800b6e0 <_close_r>

0800b586 <__swbuf_r>:
 800b586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b588:	460e      	mov	r6, r1
 800b58a:	4614      	mov	r4, r2
 800b58c:	4605      	mov	r5, r0
 800b58e:	b118      	cbz	r0, 800b598 <__swbuf_r+0x12>
 800b590:	6a03      	ldr	r3, [r0, #32]
 800b592:	b90b      	cbnz	r3, 800b598 <__swbuf_r+0x12>
 800b594:	f7ff ff08 	bl	800b3a8 <__sinit>
 800b598:	69a3      	ldr	r3, [r4, #24]
 800b59a:	60a3      	str	r3, [r4, #8]
 800b59c:	89a3      	ldrh	r3, [r4, #12]
 800b59e:	071a      	lsls	r2, r3, #28
 800b5a0:	d525      	bpl.n	800b5ee <__swbuf_r+0x68>
 800b5a2:	6923      	ldr	r3, [r4, #16]
 800b5a4:	b31b      	cbz	r3, 800b5ee <__swbuf_r+0x68>
 800b5a6:	6823      	ldr	r3, [r4, #0]
 800b5a8:	6922      	ldr	r2, [r4, #16]
 800b5aa:	1a98      	subs	r0, r3, r2
 800b5ac:	6963      	ldr	r3, [r4, #20]
 800b5ae:	b2f6      	uxtb	r6, r6
 800b5b0:	4283      	cmp	r3, r0
 800b5b2:	4637      	mov	r7, r6
 800b5b4:	dc04      	bgt.n	800b5c0 <__swbuf_r+0x3a>
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	f000 fd69 	bl	800c090 <_fflush_r>
 800b5be:	b9e0      	cbnz	r0, 800b5fa <__swbuf_r+0x74>
 800b5c0:	68a3      	ldr	r3, [r4, #8]
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	60a3      	str	r3, [r4, #8]
 800b5c6:	6823      	ldr	r3, [r4, #0]
 800b5c8:	1c5a      	adds	r2, r3, #1
 800b5ca:	6022      	str	r2, [r4, #0]
 800b5cc:	701e      	strb	r6, [r3, #0]
 800b5ce:	6962      	ldr	r2, [r4, #20]
 800b5d0:	1c43      	adds	r3, r0, #1
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d004      	beq.n	800b5e0 <__swbuf_r+0x5a>
 800b5d6:	89a3      	ldrh	r3, [r4, #12]
 800b5d8:	07db      	lsls	r3, r3, #31
 800b5da:	d506      	bpl.n	800b5ea <__swbuf_r+0x64>
 800b5dc:	2e0a      	cmp	r6, #10
 800b5de:	d104      	bne.n	800b5ea <__swbuf_r+0x64>
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	f000 fd54 	bl	800c090 <_fflush_r>
 800b5e8:	b938      	cbnz	r0, 800b5fa <__swbuf_r+0x74>
 800b5ea:	4638      	mov	r0, r7
 800b5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5ee:	4621      	mov	r1, r4
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	f000 f805 	bl	800b600 <__swsetup_r>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d0d5      	beq.n	800b5a6 <__swbuf_r+0x20>
 800b5fa:	f04f 37ff 	mov.w	r7, #4294967295
 800b5fe:	e7f4      	b.n	800b5ea <__swbuf_r+0x64>

0800b600 <__swsetup_r>:
 800b600:	b538      	push	{r3, r4, r5, lr}
 800b602:	4b2a      	ldr	r3, [pc, #168]	; (800b6ac <__swsetup_r+0xac>)
 800b604:	4605      	mov	r5, r0
 800b606:	6818      	ldr	r0, [r3, #0]
 800b608:	460c      	mov	r4, r1
 800b60a:	b118      	cbz	r0, 800b614 <__swsetup_r+0x14>
 800b60c:	6a03      	ldr	r3, [r0, #32]
 800b60e:	b90b      	cbnz	r3, 800b614 <__swsetup_r+0x14>
 800b610:	f7ff feca 	bl	800b3a8 <__sinit>
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b61a:	0718      	lsls	r0, r3, #28
 800b61c:	d422      	bmi.n	800b664 <__swsetup_r+0x64>
 800b61e:	06d9      	lsls	r1, r3, #27
 800b620:	d407      	bmi.n	800b632 <__swsetup_r+0x32>
 800b622:	2309      	movs	r3, #9
 800b624:	602b      	str	r3, [r5, #0]
 800b626:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b62a:	81a3      	strh	r3, [r4, #12]
 800b62c:	f04f 30ff 	mov.w	r0, #4294967295
 800b630:	e034      	b.n	800b69c <__swsetup_r+0x9c>
 800b632:	0758      	lsls	r0, r3, #29
 800b634:	d512      	bpl.n	800b65c <__swsetup_r+0x5c>
 800b636:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b638:	b141      	cbz	r1, 800b64c <__swsetup_r+0x4c>
 800b63a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b63e:	4299      	cmp	r1, r3
 800b640:	d002      	beq.n	800b648 <__swsetup_r+0x48>
 800b642:	4628      	mov	r0, r5
 800b644:	f000 f8d2 	bl	800b7ec <_free_r>
 800b648:	2300      	movs	r3, #0
 800b64a:	6363      	str	r3, [r4, #52]	; 0x34
 800b64c:	89a3      	ldrh	r3, [r4, #12]
 800b64e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b652:	81a3      	strh	r3, [r4, #12]
 800b654:	2300      	movs	r3, #0
 800b656:	6063      	str	r3, [r4, #4]
 800b658:	6923      	ldr	r3, [r4, #16]
 800b65a:	6023      	str	r3, [r4, #0]
 800b65c:	89a3      	ldrh	r3, [r4, #12]
 800b65e:	f043 0308 	orr.w	r3, r3, #8
 800b662:	81a3      	strh	r3, [r4, #12]
 800b664:	6923      	ldr	r3, [r4, #16]
 800b666:	b94b      	cbnz	r3, 800b67c <__swsetup_r+0x7c>
 800b668:	89a3      	ldrh	r3, [r4, #12]
 800b66a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b66e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b672:	d003      	beq.n	800b67c <__swsetup_r+0x7c>
 800b674:	4621      	mov	r1, r4
 800b676:	4628      	mov	r0, r5
 800b678:	f000 fd58 	bl	800c12c <__smakebuf_r>
 800b67c:	89a0      	ldrh	r0, [r4, #12]
 800b67e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b682:	f010 0301 	ands.w	r3, r0, #1
 800b686:	d00a      	beq.n	800b69e <__swsetup_r+0x9e>
 800b688:	2300      	movs	r3, #0
 800b68a:	60a3      	str	r3, [r4, #8]
 800b68c:	6963      	ldr	r3, [r4, #20]
 800b68e:	425b      	negs	r3, r3
 800b690:	61a3      	str	r3, [r4, #24]
 800b692:	6923      	ldr	r3, [r4, #16]
 800b694:	b943      	cbnz	r3, 800b6a8 <__swsetup_r+0xa8>
 800b696:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b69a:	d1c4      	bne.n	800b626 <__swsetup_r+0x26>
 800b69c:	bd38      	pop	{r3, r4, r5, pc}
 800b69e:	0781      	lsls	r1, r0, #30
 800b6a0:	bf58      	it	pl
 800b6a2:	6963      	ldrpl	r3, [r4, #20]
 800b6a4:	60a3      	str	r3, [r4, #8]
 800b6a6:	e7f4      	b.n	800b692 <__swsetup_r+0x92>
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	e7f7      	b.n	800b69c <__swsetup_r+0x9c>
 800b6ac:	20000168 	.word	0x20000168

0800b6b0 <memcmp>:
 800b6b0:	b510      	push	{r4, lr}
 800b6b2:	3901      	subs	r1, #1
 800b6b4:	4402      	add	r2, r0
 800b6b6:	4290      	cmp	r0, r2
 800b6b8:	d101      	bne.n	800b6be <memcmp+0xe>
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	e005      	b.n	800b6ca <memcmp+0x1a>
 800b6be:	7803      	ldrb	r3, [r0, #0]
 800b6c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b6c4:	42a3      	cmp	r3, r4
 800b6c6:	d001      	beq.n	800b6cc <memcmp+0x1c>
 800b6c8:	1b18      	subs	r0, r3, r4
 800b6ca:	bd10      	pop	{r4, pc}
 800b6cc:	3001      	adds	r0, #1
 800b6ce:	e7f2      	b.n	800b6b6 <memcmp+0x6>

0800b6d0 <memset>:
 800b6d0:	4402      	add	r2, r0
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d100      	bne.n	800b6da <memset+0xa>
 800b6d8:	4770      	bx	lr
 800b6da:	f803 1b01 	strb.w	r1, [r3], #1
 800b6de:	e7f9      	b.n	800b6d4 <memset+0x4>

0800b6e0 <_close_r>:
 800b6e0:	b538      	push	{r3, r4, r5, lr}
 800b6e2:	4d06      	ldr	r5, [pc, #24]	; (800b6fc <_close_r+0x1c>)
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	4608      	mov	r0, r1
 800b6ea:	602b      	str	r3, [r5, #0]
 800b6ec:	f7f7 fd21 	bl	8003132 <_close>
 800b6f0:	1c43      	adds	r3, r0, #1
 800b6f2:	d102      	bne.n	800b6fa <_close_r+0x1a>
 800b6f4:	682b      	ldr	r3, [r5, #0]
 800b6f6:	b103      	cbz	r3, 800b6fa <_close_r+0x1a>
 800b6f8:	6023      	str	r3, [r4, #0]
 800b6fa:	bd38      	pop	{r3, r4, r5, pc}
 800b6fc:	200023fc 	.word	0x200023fc

0800b700 <_lseek_r>:
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	4d07      	ldr	r5, [pc, #28]	; (800b720 <_lseek_r+0x20>)
 800b704:	4604      	mov	r4, r0
 800b706:	4608      	mov	r0, r1
 800b708:	4611      	mov	r1, r2
 800b70a:	2200      	movs	r2, #0
 800b70c:	602a      	str	r2, [r5, #0]
 800b70e:	461a      	mov	r2, r3
 800b710:	f7f7 fd36 	bl	8003180 <_lseek>
 800b714:	1c43      	adds	r3, r0, #1
 800b716:	d102      	bne.n	800b71e <_lseek_r+0x1e>
 800b718:	682b      	ldr	r3, [r5, #0]
 800b71a:	b103      	cbz	r3, 800b71e <_lseek_r+0x1e>
 800b71c:	6023      	str	r3, [r4, #0]
 800b71e:	bd38      	pop	{r3, r4, r5, pc}
 800b720:	200023fc 	.word	0x200023fc

0800b724 <_read_r>:
 800b724:	b538      	push	{r3, r4, r5, lr}
 800b726:	4d07      	ldr	r5, [pc, #28]	; (800b744 <_read_r+0x20>)
 800b728:	4604      	mov	r4, r0
 800b72a:	4608      	mov	r0, r1
 800b72c:	4611      	mov	r1, r2
 800b72e:	2200      	movs	r2, #0
 800b730:	602a      	str	r2, [r5, #0]
 800b732:	461a      	mov	r2, r3
 800b734:	f7f7 fce0 	bl	80030f8 <_read>
 800b738:	1c43      	adds	r3, r0, #1
 800b73a:	d102      	bne.n	800b742 <_read_r+0x1e>
 800b73c:	682b      	ldr	r3, [r5, #0]
 800b73e:	b103      	cbz	r3, 800b742 <_read_r+0x1e>
 800b740:	6023      	str	r3, [r4, #0]
 800b742:	bd38      	pop	{r3, r4, r5, pc}
 800b744:	200023fc 	.word	0x200023fc

0800b748 <_write_r>:
 800b748:	b538      	push	{r3, r4, r5, lr}
 800b74a:	4d07      	ldr	r5, [pc, #28]	; (800b768 <_write_r+0x20>)
 800b74c:	4604      	mov	r4, r0
 800b74e:	4608      	mov	r0, r1
 800b750:	4611      	mov	r1, r2
 800b752:	2200      	movs	r2, #0
 800b754:	602a      	str	r2, [r5, #0]
 800b756:	461a      	mov	r2, r3
 800b758:	f7f6 fe8c 	bl	8002474 <_write>
 800b75c:	1c43      	adds	r3, r0, #1
 800b75e:	d102      	bne.n	800b766 <_write_r+0x1e>
 800b760:	682b      	ldr	r3, [r5, #0]
 800b762:	b103      	cbz	r3, 800b766 <_write_r+0x1e>
 800b764:	6023      	str	r3, [r4, #0]
 800b766:	bd38      	pop	{r3, r4, r5, pc}
 800b768:	200023fc 	.word	0x200023fc

0800b76c <__errno>:
 800b76c:	4b01      	ldr	r3, [pc, #4]	; (800b774 <__errno+0x8>)
 800b76e:	6818      	ldr	r0, [r3, #0]
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	20000168 	.word	0x20000168

0800b778 <__libc_init_array>:
 800b778:	b570      	push	{r4, r5, r6, lr}
 800b77a:	4d0d      	ldr	r5, [pc, #52]	; (800b7b0 <__libc_init_array+0x38>)
 800b77c:	4c0d      	ldr	r4, [pc, #52]	; (800b7b4 <__libc_init_array+0x3c>)
 800b77e:	1b64      	subs	r4, r4, r5
 800b780:	10a4      	asrs	r4, r4, #2
 800b782:	2600      	movs	r6, #0
 800b784:	42a6      	cmp	r6, r4
 800b786:	d109      	bne.n	800b79c <__libc_init_array+0x24>
 800b788:	4d0b      	ldr	r5, [pc, #44]	; (800b7b8 <__libc_init_array+0x40>)
 800b78a:	4c0c      	ldr	r4, [pc, #48]	; (800b7bc <__libc_init_array+0x44>)
 800b78c:	f000 fd70 	bl	800c270 <_init>
 800b790:	1b64      	subs	r4, r4, r5
 800b792:	10a4      	asrs	r4, r4, #2
 800b794:	2600      	movs	r6, #0
 800b796:	42a6      	cmp	r6, r4
 800b798:	d105      	bne.n	800b7a6 <__libc_init_array+0x2e>
 800b79a:	bd70      	pop	{r4, r5, r6, pc}
 800b79c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7a0:	4798      	blx	r3
 800b7a2:	3601      	adds	r6, #1
 800b7a4:	e7ee      	b.n	800b784 <__libc_init_array+0xc>
 800b7a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7aa:	4798      	blx	r3
 800b7ac:	3601      	adds	r6, #1
 800b7ae:	e7f2      	b.n	800b796 <__libc_init_array+0x1e>
 800b7b0:	0800ddf4 	.word	0x0800ddf4
 800b7b4:	0800ddf4 	.word	0x0800ddf4
 800b7b8:	0800ddf4 	.word	0x0800ddf4
 800b7bc:	0800ddf8 	.word	0x0800ddf8

0800b7c0 <__retarget_lock_init_recursive>:
 800b7c0:	4770      	bx	lr

0800b7c2 <__retarget_lock_acquire_recursive>:
 800b7c2:	4770      	bx	lr

0800b7c4 <__retarget_lock_release_recursive>:
 800b7c4:	4770      	bx	lr

0800b7c6 <__aeabi_memcpy>:
 800b7c6:	f000 b803 	b.w	800b7d0 <memcpy>

0800b7ca <__aeabi_memclr>:
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f7f5 b89e 	b.w	800090c <__aeabi_memset>

0800b7d0 <memcpy>:
 800b7d0:	440a      	add	r2, r1
 800b7d2:	4291      	cmp	r1, r2
 800b7d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7d8:	d100      	bne.n	800b7dc <memcpy+0xc>
 800b7da:	4770      	bx	lr
 800b7dc:	b510      	push	{r4, lr}
 800b7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7e6:	4291      	cmp	r1, r2
 800b7e8:	d1f9      	bne.n	800b7de <memcpy+0xe>
 800b7ea:	bd10      	pop	{r4, pc}

0800b7ec <_free_r>:
 800b7ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7ee:	2900      	cmp	r1, #0
 800b7f0:	d044      	beq.n	800b87c <_free_r+0x90>
 800b7f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7f6:	9001      	str	r0, [sp, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f1a1 0404 	sub.w	r4, r1, #4
 800b7fe:	bfb8      	it	lt
 800b800:	18e4      	addlt	r4, r4, r3
 800b802:	f000 f8df 	bl	800b9c4 <__malloc_lock>
 800b806:	4a1e      	ldr	r2, [pc, #120]	; (800b880 <_free_r+0x94>)
 800b808:	9801      	ldr	r0, [sp, #4]
 800b80a:	6813      	ldr	r3, [r2, #0]
 800b80c:	b933      	cbnz	r3, 800b81c <_free_r+0x30>
 800b80e:	6063      	str	r3, [r4, #4]
 800b810:	6014      	str	r4, [r2, #0]
 800b812:	b003      	add	sp, #12
 800b814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b818:	f000 b8da 	b.w	800b9d0 <__malloc_unlock>
 800b81c:	42a3      	cmp	r3, r4
 800b81e:	d908      	bls.n	800b832 <_free_r+0x46>
 800b820:	6825      	ldr	r5, [r4, #0]
 800b822:	1961      	adds	r1, r4, r5
 800b824:	428b      	cmp	r3, r1
 800b826:	bf01      	itttt	eq
 800b828:	6819      	ldreq	r1, [r3, #0]
 800b82a:	685b      	ldreq	r3, [r3, #4]
 800b82c:	1949      	addeq	r1, r1, r5
 800b82e:	6021      	streq	r1, [r4, #0]
 800b830:	e7ed      	b.n	800b80e <_free_r+0x22>
 800b832:	461a      	mov	r2, r3
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	b10b      	cbz	r3, 800b83c <_free_r+0x50>
 800b838:	42a3      	cmp	r3, r4
 800b83a:	d9fa      	bls.n	800b832 <_free_r+0x46>
 800b83c:	6811      	ldr	r1, [r2, #0]
 800b83e:	1855      	adds	r5, r2, r1
 800b840:	42a5      	cmp	r5, r4
 800b842:	d10b      	bne.n	800b85c <_free_r+0x70>
 800b844:	6824      	ldr	r4, [r4, #0]
 800b846:	4421      	add	r1, r4
 800b848:	1854      	adds	r4, r2, r1
 800b84a:	42a3      	cmp	r3, r4
 800b84c:	6011      	str	r1, [r2, #0]
 800b84e:	d1e0      	bne.n	800b812 <_free_r+0x26>
 800b850:	681c      	ldr	r4, [r3, #0]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	6053      	str	r3, [r2, #4]
 800b856:	440c      	add	r4, r1
 800b858:	6014      	str	r4, [r2, #0]
 800b85a:	e7da      	b.n	800b812 <_free_r+0x26>
 800b85c:	d902      	bls.n	800b864 <_free_r+0x78>
 800b85e:	230c      	movs	r3, #12
 800b860:	6003      	str	r3, [r0, #0]
 800b862:	e7d6      	b.n	800b812 <_free_r+0x26>
 800b864:	6825      	ldr	r5, [r4, #0]
 800b866:	1961      	adds	r1, r4, r5
 800b868:	428b      	cmp	r3, r1
 800b86a:	bf04      	itt	eq
 800b86c:	6819      	ldreq	r1, [r3, #0]
 800b86e:	685b      	ldreq	r3, [r3, #4]
 800b870:	6063      	str	r3, [r4, #4]
 800b872:	bf04      	itt	eq
 800b874:	1949      	addeq	r1, r1, r5
 800b876:	6021      	streq	r1, [r4, #0]
 800b878:	6054      	str	r4, [r2, #4]
 800b87a:	e7ca      	b.n	800b812 <_free_r+0x26>
 800b87c:	b003      	add	sp, #12
 800b87e:	bd30      	pop	{r4, r5, pc}
 800b880:	20002404 	.word	0x20002404

0800b884 <sbrk_aligned>:
 800b884:	b570      	push	{r4, r5, r6, lr}
 800b886:	4e0e      	ldr	r6, [pc, #56]	; (800b8c0 <sbrk_aligned+0x3c>)
 800b888:	460c      	mov	r4, r1
 800b88a:	6831      	ldr	r1, [r6, #0]
 800b88c:	4605      	mov	r5, r0
 800b88e:	b911      	cbnz	r1, 800b896 <sbrk_aligned+0x12>
 800b890:	f000 fcde 	bl	800c250 <_sbrk_r>
 800b894:	6030      	str	r0, [r6, #0]
 800b896:	4621      	mov	r1, r4
 800b898:	4628      	mov	r0, r5
 800b89a:	f000 fcd9 	bl	800c250 <_sbrk_r>
 800b89e:	1c43      	adds	r3, r0, #1
 800b8a0:	d00a      	beq.n	800b8b8 <sbrk_aligned+0x34>
 800b8a2:	1cc4      	adds	r4, r0, #3
 800b8a4:	f024 0403 	bic.w	r4, r4, #3
 800b8a8:	42a0      	cmp	r0, r4
 800b8aa:	d007      	beq.n	800b8bc <sbrk_aligned+0x38>
 800b8ac:	1a21      	subs	r1, r4, r0
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f000 fcce 	bl	800c250 <_sbrk_r>
 800b8b4:	3001      	adds	r0, #1
 800b8b6:	d101      	bne.n	800b8bc <sbrk_aligned+0x38>
 800b8b8:	f04f 34ff 	mov.w	r4, #4294967295
 800b8bc:	4620      	mov	r0, r4
 800b8be:	bd70      	pop	{r4, r5, r6, pc}
 800b8c0:	20002408 	.word	0x20002408

0800b8c4 <_malloc_r>:
 800b8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8c8:	1ccd      	adds	r5, r1, #3
 800b8ca:	f025 0503 	bic.w	r5, r5, #3
 800b8ce:	3508      	adds	r5, #8
 800b8d0:	2d0c      	cmp	r5, #12
 800b8d2:	bf38      	it	cc
 800b8d4:	250c      	movcc	r5, #12
 800b8d6:	2d00      	cmp	r5, #0
 800b8d8:	4607      	mov	r7, r0
 800b8da:	db01      	blt.n	800b8e0 <_malloc_r+0x1c>
 800b8dc:	42a9      	cmp	r1, r5
 800b8de:	d905      	bls.n	800b8ec <_malloc_r+0x28>
 800b8e0:	230c      	movs	r3, #12
 800b8e2:	603b      	str	r3, [r7, #0]
 800b8e4:	2600      	movs	r6, #0
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b9c0 <_malloc_r+0xfc>
 800b8f0:	f000 f868 	bl	800b9c4 <__malloc_lock>
 800b8f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b8f8:	461c      	mov	r4, r3
 800b8fa:	bb5c      	cbnz	r4, 800b954 <_malloc_r+0x90>
 800b8fc:	4629      	mov	r1, r5
 800b8fe:	4638      	mov	r0, r7
 800b900:	f7ff ffc0 	bl	800b884 <sbrk_aligned>
 800b904:	1c43      	adds	r3, r0, #1
 800b906:	4604      	mov	r4, r0
 800b908:	d155      	bne.n	800b9b6 <_malloc_r+0xf2>
 800b90a:	f8d8 4000 	ldr.w	r4, [r8]
 800b90e:	4626      	mov	r6, r4
 800b910:	2e00      	cmp	r6, #0
 800b912:	d145      	bne.n	800b9a0 <_malloc_r+0xdc>
 800b914:	2c00      	cmp	r4, #0
 800b916:	d048      	beq.n	800b9aa <_malloc_r+0xe6>
 800b918:	6823      	ldr	r3, [r4, #0]
 800b91a:	4631      	mov	r1, r6
 800b91c:	4638      	mov	r0, r7
 800b91e:	eb04 0903 	add.w	r9, r4, r3
 800b922:	f000 fc95 	bl	800c250 <_sbrk_r>
 800b926:	4581      	cmp	r9, r0
 800b928:	d13f      	bne.n	800b9aa <_malloc_r+0xe6>
 800b92a:	6821      	ldr	r1, [r4, #0]
 800b92c:	1a6d      	subs	r5, r5, r1
 800b92e:	4629      	mov	r1, r5
 800b930:	4638      	mov	r0, r7
 800b932:	f7ff ffa7 	bl	800b884 <sbrk_aligned>
 800b936:	3001      	adds	r0, #1
 800b938:	d037      	beq.n	800b9aa <_malloc_r+0xe6>
 800b93a:	6823      	ldr	r3, [r4, #0]
 800b93c:	442b      	add	r3, r5
 800b93e:	6023      	str	r3, [r4, #0]
 800b940:	f8d8 3000 	ldr.w	r3, [r8]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d038      	beq.n	800b9ba <_malloc_r+0xf6>
 800b948:	685a      	ldr	r2, [r3, #4]
 800b94a:	42a2      	cmp	r2, r4
 800b94c:	d12b      	bne.n	800b9a6 <_malloc_r+0xe2>
 800b94e:	2200      	movs	r2, #0
 800b950:	605a      	str	r2, [r3, #4]
 800b952:	e00f      	b.n	800b974 <_malloc_r+0xb0>
 800b954:	6822      	ldr	r2, [r4, #0]
 800b956:	1b52      	subs	r2, r2, r5
 800b958:	d41f      	bmi.n	800b99a <_malloc_r+0xd6>
 800b95a:	2a0b      	cmp	r2, #11
 800b95c:	d917      	bls.n	800b98e <_malloc_r+0xca>
 800b95e:	1961      	adds	r1, r4, r5
 800b960:	42a3      	cmp	r3, r4
 800b962:	6025      	str	r5, [r4, #0]
 800b964:	bf18      	it	ne
 800b966:	6059      	strne	r1, [r3, #4]
 800b968:	6863      	ldr	r3, [r4, #4]
 800b96a:	bf08      	it	eq
 800b96c:	f8c8 1000 	streq.w	r1, [r8]
 800b970:	5162      	str	r2, [r4, r5]
 800b972:	604b      	str	r3, [r1, #4]
 800b974:	4638      	mov	r0, r7
 800b976:	f104 060b 	add.w	r6, r4, #11
 800b97a:	f000 f829 	bl	800b9d0 <__malloc_unlock>
 800b97e:	f026 0607 	bic.w	r6, r6, #7
 800b982:	1d23      	adds	r3, r4, #4
 800b984:	1af2      	subs	r2, r6, r3
 800b986:	d0ae      	beq.n	800b8e6 <_malloc_r+0x22>
 800b988:	1b9b      	subs	r3, r3, r6
 800b98a:	50a3      	str	r3, [r4, r2]
 800b98c:	e7ab      	b.n	800b8e6 <_malloc_r+0x22>
 800b98e:	42a3      	cmp	r3, r4
 800b990:	6862      	ldr	r2, [r4, #4]
 800b992:	d1dd      	bne.n	800b950 <_malloc_r+0x8c>
 800b994:	f8c8 2000 	str.w	r2, [r8]
 800b998:	e7ec      	b.n	800b974 <_malloc_r+0xb0>
 800b99a:	4623      	mov	r3, r4
 800b99c:	6864      	ldr	r4, [r4, #4]
 800b99e:	e7ac      	b.n	800b8fa <_malloc_r+0x36>
 800b9a0:	4634      	mov	r4, r6
 800b9a2:	6876      	ldr	r6, [r6, #4]
 800b9a4:	e7b4      	b.n	800b910 <_malloc_r+0x4c>
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	e7cc      	b.n	800b944 <_malloc_r+0x80>
 800b9aa:	230c      	movs	r3, #12
 800b9ac:	603b      	str	r3, [r7, #0]
 800b9ae:	4638      	mov	r0, r7
 800b9b0:	f000 f80e 	bl	800b9d0 <__malloc_unlock>
 800b9b4:	e797      	b.n	800b8e6 <_malloc_r+0x22>
 800b9b6:	6025      	str	r5, [r4, #0]
 800b9b8:	e7dc      	b.n	800b974 <_malloc_r+0xb0>
 800b9ba:	605b      	str	r3, [r3, #4]
 800b9bc:	deff      	udf	#255	; 0xff
 800b9be:	bf00      	nop
 800b9c0:	20002404 	.word	0x20002404

0800b9c4 <__malloc_lock>:
 800b9c4:	4801      	ldr	r0, [pc, #4]	; (800b9cc <__malloc_lock+0x8>)
 800b9c6:	f7ff befc 	b.w	800b7c2 <__retarget_lock_acquire_recursive>
 800b9ca:	bf00      	nop
 800b9cc:	20002400 	.word	0x20002400

0800b9d0 <__malloc_unlock>:
 800b9d0:	4801      	ldr	r0, [pc, #4]	; (800b9d8 <__malloc_unlock+0x8>)
 800b9d2:	f7ff bef7 	b.w	800b7c4 <__retarget_lock_release_recursive>
 800b9d6:	bf00      	nop
 800b9d8:	20002400 	.word	0x20002400

0800b9dc <__sfputc_r>:
 800b9dc:	6893      	ldr	r3, [r2, #8]
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	b410      	push	{r4}
 800b9e4:	6093      	str	r3, [r2, #8]
 800b9e6:	da08      	bge.n	800b9fa <__sfputc_r+0x1e>
 800b9e8:	6994      	ldr	r4, [r2, #24]
 800b9ea:	42a3      	cmp	r3, r4
 800b9ec:	db01      	blt.n	800b9f2 <__sfputc_r+0x16>
 800b9ee:	290a      	cmp	r1, #10
 800b9f0:	d103      	bne.n	800b9fa <__sfputc_r+0x1e>
 800b9f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9f6:	f7ff bdc6 	b.w	800b586 <__swbuf_r>
 800b9fa:	6813      	ldr	r3, [r2, #0]
 800b9fc:	1c58      	adds	r0, r3, #1
 800b9fe:	6010      	str	r0, [r2, #0]
 800ba00:	7019      	strb	r1, [r3, #0]
 800ba02:	4608      	mov	r0, r1
 800ba04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba08:	4770      	bx	lr

0800ba0a <__sfputs_r>:
 800ba0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0c:	4606      	mov	r6, r0
 800ba0e:	460f      	mov	r7, r1
 800ba10:	4614      	mov	r4, r2
 800ba12:	18d5      	adds	r5, r2, r3
 800ba14:	42ac      	cmp	r4, r5
 800ba16:	d101      	bne.n	800ba1c <__sfputs_r+0x12>
 800ba18:	2000      	movs	r0, #0
 800ba1a:	e007      	b.n	800ba2c <__sfputs_r+0x22>
 800ba1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba20:	463a      	mov	r2, r7
 800ba22:	4630      	mov	r0, r6
 800ba24:	f7ff ffda 	bl	800b9dc <__sfputc_r>
 800ba28:	1c43      	adds	r3, r0, #1
 800ba2a:	d1f3      	bne.n	800ba14 <__sfputs_r+0xa>
 800ba2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba30 <_vfiprintf_r>:
 800ba30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba34:	460d      	mov	r5, r1
 800ba36:	b09d      	sub	sp, #116	; 0x74
 800ba38:	4614      	mov	r4, r2
 800ba3a:	4698      	mov	r8, r3
 800ba3c:	4606      	mov	r6, r0
 800ba3e:	b118      	cbz	r0, 800ba48 <_vfiprintf_r+0x18>
 800ba40:	6a03      	ldr	r3, [r0, #32]
 800ba42:	b90b      	cbnz	r3, 800ba48 <_vfiprintf_r+0x18>
 800ba44:	f7ff fcb0 	bl	800b3a8 <__sinit>
 800ba48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba4a:	07d9      	lsls	r1, r3, #31
 800ba4c:	d405      	bmi.n	800ba5a <_vfiprintf_r+0x2a>
 800ba4e:	89ab      	ldrh	r3, [r5, #12]
 800ba50:	059a      	lsls	r2, r3, #22
 800ba52:	d402      	bmi.n	800ba5a <_vfiprintf_r+0x2a>
 800ba54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba56:	f7ff feb4 	bl	800b7c2 <__retarget_lock_acquire_recursive>
 800ba5a:	89ab      	ldrh	r3, [r5, #12]
 800ba5c:	071b      	lsls	r3, r3, #28
 800ba5e:	d501      	bpl.n	800ba64 <_vfiprintf_r+0x34>
 800ba60:	692b      	ldr	r3, [r5, #16]
 800ba62:	b99b      	cbnz	r3, 800ba8c <_vfiprintf_r+0x5c>
 800ba64:	4629      	mov	r1, r5
 800ba66:	4630      	mov	r0, r6
 800ba68:	f7ff fdca 	bl	800b600 <__swsetup_r>
 800ba6c:	b170      	cbz	r0, 800ba8c <_vfiprintf_r+0x5c>
 800ba6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba70:	07dc      	lsls	r4, r3, #31
 800ba72:	d504      	bpl.n	800ba7e <_vfiprintf_r+0x4e>
 800ba74:	f04f 30ff 	mov.w	r0, #4294967295
 800ba78:	b01d      	add	sp, #116	; 0x74
 800ba7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba7e:	89ab      	ldrh	r3, [r5, #12]
 800ba80:	0598      	lsls	r0, r3, #22
 800ba82:	d4f7      	bmi.n	800ba74 <_vfiprintf_r+0x44>
 800ba84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba86:	f7ff fe9d 	bl	800b7c4 <__retarget_lock_release_recursive>
 800ba8a:	e7f3      	b.n	800ba74 <_vfiprintf_r+0x44>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba90:	2320      	movs	r3, #32
 800ba92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba96:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba9a:	2330      	movs	r3, #48	; 0x30
 800ba9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bc50 <_vfiprintf_r+0x220>
 800baa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baa4:	f04f 0901 	mov.w	r9, #1
 800baa8:	4623      	mov	r3, r4
 800baaa:	469a      	mov	sl, r3
 800baac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bab0:	b10a      	cbz	r2, 800bab6 <_vfiprintf_r+0x86>
 800bab2:	2a25      	cmp	r2, #37	; 0x25
 800bab4:	d1f9      	bne.n	800baaa <_vfiprintf_r+0x7a>
 800bab6:	ebba 0b04 	subs.w	fp, sl, r4
 800baba:	d00b      	beq.n	800bad4 <_vfiprintf_r+0xa4>
 800babc:	465b      	mov	r3, fp
 800babe:	4622      	mov	r2, r4
 800bac0:	4629      	mov	r1, r5
 800bac2:	4630      	mov	r0, r6
 800bac4:	f7ff ffa1 	bl	800ba0a <__sfputs_r>
 800bac8:	3001      	adds	r0, #1
 800baca:	f000 80a9 	beq.w	800bc20 <_vfiprintf_r+0x1f0>
 800bace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bad0:	445a      	add	r2, fp
 800bad2:	9209      	str	r2, [sp, #36]	; 0x24
 800bad4:	f89a 3000 	ldrb.w	r3, [sl]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f000 80a1 	beq.w	800bc20 <_vfiprintf_r+0x1f0>
 800bade:	2300      	movs	r3, #0
 800bae0:	f04f 32ff 	mov.w	r2, #4294967295
 800bae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bae8:	f10a 0a01 	add.w	sl, sl, #1
 800baec:	9304      	str	r3, [sp, #16]
 800baee:	9307      	str	r3, [sp, #28]
 800baf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baf4:	931a      	str	r3, [sp, #104]	; 0x68
 800baf6:	4654      	mov	r4, sl
 800baf8:	2205      	movs	r2, #5
 800bafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafe:	4854      	ldr	r0, [pc, #336]	; (800bc50 <_vfiprintf_r+0x220>)
 800bb00:	f7f4 ff56 	bl	80009b0 <memchr>
 800bb04:	9a04      	ldr	r2, [sp, #16]
 800bb06:	b9d8      	cbnz	r0, 800bb40 <_vfiprintf_r+0x110>
 800bb08:	06d1      	lsls	r1, r2, #27
 800bb0a:	bf44      	itt	mi
 800bb0c:	2320      	movmi	r3, #32
 800bb0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb12:	0713      	lsls	r3, r2, #28
 800bb14:	bf44      	itt	mi
 800bb16:	232b      	movmi	r3, #43	; 0x2b
 800bb18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb1c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb20:	2b2a      	cmp	r3, #42	; 0x2a
 800bb22:	d015      	beq.n	800bb50 <_vfiprintf_r+0x120>
 800bb24:	9a07      	ldr	r2, [sp, #28]
 800bb26:	4654      	mov	r4, sl
 800bb28:	2000      	movs	r0, #0
 800bb2a:	f04f 0c0a 	mov.w	ip, #10
 800bb2e:	4621      	mov	r1, r4
 800bb30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb34:	3b30      	subs	r3, #48	; 0x30
 800bb36:	2b09      	cmp	r3, #9
 800bb38:	d94d      	bls.n	800bbd6 <_vfiprintf_r+0x1a6>
 800bb3a:	b1b0      	cbz	r0, 800bb6a <_vfiprintf_r+0x13a>
 800bb3c:	9207      	str	r2, [sp, #28]
 800bb3e:	e014      	b.n	800bb6a <_vfiprintf_r+0x13a>
 800bb40:	eba0 0308 	sub.w	r3, r0, r8
 800bb44:	fa09 f303 	lsl.w	r3, r9, r3
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	9304      	str	r3, [sp, #16]
 800bb4c:	46a2      	mov	sl, r4
 800bb4e:	e7d2      	b.n	800baf6 <_vfiprintf_r+0xc6>
 800bb50:	9b03      	ldr	r3, [sp, #12]
 800bb52:	1d19      	adds	r1, r3, #4
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	9103      	str	r1, [sp, #12]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	bfbb      	ittet	lt
 800bb5c:	425b      	neglt	r3, r3
 800bb5e:	f042 0202 	orrlt.w	r2, r2, #2
 800bb62:	9307      	strge	r3, [sp, #28]
 800bb64:	9307      	strlt	r3, [sp, #28]
 800bb66:	bfb8      	it	lt
 800bb68:	9204      	strlt	r2, [sp, #16]
 800bb6a:	7823      	ldrb	r3, [r4, #0]
 800bb6c:	2b2e      	cmp	r3, #46	; 0x2e
 800bb6e:	d10c      	bne.n	800bb8a <_vfiprintf_r+0x15a>
 800bb70:	7863      	ldrb	r3, [r4, #1]
 800bb72:	2b2a      	cmp	r3, #42	; 0x2a
 800bb74:	d134      	bne.n	800bbe0 <_vfiprintf_r+0x1b0>
 800bb76:	9b03      	ldr	r3, [sp, #12]
 800bb78:	1d1a      	adds	r2, r3, #4
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	9203      	str	r2, [sp, #12]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	bfb8      	it	lt
 800bb82:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb86:	3402      	adds	r4, #2
 800bb88:	9305      	str	r3, [sp, #20]
 800bb8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bc60 <_vfiprintf_r+0x230>
 800bb8e:	7821      	ldrb	r1, [r4, #0]
 800bb90:	2203      	movs	r2, #3
 800bb92:	4650      	mov	r0, sl
 800bb94:	f7f4 ff0c 	bl	80009b0 <memchr>
 800bb98:	b138      	cbz	r0, 800bbaa <_vfiprintf_r+0x17a>
 800bb9a:	9b04      	ldr	r3, [sp, #16]
 800bb9c:	eba0 000a 	sub.w	r0, r0, sl
 800bba0:	2240      	movs	r2, #64	; 0x40
 800bba2:	4082      	lsls	r2, r0
 800bba4:	4313      	orrs	r3, r2
 800bba6:	3401      	adds	r4, #1
 800bba8:	9304      	str	r3, [sp, #16]
 800bbaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbae:	4829      	ldr	r0, [pc, #164]	; (800bc54 <_vfiprintf_r+0x224>)
 800bbb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbb4:	2206      	movs	r2, #6
 800bbb6:	f7f4 fefb 	bl	80009b0 <memchr>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	d03f      	beq.n	800bc3e <_vfiprintf_r+0x20e>
 800bbbe:	4b26      	ldr	r3, [pc, #152]	; (800bc58 <_vfiprintf_r+0x228>)
 800bbc0:	bb1b      	cbnz	r3, 800bc0a <_vfiprintf_r+0x1da>
 800bbc2:	9b03      	ldr	r3, [sp, #12]
 800bbc4:	3307      	adds	r3, #7
 800bbc6:	f023 0307 	bic.w	r3, r3, #7
 800bbca:	3308      	adds	r3, #8
 800bbcc:	9303      	str	r3, [sp, #12]
 800bbce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbd0:	443b      	add	r3, r7
 800bbd2:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd4:	e768      	b.n	800baa8 <_vfiprintf_r+0x78>
 800bbd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbda:	460c      	mov	r4, r1
 800bbdc:	2001      	movs	r0, #1
 800bbde:	e7a6      	b.n	800bb2e <_vfiprintf_r+0xfe>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	3401      	adds	r4, #1
 800bbe4:	9305      	str	r3, [sp, #20]
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	f04f 0c0a 	mov.w	ip, #10
 800bbec:	4620      	mov	r0, r4
 800bbee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbf2:	3a30      	subs	r2, #48	; 0x30
 800bbf4:	2a09      	cmp	r2, #9
 800bbf6:	d903      	bls.n	800bc00 <_vfiprintf_r+0x1d0>
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d0c6      	beq.n	800bb8a <_vfiprintf_r+0x15a>
 800bbfc:	9105      	str	r1, [sp, #20]
 800bbfe:	e7c4      	b.n	800bb8a <_vfiprintf_r+0x15a>
 800bc00:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc04:	4604      	mov	r4, r0
 800bc06:	2301      	movs	r3, #1
 800bc08:	e7f0      	b.n	800bbec <_vfiprintf_r+0x1bc>
 800bc0a:	ab03      	add	r3, sp, #12
 800bc0c:	9300      	str	r3, [sp, #0]
 800bc0e:	462a      	mov	r2, r5
 800bc10:	4b12      	ldr	r3, [pc, #72]	; (800bc5c <_vfiprintf_r+0x22c>)
 800bc12:	a904      	add	r1, sp, #16
 800bc14:	4630      	mov	r0, r6
 800bc16:	f3af 8000 	nop.w
 800bc1a:	4607      	mov	r7, r0
 800bc1c:	1c78      	adds	r0, r7, #1
 800bc1e:	d1d6      	bne.n	800bbce <_vfiprintf_r+0x19e>
 800bc20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc22:	07d9      	lsls	r1, r3, #31
 800bc24:	d405      	bmi.n	800bc32 <_vfiprintf_r+0x202>
 800bc26:	89ab      	ldrh	r3, [r5, #12]
 800bc28:	059a      	lsls	r2, r3, #22
 800bc2a:	d402      	bmi.n	800bc32 <_vfiprintf_r+0x202>
 800bc2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc2e:	f7ff fdc9 	bl	800b7c4 <__retarget_lock_release_recursive>
 800bc32:	89ab      	ldrh	r3, [r5, #12]
 800bc34:	065b      	lsls	r3, r3, #25
 800bc36:	f53f af1d 	bmi.w	800ba74 <_vfiprintf_r+0x44>
 800bc3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc3c:	e71c      	b.n	800ba78 <_vfiprintf_r+0x48>
 800bc3e:	ab03      	add	r3, sp, #12
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	462a      	mov	r2, r5
 800bc44:	4b05      	ldr	r3, [pc, #20]	; (800bc5c <_vfiprintf_r+0x22c>)
 800bc46:	a904      	add	r1, sp, #16
 800bc48:	4630      	mov	r0, r6
 800bc4a:	f000 f879 	bl	800bd40 <_printf_i>
 800bc4e:	e7e4      	b.n	800bc1a <_vfiprintf_r+0x1ea>
 800bc50:	0800ddb9 	.word	0x0800ddb9
 800bc54:	0800ddc3 	.word	0x0800ddc3
 800bc58:	00000000 	.word	0x00000000
 800bc5c:	0800ba0b 	.word	0x0800ba0b
 800bc60:	0800ddbf 	.word	0x0800ddbf

0800bc64 <_printf_common>:
 800bc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc68:	4616      	mov	r6, r2
 800bc6a:	4699      	mov	r9, r3
 800bc6c:	688a      	ldr	r2, [r1, #8]
 800bc6e:	690b      	ldr	r3, [r1, #16]
 800bc70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc74:	4293      	cmp	r3, r2
 800bc76:	bfb8      	it	lt
 800bc78:	4613      	movlt	r3, r2
 800bc7a:	6033      	str	r3, [r6, #0]
 800bc7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc80:	4607      	mov	r7, r0
 800bc82:	460c      	mov	r4, r1
 800bc84:	b10a      	cbz	r2, 800bc8a <_printf_common+0x26>
 800bc86:	3301      	adds	r3, #1
 800bc88:	6033      	str	r3, [r6, #0]
 800bc8a:	6823      	ldr	r3, [r4, #0]
 800bc8c:	0699      	lsls	r1, r3, #26
 800bc8e:	bf42      	ittt	mi
 800bc90:	6833      	ldrmi	r3, [r6, #0]
 800bc92:	3302      	addmi	r3, #2
 800bc94:	6033      	strmi	r3, [r6, #0]
 800bc96:	6825      	ldr	r5, [r4, #0]
 800bc98:	f015 0506 	ands.w	r5, r5, #6
 800bc9c:	d106      	bne.n	800bcac <_printf_common+0x48>
 800bc9e:	f104 0a19 	add.w	sl, r4, #25
 800bca2:	68e3      	ldr	r3, [r4, #12]
 800bca4:	6832      	ldr	r2, [r6, #0]
 800bca6:	1a9b      	subs	r3, r3, r2
 800bca8:	42ab      	cmp	r3, r5
 800bcaa:	dc26      	bgt.n	800bcfa <_printf_common+0x96>
 800bcac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bcb0:	1e13      	subs	r3, r2, #0
 800bcb2:	6822      	ldr	r2, [r4, #0]
 800bcb4:	bf18      	it	ne
 800bcb6:	2301      	movne	r3, #1
 800bcb8:	0692      	lsls	r2, r2, #26
 800bcba:	d42b      	bmi.n	800bd14 <_printf_common+0xb0>
 800bcbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcc0:	4649      	mov	r1, r9
 800bcc2:	4638      	mov	r0, r7
 800bcc4:	47c0      	blx	r8
 800bcc6:	3001      	adds	r0, #1
 800bcc8:	d01e      	beq.n	800bd08 <_printf_common+0xa4>
 800bcca:	6823      	ldr	r3, [r4, #0]
 800bccc:	6922      	ldr	r2, [r4, #16]
 800bcce:	f003 0306 	and.w	r3, r3, #6
 800bcd2:	2b04      	cmp	r3, #4
 800bcd4:	bf02      	ittt	eq
 800bcd6:	68e5      	ldreq	r5, [r4, #12]
 800bcd8:	6833      	ldreq	r3, [r6, #0]
 800bcda:	1aed      	subeq	r5, r5, r3
 800bcdc:	68a3      	ldr	r3, [r4, #8]
 800bcde:	bf0c      	ite	eq
 800bce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bce4:	2500      	movne	r5, #0
 800bce6:	4293      	cmp	r3, r2
 800bce8:	bfc4      	itt	gt
 800bcea:	1a9b      	subgt	r3, r3, r2
 800bcec:	18ed      	addgt	r5, r5, r3
 800bcee:	2600      	movs	r6, #0
 800bcf0:	341a      	adds	r4, #26
 800bcf2:	42b5      	cmp	r5, r6
 800bcf4:	d11a      	bne.n	800bd2c <_printf_common+0xc8>
 800bcf6:	2000      	movs	r0, #0
 800bcf8:	e008      	b.n	800bd0c <_printf_common+0xa8>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	4652      	mov	r2, sl
 800bcfe:	4649      	mov	r1, r9
 800bd00:	4638      	mov	r0, r7
 800bd02:	47c0      	blx	r8
 800bd04:	3001      	adds	r0, #1
 800bd06:	d103      	bne.n	800bd10 <_printf_common+0xac>
 800bd08:	f04f 30ff 	mov.w	r0, #4294967295
 800bd0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd10:	3501      	adds	r5, #1
 800bd12:	e7c6      	b.n	800bca2 <_printf_common+0x3e>
 800bd14:	18e1      	adds	r1, r4, r3
 800bd16:	1c5a      	adds	r2, r3, #1
 800bd18:	2030      	movs	r0, #48	; 0x30
 800bd1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd1e:	4422      	add	r2, r4
 800bd20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd28:	3302      	adds	r3, #2
 800bd2a:	e7c7      	b.n	800bcbc <_printf_common+0x58>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	4622      	mov	r2, r4
 800bd30:	4649      	mov	r1, r9
 800bd32:	4638      	mov	r0, r7
 800bd34:	47c0      	blx	r8
 800bd36:	3001      	adds	r0, #1
 800bd38:	d0e6      	beq.n	800bd08 <_printf_common+0xa4>
 800bd3a:	3601      	adds	r6, #1
 800bd3c:	e7d9      	b.n	800bcf2 <_printf_common+0x8e>
	...

0800bd40 <_printf_i>:
 800bd40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd44:	7e0f      	ldrb	r7, [r1, #24]
 800bd46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd48:	2f78      	cmp	r7, #120	; 0x78
 800bd4a:	4691      	mov	r9, r2
 800bd4c:	4680      	mov	r8, r0
 800bd4e:	460c      	mov	r4, r1
 800bd50:	469a      	mov	sl, r3
 800bd52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd56:	d807      	bhi.n	800bd68 <_printf_i+0x28>
 800bd58:	2f62      	cmp	r7, #98	; 0x62
 800bd5a:	d80a      	bhi.n	800bd72 <_printf_i+0x32>
 800bd5c:	2f00      	cmp	r7, #0
 800bd5e:	f000 80d4 	beq.w	800bf0a <_printf_i+0x1ca>
 800bd62:	2f58      	cmp	r7, #88	; 0x58
 800bd64:	f000 80c0 	beq.w	800bee8 <_printf_i+0x1a8>
 800bd68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd70:	e03a      	b.n	800bde8 <_printf_i+0xa8>
 800bd72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd76:	2b15      	cmp	r3, #21
 800bd78:	d8f6      	bhi.n	800bd68 <_printf_i+0x28>
 800bd7a:	a101      	add	r1, pc, #4	; (adr r1, 800bd80 <_printf_i+0x40>)
 800bd7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd80:	0800bdd9 	.word	0x0800bdd9
 800bd84:	0800bded 	.word	0x0800bded
 800bd88:	0800bd69 	.word	0x0800bd69
 800bd8c:	0800bd69 	.word	0x0800bd69
 800bd90:	0800bd69 	.word	0x0800bd69
 800bd94:	0800bd69 	.word	0x0800bd69
 800bd98:	0800bded 	.word	0x0800bded
 800bd9c:	0800bd69 	.word	0x0800bd69
 800bda0:	0800bd69 	.word	0x0800bd69
 800bda4:	0800bd69 	.word	0x0800bd69
 800bda8:	0800bd69 	.word	0x0800bd69
 800bdac:	0800bef1 	.word	0x0800bef1
 800bdb0:	0800be19 	.word	0x0800be19
 800bdb4:	0800beab 	.word	0x0800beab
 800bdb8:	0800bd69 	.word	0x0800bd69
 800bdbc:	0800bd69 	.word	0x0800bd69
 800bdc0:	0800bf13 	.word	0x0800bf13
 800bdc4:	0800bd69 	.word	0x0800bd69
 800bdc8:	0800be19 	.word	0x0800be19
 800bdcc:	0800bd69 	.word	0x0800bd69
 800bdd0:	0800bd69 	.word	0x0800bd69
 800bdd4:	0800beb3 	.word	0x0800beb3
 800bdd8:	682b      	ldr	r3, [r5, #0]
 800bdda:	1d1a      	adds	r2, r3, #4
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	602a      	str	r2, [r5, #0]
 800bde0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bde4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bde8:	2301      	movs	r3, #1
 800bdea:	e09f      	b.n	800bf2c <_printf_i+0x1ec>
 800bdec:	6820      	ldr	r0, [r4, #0]
 800bdee:	682b      	ldr	r3, [r5, #0]
 800bdf0:	0607      	lsls	r7, r0, #24
 800bdf2:	f103 0104 	add.w	r1, r3, #4
 800bdf6:	6029      	str	r1, [r5, #0]
 800bdf8:	d501      	bpl.n	800bdfe <_printf_i+0xbe>
 800bdfa:	681e      	ldr	r6, [r3, #0]
 800bdfc:	e003      	b.n	800be06 <_printf_i+0xc6>
 800bdfe:	0646      	lsls	r6, r0, #25
 800be00:	d5fb      	bpl.n	800bdfa <_printf_i+0xba>
 800be02:	f9b3 6000 	ldrsh.w	r6, [r3]
 800be06:	2e00      	cmp	r6, #0
 800be08:	da03      	bge.n	800be12 <_printf_i+0xd2>
 800be0a:	232d      	movs	r3, #45	; 0x2d
 800be0c:	4276      	negs	r6, r6
 800be0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be12:	485a      	ldr	r0, [pc, #360]	; (800bf7c <_printf_i+0x23c>)
 800be14:	230a      	movs	r3, #10
 800be16:	e012      	b.n	800be3e <_printf_i+0xfe>
 800be18:	682b      	ldr	r3, [r5, #0]
 800be1a:	6820      	ldr	r0, [r4, #0]
 800be1c:	1d19      	adds	r1, r3, #4
 800be1e:	6029      	str	r1, [r5, #0]
 800be20:	0605      	lsls	r5, r0, #24
 800be22:	d501      	bpl.n	800be28 <_printf_i+0xe8>
 800be24:	681e      	ldr	r6, [r3, #0]
 800be26:	e002      	b.n	800be2e <_printf_i+0xee>
 800be28:	0641      	lsls	r1, r0, #25
 800be2a:	d5fb      	bpl.n	800be24 <_printf_i+0xe4>
 800be2c:	881e      	ldrh	r6, [r3, #0]
 800be2e:	4853      	ldr	r0, [pc, #332]	; (800bf7c <_printf_i+0x23c>)
 800be30:	2f6f      	cmp	r7, #111	; 0x6f
 800be32:	bf0c      	ite	eq
 800be34:	2308      	moveq	r3, #8
 800be36:	230a      	movne	r3, #10
 800be38:	2100      	movs	r1, #0
 800be3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be3e:	6865      	ldr	r5, [r4, #4]
 800be40:	60a5      	str	r5, [r4, #8]
 800be42:	2d00      	cmp	r5, #0
 800be44:	bfa2      	ittt	ge
 800be46:	6821      	ldrge	r1, [r4, #0]
 800be48:	f021 0104 	bicge.w	r1, r1, #4
 800be4c:	6021      	strge	r1, [r4, #0]
 800be4e:	b90e      	cbnz	r6, 800be54 <_printf_i+0x114>
 800be50:	2d00      	cmp	r5, #0
 800be52:	d04b      	beq.n	800beec <_printf_i+0x1ac>
 800be54:	4615      	mov	r5, r2
 800be56:	fbb6 f1f3 	udiv	r1, r6, r3
 800be5a:	fb03 6711 	mls	r7, r3, r1, r6
 800be5e:	5dc7      	ldrb	r7, [r0, r7]
 800be60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be64:	4637      	mov	r7, r6
 800be66:	42bb      	cmp	r3, r7
 800be68:	460e      	mov	r6, r1
 800be6a:	d9f4      	bls.n	800be56 <_printf_i+0x116>
 800be6c:	2b08      	cmp	r3, #8
 800be6e:	d10b      	bne.n	800be88 <_printf_i+0x148>
 800be70:	6823      	ldr	r3, [r4, #0]
 800be72:	07de      	lsls	r6, r3, #31
 800be74:	d508      	bpl.n	800be88 <_printf_i+0x148>
 800be76:	6923      	ldr	r3, [r4, #16]
 800be78:	6861      	ldr	r1, [r4, #4]
 800be7a:	4299      	cmp	r1, r3
 800be7c:	bfde      	ittt	le
 800be7e:	2330      	movle	r3, #48	; 0x30
 800be80:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be84:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be88:	1b52      	subs	r2, r2, r5
 800be8a:	6122      	str	r2, [r4, #16]
 800be8c:	f8cd a000 	str.w	sl, [sp]
 800be90:	464b      	mov	r3, r9
 800be92:	aa03      	add	r2, sp, #12
 800be94:	4621      	mov	r1, r4
 800be96:	4640      	mov	r0, r8
 800be98:	f7ff fee4 	bl	800bc64 <_printf_common>
 800be9c:	3001      	adds	r0, #1
 800be9e:	d14a      	bne.n	800bf36 <_printf_i+0x1f6>
 800bea0:	f04f 30ff 	mov.w	r0, #4294967295
 800bea4:	b004      	add	sp, #16
 800bea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	f043 0320 	orr.w	r3, r3, #32
 800beb0:	6023      	str	r3, [r4, #0]
 800beb2:	4833      	ldr	r0, [pc, #204]	; (800bf80 <_printf_i+0x240>)
 800beb4:	2778      	movs	r7, #120	; 0x78
 800beb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	6829      	ldr	r1, [r5, #0]
 800bebe:	061f      	lsls	r7, r3, #24
 800bec0:	f851 6b04 	ldr.w	r6, [r1], #4
 800bec4:	d402      	bmi.n	800becc <_printf_i+0x18c>
 800bec6:	065f      	lsls	r7, r3, #25
 800bec8:	bf48      	it	mi
 800beca:	b2b6      	uxthmi	r6, r6
 800becc:	07df      	lsls	r7, r3, #31
 800bece:	bf48      	it	mi
 800bed0:	f043 0320 	orrmi.w	r3, r3, #32
 800bed4:	6029      	str	r1, [r5, #0]
 800bed6:	bf48      	it	mi
 800bed8:	6023      	strmi	r3, [r4, #0]
 800beda:	b91e      	cbnz	r6, 800bee4 <_printf_i+0x1a4>
 800bedc:	6823      	ldr	r3, [r4, #0]
 800bede:	f023 0320 	bic.w	r3, r3, #32
 800bee2:	6023      	str	r3, [r4, #0]
 800bee4:	2310      	movs	r3, #16
 800bee6:	e7a7      	b.n	800be38 <_printf_i+0xf8>
 800bee8:	4824      	ldr	r0, [pc, #144]	; (800bf7c <_printf_i+0x23c>)
 800beea:	e7e4      	b.n	800beb6 <_printf_i+0x176>
 800beec:	4615      	mov	r5, r2
 800beee:	e7bd      	b.n	800be6c <_printf_i+0x12c>
 800bef0:	682b      	ldr	r3, [r5, #0]
 800bef2:	6826      	ldr	r6, [r4, #0]
 800bef4:	6961      	ldr	r1, [r4, #20]
 800bef6:	1d18      	adds	r0, r3, #4
 800bef8:	6028      	str	r0, [r5, #0]
 800befa:	0635      	lsls	r5, r6, #24
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	d501      	bpl.n	800bf04 <_printf_i+0x1c4>
 800bf00:	6019      	str	r1, [r3, #0]
 800bf02:	e002      	b.n	800bf0a <_printf_i+0x1ca>
 800bf04:	0670      	lsls	r0, r6, #25
 800bf06:	d5fb      	bpl.n	800bf00 <_printf_i+0x1c0>
 800bf08:	8019      	strh	r1, [r3, #0]
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	6123      	str	r3, [r4, #16]
 800bf0e:	4615      	mov	r5, r2
 800bf10:	e7bc      	b.n	800be8c <_printf_i+0x14c>
 800bf12:	682b      	ldr	r3, [r5, #0]
 800bf14:	1d1a      	adds	r2, r3, #4
 800bf16:	602a      	str	r2, [r5, #0]
 800bf18:	681d      	ldr	r5, [r3, #0]
 800bf1a:	6862      	ldr	r2, [r4, #4]
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f7f4 fd46 	bl	80009b0 <memchr>
 800bf24:	b108      	cbz	r0, 800bf2a <_printf_i+0x1ea>
 800bf26:	1b40      	subs	r0, r0, r5
 800bf28:	6060      	str	r0, [r4, #4]
 800bf2a:	6863      	ldr	r3, [r4, #4]
 800bf2c:	6123      	str	r3, [r4, #16]
 800bf2e:	2300      	movs	r3, #0
 800bf30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf34:	e7aa      	b.n	800be8c <_printf_i+0x14c>
 800bf36:	6923      	ldr	r3, [r4, #16]
 800bf38:	462a      	mov	r2, r5
 800bf3a:	4649      	mov	r1, r9
 800bf3c:	4640      	mov	r0, r8
 800bf3e:	47d0      	blx	sl
 800bf40:	3001      	adds	r0, #1
 800bf42:	d0ad      	beq.n	800bea0 <_printf_i+0x160>
 800bf44:	6823      	ldr	r3, [r4, #0]
 800bf46:	079b      	lsls	r3, r3, #30
 800bf48:	d413      	bmi.n	800bf72 <_printf_i+0x232>
 800bf4a:	68e0      	ldr	r0, [r4, #12]
 800bf4c:	9b03      	ldr	r3, [sp, #12]
 800bf4e:	4298      	cmp	r0, r3
 800bf50:	bfb8      	it	lt
 800bf52:	4618      	movlt	r0, r3
 800bf54:	e7a6      	b.n	800bea4 <_printf_i+0x164>
 800bf56:	2301      	movs	r3, #1
 800bf58:	4632      	mov	r2, r6
 800bf5a:	4649      	mov	r1, r9
 800bf5c:	4640      	mov	r0, r8
 800bf5e:	47d0      	blx	sl
 800bf60:	3001      	adds	r0, #1
 800bf62:	d09d      	beq.n	800bea0 <_printf_i+0x160>
 800bf64:	3501      	adds	r5, #1
 800bf66:	68e3      	ldr	r3, [r4, #12]
 800bf68:	9903      	ldr	r1, [sp, #12]
 800bf6a:	1a5b      	subs	r3, r3, r1
 800bf6c:	42ab      	cmp	r3, r5
 800bf6e:	dcf2      	bgt.n	800bf56 <_printf_i+0x216>
 800bf70:	e7eb      	b.n	800bf4a <_printf_i+0x20a>
 800bf72:	2500      	movs	r5, #0
 800bf74:	f104 0619 	add.w	r6, r4, #25
 800bf78:	e7f5      	b.n	800bf66 <_printf_i+0x226>
 800bf7a:	bf00      	nop
 800bf7c:	0800ddca 	.word	0x0800ddca
 800bf80:	0800dddb 	.word	0x0800dddb

0800bf84 <__sflush_r>:
 800bf84:	898a      	ldrh	r2, [r1, #12]
 800bf86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf8a:	4605      	mov	r5, r0
 800bf8c:	0710      	lsls	r0, r2, #28
 800bf8e:	460c      	mov	r4, r1
 800bf90:	d458      	bmi.n	800c044 <__sflush_r+0xc0>
 800bf92:	684b      	ldr	r3, [r1, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	dc05      	bgt.n	800bfa4 <__sflush_r+0x20>
 800bf98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	dc02      	bgt.n	800bfa4 <__sflush_r+0x20>
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfa6:	2e00      	cmp	r6, #0
 800bfa8:	d0f9      	beq.n	800bf9e <__sflush_r+0x1a>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfb0:	682f      	ldr	r7, [r5, #0]
 800bfb2:	6a21      	ldr	r1, [r4, #32]
 800bfb4:	602b      	str	r3, [r5, #0]
 800bfb6:	d032      	beq.n	800c01e <__sflush_r+0x9a>
 800bfb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfba:	89a3      	ldrh	r3, [r4, #12]
 800bfbc:	075a      	lsls	r2, r3, #29
 800bfbe:	d505      	bpl.n	800bfcc <__sflush_r+0x48>
 800bfc0:	6863      	ldr	r3, [r4, #4]
 800bfc2:	1ac0      	subs	r0, r0, r3
 800bfc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfc6:	b10b      	cbz	r3, 800bfcc <__sflush_r+0x48>
 800bfc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfca:	1ac0      	subs	r0, r0, r3
 800bfcc:	2300      	movs	r3, #0
 800bfce:	4602      	mov	r2, r0
 800bfd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfd2:	6a21      	ldr	r1, [r4, #32]
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	47b0      	blx	r6
 800bfd8:	1c43      	adds	r3, r0, #1
 800bfda:	89a3      	ldrh	r3, [r4, #12]
 800bfdc:	d106      	bne.n	800bfec <__sflush_r+0x68>
 800bfde:	6829      	ldr	r1, [r5, #0]
 800bfe0:	291d      	cmp	r1, #29
 800bfe2:	d82b      	bhi.n	800c03c <__sflush_r+0xb8>
 800bfe4:	4a29      	ldr	r2, [pc, #164]	; (800c08c <__sflush_r+0x108>)
 800bfe6:	410a      	asrs	r2, r1
 800bfe8:	07d6      	lsls	r6, r2, #31
 800bfea:	d427      	bmi.n	800c03c <__sflush_r+0xb8>
 800bfec:	2200      	movs	r2, #0
 800bfee:	6062      	str	r2, [r4, #4]
 800bff0:	04d9      	lsls	r1, r3, #19
 800bff2:	6922      	ldr	r2, [r4, #16]
 800bff4:	6022      	str	r2, [r4, #0]
 800bff6:	d504      	bpl.n	800c002 <__sflush_r+0x7e>
 800bff8:	1c42      	adds	r2, r0, #1
 800bffa:	d101      	bne.n	800c000 <__sflush_r+0x7c>
 800bffc:	682b      	ldr	r3, [r5, #0]
 800bffe:	b903      	cbnz	r3, 800c002 <__sflush_r+0x7e>
 800c000:	6560      	str	r0, [r4, #84]	; 0x54
 800c002:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c004:	602f      	str	r7, [r5, #0]
 800c006:	2900      	cmp	r1, #0
 800c008:	d0c9      	beq.n	800bf9e <__sflush_r+0x1a>
 800c00a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c00e:	4299      	cmp	r1, r3
 800c010:	d002      	beq.n	800c018 <__sflush_r+0x94>
 800c012:	4628      	mov	r0, r5
 800c014:	f7ff fbea 	bl	800b7ec <_free_r>
 800c018:	2000      	movs	r0, #0
 800c01a:	6360      	str	r0, [r4, #52]	; 0x34
 800c01c:	e7c0      	b.n	800bfa0 <__sflush_r+0x1c>
 800c01e:	2301      	movs	r3, #1
 800c020:	4628      	mov	r0, r5
 800c022:	47b0      	blx	r6
 800c024:	1c41      	adds	r1, r0, #1
 800c026:	d1c8      	bne.n	800bfba <__sflush_r+0x36>
 800c028:	682b      	ldr	r3, [r5, #0]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d0c5      	beq.n	800bfba <__sflush_r+0x36>
 800c02e:	2b1d      	cmp	r3, #29
 800c030:	d001      	beq.n	800c036 <__sflush_r+0xb2>
 800c032:	2b16      	cmp	r3, #22
 800c034:	d101      	bne.n	800c03a <__sflush_r+0xb6>
 800c036:	602f      	str	r7, [r5, #0]
 800c038:	e7b1      	b.n	800bf9e <__sflush_r+0x1a>
 800c03a:	89a3      	ldrh	r3, [r4, #12]
 800c03c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c040:	81a3      	strh	r3, [r4, #12]
 800c042:	e7ad      	b.n	800bfa0 <__sflush_r+0x1c>
 800c044:	690f      	ldr	r7, [r1, #16]
 800c046:	2f00      	cmp	r7, #0
 800c048:	d0a9      	beq.n	800bf9e <__sflush_r+0x1a>
 800c04a:	0793      	lsls	r3, r2, #30
 800c04c:	680e      	ldr	r6, [r1, #0]
 800c04e:	bf08      	it	eq
 800c050:	694b      	ldreq	r3, [r1, #20]
 800c052:	600f      	str	r7, [r1, #0]
 800c054:	bf18      	it	ne
 800c056:	2300      	movne	r3, #0
 800c058:	eba6 0807 	sub.w	r8, r6, r7
 800c05c:	608b      	str	r3, [r1, #8]
 800c05e:	f1b8 0f00 	cmp.w	r8, #0
 800c062:	dd9c      	ble.n	800bf9e <__sflush_r+0x1a>
 800c064:	6a21      	ldr	r1, [r4, #32]
 800c066:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c068:	4643      	mov	r3, r8
 800c06a:	463a      	mov	r2, r7
 800c06c:	4628      	mov	r0, r5
 800c06e:	47b0      	blx	r6
 800c070:	2800      	cmp	r0, #0
 800c072:	dc06      	bgt.n	800c082 <__sflush_r+0xfe>
 800c074:	89a3      	ldrh	r3, [r4, #12]
 800c076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c07a:	81a3      	strh	r3, [r4, #12]
 800c07c:	f04f 30ff 	mov.w	r0, #4294967295
 800c080:	e78e      	b.n	800bfa0 <__sflush_r+0x1c>
 800c082:	4407      	add	r7, r0
 800c084:	eba8 0800 	sub.w	r8, r8, r0
 800c088:	e7e9      	b.n	800c05e <__sflush_r+0xda>
 800c08a:	bf00      	nop
 800c08c:	dfbffffe 	.word	0xdfbffffe

0800c090 <_fflush_r>:
 800c090:	b538      	push	{r3, r4, r5, lr}
 800c092:	690b      	ldr	r3, [r1, #16]
 800c094:	4605      	mov	r5, r0
 800c096:	460c      	mov	r4, r1
 800c098:	b913      	cbnz	r3, 800c0a0 <_fflush_r+0x10>
 800c09a:	2500      	movs	r5, #0
 800c09c:	4628      	mov	r0, r5
 800c09e:	bd38      	pop	{r3, r4, r5, pc}
 800c0a0:	b118      	cbz	r0, 800c0aa <_fflush_r+0x1a>
 800c0a2:	6a03      	ldr	r3, [r0, #32]
 800c0a4:	b90b      	cbnz	r3, 800c0aa <_fflush_r+0x1a>
 800c0a6:	f7ff f97f 	bl	800b3a8 <__sinit>
 800c0aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d0f3      	beq.n	800c09a <_fflush_r+0xa>
 800c0b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0b4:	07d0      	lsls	r0, r2, #31
 800c0b6:	d404      	bmi.n	800c0c2 <_fflush_r+0x32>
 800c0b8:	0599      	lsls	r1, r3, #22
 800c0ba:	d402      	bmi.n	800c0c2 <_fflush_r+0x32>
 800c0bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0be:	f7ff fb80 	bl	800b7c2 <__retarget_lock_acquire_recursive>
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	4621      	mov	r1, r4
 800c0c6:	f7ff ff5d 	bl	800bf84 <__sflush_r>
 800c0ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0cc:	07da      	lsls	r2, r3, #31
 800c0ce:	4605      	mov	r5, r0
 800c0d0:	d4e4      	bmi.n	800c09c <_fflush_r+0xc>
 800c0d2:	89a3      	ldrh	r3, [r4, #12]
 800c0d4:	059b      	lsls	r3, r3, #22
 800c0d6:	d4e1      	bmi.n	800c09c <_fflush_r+0xc>
 800c0d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0da:	f7ff fb73 	bl	800b7c4 <__retarget_lock_release_recursive>
 800c0de:	e7dd      	b.n	800c09c <_fflush_r+0xc>

0800c0e0 <__swhatbuf_r>:
 800c0e0:	b570      	push	{r4, r5, r6, lr}
 800c0e2:	460c      	mov	r4, r1
 800c0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0e8:	2900      	cmp	r1, #0
 800c0ea:	b096      	sub	sp, #88	; 0x58
 800c0ec:	4615      	mov	r5, r2
 800c0ee:	461e      	mov	r6, r3
 800c0f0:	da0d      	bge.n	800c10e <__swhatbuf_r+0x2e>
 800c0f2:	89a3      	ldrh	r3, [r4, #12]
 800c0f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c0f8:	f04f 0100 	mov.w	r1, #0
 800c0fc:	bf0c      	ite	eq
 800c0fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c102:	2340      	movne	r3, #64	; 0x40
 800c104:	2000      	movs	r0, #0
 800c106:	6031      	str	r1, [r6, #0]
 800c108:	602b      	str	r3, [r5, #0]
 800c10a:	b016      	add	sp, #88	; 0x58
 800c10c:	bd70      	pop	{r4, r5, r6, pc}
 800c10e:	466a      	mov	r2, sp
 800c110:	f000 f87c 	bl	800c20c <_fstat_r>
 800c114:	2800      	cmp	r0, #0
 800c116:	dbec      	blt.n	800c0f2 <__swhatbuf_r+0x12>
 800c118:	9901      	ldr	r1, [sp, #4]
 800c11a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c11e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c122:	4259      	negs	r1, r3
 800c124:	4159      	adcs	r1, r3
 800c126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c12a:	e7eb      	b.n	800c104 <__swhatbuf_r+0x24>

0800c12c <__smakebuf_r>:
 800c12c:	898b      	ldrh	r3, [r1, #12]
 800c12e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c130:	079d      	lsls	r5, r3, #30
 800c132:	4606      	mov	r6, r0
 800c134:	460c      	mov	r4, r1
 800c136:	d507      	bpl.n	800c148 <__smakebuf_r+0x1c>
 800c138:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c13c:	6023      	str	r3, [r4, #0]
 800c13e:	6123      	str	r3, [r4, #16]
 800c140:	2301      	movs	r3, #1
 800c142:	6163      	str	r3, [r4, #20]
 800c144:	b002      	add	sp, #8
 800c146:	bd70      	pop	{r4, r5, r6, pc}
 800c148:	ab01      	add	r3, sp, #4
 800c14a:	466a      	mov	r2, sp
 800c14c:	f7ff ffc8 	bl	800c0e0 <__swhatbuf_r>
 800c150:	9900      	ldr	r1, [sp, #0]
 800c152:	4605      	mov	r5, r0
 800c154:	4630      	mov	r0, r6
 800c156:	f7ff fbb5 	bl	800b8c4 <_malloc_r>
 800c15a:	b948      	cbnz	r0, 800c170 <__smakebuf_r+0x44>
 800c15c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c160:	059a      	lsls	r2, r3, #22
 800c162:	d4ef      	bmi.n	800c144 <__smakebuf_r+0x18>
 800c164:	f023 0303 	bic.w	r3, r3, #3
 800c168:	f043 0302 	orr.w	r3, r3, #2
 800c16c:	81a3      	strh	r3, [r4, #12]
 800c16e:	e7e3      	b.n	800c138 <__smakebuf_r+0xc>
 800c170:	89a3      	ldrh	r3, [r4, #12]
 800c172:	6020      	str	r0, [r4, #0]
 800c174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c178:	81a3      	strh	r3, [r4, #12]
 800c17a:	9b00      	ldr	r3, [sp, #0]
 800c17c:	6163      	str	r3, [r4, #20]
 800c17e:	9b01      	ldr	r3, [sp, #4]
 800c180:	6120      	str	r0, [r4, #16]
 800c182:	b15b      	cbz	r3, 800c19c <__smakebuf_r+0x70>
 800c184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c188:	4630      	mov	r0, r6
 800c18a:	f000 f851 	bl	800c230 <_isatty_r>
 800c18e:	b128      	cbz	r0, 800c19c <__smakebuf_r+0x70>
 800c190:	89a3      	ldrh	r3, [r4, #12]
 800c192:	f023 0303 	bic.w	r3, r3, #3
 800c196:	f043 0301 	orr.w	r3, r3, #1
 800c19a:	81a3      	strh	r3, [r4, #12]
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	431d      	orrs	r5, r3
 800c1a0:	81a5      	strh	r5, [r4, #12]
 800c1a2:	e7cf      	b.n	800c144 <__smakebuf_r+0x18>

0800c1a4 <_putc_r>:
 800c1a4:	b570      	push	{r4, r5, r6, lr}
 800c1a6:	460d      	mov	r5, r1
 800c1a8:	4614      	mov	r4, r2
 800c1aa:	4606      	mov	r6, r0
 800c1ac:	b118      	cbz	r0, 800c1b6 <_putc_r+0x12>
 800c1ae:	6a03      	ldr	r3, [r0, #32]
 800c1b0:	b90b      	cbnz	r3, 800c1b6 <_putc_r+0x12>
 800c1b2:	f7ff f8f9 	bl	800b3a8 <__sinit>
 800c1b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1b8:	07d8      	lsls	r0, r3, #31
 800c1ba:	d405      	bmi.n	800c1c8 <_putc_r+0x24>
 800c1bc:	89a3      	ldrh	r3, [r4, #12]
 800c1be:	0599      	lsls	r1, r3, #22
 800c1c0:	d402      	bmi.n	800c1c8 <_putc_r+0x24>
 800c1c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1c4:	f7ff fafd 	bl	800b7c2 <__retarget_lock_acquire_recursive>
 800c1c8:	68a3      	ldr	r3, [r4, #8]
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	60a3      	str	r3, [r4, #8]
 800c1d0:	da05      	bge.n	800c1de <_putc_r+0x3a>
 800c1d2:	69a2      	ldr	r2, [r4, #24]
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	db12      	blt.n	800c1fe <_putc_r+0x5a>
 800c1d8:	b2eb      	uxtb	r3, r5
 800c1da:	2b0a      	cmp	r3, #10
 800c1dc:	d00f      	beq.n	800c1fe <_putc_r+0x5a>
 800c1de:	6823      	ldr	r3, [r4, #0]
 800c1e0:	1c5a      	adds	r2, r3, #1
 800c1e2:	6022      	str	r2, [r4, #0]
 800c1e4:	701d      	strb	r5, [r3, #0]
 800c1e6:	b2ed      	uxtb	r5, r5
 800c1e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1ea:	07da      	lsls	r2, r3, #31
 800c1ec:	d405      	bmi.n	800c1fa <_putc_r+0x56>
 800c1ee:	89a3      	ldrh	r3, [r4, #12]
 800c1f0:	059b      	lsls	r3, r3, #22
 800c1f2:	d402      	bmi.n	800c1fa <_putc_r+0x56>
 800c1f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1f6:	f7ff fae5 	bl	800b7c4 <__retarget_lock_release_recursive>
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	bd70      	pop	{r4, r5, r6, pc}
 800c1fe:	4629      	mov	r1, r5
 800c200:	4622      	mov	r2, r4
 800c202:	4630      	mov	r0, r6
 800c204:	f7ff f9bf 	bl	800b586 <__swbuf_r>
 800c208:	4605      	mov	r5, r0
 800c20a:	e7ed      	b.n	800c1e8 <_putc_r+0x44>

0800c20c <_fstat_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	4d07      	ldr	r5, [pc, #28]	; (800c22c <_fstat_r+0x20>)
 800c210:	2300      	movs	r3, #0
 800c212:	4604      	mov	r4, r0
 800c214:	4608      	mov	r0, r1
 800c216:	4611      	mov	r1, r2
 800c218:	602b      	str	r3, [r5, #0]
 800c21a:	f7f6 ff96 	bl	800314a <_fstat>
 800c21e:	1c43      	adds	r3, r0, #1
 800c220:	d102      	bne.n	800c228 <_fstat_r+0x1c>
 800c222:	682b      	ldr	r3, [r5, #0]
 800c224:	b103      	cbz	r3, 800c228 <_fstat_r+0x1c>
 800c226:	6023      	str	r3, [r4, #0]
 800c228:	bd38      	pop	{r3, r4, r5, pc}
 800c22a:	bf00      	nop
 800c22c:	200023fc 	.word	0x200023fc

0800c230 <_isatty_r>:
 800c230:	b538      	push	{r3, r4, r5, lr}
 800c232:	4d06      	ldr	r5, [pc, #24]	; (800c24c <_isatty_r+0x1c>)
 800c234:	2300      	movs	r3, #0
 800c236:	4604      	mov	r4, r0
 800c238:	4608      	mov	r0, r1
 800c23a:	602b      	str	r3, [r5, #0]
 800c23c:	f7f6 ff95 	bl	800316a <_isatty>
 800c240:	1c43      	adds	r3, r0, #1
 800c242:	d102      	bne.n	800c24a <_isatty_r+0x1a>
 800c244:	682b      	ldr	r3, [r5, #0]
 800c246:	b103      	cbz	r3, 800c24a <_isatty_r+0x1a>
 800c248:	6023      	str	r3, [r4, #0]
 800c24a:	bd38      	pop	{r3, r4, r5, pc}
 800c24c:	200023fc 	.word	0x200023fc

0800c250 <_sbrk_r>:
 800c250:	b538      	push	{r3, r4, r5, lr}
 800c252:	4d06      	ldr	r5, [pc, #24]	; (800c26c <_sbrk_r+0x1c>)
 800c254:	2300      	movs	r3, #0
 800c256:	4604      	mov	r4, r0
 800c258:	4608      	mov	r0, r1
 800c25a:	602b      	str	r3, [r5, #0]
 800c25c:	f7f6 ff9e 	bl	800319c <_sbrk>
 800c260:	1c43      	adds	r3, r0, #1
 800c262:	d102      	bne.n	800c26a <_sbrk_r+0x1a>
 800c264:	682b      	ldr	r3, [r5, #0]
 800c266:	b103      	cbz	r3, 800c26a <_sbrk_r+0x1a>
 800c268:	6023      	str	r3, [r4, #0]
 800c26a:	bd38      	pop	{r3, r4, r5, pc}
 800c26c:	200023fc 	.word	0x200023fc

0800c270 <_init>:
 800c270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c272:	bf00      	nop
 800c274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c276:	bc08      	pop	{r3}
 800c278:	469e      	mov	lr, r3
 800c27a:	4770      	bx	lr

0800c27c <_fini>:
 800c27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c27e:	bf00      	nop
 800c280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c282:	bc08      	pop	{r3}
 800c284:	469e      	mov	lr, r3
 800c286:	4770      	bx	lr
